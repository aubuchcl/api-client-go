// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

func (s *ErrorEnvelopeStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Information about an infrastructure provider abstraction.
// Ref: #/components/schemas/AbstractionIntegration
type AbstractionIntegration struct {
	// A name for a given infrastructure abstraction.
	Name string `json:"name"`
	// The base url, where the abstraction endpoints are located.
	BaseURL string     `json:"base_url"`
	Auth    OptIALAuth `json:"auth"`
}

// GetName returns the value of Name.
func (s *AbstractionIntegration) GetName() string {
	return s.Name
}

// GetBaseURL returns the value of BaseURL.
func (s *AbstractionIntegration) GetBaseURL() string {
	return s.BaseURL
}

// GetAuth returns the value of Auth.
func (s *AbstractionIntegration) GetAuth() OptIALAuth {
	return s.Auth
}

// SetName sets the value of Name.
func (s *AbstractionIntegration) SetName(val string) {
	s.Name = val
}

// SetBaseURL sets the value of BaseURL.
func (s *AbstractionIntegration) SetBaseURL(val string) {
	s.BaseURL = val
}

// SetAuth sets the value of Auth.
func (s *AbstractionIntegration) SetAuth(val OptIALAuth) {
	s.Auth = val
}

// An object representing information about the currently logged-in user.
// Ref: #/components/schemas/Account
type Account struct {
	ID ID `json:"id"`
	// The first and last name associated with the account.
	Name AccountName `json:"name"`
	// Information about the email address associated with the account.
	Email AccountEmail `json:"email"`
	// Two factor auth verification information.
	TwoFactorAuth OptNilAccountTwoFactorAuth `json:"two_factor_auth"`
	// Indicates whether or not Cycle employees have authorization to log in to this account in a support
	// capacity.
	AllowSupportLogin OptBool      `json:"allow_support_login"`
	State             AccountState `json:"state"`
	// A collection of timestamps for each event in the account's lifetime.
	Events AccountEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *Account) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *Account) GetName() AccountName {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *Account) GetEmail() AccountEmail {
	return s.Email
}

// GetTwoFactorAuth returns the value of TwoFactorAuth.
func (s *Account) GetTwoFactorAuth() OptNilAccountTwoFactorAuth {
	return s.TwoFactorAuth
}

// GetAllowSupportLogin returns the value of AllowSupportLogin.
func (s *Account) GetAllowSupportLogin() OptBool {
	return s.AllowSupportLogin
}

// GetState returns the value of State.
func (s *Account) GetState() AccountState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *Account) GetEvents() AccountEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *Account) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Account) SetName(val AccountName) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *Account) SetEmail(val AccountEmail) {
	s.Email = val
}

// SetTwoFactorAuth sets the value of TwoFactorAuth.
func (s *Account) SetTwoFactorAuth(val OptNilAccountTwoFactorAuth) {
	s.TwoFactorAuth = val
}

// SetAllowSupportLogin sets the value of AllowSupportLogin.
func (s *Account) SetAllowSupportLogin(val OptBool) {
	s.AllowSupportLogin = val
}

// SetState sets the value of State.
func (s *Account) SetState(val AccountState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *Account) SetEvents(val AccountEvents) {
	s.Events = val
}

// Information about the email address associated with the account.
type AccountEmail struct {
	// The email address.
	Address string `json:"address"`
	// If true, the email has been verified and the account is active.
	Verified bool `json:"verified"`
	// The date the email was added to the account.
	Added DateTime `json:"added"`
}

// GetAddress returns the value of Address.
func (s *AccountEmail) GetAddress() string {
	return s.Address
}

// GetVerified returns the value of Verified.
func (s *AccountEmail) GetVerified() bool {
	return s.Verified
}

// GetAdded returns the value of Added.
func (s *AccountEmail) GetAdded() DateTime {
	return s.Added
}

// SetAddress sets the value of Address.
func (s *AccountEmail) SetAddress(val string) {
	s.Address = val
}

// SetVerified sets the value of Verified.
func (s *AccountEmail) SetVerified(val bool) {
	s.Verified = val
}

// SetAdded sets the value of Added.
func (s *AccountEmail) SetAdded(val DateTime) {
	s.Added = val
}

// A collection of timestamps for each event in the account's lifetime.
type AccountEvents struct {
	// The timestamp of when the image was created.
	Created DateTime `json:"created"`
	// The timestamp of when the image was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the image was deleted.
	Deleted DateTime `json:"deleted"`
	// The timestamp of when the account was last accessed.
	LastLogin DateTime `json:"last_login"`
}

// GetCreated returns the value of Created.
func (s *AccountEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *AccountEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *AccountEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetLastLogin returns the value of LastLogin.
func (s *AccountEvents) GetLastLogin() DateTime {
	return s.LastLogin
}

// SetCreated sets the value of Created.
func (s *AccountEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *AccountEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *AccountEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetLastLogin sets the value of LastLogin.
func (s *AccountEvents) SetLastLogin(val DateTime) {
	s.LastLogin = val
}

// Information about a given account.
// Ref: #/components/schemas/AccountInfo
type AccountInfo struct {
	ID ID `json:"id"`
	// The IP of the computer used during login.
	IP string `json:"ip"`
}

// GetID returns the value of ID.
func (s *AccountInfo) GetID() ID {
	return s.ID
}

// GetIP returns the value of IP.
func (s *AccountInfo) GetIP() string {
	return s.IP
}

// SetID sets the value of ID.
func (s *AccountInfo) SetID(val ID) {
	s.ID = val
}

// SetIP sets the value of IP.
func (s *AccountInfo) SetIP(val string) {
	s.IP = val
}

// The first and last name associated with the account.
type AccountName struct {
	// The first name of the account owner.
	First string `json:"first"`
	// The last name of the account owner.
	Last string `json:"last"`
}

// GetFirst returns the value of First.
func (s *AccountName) GetFirst() string {
	return s.First
}

// GetLast returns the value of Last.
func (s *AccountName) GetLast() string {
	return s.Last
}

// SetFirst sets the value of First.
func (s *AccountName) SetFirst(val string) {
	s.First = val
}

// SetLast sets the value of Last.
func (s *AccountName) SetLast(val string) {
	s.Last = val
}

// Merged schema.
// Ref: #/components/schemas/AccountState
type AccountState struct {
	// The current state of the account.
	Current AccountStateCurrent `json:"current"`
	Changed DateTime            `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptAccountStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *AccountState) GetCurrent() AccountStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *AccountState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *AccountState) GetError() OptAccountStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *AccountState) SetCurrent(val AccountStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *AccountState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *AccountState) SetError(val OptAccountStateError) {
	s.Error = val
}

// The current state of the account.
type AccountStateCurrent string

const (
	AccountStateCurrentNew        AccountStateCurrent = "new"
	AccountStateCurrentLive       AccountStateCurrent = "live"
	AccountStateCurrentSuspending AccountStateCurrent = "suspending"
	AccountStateCurrentPurging    AccountStateCurrent = "purging"
	AccountStateCurrentDeleting   AccountStateCurrent = "deleting"
	AccountStateCurrentDeleted    AccountStateCurrent = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s AccountStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case AccountStateCurrentNew:
		return []byte(s), nil
	case AccountStateCurrentLive:
		return []byte(s), nil
	case AccountStateCurrentSuspending:
		return []byte(s), nil
	case AccountStateCurrentPurging:
		return []byte(s), nil
	case AccountStateCurrentDeleting:
		return []byte(s), nil
	case AccountStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccountStateCurrent) UnmarshalText(data []byte) error {
	switch AccountStateCurrent(data) {
	case AccountStateCurrentNew:
		*s = AccountStateCurrentNew
		return nil
	case AccountStateCurrentLive:
		*s = AccountStateCurrentLive
		return nil
	case AccountStateCurrentSuspending:
		*s = AccountStateCurrentSuspending
		return nil
	case AccountStateCurrentPurging:
		*s = AccountStateCurrentPurging
		return nil
	case AccountStateCurrentDeleting:
		*s = AccountStateCurrentDeleting
		return nil
	case AccountStateCurrentDeleted:
		*s = AccountStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type AccountStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *AccountStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *AccountStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *AccountStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *AccountStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Two factor auth verification information.
type AccountTwoFactorAuth struct {
	// A boolean representing if the account has verified with TwoFA.
	Verified bool `json:"verified"`
}

// GetVerified returns the value of Verified.
func (s *AccountTwoFactorAuth) GetVerified() bool {
	return s.Verified
}

// SetVerified sets the value of Verified.
func (s *AccountTwoFactorAuth) SetVerified(val bool) {
	s.Verified = val
}

// Address information for a given billing method.
// Ref: #/components/schemas/Address
type Address struct {
	// The country this billing method is associated with.
	Country string `json:"country"`
	// The zip code this billing method is associated with.
	Zip string `json:"zip"`
}

// GetCountry returns the value of Country.
func (s *Address) GetCountry() string {
	return s.Country
}

// GetZip returns the value of Zip.
func (s *Address) GetZip() string {
	return s.Zip
}

// SetCountry sets the value of Country.
func (s *Address) SetCountry(val string) {
	s.Country = val
}

// SetZip sets the value of Zip.
func (s *Address) SetZip(val string) {
	s.Zip = val
}

// An announcement from the Cycle team that has something to do with the current or future state of
// the platform.
// Ref: #/components/schemas/Announcement
type Announcement struct {
	ID ID `json:"id"`
	// A description of the event being announced.
	Title string `json:"title"`
	// A description of the announcement.
	Description       string                     `json:"description"`
	Updates           []Update                   `json:"updates"`
	AffectedProviders []NativeProviderIdentifier `json:"affected_providers"`
	State             AnnouncementState          `json:"state"`
	// The priority or severity of the announcement.
	Priority AnnouncementPriority `json:"priority"`
	// A collection of timestamps for each event in the announcement's lifetime.
	Events AnnouncementEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *Announcement) GetID() ID {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *Announcement) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *Announcement) GetDescription() string {
	return s.Description
}

// GetUpdates returns the value of Updates.
func (s *Announcement) GetUpdates() []Update {
	return s.Updates
}

// GetAffectedProviders returns the value of AffectedProviders.
func (s *Announcement) GetAffectedProviders() []NativeProviderIdentifier {
	return s.AffectedProviders
}

// GetState returns the value of State.
func (s *Announcement) GetState() AnnouncementState {
	return s.State
}

// GetPriority returns the value of Priority.
func (s *Announcement) GetPriority() AnnouncementPriority {
	return s.Priority
}

// GetEvents returns the value of Events.
func (s *Announcement) GetEvents() AnnouncementEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *Announcement) SetID(val ID) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *Announcement) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *Announcement) SetDescription(val string) {
	s.Description = val
}

// SetUpdates sets the value of Updates.
func (s *Announcement) SetUpdates(val []Update) {
	s.Updates = val
}

// SetAffectedProviders sets the value of AffectedProviders.
func (s *Announcement) SetAffectedProviders(val []NativeProviderIdentifier) {
	s.AffectedProviders = val
}

// SetState sets the value of State.
func (s *Announcement) SetState(val AnnouncementState) {
	s.State = val
}

// SetPriority sets the value of Priority.
func (s *Announcement) SetPriority(val AnnouncementPriority) {
	s.Priority = val
}

// SetEvents sets the value of Events.
func (s *Announcement) SetEvents(val AnnouncementEvents) {
	s.Events = val
}

// A collection of timestamps for each event in the announcement's lifetime.
type AnnouncementEvents struct {
	// The timestamp of when the announcement was created.
	Created DateTime `json:"created"`
	// The timestamp of when the announcement was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the announcement was deleted.
	Deleted DateTime `json:"deleted"`
	// The timestamp of when the announcement was resolved.
	Resolved DateTime `json:"resolved"`
}

// GetCreated returns the value of Created.
func (s *AnnouncementEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *AnnouncementEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *AnnouncementEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetResolved returns the value of Resolved.
func (s *AnnouncementEvents) GetResolved() DateTime {
	return s.Resolved
}

// SetCreated sets the value of Created.
func (s *AnnouncementEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *AnnouncementEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *AnnouncementEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetResolved sets the value of Resolved.
func (s *AnnouncementEvents) SetResolved(val DateTime) {
	s.Resolved = val
}

// The priority or severity of the announcement.
type AnnouncementPriority string

const (
	AnnouncementPriorityNotice AnnouncementPriority = "notice"
	AnnouncementPriorityLow    AnnouncementPriority = "low"
	AnnouncementPriorityMedium AnnouncementPriority = "medium"
	AnnouncementPriorityHigh   AnnouncementPriority = "high"
	AnnouncementPrioritySevere AnnouncementPriority = "severe"
)

// MarshalText implements encoding.TextMarshaler.
func (s AnnouncementPriority) MarshalText() ([]byte, error) {
	switch s {
	case AnnouncementPriorityNotice:
		return []byte(s), nil
	case AnnouncementPriorityLow:
		return []byte(s), nil
	case AnnouncementPriorityMedium:
		return []byte(s), nil
	case AnnouncementPriorityHigh:
		return []byte(s), nil
	case AnnouncementPrioritySevere:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AnnouncementPriority) UnmarshalText(data []byte) error {
	switch AnnouncementPriority(data) {
	case AnnouncementPriorityNotice:
		*s = AnnouncementPriorityNotice
		return nil
	case AnnouncementPriorityLow:
		*s = AnnouncementPriorityLow
		return nil
	case AnnouncementPriorityMedium:
		*s = AnnouncementPriorityMedium
		return nil
	case AnnouncementPriorityHigh:
		*s = AnnouncementPriorityHigh
		return nil
	case AnnouncementPrioritySevere:
		*s = AnnouncementPrioritySevere
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type AnnouncementState struct {
	// The current state of the method.
	Current AnnouncementStateCurrent `json:"current"`
	Changed DateTime                 `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptAnnouncementStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *AnnouncementState) GetCurrent() AnnouncementStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *AnnouncementState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *AnnouncementState) GetError() OptAnnouncementStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *AnnouncementState) SetCurrent(val AnnouncementStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *AnnouncementState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *AnnouncementState) SetError(val OptAnnouncementStateError) {
	s.Error = val
}

// The current state of the method.
type AnnouncementStateCurrent string

const (
	AnnouncementStateCurrentLive     AnnouncementStateCurrent = "live"
	AnnouncementStateCurrentDeleting AnnouncementStateCurrent = "deleting"
	AnnouncementStateCurrentDeleted  AnnouncementStateCurrent = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s AnnouncementStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case AnnouncementStateCurrentLive:
		return []byte(s), nil
	case AnnouncementStateCurrentDeleting:
		return []byte(s), nil
	case AnnouncementStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AnnouncementStateCurrent) UnmarshalText(data []byte) error {
	switch AnnouncementStateCurrent(data) {
	case AnnouncementStateCurrentLive:
		*s = AnnouncementStateCurrentLive
		return nil
	case AnnouncementStateCurrentDeleting:
		*s = AnnouncementStateCurrentDeleting
		return nil
	case AnnouncementStateCurrentDeleted:
		*s = AnnouncementStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type AnnouncementStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *AnnouncementStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *AnnouncementStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *AnnouncementStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *AnnouncementStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// An API key resource.
// Ref: #/components/schemas/ApiKey
type ApiKey struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// A name for the API key.
	Name    string       `json:"name"`
	Creator CreatorScope `json:"creator"`
	// The API key secret.
	Secret string `json:"secret"`
	// Information about this members permissions for a given resource.
	Permissions ApiKeyPermissions `json:"permissions"`
	// An object holding information about the capabilities of this API key.
	Capabilities ApiKeyCapabilities `json:"capabilities"`
	// An array of IP's this API key can make calls from.
	Ips   []string    `json:"ips"`
	State ApiKeyState `json:"state"`
	// A collection of timestamps for each event in the hub's lifetime.
	Events ApiKeyEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *ApiKey) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *ApiKey) GetHubID() HubID {
	return s.HubID
}

// GetName returns the value of Name.
func (s *ApiKey) GetName() string {
	return s.Name
}

// GetCreator returns the value of Creator.
func (s *ApiKey) GetCreator() CreatorScope {
	return s.Creator
}

// GetSecret returns the value of Secret.
func (s *ApiKey) GetSecret() string {
	return s.Secret
}

// GetPermissions returns the value of Permissions.
func (s *ApiKey) GetPermissions() ApiKeyPermissions {
	return s.Permissions
}

// GetCapabilities returns the value of Capabilities.
func (s *ApiKey) GetCapabilities() ApiKeyCapabilities {
	return s.Capabilities
}

// GetIps returns the value of Ips.
func (s *ApiKey) GetIps() []string {
	return s.Ips
}

// GetState returns the value of State.
func (s *ApiKey) GetState() ApiKeyState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *ApiKey) GetEvents() ApiKeyEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *ApiKey) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *ApiKey) SetHubID(val HubID) {
	s.HubID = val
}

// SetName sets the value of Name.
func (s *ApiKey) SetName(val string) {
	s.Name = val
}

// SetCreator sets the value of Creator.
func (s *ApiKey) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetSecret sets the value of Secret.
func (s *ApiKey) SetSecret(val string) {
	s.Secret = val
}

// SetPermissions sets the value of Permissions.
func (s *ApiKey) SetPermissions(val ApiKeyPermissions) {
	s.Permissions = val
}

// SetCapabilities sets the value of Capabilities.
func (s *ApiKey) SetCapabilities(val ApiKeyCapabilities) {
	s.Capabilities = val
}

// SetIps sets the value of Ips.
func (s *ApiKey) SetIps(val []string) {
	s.Ips = val
}

// SetState sets the value of State.
func (s *ApiKey) SetState(val ApiKeyState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *ApiKey) SetEvents(val ApiKeyEvents) {
	s.Events = val
}

// An object holding information about the capabilities of this API key.
type ApiKeyCapabilities struct {
	// A boolean where true represents this key has all available capabilities.
	All bool `json:"all"`
	// An array a capabilities this key has.
	Specific []Capability `json:"specific"`
}

// GetAll returns the value of All.
func (s *ApiKeyCapabilities) GetAll() bool {
	return s.All
}

// GetSpecific returns the value of Specific.
func (s *ApiKeyCapabilities) GetSpecific() []Capability {
	return s.Specific
}

// SetAll sets the value of All.
func (s *ApiKeyCapabilities) SetAll(val bool) {
	s.All = val
}

// SetSpecific sets the value of Specific.
func (s *ApiKeyCapabilities) SetSpecific(val []Capability) {
	s.Specific = val
}

// An extended resource that has information on a Cycle hub API key.
// Ref: #/components/schemas/ApiKeyCreator
type ApiKeyCreator struct {
	ID ID `json:"id"`
	// The name of the API key.
	Name  string `json:"name"`
	HubID ID     `json:"hub_id"`
	// The API key secret.
	Secret      OptString   `json:"secret"`
	Permissions Permissions `json:"permissions"`
	// The API key capabilities list.
	Capabilities ApiKeyCreatorCapabilities `json:"capabilities"`
	Ips          []string                  `json:"ips"`
	State        ApiKeyCreatorState        `json:"state"`
	Events       Events                    `json:"events"`
}

// GetID returns the value of ID.
func (s *ApiKeyCreator) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *ApiKeyCreator) GetName() string {
	return s.Name
}

// GetHubID returns the value of HubID.
func (s *ApiKeyCreator) GetHubID() ID {
	return s.HubID
}

// GetSecret returns the value of Secret.
func (s *ApiKeyCreator) GetSecret() OptString {
	return s.Secret
}

// GetPermissions returns the value of Permissions.
func (s *ApiKeyCreator) GetPermissions() Permissions {
	return s.Permissions
}

// GetCapabilities returns the value of Capabilities.
func (s *ApiKeyCreator) GetCapabilities() ApiKeyCreatorCapabilities {
	return s.Capabilities
}

// GetIps returns the value of Ips.
func (s *ApiKeyCreator) GetIps() []string {
	return s.Ips
}

// GetState returns the value of State.
func (s *ApiKeyCreator) GetState() ApiKeyCreatorState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *ApiKeyCreator) GetEvents() Events {
	return s.Events
}

// SetID sets the value of ID.
func (s *ApiKeyCreator) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ApiKeyCreator) SetName(val string) {
	s.Name = val
}

// SetHubID sets the value of HubID.
func (s *ApiKeyCreator) SetHubID(val ID) {
	s.HubID = val
}

// SetSecret sets the value of Secret.
func (s *ApiKeyCreator) SetSecret(val OptString) {
	s.Secret = val
}

// SetPermissions sets the value of Permissions.
func (s *ApiKeyCreator) SetPermissions(val Permissions) {
	s.Permissions = val
}

// SetCapabilities sets the value of Capabilities.
func (s *ApiKeyCreator) SetCapabilities(val ApiKeyCreatorCapabilities) {
	s.Capabilities = val
}

// SetIps sets the value of Ips.
func (s *ApiKeyCreator) SetIps(val []string) {
	s.Ips = val
}

// SetState sets the value of State.
func (s *ApiKeyCreator) SetState(val ApiKeyCreatorState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *ApiKeyCreator) SetEvents(val Events) {
	s.Events = val
}

// The API key capabilities list.
type ApiKeyCreatorCapabilities struct {
	All      bool     `json:"all"`
	Specific []string `json:"specific"`
}

// GetAll returns the value of All.
func (s *ApiKeyCreatorCapabilities) GetAll() bool {
	return s.All
}

// GetSpecific returns the value of Specific.
func (s *ApiKeyCreatorCapabilities) GetSpecific() []string {
	return s.Specific
}

// SetAll sets the value of All.
func (s *ApiKeyCreatorCapabilities) SetAll(val bool) {
	s.All = val
}

// SetSpecific sets the value of Specific.
func (s *ApiKeyCreatorCapabilities) SetSpecific(val []string) {
	s.Specific = val
}

// Merged schema.
type ApiKeyCreatorState struct {
	Current ApiKeyCreatorStateCurrent `json:"current"`
	Changed DateTime                  `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptApiKeyCreatorStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *ApiKeyCreatorState) GetCurrent() ApiKeyCreatorStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *ApiKeyCreatorState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *ApiKeyCreatorState) GetError() OptApiKeyCreatorStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *ApiKeyCreatorState) SetCurrent(val ApiKeyCreatorStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *ApiKeyCreatorState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *ApiKeyCreatorState) SetError(val OptApiKeyCreatorStateError) {
	s.Error = val
}

type ApiKeyCreatorStateCurrent string

const (
	ApiKeyCreatorStateCurrentLive     ApiKeyCreatorStateCurrent = "live"
	ApiKeyCreatorStateCurrentDeleting ApiKeyCreatorStateCurrent = "deleting"
	ApiKeyCreatorStateCurrentDeleted  ApiKeyCreatorStateCurrent = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s ApiKeyCreatorStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case ApiKeyCreatorStateCurrentLive:
		return []byte(s), nil
	case ApiKeyCreatorStateCurrentDeleting:
		return []byte(s), nil
	case ApiKeyCreatorStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ApiKeyCreatorStateCurrent) UnmarshalText(data []byte) error {
	switch ApiKeyCreatorStateCurrent(data) {
	case ApiKeyCreatorStateCurrentLive:
		*s = ApiKeyCreatorStateCurrentLive
		return nil
	case ApiKeyCreatorStateCurrentDeleting:
		*s = ApiKeyCreatorStateCurrentDeleting
		return nil
	case ApiKeyCreatorStateCurrentDeleted:
		*s = ApiKeyCreatorStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type ApiKeyCreatorStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *ApiKeyCreatorStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *ApiKeyCreatorStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *ApiKeyCreatorStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *ApiKeyCreatorStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// A collection of timestamps for each event in the hub's lifetime.
type ApiKeyEvents struct {
	// The timestamp of when the hub was created.
	Created DateTime `json:"created"`
	// The timestamp of when the hub was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the hub was deleted.
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *ApiKeyEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ApiKeyEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *ApiKeyEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *ApiKeyEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ApiKeyEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *ApiKeyEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// Information about this members permissions for a given resource.
type ApiKeyPermissions struct {
	// A boolean where true represents the member has access to view and manage all environments for the
	// resource.
	AllEnvironments bool `json:"all_environments"`
	// An array of environments this resource has access to.
	Environments []ApiKeyPermissionsEnvironmentsItem `json:"environments"`
}

// GetAllEnvironments returns the value of AllEnvironments.
func (s *ApiKeyPermissions) GetAllEnvironments() bool {
	return s.AllEnvironments
}

// GetEnvironments returns the value of Environments.
func (s *ApiKeyPermissions) GetEnvironments() []ApiKeyPermissionsEnvironmentsItem {
	return s.Environments
}

// SetAllEnvironments sets the value of AllEnvironments.
func (s *ApiKeyPermissions) SetAllEnvironments(val bool) {
	s.AllEnvironments = val
}

// SetEnvironments sets the value of Environments.
func (s *ApiKeyPermissions) SetEnvironments(val []ApiKeyPermissionsEnvironmentsItem) {
	s.Environments = val
}

// Environment resource resources.
type ApiKeyPermissionsEnvironmentsItem struct {
	ID ID `json:"id"`
	// A boolean where true represents this environment can be managed by the resource (i.e. its not just
	// read-only).
	Manage bool `json:"manage"`
}

// GetID returns the value of ID.
func (s *ApiKeyPermissionsEnvironmentsItem) GetID() ID {
	return s.ID
}

// GetManage returns the value of Manage.
func (s *ApiKeyPermissionsEnvironmentsItem) GetManage() bool {
	return s.Manage
}

// SetID sets the value of ID.
func (s *ApiKeyPermissionsEnvironmentsItem) SetID(val ID) {
	s.ID = val
}

// SetManage sets the value of Manage.
func (s *ApiKeyPermissionsEnvironmentsItem) SetManage(val bool) {
	s.Manage = val
}

// Merged schema.
// Ref: #/components/schemas/ApiKeyState
type ApiKeyState struct {
	// The current state of the API key.
	Current ApiKeyStateCurrent `json:"current"`
	Changed DateTime           `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptApiKeyStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *ApiKeyState) GetCurrent() ApiKeyStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *ApiKeyState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *ApiKeyState) GetError() OptApiKeyStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *ApiKeyState) SetCurrent(val ApiKeyStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *ApiKeyState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *ApiKeyState) SetError(val OptApiKeyStateError) {
	s.Error = val
}

// The current state of the API key.
type ApiKeyStateCurrent string

const (
	ApiKeyStateCurrentNew         ApiKeyStateCurrent = "new"
	ApiKeyStateCurrentConfiguring ApiKeyStateCurrent = "configuring"
	ApiKeyStateCurrentLive        ApiKeyStateCurrent = "live"
	ApiKeyStateCurrentInactive    ApiKeyStateCurrent = "inactive"
	ApiKeyStateCurrentDeleting    ApiKeyStateCurrent = "deleting"
	ApiKeyStateCurrentDeleted     ApiKeyStateCurrent = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s ApiKeyStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case ApiKeyStateCurrentNew:
		return []byte(s), nil
	case ApiKeyStateCurrentConfiguring:
		return []byte(s), nil
	case ApiKeyStateCurrentLive:
		return []byte(s), nil
	case ApiKeyStateCurrentInactive:
		return []byte(s), nil
	case ApiKeyStateCurrentDeleting:
		return []byte(s), nil
	case ApiKeyStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ApiKeyStateCurrent) UnmarshalText(data []byte) error {
	switch ApiKeyStateCurrent(data) {
	case ApiKeyStateCurrentNew:
		*s = ApiKeyStateCurrentNew
		return nil
	case ApiKeyStateCurrentConfiguring:
		*s = ApiKeyStateCurrentConfiguring
		return nil
	case ApiKeyStateCurrentLive:
		*s = ApiKeyStateCurrentLive
		return nil
	case ApiKeyStateCurrentInactive:
		*s = ApiKeyStateCurrentInactive
		return nil
	case ApiKeyStateCurrentDeleting:
		*s = ApiKeyStateCurrentDeleting
		return nil
	case ApiKeyStateCurrentDeleted:
		*s = ApiKeyStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type ApiKeyStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *ApiKeyStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *ApiKeyStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *ApiKeyStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *ApiKeyStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// A DNS TLS certificate generation attempt resource.
// Ref: #/components/schemas/Attempt
type Attempt struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// A list of domains associated with the attempt.
	Domains []string `json:"domains"`
	// A timestamp for when the attempt took place.
	Time DateTime `json:"time"`
	// A boolean where true means the attept was successful at creating the TLS certificate.
	Success bool `json:"success"`
	// If success is false this property will be populated with an error.
	Error OptString `json:"error"`
}

// GetID returns the value of ID.
func (s *Attempt) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *Attempt) GetHubID() HubID {
	return s.HubID
}

// GetDomains returns the value of Domains.
func (s *Attempt) GetDomains() []string {
	return s.Domains
}

// GetTime returns the value of Time.
func (s *Attempt) GetTime() DateTime {
	return s.Time
}

// GetSuccess returns the value of Success.
func (s *Attempt) GetSuccess() bool {
	return s.Success
}

// GetError returns the value of Error.
func (s *Attempt) GetError() OptString {
	return s.Error
}

// SetID sets the value of ID.
func (s *Attempt) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *Attempt) SetHubID(val HubID) {
	s.HubID = val
}

// SetDomains sets the value of Domains.
func (s *Attempt) SetDomains(val []string) {
	s.Domains = val
}

// SetTime sets the value of Time.
func (s *Attempt) SetTime(val DateTime) {
	s.Time = val
}

// SetSuccess sets the value of Success.
func (s *Attempt) SetSuccess(val bool) {
	s.Success = val
}

// SetError sets the value of Error.
func (s *Attempt) SetError(val OptString) {
	s.Error = val
}

// A container backup resource.
// Ref: #/components/schemas/Backup
type Backup struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// The ID of the given container.
	ContainerID string `json:"container_id"`
	// The ID of the instance the backup belongs to.
	InstanceID string      `json:"instance_id"`
	Target     Target      `json:"target"`
	State      BackupState `json:"state"`
	// A collection of timestamps for each event in the backup's lifetime.
	Events BackupEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *Backup) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *Backup) GetHubID() HubID {
	return s.HubID
}

// GetContainerID returns the value of ContainerID.
func (s *Backup) GetContainerID() string {
	return s.ContainerID
}

// GetInstanceID returns the value of InstanceID.
func (s *Backup) GetInstanceID() string {
	return s.InstanceID
}

// GetTarget returns the value of Target.
func (s *Backup) GetTarget() Target {
	return s.Target
}

// GetState returns the value of State.
func (s *Backup) GetState() BackupState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *Backup) GetEvents() BackupEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *Backup) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *Backup) SetHubID(val HubID) {
	s.HubID = val
}

// SetContainerID sets the value of ContainerID.
func (s *Backup) SetContainerID(val string) {
	s.ContainerID = val
}

// SetInstanceID sets the value of InstanceID.
func (s *Backup) SetInstanceID(val string) {
	s.InstanceID = val
}

// SetTarget sets the value of Target.
func (s *Backup) SetTarget(val Target) {
	s.Target = val
}

// SetState sets the value of State.
func (s *Backup) SetState(val BackupState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *Backup) SetEvents(val BackupEvents) {
	s.Events = val
}

// A collection of timestamps for each event in the backup's lifetime.
type BackupEvents struct {
	// The timestamp of when the backup was created.
	Created DateTime `json:"created"`
	// The timestamp of when the backup was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the backup was deleted.
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *BackupEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *BackupEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *BackupEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *BackupEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *BackupEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *BackupEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// Merged schema.
// Ref: #/components/schemas/BackupState
type BackupState struct {
	// The current state of the backup.
	Current BackupStateCurrent `json:"current"`
	Changed DateTime           `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptBackupStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *BackupState) GetCurrent() BackupStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *BackupState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *BackupState) GetError() OptBackupStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *BackupState) SetCurrent(val BackupStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *BackupState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *BackupState) SetError(val OptBackupStateError) {
	s.Error = val
}

// The current state of the backup.
type BackupStateCurrent string

const (
	BackupStateCurrentSaving   BackupStateCurrent = "saving"
	BackupStateCurrentLive     BackupStateCurrent = "live"
	BackupStateCurrentDeleting BackupStateCurrent = "deleting"
	BackupStateCurrentDeleted  BackupStateCurrent = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s BackupStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case BackupStateCurrentSaving:
		return []byte(s), nil
	case BackupStateCurrentLive:
		return []byte(s), nil
	case BackupStateCurrentDeleting:
		return []byte(s), nil
	case BackupStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BackupStateCurrent) UnmarshalText(data []byte) error {
	switch BackupStateCurrent(data) {
	case BackupStateCurrentSaving:
		*s = BackupStateCurrentSaving
		return nil
	case BackupStateCurrentLive:
		*s = BackupStateCurrentLive
		return nil
	case BackupStateCurrentDeleting:
		*s = BackupStateCurrentDeleting
		return nil
	case BackupStateCurrentDeleted:
		*s = BackupStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type BackupStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *BackupStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *BackupStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *BackupStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *BackupStateError) SetTime(val OptDateTime) {
	s.Time = val
}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// An object holding information about term and amount that relates to a specific billing component.
// Ref: #/components/schemas/BillingAmount
type BillingAmount struct {
	// 1/10th of a cent.
	Mills int `json:"mills"`
	// The length of the term.
	Term BillingAmountTerm `json:"term"`
}

// GetMills returns the value of Mills.
func (s *BillingAmount) GetMills() int {
	return s.Mills
}

// GetTerm returns the value of Term.
func (s *BillingAmount) GetTerm() BillingAmountTerm {
	return s.Term
}

// SetMills sets the value of Mills.
func (s *BillingAmount) SetMills(val int) {
	s.Mills = val
}

// SetTerm sets the value of Term.
func (s *BillingAmount) SetTerm(val BillingAmountTerm) {
	s.Term = val
}

// The length of the term.
type BillingAmountTerm string

const (
	BillingAmountTermOnce    BillingAmountTerm = "once"
	BillingAmountTermMonthly BillingAmountTerm = "monthly"
	BillingAmountTermYearly  BillingAmountTerm = "yearly"
)

// MarshalText implements encoding.TextMarshaler.
func (s BillingAmountTerm) MarshalText() ([]byte, error) {
	switch s {
	case BillingAmountTermOnce:
		return []byte(s), nil
	case BillingAmountTermMonthly:
		return []byte(s), nil
	case BillingAmountTermYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BillingAmountTerm) UnmarshalText(data []byte) error {
	switch BillingAmountTerm(data) {
	case BillingAmountTermOnce:
		*s = BillingAmountTermOnce
		return nil
	case BillingAmountTermMonthly:
		*s = BillingAmountTermMonthly
		return nil
	case BillingAmountTermYearly:
		*s = BillingAmountTermYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An object holding information about servers included in Billing tier.
// Ref: #/components/schemas/BillingBuilds
type BillingBuilds struct {
	Parallel float64 `json:"parallel"`
	// The number of CPU Cores availiable for builds.
	CPUCores float64 `json:"cpu_cores"`
	// The amount of RAM availiable for builds.
	RAMGB float64 `json:"ram_gb"`
	// The maximum number of builds processed per day.
	MaxDailyBuilds NilFloat64 `json:"max_daily_builds"`
}

// GetParallel returns the value of Parallel.
func (s *BillingBuilds) GetParallel() float64 {
	return s.Parallel
}

// GetCPUCores returns the value of CPUCores.
func (s *BillingBuilds) GetCPUCores() float64 {
	return s.CPUCores
}

// GetRAMGB returns the value of RAMGB.
func (s *BillingBuilds) GetRAMGB() float64 {
	return s.RAMGB
}

// GetMaxDailyBuilds returns the value of MaxDailyBuilds.
func (s *BillingBuilds) GetMaxDailyBuilds() NilFloat64 {
	return s.MaxDailyBuilds
}

// SetParallel sets the value of Parallel.
func (s *BillingBuilds) SetParallel(val float64) {
	s.Parallel = val
}

// SetCPUCores sets the value of CPUCores.
func (s *BillingBuilds) SetCPUCores(val float64) {
	s.CPUCores = val
}

// SetRAMGB sets the value of RAMGB.
func (s *BillingBuilds) SetRAMGB(val float64) {
	s.RAMGB = val
}

// SetMaxDailyBuilds sets the value of MaxDailyBuilds.
func (s *BillingBuilds) SetMaxDailyBuilds(val NilFloat64) {
	s.MaxDailyBuilds = val
}

// An object holding information about servers included in Billing tier.
// Ref: #/components/schemas/BillingImageStorage
type BillingImageStorage struct {
	// The GB of image storage included in tier.
	IncludedGB float64 `json:"included_gb"`
	// Additional cost for image storage exceeding included_gb.
	AdditionalGB BillingImageStorageAdditionalGB `json:"additional_gb"`
	// A boolean indicating if there is a hard limit on the image storage.
	HardCap bool `json:"hard_cap"`
}

// GetIncludedGB returns the value of IncludedGB.
func (s *BillingImageStorage) GetIncludedGB() float64 {
	return s.IncludedGB
}

// GetAdditionalGB returns the value of AdditionalGB.
func (s *BillingImageStorage) GetAdditionalGB() BillingImageStorageAdditionalGB {
	return s.AdditionalGB
}

// GetHardCap returns the value of HardCap.
func (s *BillingImageStorage) GetHardCap() bool {
	return s.HardCap
}

// SetIncludedGB sets the value of IncludedGB.
func (s *BillingImageStorage) SetIncludedGB(val float64) {
	s.IncludedGB = val
}

// SetAdditionalGB sets the value of AdditionalGB.
func (s *BillingImageStorage) SetAdditionalGB(val BillingImageStorageAdditionalGB) {
	s.AdditionalGB = val
}

// SetHardCap sets the value of HardCap.
func (s *BillingImageStorage) SetHardCap(val bool) {
	s.HardCap = val
}

// Additional cost for image storage exceeding included_gb.
type BillingImageStorageAdditionalGB struct {
	Mills float64                             `json:"mills"`
	Term  BillingImageStorageAdditionalGBTerm `json:"term"`
}

// GetMills returns the value of Mills.
func (s *BillingImageStorageAdditionalGB) GetMills() float64 {
	return s.Mills
}

// GetTerm returns the value of Term.
func (s *BillingImageStorageAdditionalGB) GetTerm() BillingImageStorageAdditionalGBTerm {
	return s.Term
}

// SetMills sets the value of Mills.
func (s *BillingImageStorageAdditionalGB) SetMills(val float64) {
	s.Mills = val
}

// SetTerm sets the value of Term.
func (s *BillingImageStorageAdditionalGB) SetTerm(val BillingImageStorageAdditionalGBTerm) {
	s.Term = val
}

type BillingImageStorageAdditionalGBTerm string

const (
	BillingImageStorageAdditionalGBTermOnce    BillingImageStorageAdditionalGBTerm = "once"
	BillingImageStorageAdditionalGBTermMonthly BillingImageStorageAdditionalGBTerm = "monthly"
	BillingImageStorageAdditionalGBTermYearly  BillingImageStorageAdditionalGBTerm = "yearly"
)

// MarshalText implements encoding.TextMarshaler.
func (s BillingImageStorageAdditionalGBTerm) MarshalText() ([]byte, error) {
	switch s {
	case BillingImageStorageAdditionalGBTermOnce:
		return []byte(s), nil
	case BillingImageStorageAdditionalGBTermMonthly:
		return []byte(s), nil
	case BillingImageStorageAdditionalGBTermYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BillingImageStorageAdditionalGBTerm) UnmarshalText(data []byte) error {
	switch BillingImageStorageAdditionalGBTerm(data) {
	case BillingImageStorageAdditionalGBTermOnce:
		*s = BillingImageStorageAdditionalGBTermOnce
		return nil
	case BillingImageStorageAdditionalGBTermMonthly:
		*s = BillingImageStorageAdditionalGBTermMonthly
		return nil
	case BillingImageStorageAdditionalGBTermYearly:
		*s = BillingImageStorageAdditionalGBTermYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An object holding information about members included in Billing tier.
// Ref: #/components/schemas/BillingMembers
type BillingMembers struct {
	// The number of members included in the tier price.
	Included float64 `json:"included"`
	// A boolean indicating if there is a hard member limit on the tier.
	HardCap bool `json:"hard_cap"`
	// An object describing the additonal cost of members exceeding the included member count.
	Additional BillingMembersAdditional `json:"additional"`
}

// GetIncluded returns the value of Included.
func (s *BillingMembers) GetIncluded() float64 {
	return s.Included
}

// GetHardCap returns the value of HardCap.
func (s *BillingMembers) GetHardCap() bool {
	return s.HardCap
}

// GetAdditional returns the value of Additional.
func (s *BillingMembers) GetAdditional() BillingMembersAdditional {
	return s.Additional
}

// SetIncluded sets the value of Included.
func (s *BillingMembers) SetIncluded(val float64) {
	s.Included = val
}

// SetHardCap sets the value of HardCap.
func (s *BillingMembers) SetHardCap(val bool) {
	s.HardCap = val
}

// SetAdditional sets the value of Additional.
func (s *BillingMembers) SetAdditional(val BillingMembersAdditional) {
	s.Additional = val
}

// An object describing the additonal cost of members exceeding the included member count.
type BillingMembersAdditional struct {
	Mills float64                      `json:"mills"`
	Term  BillingMembersAdditionalTerm `json:"term"`
}

// GetMills returns the value of Mills.
func (s *BillingMembersAdditional) GetMills() float64 {
	return s.Mills
}

// GetTerm returns the value of Term.
func (s *BillingMembersAdditional) GetTerm() BillingMembersAdditionalTerm {
	return s.Term
}

// SetMills sets the value of Mills.
func (s *BillingMembersAdditional) SetMills(val float64) {
	s.Mills = val
}

// SetTerm sets the value of Term.
func (s *BillingMembersAdditional) SetTerm(val BillingMembersAdditionalTerm) {
	s.Term = val
}

type BillingMembersAdditionalTerm string

const (
	BillingMembersAdditionalTermOnce    BillingMembersAdditionalTerm = "once"
	BillingMembersAdditionalTermMonthly BillingMembersAdditionalTerm = "monthly"
	BillingMembersAdditionalTermYearly  BillingMembersAdditionalTerm = "yearly"
)

// MarshalText implements encoding.TextMarshaler.
func (s BillingMembersAdditionalTerm) MarshalText() ([]byte, error) {
	switch s {
	case BillingMembersAdditionalTermOnce:
		return []byte(s), nil
	case BillingMembersAdditionalTermMonthly:
		return []byte(s), nil
	case BillingMembersAdditionalTermYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BillingMembersAdditionalTerm) UnmarshalText(data []byte) error {
	switch BillingMembersAdditionalTerm(data) {
	case BillingMembersAdditionalTermOnce:
		*s = BillingMembersAdditionalTermOnce
		return nil
	case BillingMembersAdditionalTermMonthly:
		*s = BillingMembersAdditionalTermMonthly
		return nil
	case BillingMembersAdditionalTermYearly:
		*s = BillingMembersAdditionalTermYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Information about an order.
// Ref: #/components/schemas/BillingOrder
type BillingOrder struct {
	ID      ID           `json:"id"`
	HubID   HubID        `json:"hub_id"`
	Creator CreatorScope `json:"creator"`
	// An ID associated with a promo code used with the order.
	PromoCodeID NilString `json:"promo_code_id"`
	Term        Term      `json:"term"`
	// A boolean where true represents the order is approved to be paid by the user.
	Approved bool          `json:"approved"`
	Items    []ServiceItem `json:"items"`
	// 1/10th of a cent.
	TotalPrice int `json:"total_price"`
	// A collection of timestamps for each event in the billing order's lifetime.
	Events BillingOrderEvents `json:"events"`
	State  BillingOrderState  `json:"state"`
}

// GetID returns the value of ID.
func (s *BillingOrder) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *BillingOrder) GetHubID() HubID {
	return s.HubID
}

// GetCreator returns the value of Creator.
func (s *BillingOrder) GetCreator() CreatorScope {
	return s.Creator
}

// GetPromoCodeID returns the value of PromoCodeID.
func (s *BillingOrder) GetPromoCodeID() NilString {
	return s.PromoCodeID
}

// GetTerm returns the value of Term.
func (s *BillingOrder) GetTerm() Term {
	return s.Term
}

// GetApproved returns the value of Approved.
func (s *BillingOrder) GetApproved() bool {
	return s.Approved
}

// GetItems returns the value of Items.
func (s *BillingOrder) GetItems() []ServiceItem {
	return s.Items
}

// GetTotalPrice returns the value of TotalPrice.
func (s *BillingOrder) GetTotalPrice() int {
	return s.TotalPrice
}

// GetEvents returns the value of Events.
func (s *BillingOrder) GetEvents() BillingOrderEvents {
	return s.Events
}

// GetState returns the value of State.
func (s *BillingOrder) GetState() BillingOrderState {
	return s.State
}

// SetID sets the value of ID.
func (s *BillingOrder) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *BillingOrder) SetHubID(val HubID) {
	s.HubID = val
}

// SetCreator sets the value of Creator.
func (s *BillingOrder) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetPromoCodeID sets the value of PromoCodeID.
func (s *BillingOrder) SetPromoCodeID(val NilString) {
	s.PromoCodeID = val
}

// SetTerm sets the value of Term.
func (s *BillingOrder) SetTerm(val Term) {
	s.Term = val
}

// SetApproved sets the value of Approved.
func (s *BillingOrder) SetApproved(val bool) {
	s.Approved = val
}

// SetItems sets the value of Items.
func (s *BillingOrder) SetItems(val []ServiceItem) {
	s.Items = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *BillingOrder) SetTotalPrice(val int) {
	s.TotalPrice = val
}

// SetEvents sets the value of Events.
func (s *BillingOrder) SetEvents(val BillingOrderEvents) {
	s.Events = val
}

// SetState sets the value of State.
func (s *BillingOrder) SetState(val BillingOrderState) {
	s.State = val
}

// A collection of timestamps for each event in the billing order's lifetime.
type BillingOrderEvents struct {
	// The timestamp of when the billing order was created.
	Created DateTime `json:"created"`
	// The timestamp of when the billing order was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the billing order was deleted.
	Deleted DateTime `json:"deleted"`
	// The timestamp of when the billing order expires.
	Expires DateTime `json:"expires"`
}

// GetCreated returns the value of Created.
func (s *BillingOrderEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *BillingOrderEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *BillingOrderEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetExpires returns the value of Expires.
func (s *BillingOrderEvents) GetExpires() DateTime {
	return s.Expires
}

// SetCreated sets the value of Created.
func (s *BillingOrderEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *BillingOrderEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *BillingOrderEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetExpires sets the value of Expires.
func (s *BillingOrderEvents) SetExpires(val DateTime) {
	s.Expires = val
}

// Merged schema.
type BillingOrderState struct {
	// The current state of the order.
	Current BillingOrderStateCurrent `json:"current"`
	Changed DateTime                 `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptBillingOrderStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *BillingOrderState) GetCurrent() BillingOrderStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *BillingOrderState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *BillingOrderState) GetError() OptBillingOrderStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *BillingOrderState) SetCurrent(val BillingOrderStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *BillingOrderState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *BillingOrderState) SetError(val OptBillingOrderStateError) {
	s.Error = val
}

// The current state of the order.
type BillingOrderStateCurrent string

const (
	BillingOrderStateCurrentNew       BillingOrderStateCurrent = "new"
	BillingOrderStateCurrentProcessed BillingOrderStateCurrent = "processed"
	BillingOrderStateCurrentDeleting  BillingOrderStateCurrent = "deleting"
	BillingOrderStateCurrentDeleted   BillingOrderStateCurrent = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s BillingOrderStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case BillingOrderStateCurrentNew:
		return []byte(s), nil
	case BillingOrderStateCurrentProcessed:
		return []byte(s), nil
	case BillingOrderStateCurrentDeleting:
		return []byte(s), nil
	case BillingOrderStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BillingOrderStateCurrent) UnmarshalText(data []byte) error {
	switch BillingOrderStateCurrent(data) {
	case BillingOrderStateCurrentNew:
		*s = BillingOrderStateCurrentNew
		return nil
	case BillingOrderStateCurrentProcessed:
		*s = BillingOrderStateCurrentProcessed
		return nil
	case BillingOrderStateCurrentDeleting:
		*s = BillingOrderStateCurrentDeleting
		return nil
	case BillingOrderStateCurrentDeleted:
		*s = BillingOrderStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type BillingOrderStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *BillingOrderStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *BillingOrderStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *BillingOrderStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *BillingOrderStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// An object holding information about servers included in Billing tier.
// Ref: #/components/schemas/BillingRam
type BillingRam struct {
	// The GB of image storage included in tier.
	IncludedGB float64 `json:"included_gb"`
	// Additional cost for image storage exceeding included_gb.
	AdditionalGB BillingRamAdditionalGB `json:"additional_gb"`
	// A boolean indicating if there is a hard limit on the image storage.
	HardCap bool `json:"hard_cap"`
}

// GetIncludedGB returns the value of IncludedGB.
func (s *BillingRam) GetIncludedGB() float64 {
	return s.IncludedGB
}

// GetAdditionalGB returns the value of AdditionalGB.
func (s *BillingRam) GetAdditionalGB() BillingRamAdditionalGB {
	return s.AdditionalGB
}

// GetHardCap returns the value of HardCap.
func (s *BillingRam) GetHardCap() bool {
	return s.HardCap
}

// SetIncludedGB sets the value of IncludedGB.
func (s *BillingRam) SetIncludedGB(val float64) {
	s.IncludedGB = val
}

// SetAdditionalGB sets the value of AdditionalGB.
func (s *BillingRam) SetAdditionalGB(val BillingRamAdditionalGB) {
	s.AdditionalGB = val
}

// SetHardCap sets the value of HardCap.
func (s *BillingRam) SetHardCap(val bool) {
	s.HardCap = val
}

// Additional cost for image storage exceeding included_gb.
type BillingRamAdditionalGB struct {
	Mills float64                    `json:"mills"`
	Term  BillingRamAdditionalGBTerm `json:"term"`
}

// GetMills returns the value of Mills.
func (s *BillingRamAdditionalGB) GetMills() float64 {
	return s.Mills
}

// GetTerm returns the value of Term.
func (s *BillingRamAdditionalGB) GetTerm() BillingRamAdditionalGBTerm {
	return s.Term
}

// SetMills sets the value of Mills.
func (s *BillingRamAdditionalGB) SetMills(val float64) {
	s.Mills = val
}

// SetTerm sets the value of Term.
func (s *BillingRamAdditionalGB) SetTerm(val BillingRamAdditionalGBTerm) {
	s.Term = val
}

type BillingRamAdditionalGBTerm string

const (
	BillingRamAdditionalGBTermOnce    BillingRamAdditionalGBTerm = "once"
	BillingRamAdditionalGBTermMonthly BillingRamAdditionalGBTerm = "monthly"
	BillingRamAdditionalGBTermYearly  BillingRamAdditionalGBTerm = "yearly"
)

// MarshalText implements encoding.TextMarshaler.
func (s BillingRamAdditionalGBTerm) MarshalText() ([]byte, error) {
	switch s {
	case BillingRamAdditionalGBTermOnce:
		return []byte(s), nil
	case BillingRamAdditionalGBTermMonthly:
		return []byte(s), nil
	case BillingRamAdditionalGBTermYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BillingRamAdditionalGBTerm) UnmarshalText(data []byte) error {
	switch BillingRamAdditionalGBTerm(data) {
	case BillingRamAdditionalGBTermOnce:
		*s = BillingRamAdditionalGBTermOnce
		return nil
	case BillingRamAdditionalGBTermMonthly:
		*s = BillingRamAdditionalGBTermMonthly
		return nil
	case BillingRamAdditionalGBTermYearly:
		*s = BillingRamAdditionalGBTermYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An object holding information about servers included in Billing tier.
// Ref: #/components/schemas/BillingServers
type BillingServers struct {
	// The number of servers included in the tier price.
	Included float64 `json:"included"`
	// A boolean indicating if there is a hard server limit on the tier.
	HardCap bool `json:"hard_cap"`
	// An object describing the additonal cost of servers exceeding the included server count.
	Additional BillingServersAdditional `json:"additional"`
}

// GetIncluded returns the value of Included.
func (s *BillingServers) GetIncluded() float64 {
	return s.Included
}

// GetHardCap returns the value of HardCap.
func (s *BillingServers) GetHardCap() bool {
	return s.HardCap
}

// GetAdditional returns the value of Additional.
func (s *BillingServers) GetAdditional() BillingServersAdditional {
	return s.Additional
}

// SetIncluded sets the value of Included.
func (s *BillingServers) SetIncluded(val float64) {
	s.Included = val
}

// SetHardCap sets the value of HardCap.
func (s *BillingServers) SetHardCap(val bool) {
	s.HardCap = val
}

// SetAdditional sets the value of Additional.
func (s *BillingServers) SetAdditional(val BillingServersAdditional) {
	s.Additional = val
}

// An object describing the additonal cost of servers exceeding the included server count.
type BillingServersAdditional struct {
	Mills float64                      `json:"mills"`
	Term  BillingServersAdditionalTerm `json:"term"`
}

// GetMills returns the value of Mills.
func (s *BillingServersAdditional) GetMills() float64 {
	return s.Mills
}

// GetTerm returns the value of Term.
func (s *BillingServersAdditional) GetTerm() BillingServersAdditionalTerm {
	return s.Term
}

// SetMills sets the value of Mills.
func (s *BillingServersAdditional) SetMills(val float64) {
	s.Mills = val
}

// SetTerm sets the value of Term.
func (s *BillingServersAdditional) SetTerm(val BillingServersAdditionalTerm) {
	s.Term = val
}

type BillingServersAdditionalTerm string

const (
	BillingServersAdditionalTermOnce    BillingServersAdditionalTerm = "once"
	BillingServersAdditionalTermMonthly BillingServersAdditionalTerm = "monthly"
	BillingServersAdditionalTermYearly  BillingServersAdditionalTerm = "yearly"
)

// MarshalText implements encoding.TextMarshaler.
func (s BillingServersAdditionalTerm) MarshalText() ([]byte, error) {
	switch s {
	case BillingServersAdditionalTermOnce:
		return []byte(s), nil
	case BillingServersAdditionalTermMonthly:
		return []byte(s), nil
	case BillingServersAdditionalTermYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BillingServersAdditionalTerm) UnmarshalText(data []byte) error {
	switch BillingServersAdditionalTerm(data) {
	case BillingServersAdditionalTermOnce:
		*s = BillingServersAdditionalTermOnce
		return nil
	case BillingServersAdditionalTermMonthly:
		*s = BillingServersAdditionalTermMonthly
		return nil
	case BillingServersAdditionalTermYearly:
		*s = BillingServersAdditionalTermYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/BillingServiceState
type BillingServiceState struct {
	// The current state of the billing service.
	Current BillingServiceStateCurrent `json:"current"`
	Changed DateTime                   `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptBillingServiceStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *BillingServiceState) GetCurrent() BillingServiceStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *BillingServiceState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *BillingServiceState) GetError() OptBillingServiceStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *BillingServiceState) SetCurrent(val BillingServiceStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *BillingServiceState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *BillingServiceState) SetError(val OptBillingServiceStateError) {
	s.Error = val
}

// The current state of the billing service.
type BillingServiceStateCurrent string

const (
	BillingServiceStateCurrentActive BillingServiceStateCurrent = "active"
)

// MarshalText implements encoding.TextMarshaler.
func (s BillingServiceStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case BillingServiceStateCurrentActive:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BillingServiceStateCurrent) UnmarshalText(data []byte) error {
	switch BillingServiceStateCurrent(data) {
	case BillingServiceStateCurrentActive:
		*s = BillingServiceStateCurrentActive
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type BillingServiceStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *BillingServiceStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *BillingServiceStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *BillingServiceStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *BillingServiceStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// A billing summary.
// Ref: #/components/schemas/BillingSummary
type BillingSummary struct {
	// The ID of the billing service, the summary pertains to.
	ServiceID string `json:"service_id"`
	// The billing summary title.
	Title string `json:"title"`
	// The plan type.
	Type BillingSummaryType `json:"type"`
	Term Term               `json:"term"`
	// 1/10th of a cent.
	Price string `json:"price"`
	// 1/10th of a cent.
	Discount string `json:"discount"`
}

// GetServiceID returns the value of ServiceID.
func (s *BillingSummary) GetServiceID() string {
	return s.ServiceID
}

// GetTitle returns the value of Title.
func (s *BillingSummary) GetTitle() string {
	return s.Title
}

// GetType returns the value of Type.
func (s *BillingSummary) GetType() BillingSummaryType {
	return s.Type
}

// GetTerm returns the value of Term.
func (s *BillingSummary) GetTerm() Term {
	return s.Term
}

// GetPrice returns the value of Price.
func (s *BillingSummary) GetPrice() string {
	return s.Price
}

// GetDiscount returns the value of Discount.
func (s *BillingSummary) GetDiscount() string {
	return s.Discount
}

// SetServiceID sets the value of ServiceID.
func (s *BillingSummary) SetServiceID(val string) {
	s.ServiceID = val
}

// SetTitle sets the value of Title.
func (s *BillingSummary) SetTitle(val string) {
	s.Title = val
}

// SetType sets the value of Type.
func (s *BillingSummary) SetType(val BillingSummaryType) {
	s.Type = val
}

// SetTerm sets the value of Term.
func (s *BillingSummary) SetTerm(val Term) {
	s.Term = val
}

// SetPrice sets the value of Price.
func (s *BillingSummary) SetPrice(val string) {
	s.Price = val
}

// SetDiscount sets the value of Discount.
func (s *BillingSummary) SetDiscount(val string) {
	s.Discount = val
}

// The plan type.
type BillingSummaryType string

const (
	BillingSummaryTypeTier    BillingSummaryType = "tier"
	BillingSummaryTypeSupport BillingSummaryType = "support"
)

// MarshalText implements encoding.TextMarshaler.
func (s BillingSummaryType) MarshalText() ([]byte, error) {
	switch s {
	case BillingSummaryTypeTier:
		return []byte(s), nil
	case BillingSummaryTypeSupport:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BillingSummaryType) UnmarshalText(data []byte) error {
	switch BillingSummaryType(data) {
	case BillingSummaryTypeTier:
		*s = BillingSummaryTypeTier
		return nil
	case BillingSummaryTypeSupport:
		*s = BillingSummaryTypeSupport
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A build log for a given image.
// Ref: #/components/schemas/BuildLog
type BuildLog struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// The ID of the image the build log pertains to.
	ImageID string `json:"image_id"`
	// The log itself.
	Log string `json:"log"`
	// A collection of timestamps for each event in the build log's lifetime.
	Events BuildLogEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *BuildLog) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *BuildLog) GetHubID() HubID {
	return s.HubID
}

// GetImageID returns the value of ImageID.
func (s *BuildLog) GetImageID() string {
	return s.ImageID
}

// GetLog returns the value of Log.
func (s *BuildLog) GetLog() string {
	return s.Log
}

// GetEvents returns the value of Events.
func (s *BuildLog) GetEvents() BuildLogEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *BuildLog) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *BuildLog) SetHubID(val HubID) {
	s.HubID = val
}

// SetImageID sets the value of ImageID.
func (s *BuildLog) SetImageID(val string) {
	s.ImageID = val
}

// SetLog sets the value of Log.
func (s *BuildLog) SetLog(val string) {
	s.Log = val
}

// SetEvents sets the value of Events.
func (s *BuildLog) SetEvents(val BuildLogEvents) {
	s.Events = val
}

// A collection of timestamps for each event in the build log's lifetime.
type BuildLogEvents struct {
	// The timestamp of when the build log was created.
	Created DateTime `json:"created"`
	// The timestamp of when the build log was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the build log was deleted.
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *BuildLogEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *BuildLogEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *BuildLogEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *BuildLogEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *BuildLogEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *BuildLogEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// A telemetry snapshot pertaining to CPU usage.
// Ref: #/components/schemas/CPUSnapshot
type CPUSnapshot struct {
	// Usage statistics.
	Usage CPUSnapshotUsage `json:"usage"`
	// Throttling statistics.
	Throttling CPUSnapshotThrottling `json:"throttling"`
}

// GetUsage returns the value of Usage.
func (s *CPUSnapshot) GetUsage() CPUSnapshotUsage {
	return s.Usage
}

// GetThrottling returns the value of Throttling.
func (s *CPUSnapshot) GetThrottling() CPUSnapshotThrottling {
	return s.Throttling
}

// SetUsage sets the value of Usage.
func (s *CPUSnapshot) SetUsage(val CPUSnapshotUsage) {
	s.Usage = val
}

// SetThrottling sets the value of Throttling.
func (s *CPUSnapshot) SetThrottling(val CPUSnapshotThrottling) {
	s.Throttling = val
}

// Throttling statistics.
type CPUSnapshotThrottling struct {
	// The amount of periods that have passed since the last restart.
	Periods OptInt `json:"periods"`
	// How many times the instance has been throttled for using all its alloted CPU during a period.
	ThrottledPeriods OptInt `json:"throttled_periods"`
	// The amount of time in nanoseconds this instnace has spent with throttled CPU resources.
	ThrottledTime OptInt `json:"throttled_time"`
}

// GetPeriods returns the value of Periods.
func (s *CPUSnapshotThrottling) GetPeriods() OptInt {
	return s.Periods
}

// GetThrottledPeriods returns the value of ThrottledPeriods.
func (s *CPUSnapshotThrottling) GetThrottledPeriods() OptInt {
	return s.ThrottledPeriods
}

// GetThrottledTime returns the value of ThrottledTime.
func (s *CPUSnapshotThrottling) GetThrottledTime() OptInt {
	return s.ThrottledTime
}

// SetPeriods sets the value of Periods.
func (s *CPUSnapshotThrottling) SetPeriods(val OptInt) {
	s.Periods = val
}

// SetThrottledPeriods sets the value of ThrottledPeriods.
func (s *CPUSnapshotThrottling) SetThrottledPeriods(val OptInt) {
	s.ThrottledPeriods = val
}

// SetThrottledTime sets the value of ThrottledTime.
func (s *CPUSnapshotThrottling) SetThrottledTime(val OptInt) {
	s.ThrottledTime = val
}

// Usage statistics.
type CPUSnapshotUsage struct {
	// Total amount of VPU time since last restart.
	Total int `json:"total"`
	// An array showing CPU core specific usage in nanoseconds since the last restart.
	PerCore []int `json:"per_core"`
	// The amount of time in nanoseconds used by the kernel since last restart.
	Kernel int `json:"kernel"`
	// The amount of time in nanoseconds taken up for user processes.
	User float64 `json:"user"`
}

// GetTotal returns the value of Total.
func (s *CPUSnapshotUsage) GetTotal() int {
	return s.Total
}

// GetPerCore returns the value of PerCore.
func (s *CPUSnapshotUsage) GetPerCore() []int {
	return s.PerCore
}

// GetKernel returns the value of Kernel.
func (s *CPUSnapshotUsage) GetKernel() int {
	return s.Kernel
}

// GetUser returns the value of User.
func (s *CPUSnapshotUsage) GetUser() float64 {
	return s.User
}

// SetTotal sets the value of Total.
func (s *CPUSnapshotUsage) SetTotal(val int) {
	s.Total = val
}

// SetPerCore sets the value of PerCore.
func (s *CPUSnapshotUsage) SetPerCore(val []int) {
	s.PerCore = val
}

// SetKernel sets the value of Kernel.
func (s *CPUSnapshotUsage) SetKernel(val int) {
	s.Kernel = val
}

// SetUser sets the value of User.
func (s *CPUSnapshotUsage) SetUser(val float64) {
	s.User = val
}

// Information about the CPU for a given server.
// Ref: #/components/schemas/CPUSpec
type CPUSpec struct {
	// The number of CPUs.
	Count int `json:"count"`
	// The number of cores.
	Cores OptInt `json:"cores"`
	// The number of threads.
	Threads OptInt `json:"threads"`
	// The type of the CPU.
	Type string `json:"type"`
	// A boolean where true represents the CPU is shared.
	Shared OptBool `json:"shared"`
	// Extra information about the CPU if there is any.
	Extra OptCPUSpecExtra `json:"extra"`
}

// GetCount returns the value of Count.
func (s *CPUSpec) GetCount() int {
	return s.Count
}

// GetCores returns the value of Cores.
func (s *CPUSpec) GetCores() OptInt {
	return s.Cores
}

// GetThreads returns the value of Threads.
func (s *CPUSpec) GetThreads() OptInt {
	return s.Threads
}

// GetType returns the value of Type.
func (s *CPUSpec) GetType() string {
	return s.Type
}

// GetShared returns the value of Shared.
func (s *CPUSpec) GetShared() OptBool {
	return s.Shared
}

// GetExtra returns the value of Extra.
func (s *CPUSpec) GetExtra() OptCPUSpecExtra {
	return s.Extra
}

// SetCount sets the value of Count.
func (s *CPUSpec) SetCount(val int) {
	s.Count = val
}

// SetCores sets the value of Cores.
func (s *CPUSpec) SetCores(val OptInt) {
	s.Cores = val
}

// SetThreads sets the value of Threads.
func (s *CPUSpec) SetThreads(val OptInt) {
	s.Threads = val
}

// SetType sets the value of Type.
func (s *CPUSpec) SetType(val string) {
	s.Type = val
}

// SetShared sets the value of Shared.
func (s *CPUSpec) SetShared(val OptBool) {
	s.Shared = val
}

// SetExtra sets the value of Extra.
func (s *CPUSpec) SetExtra(val OptCPUSpecExtra) {
	s.Extra = val
}

// Extra information about the CPU if there is any.
type CPUSpecExtra map[string]string

func (s *CPUSpecExtra) init() CPUSpecExtra {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// A capability that a user or API key that represents what an API key or a user can do.
// Ref: #/components/schemas/Capability
type Capability string

const (
	CapabilityHubsUpdate                        Capability = "hubs-update"
	CapabilityHubsDelete                        Capability = "hubs-delete"
	CapabilityHubsInvitesSend                   Capability = "hubs-invites-send"
	CapabilityHubsInvitesManage                 Capability = "hubs-invites-manage"
	CapabilityHubsMembersManage                 Capability = "hubs-members-manage"
	CapabilityHubsMembersView                   Capability = "hubs-members-view"
	CapabilityHubsNotificationsListen           Capability = "hubs-notifications-listen"
	CapabilityHubsIntegrationsManage            Capability = "hubs-integrations-manage"
	CapabilityBillingMethodsManage              Capability = "billing-methods-manage"
	CapabilityBillingInvoicesView               Capability = "billing-invoices-view"
	CapabilityBillingInvoicesPay                Capability = "billing-invoices-pay"
	CapabilityBillingOrdersManage               Capability = "billing-orders-manage"
	CapabilityBillingServicesView               Capability = "billing-services-view"
	CapabilityBillingCreditsView                Capability = "billing-credits-view"
	CapabilitySdnNetworksView                   Capability = "sdn-networks-view"
	CapabilitySdnNetworksManage                 Capability = "sdn-networks-manage"
	CapabilityPipelinesManage                   Capability = "pipelines-manage"
	CapabilityPipelinesView                     Capability = "pipelines-view"
	CapabilityPipelinesTrigger                  Capability = "pipelines-trigger"
	CapabilityEnvironmentsCreate                Capability = "environments-create"
	CapabilityEnvironmentsDelete                Capability = "environments-delete"
	CapabilityEnvironmentsView                  Capability = "environments-view"
	CapabilityEnvironmentsUpdate                Capability = "environments-update"
	CapabilityEnvironmentsState                 Capability = "environments-state"
	CapabilityEnvironmentsServicesManage        Capability = "environments-services-manage"
	CapabilityEnvironmentsVpn                   Capability = "environments-vpn"
	CapabilityEnvironmentsVpnManage             Capability = "environments-vpn-manage"
	CapabilityEnvironmentsScopedvariablesManage Capability = "environments-scopedvariables-manage"
	CapabilityEnvironmentsScopedvariablesView   Capability = "environments-scopedvariables-view"
	CapabilityContainersDeploy                  Capability = "containers-deploy"
	CapabilityContainersView                    Capability = "containers-view"
	CapabilityContainersConsole                 Capability = "containers-console"
	CapabilityContainersSSH                     Capability = "containers-ssh"
	CapabilityContainersUpdate                  Capability = "containers-update"
	CapabilityContainersDelete                  Capability = "containers-delete"
	CapabilityContainersState                   Capability = "containers-state"
	CapabilityContainersVolumesManage           Capability = "containers-volumes-manage"
	CapabilityContainersVolumesView             Capability = "containers-volumes-view"
	CapabilityContainersInstancesMigrate        Capability = "containers-instances-migrate"
	CapabilityContainersBackupsManage           Capability = "containers-backups-manage"
	CapabilityContainersBackupsView             Capability = "containers-backups-view"
	CapabilityStacksManage                      Capability = "stacks-manage"
	CapabilityStacksView                        Capability = "stacks-view"
	CapabilityStacksBuildsManage                Capability = "stacks-builds-manage"
	CapabilityStacksBuildsDeploy                Capability = "stacks-builds-deploy"
	CapabilityImagesView                        Capability = "images-view"
	CapabilityImagesImport                      Capability = "images-import"
	CapabilityImagesUpdate                      Capability = "images-update"
	CapabilityImagesDelete                      Capability = "images-delete"
	CapabilityImagesBuild                       Capability = "images-build"
	CapabilityImagesSourcesView                 Capability = "images-sources-view"
	CapabilityImagesSourcesManage               Capability = "images-sources-manage"
	CapabilityJobsView                          Capability = "jobs-view"
	CapabilityAPIKeysManage                     Capability = "api-keys-manage"
	CapabilityIpsManage                         Capability = "ips-manage"
	CapabilityServersProvision                  Capability = "servers-provision"
	CapabilityServersView                       Capability = "servers-view"
	CapabilityServersUpdate                     Capability = "servers-update"
	CapabilityServersLogin                      Capability = "servers-login"
	CapabilityServersState                      Capability = "servers-state"
	CapabilityServersDecommission               Capability = "servers-decommission"
	CapabilityInfrastructureProvidersManage     Capability = "infrastructure-providers-manage"
	CapabilityInfrastructureProvidersView       Capability = "infrastructure-providers-view"
	CapabilityUsageView                         Capability = "usage-view"
	CapabilityDNSView                           Capability = "dns-view"
	CapabilityDNSManage                         Capability = "dns-manage"
	CapabilityDNSCertsView                      Capability = "dns-certs-view"
)

// MarshalText implements encoding.TextMarshaler.
func (s Capability) MarshalText() ([]byte, error) {
	switch s {
	case CapabilityHubsUpdate:
		return []byte(s), nil
	case CapabilityHubsDelete:
		return []byte(s), nil
	case CapabilityHubsInvitesSend:
		return []byte(s), nil
	case CapabilityHubsInvitesManage:
		return []byte(s), nil
	case CapabilityHubsMembersManage:
		return []byte(s), nil
	case CapabilityHubsMembersView:
		return []byte(s), nil
	case CapabilityHubsNotificationsListen:
		return []byte(s), nil
	case CapabilityHubsIntegrationsManage:
		return []byte(s), nil
	case CapabilityBillingMethodsManage:
		return []byte(s), nil
	case CapabilityBillingInvoicesView:
		return []byte(s), nil
	case CapabilityBillingInvoicesPay:
		return []byte(s), nil
	case CapabilityBillingOrdersManage:
		return []byte(s), nil
	case CapabilityBillingServicesView:
		return []byte(s), nil
	case CapabilityBillingCreditsView:
		return []byte(s), nil
	case CapabilitySdnNetworksView:
		return []byte(s), nil
	case CapabilitySdnNetworksManage:
		return []byte(s), nil
	case CapabilityPipelinesManage:
		return []byte(s), nil
	case CapabilityPipelinesView:
		return []byte(s), nil
	case CapabilityPipelinesTrigger:
		return []byte(s), nil
	case CapabilityEnvironmentsCreate:
		return []byte(s), nil
	case CapabilityEnvironmentsDelete:
		return []byte(s), nil
	case CapabilityEnvironmentsView:
		return []byte(s), nil
	case CapabilityEnvironmentsUpdate:
		return []byte(s), nil
	case CapabilityEnvironmentsState:
		return []byte(s), nil
	case CapabilityEnvironmentsServicesManage:
		return []byte(s), nil
	case CapabilityEnvironmentsVpn:
		return []byte(s), nil
	case CapabilityEnvironmentsVpnManage:
		return []byte(s), nil
	case CapabilityEnvironmentsScopedvariablesManage:
		return []byte(s), nil
	case CapabilityEnvironmentsScopedvariablesView:
		return []byte(s), nil
	case CapabilityContainersDeploy:
		return []byte(s), nil
	case CapabilityContainersView:
		return []byte(s), nil
	case CapabilityContainersConsole:
		return []byte(s), nil
	case CapabilityContainersSSH:
		return []byte(s), nil
	case CapabilityContainersUpdate:
		return []byte(s), nil
	case CapabilityContainersDelete:
		return []byte(s), nil
	case CapabilityContainersState:
		return []byte(s), nil
	case CapabilityContainersVolumesManage:
		return []byte(s), nil
	case CapabilityContainersVolumesView:
		return []byte(s), nil
	case CapabilityContainersInstancesMigrate:
		return []byte(s), nil
	case CapabilityContainersBackupsManage:
		return []byte(s), nil
	case CapabilityContainersBackupsView:
		return []byte(s), nil
	case CapabilityStacksManage:
		return []byte(s), nil
	case CapabilityStacksView:
		return []byte(s), nil
	case CapabilityStacksBuildsManage:
		return []byte(s), nil
	case CapabilityStacksBuildsDeploy:
		return []byte(s), nil
	case CapabilityImagesView:
		return []byte(s), nil
	case CapabilityImagesImport:
		return []byte(s), nil
	case CapabilityImagesUpdate:
		return []byte(s), nil
	case CapabilityImagesDelete:
		return []byte(s), nil
	case CapabilityImagesBuild:
		return []byte(s), nil
	case CapabilityImagesSourcesView:
		return []byte(s), nil
	case CapabilityImagesSourcesManage:
		return []byte(s), nil
	case CapabilityJobsView:
		return []byte(s), nil
	case CapabilityAPIKeysManage:
		return []byte(s), nil
	case CapabilityIpsManage:
		return []byte(s), nil
	case CapabilityServersProvision:
		return []byte(s), nil
	case CapabilityServersView:
		return []byte(s), nil
	case CapabilityServersUpdate:
		return []byte(s), nil
	case CapabilityServersLogin:
		return []byte(s), nil
	case CapabilityServersState:
		return []byte(s), nil
	case CapabilityServersDecommission:
		return []byte(s), nil
	case CapabilityInfrastructureProvidersManage:
		return []byte(s), nil
	case CapabilityInfrastructureProvidersView:
		return []byte(s), nil
	case CapabilityUsageView:
		return []byte(s), nil
	case CapabilityDNSView:
		return []byte(s), nil
	case CapabilityDNSManage:
		return []byte(s), nil
	case CapabilityDNSCertsView:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Capability) UnmarshalText(data []byte) error {
	switch Capability(data) {
	case CapabilityHubsUpdate:
		*s = CapabilityHubsUpdate
		return nil
	case CapabilityHubsDelete:
		*s = CapabilityHubsDelete
		return nil
	case CapabilityHubsInvitesSend:
		*s = CapabilityHubsInvitesSend
		return nil
	case CapabilityHubsInvitesManage:
		*s = CapabilityHubsInvitesManage
		return nil
	case CapabilityHubsMembersManage:
		*s = CapabilityHubsMembersManage
		return nil
	case CapabilityHubsMembersView:
		*s = CapabilityHubsMembersView
		return nil
	case CapabilityHubsNotificationsListen:
		*s = CapabilityHubsNotificationsListen
		return nil
	case CapabilityHubsIntegrationsManage:
		*s = CapabilityHubsIntegrationsManage
		return nil
	case CapabilityBillingMethodsManage:
		*s = CapabilityBillingMethodsManage
		return nil
	case CapabilityBillingInvoicesView:
		*s = CapabilityBillingInvoicesView
		return nil
	case CapabilityBillingInvoicesPay:
		*s = CapabilityBillingInvoicesPay
		return nil
	case CapabilityBillingOrdersManage:
		*s = CapabilityBillingOrdersManage
		return nil
	case CapabilityBillingServicesView:
		*s = CapabilityBillingServicesView
		return nil
	case CapabilityBillingCreditsView:
		*s = CapabilityBillingCreditsView
		return nil
	case CapabilitySdnNetworksView:
		*s = CapabilitySdnNetworksView
		return nil
	case CapabilitySdnNetworksManage:
		*s = CapabilitySdnNetworksManage
		return nil
	case CapabilityPipelinesManage:
		*s = CapabilityPipelinesManage
		return nil
	case CapabilityPipelinesView:
		*s = CapabilityPipelinesView
		return nil
	case CapabilityPipelinesTrigger:
		*s = CapabilityPipelinesTrigger
		return nil
	case CapabilityEnvironmentsCreate:
		*s = CapabilityEnvironmentsCreate
		return nil
	case CapabilityEnvironmentsDelete:
		*s = CapabilityEnvironmentsDelete
		return nil
	case CapabilityEnvironmentsView:
		*s = CapabilityEnvironmentsView
		return nil
	case CapabilityEnvironmentsUpdate:
		*s = CapabilityEnvironmentsUpdate
		return nil
	case CapabilityEnvironmentsState:
		*s = CapabilityEnvironmentsState
		return nil
	case CapabilityEnvironmentsServicesManage:
		*s = CapabilityEnvironmentsServicesManage
		return nil
	case CapabilityEnvironmentsVpn:
		*s = CapabilityEnvironmentsVpn
		return nil
	case CapabilityEnvironmentsVpnManage:
		*s = CapabilityEnvironmentsVpnManage
		return nil
	case CapabilityEnvironmentsScopedvariablesManage:
		*s = CapabilityEnvironmentsScopedvariablesManage
		return nil
	case CapabilityEnvironmentsScopedvariablesView:
		*s = CapabilityEnvironmentsScopedvariablesView
		return nil
	case CapabilityContainersDeploy:
		*s = CapabilityContainersDeploy
		return nil
	case CapabilityContainersView:
		*s = CapabilityContainersView
		return nil
	case CapabilityContainersConsole:
		*s = CapabilityContainersConsole
		return nil
	case CapabilityContainersSSH:
		*s = CapabilityContainersSSH
		return nil
	case CapabilityContainersUpdate:
		*s = CapabilityContainersUpdate
		return nil
	case CapabilityContainersDelete:
		*s = CapabilityContainersDelete
		return nil
	case CapabilityContainersState:
		*s = CapabilityContainersState
		return nil
	case CapabilityContainersVolumesManage:
		*s = CapabilityContainersVolumesManage
		return nil
	case CapabilityContainersVolumesView:
		*s = CapabilityContainersVolumesView
		return nil
	case CapabilityContainersInstancesMigrate:
		*s = CapabilityContainersInstancesMigrate
		return nil
	case CapabilityContainersBackupsManage:
		*s = CapabilityContainersBackupsManage
		return nil
	case CapabilityContainersBackupsView:
		*s = CapabilityContainersBackupsView
		return nil
	case CapabilityStacksManage:
		*s = CapabilityStacksManage
		return nil
	case CapabilityStacksView:
		*s = CapabilityStacksView
		return nil
	case CapabilityStacksBuildsManage:
		*s = CapabilityStacksBuildsManage
		return nil
	case CapabilityStacksBuildsDeploy:
		*s = CapabilityStacksBuildsDeploy
		return nil
	case CapabilityImagesView:
		*s = CapabilityImagesView
		return nil
	case CapabilityImagesImport:
		*s = CapabilityImagesImport
		return nil
	case CapabilityImagesUpdate:
		*s = CapabilityImagesUpdate
		return nil
	case CapabilityImagesDelete:
		*s = CapabilityImagesDelete
		return nil
	case CapabilityImagesBuild:
		*s = CapabilityImagesBuild
		return nil
	case CapabilityImagesSourcesView:
		*s = CapabilityImagesSourcesView
		return nil
	case CapabilityImagesSourcesManage:
		*s = CapabilityImagesSourcesManage
		return nil
	case CapabilityJobsView:
		*s = CapabilityJobsView
		return nil
	case CapabilityAPIKeysManage:
		*s = CapabilityAPIKeysManage
		return nil
	case CapabilityIpsManage:
		*s = CapabilityIpsManage
		return nil
	case CapabilityServersProvision:
		*s = CapabilityServersProvision
		return nil
	case CapabilityServersView:
		*s = CapabilityServersView
		return nil
	case CapabilityServersUpdate:
		*s = CapabilityServersUpdate
		return nil
	case CapabilityServersLogin:
		*s = CapabilityServersLogin
		return nil
	case CapabilityServersState:
		*s = CapabilityServersState
		return nil
	case CapabilityServersDecommission:
		*s = CapabilityServersDecommission
		return nil
	case CapabilityInfrastructureProvidersManage:
		*s = CapabilityInfrastructureProvidersManage
		return nil
	case CapabilityInfrastructureProvidersView:
		*s = CapabilityInfrastructureProvidersView
		return nil
	case CapabilityUsageView:
		*s = CapabilityUsageView
		return nil
	case CapabilityDNSView:
		*s = CapabilityDNSView
		return nil
	case CapabilityDNSManage:
		*s = CapabilityDNSManage
		return nil
	case CapabilityDNSCertsView:
		*s = CapabilityDNSCertsView
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A TLS record certificate.
// Ref: #/components/schemas/Certificate
type Certificate struct {
	ID        ID       `json:"id"`
	Generated DateTime `json:"generated"`
	// A value where true represents that the certificate is using a shared wildcard cert.
	WildcardChild bool `json:"wildcard_child"`
}

// GetID returns the value of ID.
func (s *Certificate) GetID() ID {
	return s.ID
}

// GetGenerated returns the value of Generated.
func (s *Certificate) GetGenerated() DateTime {
	return s.Generated
}

// GetWildcardChild returns the value of WildcardChild.
func (s *Certificate) GetWildcardChild() bool {
	return s.WildcardChild
}

// SetID sets the value of ID.
func (s *Certificate) SetID(val ID) {
	s.ID = val
}

// SetGenerated sets the value of Generated.
func (s *Certificate) SetGenerated(val DateTime) {
	s.Generated = val
}

// SetWildcardChild sets the value of WildcardChild.
func (s *Certificate) SetWildcardChild(val bool) {
	s.WildcardChild = val
}

// A count of servers in a cluster with the given version of Cycle software.
// Ref: #/components/schemas/ClusterVersionServerCount
type ClusterVersionServerCount struct {
	Agent               jx.Raw `json:"agent"`
	AgentMinusSpawner   jx.Raw `json:"agent-spawner"`
	Compute             jx.Raw `json:"compute"`
	ComputeMinusSpawner jx.Raw `json:"compute-spawner"`
}

// GetAgent returns the value of Agent.
func (s *ClusterVersionServerCount) GetAgent() jx.Raw {
	return s.Agent
}

// GetAgentMinusSpawner returns the value of AgentMinusSpawner.
func (s *ClusterVersionServerCount) GetAgentMinusSpawner() jx.Raw {
	return s.AgentMinusSpawner
}

// GetCompute returns the value of Compute.
func (s *ClusterVersionServerCount) GetCompute() jx.Raw {
	return s.Compute
}

// GetComputeMinusSpawner returns the value of ComputeMinusSpawner.
func (s *ClusterVersionServerCount) GetComputeMinusSpawner() jx.Raw {
	return s.ComputeMinusSpawner
}

// SetAgent sets the value of Agent.
func (s *ClusterVersionServerCount) SetAgent(val jx.Raw) {
	s.Agent = val
}

// SetAgentMinusSpawner sets the value of AgentMinusSpawner.
func (s *ClusterVersionServerCount) SetAgentMinusSpawner(val jx.Raw) {
	s.AgentMinusSpawner = val
}

// SetCompute sets the value of Compute.
func (s *ClusterVersionServerCount) SetCompute(val jx.Raw) {
	s.Compute = val
}

// SetComputeMinusSpawner sets the value of ComputeMinusSpawner.
func (s *ClusterVersionServerCount) SetComputeMinusSpawner(val jx.Raw) {
	s.ComputeMinusSpawner = val
}

// Generic component format for describing resources for the search index.
// Ref: #/components/schemas/Component
type Component struct {
	// ID of the component.
	ID string `json:"id"`
	// Name of the component.
	Name string `json:"name"`
	// State of the component.
	State  string `json:"state"`
	Events Events `json:"events"`
	// Related strings for fuzzy search.
	ContextBlobs []string `json:"context_blobs"`
	// Component associations.
	Associations ComponentAssociations `json:"associations"`
}

// GetID returns the value of ID.
func (s *Component) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *Component) GetName() string {
	return s.Name
}

// GetState returns the value of State.
func (s *Component) GetState() string {
	return s.State
}

// GetEvents returns the value of Events.
func (s *Component) GetEvents() Events {
	return s.Events
}

// GetContextBlobs returns the value of ContextBlobs.
func (s *Component) GetContextBlobs() []string {
	return s.ContextBlobs
}

// GetAssociations returns the value of Associations.
func (s *Component) GetAssociations() ComponentAssociations {
	return s.Associations
}

// SetID sets the value of ID.
func (s *Component) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Component) SetName(val string) {
	s.Name = val
}

// SetState sets the value of State.
func (s *Component) SetState(val string) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *Component) SetEvents(val Events) {
	s.Events = val
}

// SetContextBlobs sets the value of ContextBlobs.
func (s *Component) SetContextBlobs(val []string) {
	s.ContextBlobs = val
}

// SetAssociations sets the value of Associations.
func (s *Component) SetAssociations(val ComponentAssociations) {
	s.Associations = val
}

// Component associations.
type ComponentAssociations struct {
	// Associated container Id.
	Container OptString `json:"container"`
	// Associated environment Id.
	Environment OptString `json:"environment"`
	// Associated image source Id.
	ImageMinusSource OptString `json:"image-source"`
	// Associated image Id.
	Image OptString `json:"image"`
	// Associated stack Id.
	Stack OptString `json:"stack"`
	// Associated server Id.
	Server OptString `json:"server"`
	// Associated provider location Id.
	ProviderMinusLocation OptString `json:"provider-location"`
}

// GetContainer returns the value of Container.
func (s *ComponentAssociations) GetContainer() OptString {
	return s.Container
}

// GetEnvironment returns the value of Environment.
func (s *ComponentAssociations) GetEnvironment() OptString {
	return s.Environment
}

// GetImageMinusSource returns the value of ImageMinusSource.
func (s *ComponentAssociations) GetImageMinusSource() OptString {
	return s.ImageMinusSource
}

// GetImage returns the value of Image.
func (s *ComponentAssociations) GetImage() OptString {
	return s.Image
}

// GetStack returns the value of Stack.
func (s *ComponentAssociations) GetStack() OptString {
	return s.Stack
}

// GetServer returns the value of Server.
func (s *ComponentAssociations) GetServer() OptString {
	return s.Server
}

// GetProviderMinusLocation returns the value of ProviderMinusLocation.
func (s *ComponentAssociations) GetProviderMinusLocation() OptString {
	return s.ProviderMinusLocation
}

// SetContainer sets the value of Container.
func (s *ComponentAssociations) SetContainer(val OptString) {
	s.Container = val
}

// SetEnvironment sets the value of Environment.
func (s *ComponentAssociations) SetEnvironment(val OptString) {
	s.Environment = val
}

// SetImageMinusSource sets the value of ImageMinusSource.
func (s *ComponentAssociations) SetImageMinusSource(val OptString) {
	s.ImageMinusSource = val
}

// SetImage sets the value of Image.
func (s *ComponentAssociations) SetImage(val OptString) {
	s.Image = val
}

// SetStack sets the value of Stack.
func (s *ComponentAssociations) SetStack(val OptString) {
	s.Stack = val
}

// SetServer sets the value of Server.
func (s *ComponentAssociations) SetServer(val OptString) {
	s.Server = val
}

// SetProviderMinusLocation sets the value of ProviderMinusLocation.
func (s *ComponentAssociations) SetProviderMinusLocation(val OptString) {
	s.ProviderMinusLocation = val
}

// A container configuration.
// Ref: #/components/schemas/Config
type Config struct {
	Network      ContainerNetwork         `json:"network"`
	Deploy       ContainerDeploy          `json:"deploy"`
	Runtime      OptContainerRuntime      `json:"runtime"`
	Resources    OptContainerResources    `json:"resources"`
	Integrations OptContainerIntegrations `json:"integrations"`
}

// GetNetwork returns the value of Network.
func (s *Config) GetNetwork() ContainerNetwork {
	return s.Network
}

// GetDeploy returns the value of Deploy.
func (s *Config) GetDeploy() ContainerDeploy {
	return s.Deploy
}

// GetRuntime returns the value of Runtime.
func (s *Config) GetRuntime() OptContainerRuntime {
	return s.Runtime
}

// GetResources returns the value of Resources.
func (s *Config) GetResources() OptContainerResources {
	return s.Resources
}

// GetIntegrations returns the value of Integrations.
func (s *Config) GetIntegrations() OptContainerIntegrations {
	return s.Integrations
}

// SetNetwork sets the value of Network.
func (s *Config) SetNetwork(val ContainerNetwork) {
	s.Network = val
}

// SetDeploy sets the value of Deploy.
func (s *Config) SetDeploy(val ContainerDeploy) {
	s.Deploy = val
}

// SetRuntime sets the value of Runtime.
func (s *Config) SetRuntime(val OptContainerRuntime) {
	s.Runtime = val
}

// SetResources sets the value of Resources.
func (s *Config) SetResources(val OptContainerResources) {
	s.Resources = val
}

// SetIntegrations sets the value of Integrations.
func (s *Config) SetIntegrations(val OptContainerIntegrations) {
	s.Integrations = val
}

// Containers are a way to package together your application along with it's dependencies, and run in
// a resource isolated process. They provide consistency across different hosts, efficiency over
// traditional hosting methods, and facilitate a micro-service based approach, where each logical
// piece of your application is split into multiple, easily testable parts (such as API, Backend,
// Frontend, etc).
// Ref: #/components/schemas/Container
type Container struct {
	ID ID `json:"id"`
	// A user defined name for the container resource.
	Name string `json:"name"`
	// A human readable slugged identifier for this container. Usually used as a key in a stack file.
	Identifier  string                      `json:"identifier"`
	Creator     CreatorScope                `json:"creator"`
	Environment ContainerEnvironmentSummary `json:"environment"`
	HubID       HubID                       `json:"hub_id"`
	Image       ImageSummary                `json:"image"`
	Stack       OptStackSummary             `json:"stack"`
	Config      Config                      `json:"config"`
	// The number of instances for a given container.
	Instances int             `json:"instances"`
	Volumes   []VolumeSummary `json:"volumes"`
	// Custom meta data for a given container.
	Annotations NilContainerAnnotations `json:"annotations"`
	// The role of a given container if it has one.
	Role OptNilContainerRole `json:"role"`
	// A boolean where true signifies the container is stateful.
	Stateful bool `json:"stateful"`
	// A boolean where true signifies the container is marked as deprecated.
	Deprecate OptBool        `json:"deprecate"`
	State     ContainerState `json:"state"`
	// A collection of timestamps for each event in the container's lifetime.
	Events ContainerEvents   `json:"events"`
	Meta   OptContainersMeta `json:"meta"`
}

// GetID returns the value of ID.
func (s *Container) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *Container) GetName() string {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *Container) GetIdentifier() string {
	return s.Identifier
}

// GetCreator returns the value of Creator.
func (s *Container) GetCreator() CreatorScope {
	return s.Creator
}

// GetEnvironment returns the value of Environment.
func (s *Container) GetEnvironment() ContainerEnvironmentSummary {
	return s.Environment
}

// GetHubID returns the value of HubID.
func (s *Container) GetHubID() HubID {
	return s.HubID
}

// GetImage returns the value of Image.
func (s *Container) GetImage() ImageSummary {
	return s.Image
}

// GetStack returns the value of Stack.
func (s *Container) GetStack() OptStackSummary {
	return s.Stack
}

// GetConfig returns the value of Config.
func (s *Container) GetConfig() Config {
	return s.Config
}

// GetInstances returns the value of Instances.
func (s *Container) GetInstances() int {
	return s.Instances
}

// GetVolumes returns the value of Volumes.
func (s *Container) GetVolumes() []VolumeSummary {
	return s.Volumes
}

// GetAnnotations returns the value of Annotations.
func (s *Container) GetAnnotations() NilContainerAnnotations {
	return s.Annotations
}

// GetRole returns the value of Role.
func (s *Container) GetRole() OptNilContainerRole {
	return s.Role
}

// GetStateful returns the value of Stateful.
func (s *Container) GetStateful() bool {
	return s.Stateful
}

// GetDeprecate returns the value of Deprecate.
func (s *Container) GetDeprecate() OptBool {
	return s.Deprecate
}

// GetState returns the value of State.
func (s *Container) GetState() ContainerState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *Container) GetEvents() ContainerEvents {
	return s.Events
}

// GetMeta returns the value of Meta.
func (s *Container) GetMeta() OptContainersMeta {
	return s.Meta
}

// SetID sets the value of ID.
func (s *Container) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Container) SetName(val string) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *Container) SetIdentifier(val string) {
	s.Identifier = val
}

// SetCreator sets the value of Creator.
func (s *Container) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetEnvironment sets the value of Environment.
func (s *Container) SetEnvironment(val ContainerEnvironmentSummary) {
	s.Environment = val
}

// SetHubID sets the value of HubID.
func (s *Container) SetHubID(val HubID) {
	s.HubID = val
}

// SetImage sets the value of Image.
func (s *Container) SetImage(val ImageSummary) {
	s.Image = val
}

// SetStack sets the value of Stack.
func (s *Container) SetStack(val OptStackSummary) {
	s.Stack = val
}

// SetConfig sets the value of Config.
func (s *Container) SetConfig(val Config) {
	s.Config = val
}

// SetInstances sets the value of Instances.
func (s *Container) SetInstances(val int) {
	s.Instances = val
}

// SetVolumes sets the value of Volumes.
func (s *Container) SetVolumes(val []VolumeSummary) {
	s.Volumes = val
}

// SetAnnotations sets the value of Annotations.
func (s *Container) SetAnnotations(val NilContainerAnnotations) {
	s.Annotations = val
}

// SetRole sets the value of Role.
func (s *Container) SetRole(val OptNilContainerRole) {
	s.Role = val
}

// SetStateful sets the value of Stateful.
func (s *Container) SetStateful(val bool) {
	s.Stateful = val
}

// SetDeprecate sets the value of Deprecate.
func (s *Container) SetDeprecate(val OptBool) {
	s.Deprecate = val
}

// SetState sets the value of State.
func (s *Container) SetState(val ContainerState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *Container) SetEvents(val ContainerEvents) {
	s.Events = val
}

// SetMeta sets the value of Meta.
func (s *Container) SetMeta(val OptContainersMeta) {
	s.Meta = val
}

// Custom meta data for a given container.
type ContainerAnnotations map[string]string

func (s *ContainerAnnotations) init() ContainerAnnotations {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Deployment configuration for the given container.
// Ref: #/components/schemas/ContainerDeploy
type ContainerDeploy struct {
	// The number of initial desired instances for a given container.
	Instances int `json:"instances"`
	// The deployment strategy to use when scaling the given container.
	Strategy OptDeploymentStrategyName  `json:"strategy"`
	Stateful OptContainerDeployStateful `json:"stateful"`
	// Settings that give more granular control over deployment targets and conditions.
	Constraints OptContainerDeployConstraints `json:"constraints"`
	// Configuration for what to do during container shutdown.
	Shutdown OptContainerDeployShutdown `json:"shutdown"`
	// Configurations for container startup.
	Startup OptContainerDeployStartup `json:"startup"`
	// Configurations for how the container behaves when updating.
	Update OptContainerDeployUpdate `json:"update"`
	// Configurations for container restart events.
	Restart OptContainerDeployRestart `json:"restart"`
	// Configuration for determining the health of a container.
	HealthCheck OptContainerDeployHealthCheck `json:"health_check"`
	// Configuration settings for container telemetery reporting.
	Telemetry OptContainerDeployTelemetry `json:"telemetry"`
}

// GetInstances returns the value of Instances.
func (s *ContainerDeploy) GetInstances() int {
	return s.Instances
}

// GetStrategy returns the value of Strategy.
func (s *ContainerDeploy) GetStrategy() OptDeploymentStrategyName {
	return s.Strategy
}

// GetStateful returns the value of Stateful.
func (s *ContainerDeploy) GetStateful() OptContainerDeployStateful {
	return s.Stateful
}

// GetConstraints returns the value of Constraints.
func (s *ContainerDeploy) GetConstraints() OptContainerDeployConstraints {
	return s.Constraints
}

// GetShutdown returns the value of Shutdown.
func (s *ContainerDeploy) GetShutdown() OptContainerDeployShutdown {
	return s.Shutdown
}

// GetStartup returns the value of Startup.
func (s *ContainerDeploy) GetStartup() OptContainerDeployStartup {
	return s.Startup
}

// GetUpdate returns the value of Update.
func (s *ContainerDeploy) GetUpdate() OptContainerDeployUpdate {
	return s.Update
}

// GetRestart returns the value of Restart.
func (s *ContainerDeploy) GetRestart() OptContainerDeployRestart {
	return s.Restart
}

// GetHealthCheck returns the value of HealthCheck.
func (s *ContainerDeploy) GetHealthCheck() OptContainerDeployHealthCheck {
	return s.HealthCheck
}

// GetTelemetry returns the value of Telemetry.
func (s *ContainerDeploy) GetTelemetry() OptContainerDeployTelemetry {
	return s.Telemetry
}

// SetInstances sets the value of Instances.
func (s *ContainerDeploy) SetInstances(val int) {
	s.Instances = val
}

// SetStrategy sets the value of Strategy.
func (s *ContainerDeploy) SetStrategy(val OptDeploymentStrategyName) {
	s.Strategy = val
}

// SetStateful sets the value of Stateful.
func (s *ContainerDeploy) SetStateful(val OptContainerDeployStateful) {
	s.Stateful = val
}

// SetConstraints sets the value of Constraints.
func (s *ContainerDeploy) SetConstraints(val OptContainerDeployConstraints) {
	s.Constraints = val
}

// SetShutdown sets the value of Shutdown.
func (s *ContainerDeploy) SetShutdown(val OptContainerDeployShutdown) {
	s.Shutdown = val
}

// SetStartup sets the value of Startup.
func (s *ContainerDeploy) SetStartup(val OptContainerDeployStartup) {
	s.Startup = val
}

// SetUpdate sets the value of Update.
func (s *ContainerDeploy) SetUpdate(val OptContainerDeployUpdate) {
	s.Update = val
}

// SetRestart sets the value of Restart.
func (s *ContainerDeploy) SetRestart(val OptContainerDeployRestart) {
	s.Restart = val
}

// SetHealthCheck sets the value of HealthCheck.
func (s *ContainerDeploy) SetHealthCheck(val OptContainerDeployHealthCheck) {
	s.HealthCheck = val
}

// SetTelemetry sets the value of Telemetry.
func (s *ContainerDeploy) SetTelemetry(val OptContainerDeployTelemetry) {
	s.Telemetry = val
}

// Settings that give more granular control over deployment targets and conditions.
type ContainerDeployConstraints struct {
	// Constraint settings related to which nodes an instance can be deployed to.
	Node OptContainerDeployConstraintsNode `json:"node"`
	// An array of container identifiers the platform will send the start signal to before sending the
	// start signal to this container.
	Containers []string `json:"containers"`
}

// GetNode returns the value of Node.
func (s *ContainerDeployConstraints) GetNode() OptContainerDeployConstraintsNode {
	return s.Node
}

// GetContainers returns the value of Containers.
func (s *ContainerDeployConstraints) GetContainers() []string {
	return s.Containers
}

// SetNode sets the value of Node.
func (s *ContainerDeployConstraints) SetNode(val OptContainerDeployConstraintsNode) {
	s.Node = val
}

// SetContainers sets the value of Containers.
func (s *ContainerDeployConstraints) SetContainers(val []string) {
	s.Containers = val
}

// Constraint settings related to which nodes an instance can be deployed to.
type ContainerDeployConstraintsNode struct {
	// Lists of server tags that formally declair servers that match the criteria for deployment.
	Tags ContainerDeployConstraintsNodeTags `json:"tags"`
}

// GetTags returns the value of Tags.
func (s *ContainerDeployConstraintsNode) GetTags() ContainerDeployConstraintsNodeTags {
	return s.Tags
}

// SetTags sets the value of Tags.
func (s *ContainerDeployConstraintsNode) SetTags(val ContainerDeployConstraintsNodeTags) {
	s.Tags = val
}

// Lists of server tags that formally declair servers that match the criteria for deployment.
type ContainerDeployConstraintsNodeTags struct {
	// A list of tags where a server matching any tags from the list is qualified as a deployment target.
	Any []string `json:"any"`
	// A list of tags where a server matching all tags from the list is the only scenario where the
	// server is qualified as a deployment target.
	All []string `json:"all"`
}

// GetAny returns the value of Any.
func (s *ContainerDeployConstraintsNodeTags) GetAny() []string {
	return s.Any
}

// GetAll returns the value of All.
func (s *ContainerDeployConstraintsNodeTags) GetAll() []string {
	return s.All
}

// SetAny sets the value of Any.
func (s *ContainerDeployConstraintsNodeTags) SetAny(val []string) {
	s.Any = val
}

// SetAll sets the value of All.
func (s *ContainerDeployConstraintsNodeTags) SetAll(val []string) {
	s.All = val
}

// Configuration for determining the health of a container.
type ContainerDeployHealthCheck struct {
	// The command that will be run to verify the health of the container.
	Command string `json:"command"`
	// The number of times the platform will retry the command before marking the container unhealthy.
	Retries int `json:"retries"`
	// The number of seconds between retries.
	Interval int `json:"interval"`
	// The number of time in seconds before a health check attempt times out.
	Timeout int `json:"timeout"`
	// A boolean where `true` represents the desire for a container to restart if unhealthy.
	Restart bool `json:"restart"`
}

// GetCommand returns the value of Command.
func (s *ContainerDeployHealthCheck) GetCommand() string {
	return s.Command
}

// GetRetries returns the value of Retries.
func (s *ContainerDeployHealthCheck) GetRetries() int {
	return s.Retries
}

// GetInterval returns the value of Interval.
func (s *ContainerDeployHealthCheck) GetInterval() int {
	return s.Interval
}

// GetTimeout returns the value of Timeout.
func (s *ContainerDeployHealthCheck) GetTimeout() int {
	return s.Timeout
}

// GetRestart returns the value of Restart.
func (s *ContainerDeployHealthCheck) GetRestart() bool {
	return s.Restart
}

// SetCommand sets the value of Command.
func (s *ContainerDeployHealthCheck) SetCommand(val string) {
	s.Command = val
}

// SetRetries sets the value of Retries.
func (s *ContainerDeployHealthCheck) SetRetries(val int) {
	s.Retries = val
}

// SetInterval sets the value of Interval.
func (s *ContainerDeployHealthCheck) SetInterval(val int) {
	s.Interval = val
}

// SetTimeout sets the value of Timeout.
func (s *ContainerDeployHealthCheck) SetTimeout(val int) {
	s.Timeout = val
}

// SetRestart sets the value of Restart.
func (s *ContainerDeployHealthCheck) SetRestart(val bool) {
	s.Restart = val
}

// Configurations for container restart events.
type ContainerDeployRestart struct {
	// Policy for what should happen in the event of a container dying.
	Condition ContainerDeployRestartCondition `json:"condition"`
	// Time in seconds the platform will wait before trying to restart the container.
	Delay int `json:"delay"`
	// The amount of times the platform will attempt the restart policies.
	MaxAttempts int `json:"max_attempts"`
}

// GetCondition returns the value of Condition.
func (s *ContainerDeployRestart) GetCondition() ContainerDeployRestartCondition {
	return s.Condition
}

// GetDelay returns the value of Delay.
func (s *ContainerDeployRestart) GetDelay() int {
	return s.Delay
}

// GetMaxAttempts returns the value of MaxAttempts.
func (s *ContainerDeployRestart) GetMaxAttempts() int {
	return s.MaxAttempts
}

// SetCondition sets the value of Condition.
func (s *ContainerDeployRestart) SetCondition(val ContainerDeployRestartCondition) {
	s.Condition = val
}

// SetDelay sets the value of Delay.
func (s *ContainerDeployRestart) SetDelay(val int) {
	s.Delay = val
}

// SetMaxAttempts sets the value of MaxAttempts.
func (s *ContainerDeployRestart) SetMaxAttempts(val int) {
	s.MaxAttempts = val
}

// Policy for what should happen in the event of a container dying.
type ContainerDeployRestartCondition string

const (
	ContainerDeployRestartConditionAlways  ContainerDeployRestartCondition = "always"
	ContainerDeployRestartConditionNever   ContainerDeployRestartCondition = "never"
	ContainerDeployRestartConditionFailure ContainerDeployRestartCondition = "failure"
)

// MarshalText implements encoding.TextMarshaler.
func (s ContainerDeployRestartCondition) MarshalText() ([]byte, error) {
	switch s {
	case ContainerDeployRestartConditionAlways:
		return []byte(s), nil
	case ContainerDeployRestartConditionNever:
		return []byte(s), nil
	case ContainerDeployRestartConditionFailure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerDeployRestartCondition) UnmarshalText(data []byte) error {
	switch ContainerDeployRestartCondition(data) {
	case ContainerDeployRestartConditionAlways:
		*s = ContainerDeployRestartConditionAlways
		return nil
	case ContainerDeployRestartConditionNever:
		*s = ContainerDeployRestartConditionNever
		return nil
	case ContainerDeployRestartConditionFailure:
		*s = ContainerDeployRestartConditionFailure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Configuration for what to do during container shutdown.
type ContainerDeployShutdown struct {
	// The time in seconds the platform will wait for a container to stop gracefully.
	GracefulTimeout int `json:"graceful_timeout"`
	// Process signal sent to the container process.
	Signals []ContainerDeployShutdownSignalsItem `json:"signals"`
}

// GetGracefulTimeout returns the value of GracefulTimeout.
func (s *ContainerDeployShutdown) GetGracefulTimeout() int {
	return s.GracefulTimeout
}

// GetSignals returns the value of Signals.
func (s *ContainerDeployShutdown) GetSignals() []ContainerDeployShutdownSignalsItem {
	return s.Signals
}

// SetGracefulTimeout sets the value of GracefulTimeout.
func (s *ContainerDeployShutdown) SetGracefulTimeout(val int) {
	s.GracefulTimeout = val
}

// SetSignals sets the value of Signals.
func (s *ContainerDeployShutdown) SetSignals(val []ContainerDeployShutdownSignalsItem) {
	s.Signals = val
}

type ContainerDeployShutdownSignalsItem string

const (
	ContainerDeployShutdownSignalsItemSIGTERM ContainerDeployShutdownSignalsItem = "SIGTERM"
	ContainerDeployShutdownSignalsItemSIGINT  ContainerDeployShutdownSignalsItem = "SIGINT"
	ContainerDeployShutdownSignalsItemSIGUSR1 ContainerDeployShutdownSignalsItem = "SIGUSR1"
	ContainerDeployShutdownSignalsItemSIGUSR2 ContainerDeployShutdownSignalsItem = "SIGUSR2"
	ContainerDeployShutdownSignalsItemSIGHUP  ContainerDeployShutdownSignalsItem = "SIGHUP"
	ContainerDeployShutdownSignalsItemSIGQUIT ContainerDeployShutdownSignalsItem = "SIGQUIT"
)

// MarshalText implements encoding.TextMarshaler.
func (s ContainerDeployShutdownSignalsItem) MarshalText() ([]byte, error) {
	switch s {
	case ContainerDeployShutdownSignalsItemSIGTERM:
		return []byte(s), nil
	case ContainerDeployShutdownSignalsItemSIGINT:
		return []byte(s), nil
	case ContainerDeployShutdownSignalsItemSIGUSR1:
		return []byte(s), nil
	case ContainerDeployShutdownSignalsItemSIGUSR2:
		return []byte(s), nil
	case ContainerDeployShutdownSignalsItemSIGHUP:
		return []byte(s), nil
	case ContainerDeployShutdownSignalsItemSIGQUIT:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerDeployShutdownSignalsItem) UnmarshalText(data []byte) error {
	switch ContainerDeployShutdownSignalsItem(data) {
	case ContainerDeployShutdownSignalsItemSIGTERM:
		*s = ContainerDeployShutdownSignalsItemSIGTERM
		return nil
	case ContainerDeployShutdownSignalsItemSIGINT:
		*s = ContainerDeployShutdownSignalsItemSIGINT
		return nil
	case ContainerDeployShutdownSignalsItemSIGUSR1:
		*s = ContainerDeployShutdownSignalsItemSIGUSR1
		return nil
	case ContainerDeployShutdownSignalsItemSIGUSR2:
		*s = ContainerDeployShutdownSignalsItemSIGUSR2
		return nil
	case ContainerDeployShutdownSignalsItemSIGHUP:
		*s = ContainerDeployShutdownSignalsItemSIGHUP
		return nil
	case ContainerDeployShutdownSignalsItemSIGQUIT:
		*s = ContainerDeployShutdownSignalsItemSIGQUIT
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Configurations for container startup.
type ContainerDeployStartup struct {
	// A value in seconds representing how long the platform will wait before sending the start signal to
	// the given container.
	Delay OptInt `json:"delay"`
}

// GetDelay returns the value of Delay.
func (s *ContainerDeployStartup) GetDelay() OptInt {
	return s.Delay
}

// SetDelay sets the value of Delay.
func (s *ContainerDeployStartup) SetDelay(val OptInt) {
	s.Delay = val
}

type ContainerDeployStateful struct {
	Options OptNilContainerDeployStatefulOptions `json:"options"`
}

// GetOptions returns the value of Options.
func (s *ContainerDeployStateful) GetOptions() OptNilContainerDeployStatefulOptions {
	return s.Options
}

// SetOptions sets the value of Options.
func (s *ContainerDeployStateful) SetOptions(val OptNilContainerDeployStatefulOptions) {
	s.Options = val
}

type ContainerDeployStatefulOptions struct {
	UseBaseHostname OptNilBool `json:"use_base_hostname"`
}

// GetUseBaseHostname returns the value of UseBaseHostname.
func (s *ContainerDeployStatefulOptions) GetUseBaseHostname() OptNilBool {
	return s.UseBaseHostname
}

// SetUseBaseHostname sets the value of UseBaseHostname.
func (s *ContainerDeployStatefulOptions) SetUseBaseHostname(val OptNilBool) {
	s.UseBaseHostname = val
}

// Configuration settings for container telemetery reporting.
type ContainerDeployTelemetry struct {
	// The number in seconds for telemetry data to be retained.
	Retention int `json:"retention"`
	// The number in seconds between samples.
	Interval int `json:"interval"`
	// A boolean where true disables all telemetry reporting for this container.
	Disable bool `json:"disable"`
	// An endpoint to report the telemetry data to.
	Webhook OptString `json:"webhook"`
}

// GetRetention returns the value of Retention.
func (s *ContainerDeployTelemetry) GetRetention() int {
	return s.Retention
}

// GetInterval returns the value of Interval.
func (s *ContainerDeployTelemetry) GetInterval() int {
	return s.Interval
}

// GetDisable returns the value of Disable.
func (s *ContainerDeployTelemetry) GetDisable() bool {
	return s.Disable
}

// GetWebhook returns the value of Webhook.
func (s *ContainerDeployTelemetry) GetWebhook() OptString {
	return s.Webhook
}

// SetRetention sets the value of Retention.
func (s *ContainerDeployTelemetry) SetRetention(val int) {
	s.Retention = val
}

// SetInterval sets the value of Interval.
func (s *ContainerDeployTelemetry) SetInterval(val int) {
	s.Interval = val
}

// SetDisable sets the value of Disable.
func (s *ContainerDeployTelemetry) SetDisable(val bool) {
	s.Disable = val
}

// SetWebhook sets the value of Webhook.
func (s *ContainerDeployTelemetry) SetWebhook(val OptString) {
	s.Webhook = val
}

// Configurations for how the container behaves when updating.
type ContainerDeployUpdate struct {
	Parallelism int `json:"parallelism"`
	Delay       int `json:"delay"`
}

// GetParallelism returns the value of Parallelism.
func (s *ContainerDeployUpdate) GetParallelism() int {
	return s.Parallelism
}

// GetDelay returns the value of Delay.
func (s *ContainerDeployUpdate) GetDelay() int {
	return s.Delay
}

// SetParallelism sets the value of Parallelism.
func (s *ContainerDeployUpdate) SetParallelism(val int) {
	s.Parallelism = val
}

// SetDelay sets the value of Delay.
func (s *ContainerDeployUpdate) SetDelay(val int) {
	s.Delay = val
}

// A summary of supplemental environment and network information specific to a container.
// Ref: #/components/schemas/ContainerEnvironmentSummary
type ContainerEnvironmentSummary struct {
	ID ID `json:"id"`
	// The cluster this environment is associated with.
	Cluster string `json:"cluster"`
	// The private network subnet ID for this container and its instances.
	ContainerSubnet string           `json:"container_subnet"`
	Ipv6            IPNet            `json:"ipv6"`
	Legacy          NilLegacyNetwork `json:"legacy"`
}

// GetID returns the value of ID.
func (s *ContainerEnvironmentSummary) GetID() ID {
	return s.ID
}

// GetCluster returns the value of Cluster.
func (s *ContainerEnvironmentSummary) GetCluster() string {
	return s.Cluster
}

// GetContainerSubnet returns the value of ContainerSubnet.
func (s *ContainerEnvironmentSummary) GetContainerSubnet() string {
	return s.ContainerSubnet
}

// GetIpv6 returns the value of Ipv6.
func (s *ContainerEnvironmentSummary) GetIpv6() IPNet {
	return s.Ipv6
}

// GetLegacy returns the value of Legacy.
func (s *ContainerEnvironmentSummary) GetLegacy() NilLegacyNetwork {
	return s.Legacy
}

// SetID sets the value of ID.
func (s *ContainerEnvironmentSummary) SetID(val ID) {
	s.ID = val
}

// SetCluster sets the value of Cluster.
func (s *ContainerEnvironmentSummary) SetCluster(val string) {
	s.Cluster = val
}

// SetContainerSubnet sets the value of ContainerSubnet.
func (s *ContainerEnvironmentSummary) SetContainerSubnet(val string) {
	s.ContainerSubnet = val
}

// SetIpv6 sets the value of Ipv6.
func (s *ContainerEnvironmentSummary) SetIpv6(val IPNet) {
	s.Ipv6 = val
}

// SetLegacy sets the value of Legacy.
func (s *ContainerEnvironmentSummary) SetLegacy(val NilLegacyNetwork) {
	s.Legacy = val
}

// A collection of timestamps for each event in the container's lifetime.
type ContainerEvents struct {
	// The timestamp of when the container was created.
	Created DateTime `json:"created"`
	// The timestamp of when the container was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the container was deleted.
	Deleted DateTime `json:"deleted"`
	// The timestamp of when the container was started.
	Started DateTime `json:"started"`
}

// GetCreated returns the value of Created.
func (s *ContainerEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ContainerEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *ContainerEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetStarted returns the value of Started.
func (s *ContainerEvents) GetStarted() DateTime {
	return s.Started
}

// SetCreated sets the value of Created.
func (s *ContainerEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ContainerEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *ContainerEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetStarted sets the value of Started.
func (s *ContainerEvents) SetStarted(val DateTime) {
	s.Started = val
}

// The Id of the image and information on if it is a service.
// Ref: #/components/schemas/ContainerImageSummary
type ContainerImageSummary struct {
	ID ID `json:"id"`
	// If this image is a service container this will say either `discovery` | `loadbalancer` | `vpn`.
	Service NilContainerImageSummaryService `json:"service"`
}

// GetID returns the value of ID.
func (s *ContainerImageSummary) GetID() ID {
	return s.ID
}

// GetService returns the value of Service.
func (s *ContainerImageSummary) GetService() NilContainerImageSummaryService {
	return s.Service
}

// SetID sets the value of ID.
func (s *ContainerImageSummary) SetID(val ID) {
	s.ID = val
}

// SetService sets the value of Service.
func (s *ContainerImageSummary) SetService(val NilContainerImageSummaryService) {
	s.Service = val
}

// If this image is a service container this will say either `discovery` | `loadbalancer` | `vpn`.
type ContainerImageSummaryService string

const (
	ContainerImageSummaryServiceDiscovery    ContainerImageSummaryService = "discovery"
	ContainerImageSummaryServiceLoadbalancer ContainerImageSummaryService = "loadbalancer"
	ContainerImageSummaryServiceVpn          ContainerImageSummaryService = "vpn"
)

// MarshalText implements encoding.TextMarshaler.
func (s ContainerImageSummaryService) MarshalText() ([]byte, error) {
	switch s {
	case ContainerImageSummaryServiceDiscovery:
		return []byte(s), nil
	case ContainerImageSummaryServiceLoadbalancer:
		return []byte(s), nil
	case ContainerImageSummaryServiceVpn:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerImageSummaryService) UnmarshalText(data []byte) error {
	switch ContainerImageSummaryService(data) {
	case ContainerImageSummaryServiceDiscovery:
		*s = ContainerImageSummaryServiceDiscovery
		return nil
	case ContainerImageSummaryServiceLoadbalancer:
		*s = ContainerImageSummaryServiceLoadbalancer
		return nil
	case ContainerImageSummaryServiceVpn:
		*s = ContainerImageSummaryServiceVpn
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Configuration settings for integrations with a given container.
// Ref: #/components/schemas/ContainerIntegrations
type ContainerIntegrations struct {
	// Webhooks that can be set for specific event reporting and advanced container configurations.
	Webhooks OptContainerIntegrationsWebhooks `json:"webhooks"`
	// Inject remotely hosted files into container instances at runtime.
	Files []ContainerIntegrationsFilesItem `json:"files"`
	// Configuration settings to embed a TLS certificate in the container.
	LetsEncrypt OptContainerIntegrationsLetsEncrypt `json:"lets_encrypt"`
	// Automated backups configuration for the given container.
	Backups OptContainerIntegrationsBackups `json:"backups"`
}

// GetWebhooks returns the value of Webhooks.
func (s *ContainerIntegrations) GetWebhooks() OptContainerIntegrationsWebhooks {
	return s.Webhooks
}

// GetFiles returns the value of Files.
func (s *ContainerIntegrations) GetFiles() []ContainerIntegrationsFilesItem {
	return s.Files
}

// GetLetsEncrypt returns the value of LetsEncrypt.
func (s *ContainerIntegrations) GetLetsEncrypt() OptContainerIntegrationsLetsEncrypt {
	return s.LetsEncrypt
}

// GetBackups returns the value of Backups.
func (s *ContainerIntegrations) GetBackups() OptContainerIntegrationsBackups {
	return s.Backups
}

// SetWebhooks sets the value of Webhooks.
func (s *ContainerIntegrations) SetWebhooks(val OptContainerIntegrationsWebhooks) {
	s.Webhooks = val
}

// SetFiles sets the value of Files.
func (s *ContainerIntegrations) SetFiles(val []ContainerIntegrationsFilesItem) {
	s.Files = val
}

// SetLetsEncrypt sets the value of LetsEncrypt.
func (s *ContainerIntegrations) SetLetsEncrypt(val OptContainerIntegrationsLetsEncrypt) {
	s.LetsEncrypt = val
}

// SetBackups sets the value of Backups.
func (s *ContainerIntegrations) SetBackups(val OptContainerIntegrationsBackups) {
	s.Backups = val
}

// Automated backups configuration for the given container.
type ContainerIntegrationsBackups struct {
	// The storage provider to use for backups.
	Destination ContainerIntegrationsBackupsDestination `json:"destination"`
	// Configuration settings for each backup.
	Backup ContainerIntegrationsBackupsBackup `json:"backup"`
	// Configuration settings for restoring from a backup.
	Restore ContainerIntegrationsBackupsRestore `json:"restore"`
}

// GetDestination returns the value of Destination.
func (s *ContainerIntegrationsBackups) GetDestination() ContainerIntegrationsBackupsDestination {
	return s.Destination
}

// GetBackup returns the value of Backup.
func (s *ContainerIntegrationsBackups) GetBackup() ContainerIntegrationsBackupsBackup {
	return s.Backup
}

// GetRestore returns the value of Restore.
func (s *ContainerIntegrationsBackups) GetRestore() ContainerIntegrationsBackupsRestore {
	return s.Restore
}

// SetDestination sets the value of Destination.
func (s *ContainerIntegrationsBackups) SetDestination(val ContainerIntegrationsBackupsDestination) {
	s.Destination = val
}

// SetBackup sets the value of Backup.
func (s *ContainerIntegrationsBackups) SetBackup(val ContainerIntegrationsBackupsBackup) {
	s.Backup = val
}

// SetRestore sets the value of Restore.
func (s *ContainerIntegrationsBackups) SetRestore(val ContainerIntegrationsBackupsRestore) {
	s.Restore = val
}

// Configuration settings for each backup.
type ContainerIntegrationsBackupsBackup struct {
	// The command to run for the backup.
	Command string `json:"command"`
	// The time in seconds for the backup to attempt to run before timing out.
	Timeout OptNilInt `json:"timeout"`
	// A cron string that configures how often the backup will run.
	CronString OptString `json:"cron_string"`
}

// GetCommand returns the value of Command.
func (s *ContainerIntegrationsBackupsBackup) GetCommand() string {
	return s.Command
}

// GetTimeout returns the value of Timeout.
func (s *ContainerIntegrationsBackupsBackup) GetTimeout() OptNilInt {
	return s.Timeout
}

// GetCronString returns the value of CronString.
func (s *ContainerIntegrationsBackupsBackup) GetCronString() OptString {
	return s.CronString
}

// SetCommand sets the value of Command.
func (s *ContainerIntegrationsBackupsBackup) SetCommand(val string) {
	s.Command = val
}

// SetTimeout sets the value of Timeout.
func (s *ContainerIntegrationsBackupsBackup) SetTimeout(val OptNilInt) {
	s.Timeout = val
}

// SetCronString sets the value of CronString.
func (s *ContainerIntegrationsBackupsBackup) SetCronString(val OptString) {
	s.CronString = val
}

// The storage provider to use for backups.
type ContainerIntegrationsBackupsDestination string

const (
	ContainerIntegrationsBackupsDestinationBackblazeB2 ContainerIntegrationsBackupsDestination = "backblaze-b2"
)

// MarshalText implements encoding.TextMarshaler.
func (s ContainerIntegrationsBackupsDestination) MarshalText() ([]byte, error) {
	switch s {
	case ContainerIntegrationsBackupsDestinationBackblazeB2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerIntegrationsBackupsDestination) UnmarshalText(data []byte) error {
	switch ContainerIntegrationsBackupsDestination(data) {
	case ContainerIntegrationsBackupsDestinationBackblazeB2:
		*s = ContainerIntegrationsBackupsDestinationBackblazeB2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Configuration settings for restoring from a backup.
type ContainerIntegrationsBackupsRestore struct {
	// The command to run for restoring from a backup.
	Command string `json:"command"`
	// The time in seconds for the restore to appempt to complete before timing out.
	Timeout OptNilInt `json:"timeout"`
}

// GetCommand returns the value of Command.
func (s *ContainerIntegrationsBackupsRestore) GetCommand() string {
	return s.Command
}

// GetTimeout returns the value of Timeout.
func (s *ContainerIntegrationsBackupsRestore) GetTimeout() OptNilInt {
	return s.Timeout
}

// SetCommand sets the value of Command.
func (s *ContainerIntegrationsBackupsRestore) SetCommand(val string) {
	s.Command = val
}

// SetTimeout sets the value of Timeout.
func (s *ContainerIntegrationsBackupsRestore) SetTimeout(val OptNilInt) {
	s.Timeout = val
}

// These objects are sources and destinations for the given files.
type ContainerIntegrationsFilesItem struct {
	// The http endpoint that is hosting the files to be used.
	Source string `json:"source"`
	// The path in the container for these files to be injected.
	Destination string `json:"destination"`
}

// GetSource returns the value of Source.
func (s *ContainerIntegrationsFilesItem) GetSource() string {
	return s.Source
}

// GetDestination returns the value of Destination.
func (s *ContainerIntegrationsFilesItem) GetDestination() string {
	return s.Destination
}

// SetSource sets the value of Source.
func (s *ContainerIntegrationsFilesItem) SetSource(val string) {
	s.Source = val
}

// SetDestination sets the value of Destination.
func (s *ContainerIntegrationsFilesItem) SetDestination(val string) {
	s.Destination = val
}

// Configuration settings to embed a TLS certificate in the container.
type ContainerIntegrationsLetsEncrypt struct {
	// A boolean where true represents the desire for a container to have its corresponding TLS
	// certificate(s) injected into the configured path(s).
	Enable bool `json:"enable"`
	// Path where the `certificate.cert` will be saved.
	CertificatePath OptString `json:"certificate_path"`
	// Path where the `certificate.chain` will be saved.
	ChainPath OptString `json:"chain_path"`
	// Path where the `certificate.key` will be saved.
	KeyPath OptString `json:"key_path"`
	// Path where the `certificate.bundle` will be saved.
	BundlePath OptString `json:"bundle_path"`
	// File path where any remaining certificate files will be stored.
	AdditionalCertsPath OptString `json:"additional_certs_path"`
}

// GetEnable returns the value of Enable.
func (s *ContainerIntegrationsLetsEncrypt) GetEnable() bool {
	return s.Enable
}

// GetCertificatePath returns the value of CertificatePath.
func (s *ContainerIntegrationsLetsEncrypt) GetCertificatePath() OptString {
	return s.CertificatePath
}

// GetChainPath returns the value of ChainPath.
func (s *ContainerIntegrationsLetsEncrypt) GetChainPath() OptString {
	return s.ChainPath
}

// GetKeyPath returns the value of KeyPath.
func (s *ContainerIntegrationsLetsEncrypt) GetKeyPath() OptString {
	return s.KeyPath
}

// GetBundlePath returns the value of BundlePath.
func (s *ContainerIntegrationsLetsEncrypt) GetBundlePath() OptString {
	return s.BundlePath
}

// GetAdditionalCertsPath returns the value of AdditionalCertsPath.
func (s *ContainerIntegrationsLetsEncrypt) GetAdditionalCertsPath() OptString {
	return s.AdditionalCertsPath
}

// SetEnable sets the value of Enable.
func (s *ContainerIntegrationsLetsEncrypt) SetEnable(val bool) {
	s.Enable = val
}

// SetCertificatePath sets the value of CertificatePath.
func (s *ContainerIntegrationsLetsEncrypt) SetCertificatePath(val OptString) {
	s.CertificatePath = val
}

// SetChainPath sets the value of ChainPath.
func (s *ContainerIntegrationsLetsEncrypt) SetChainPath(val OptString) {
	s.ChainPath = val
}

// SetKeyPath sets the value of KeyPath.
func (s *ContainerIntegrationsLetsEncrypt) SetKeyPath(val OptString) {
	s.KeyPath = val
}

// SetBundlePath sets the value of BundlePath.
func (s *ContainerIntegrationsLetsEncrypt) SetBundlePath(val OptString) {
	s.BundlePath = val
}

// SetAdditionalCertsPath sets the value of AdditionalCertsPath.
func (s *ContainerIntegrationsLetsEncrypt) SetAdditionalCertsPath(val OptString) {
	s.AdditionalCertsPath = val
}

// Webhooks that can be set for specific event reporting and advanced container configurations.
type ContainerIntegrationsWebhooks struct {
	// Container events that can be configured to report to a webhook.
	Events OptContainerIntegrationsWebhooksEvents `json:"events"`
	// An endpoint that the platform will react out to with a get request.  This endpoint serves a
	// partial container config which can modify `runtime`, `resources`, and `integrations`
	// configurations.
	Config OptString `json:"config"`
}

// GetEvents returns the value of Events.
func (s *ContainerIntegrationsWebhooks) GetEvents() OptContainerIntegrationsWebhooksEvents {
	return s.Events
}

// GetConfig returns the value of Config.
func (s *ContainerIntegrationsWebhooks) GetConfig() OptString {
	return s.Config
}

// SetEvents sets the value of Events.
func (s *ContainerIntegrationsWebhooks) SetEvents(val OptContainerIntegrationsWebhooksEvents) {
	s.Events = val
}

// SetConfig sets the value of Config.
func (s *ContainerIntegrationsWebhooks) SetConfig(val OptString) {
	s.Config = val
}

// Container events that can be configured to report to a webhook.
type ContainerIntegrationsWebhooksEvents struct {
	// A webhook to hit when a container deploy event happens.
	Deploy OptString `json:"deploy"`
	// A webhook to hit when a container start event happens.
	Start OptString `json:"start"`
	// A webhook to hit when a container stop event happens.
	Stop OptString `json:"stop"`
}

// GetDeploy returns the value of Deploy.
func (s *ContainerIntegrationsWebhooksEvents) GetDeploy() OptString {
	return s.Deploy
}

// GetStart returns the value of Start.
func (s *ContainerIntegrationsWebhooksEvents) GetStart() OptString {
	return s.Start
}

// GetStop returns the value of Stop.
func (s *ContainerIntegrationsWebhooksEvents) GetStop() OptString {
	return s.Stop
}

// SetDeploy sets the value of Deploy.
func (s *ContainerIntegrationsWebhooksEvents) SetDeploy(val OptString) {
	s.Deploy = val
}

// SetStart sets the value of Start.
func (s *ContainerIntegrationsWebhooksEvents) SetStart(val OptString) {
	s.Start = val
}

// SetStop sets the value of Stop.
func (s *ContainerIntegrationsWebhooksEvents) SetStop(val OptString) {
	s.Stop = val
}

// Network configuration for a container.
// Ref: #/components/schemas/ContainerNetwork
type ContainerNetwork struct {
	// The public network settings for the given container.
	Public ContainerNetworkPublic `json:"public"`
	// The hostname for the given container.
	Hostname string `json:"hostname"`
	// An array of port mappings for the container.
	Ports []string `json:"ports"`
}

// GetPublic returns the value of Public.
func (s *ContainerNetwork) GetPublic() ContainerNetworkPublic {
	return s.Public
}

// GetHostname returns the value of Hostname.
func (s *ContainerNetwork) GetHostname() string {
	return s.Hostname
}

// GetPorts returns the value of Ports.
func (s *ContainerNetwork) GetPorts() []string {
	return s.Ports
}

// SetPublic sets the value of Public.
func (s *ContainerNetwork) SetPublic(val ContainerNetworkPublic) {
	s.Public = val
}

// SetHostname sets the value of Hostname.
func (s *ContainerNetwork) SetHostname(val string) {
	s.Hostname = val
}

// SetPorts sets the value of Ports.
func (s *ContainerNetwork) SetPorts(val []string) {
	s.Ports = val
}

// The public network settings for the given container.
type ContainerNetworkPublic string

const (
	ContainerNetworkPublicEnable     ContainerNetworkPublic = "enable"
	ContainerNetworkPublicEgressOnly ContainerNetworkPublic = "egress-only"
	ContainerNetworkPublicDisable    ContainerNetworkPublic = "disable"
)

// MarshalText implements encoding.TextMarshaler.
func (s ContainerNetworkPublic) MarshalText() ([]byte, error) {
	switch s {
	case ContainerNetworkPublicEnable:
		return []byte(s), nil
	case ContainerNetworkPublicEgressOnly:
		return []byte(s), nil
	case ContainerNetworkPublicDisable:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerNetworkPublic) UnmarshalText(data []byte) error {
	switch ContainerNetworkPublic(data) {
	case ContainerNetworkPublicEnable:
		*s = ContainerNetworkPublicEnable
		return nil
	case ContainerNetworkPublicEgressOnly:
		*s = ContainerNetworkPublicEgressOnly
		return nil
	case ContainerNetworkPublicDisable:
		*s = ContainerNetworkPublicDisable
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Configuration settings for the resource allocations and limits of a given container.
// Ref: #/components/schemas/ContainerResources
type ContainerResources struct {
	// Configurations settings related to CPU usage.
	CPU ContainerResourcesCPU `json:"cpu"`
	// Configuration settings for limits and reserves of RAM resources for the given container.
	RAM ContainerResourcesRAM `json:"ram"`
}

// GetCPU returns the value of CPU.
func (s *ContainerResources) GetCPU() ContainerResourcesCPU {
	return s.CPU
}

// GetRAM returns the value of RAM.
func (s *ContainerResources) GetRAM() ContainerResourcesRAM {
	return s.RAM
}

// SetCPU sets the value of CPU.
func (s *ContainerResources) SetCPU(val ContainerResourcesCPU) {
	s.CPU = val
}

// SetRAM sets the value of RAM.
func (s *ContainerResources) SetRAM(val ContainerResourcesRAM) {
	s.RAM = val
}

// Configurations settings related to CPU usage.
type ContainerResourcesCPU struct {
	// A share represents 1/10th of the available compute time on a single thread.
	Shares OptContainerResourcesCPUShares `json:"shares"`
	// An array of CPU cores this container will be pinned to.
	Cpus []int `json:"cpus"`
}

// GetShares returns the value of Shares.
func (s *ContainerResourcesCPU) GetShares() OptContainerResourcesCPUShares {
	return s.Shares
}

// GetCpus returns the value of Cpus.
func (s *ContainerResourcesCPU) GetCpus() []int {
	return s.Cpus
}

// SetShares sets the value of Shares.
func (s *ContainerResourcesCPU) SetShares(val OptContainerResourcesCPUShares) {
	s.Shares = val
}

// SetCpus sets the value of Cpus.
func (s *ContainerResourcesCPU) SetCpus(val []int) {
	s.Cpus = val
}

// A share represents 1/10th of the available compute time on a single thread.
type ContainerResourcesCPUShares struct {
	// The limit (maximum) amount of shares each instance of a container can use.
	Limit int `json:"limit"`
	// The reserve (allocation) number of shares for each instance of a given container.
	Reserve int `json:"reserve"`
}

// GetLimit returns the value of Limit.
func (s *ContainerResourcesCPUShares) GetLimit() int {
	return s.Limit
}

// GetReserve returns the value of Reserve.
func (s *ContainerResourcesCPUShares) GetReserve() int {
	return s.Reserve
}

// SetLimit sets the value of Limit.
func (s *ContainerResourcesCPUShares) SetLimit(val int) {
	s.Limit = val
}

// SetReserve sets the value of Reserve.
func (s *ContainerResourcesCPUShares) SetReserve(val int) {
	s.Reserve = val
}

// Configuration settings for limits and reserves of RAM resources for the given container.
type ContainerResourcesRAM struct {
	// The limit (maximum) amount of RAM each instance of the given container can use.
	Limit OptString `json:"limit"`
	// The reserve (allocation) of RAM given to each instance of the container.
	Reserve OptString `json:"reserve"`
}

// GetLimit returns the value of Limit.
func (s *ContainerResourcesRAM) GetLimit() OptString {
	return s.Limit
}

// GetReserve returns the value of Reserve.
func (s *ContainerResourcesRAM) GetReserve() OptString {
	return s.Reserve
}

// SetLimit sets the value of Limit.
func (s *ContainerResourcesRAM) SetLimit(val OptString) {
	s.Limit = val
}

// SetReserve sets the value of Reserve.
func (s *ContainerResourcesRAM) SetReserve(val OptString) {
	s.Reserve = val
}

// The role of a given container if it has one.
type ContainerRole string

const (
	ContainerRoleOrchestrator ContainerRole = "orchestrator"
)

// MarshalText implements encoding.TextMarshaler.
func (s ContainerRole) MarshalText() ([]byte, error) {
	switch s {
	case ContainerRoleOrchestrator:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerRole) UnmarshalText(data []byte) error {
	switch ContainerRole(data) {
	case ContainerRoleOrchestrator:
		*s = ContainerRoleOrchestrator
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Runtime configurations for a given container.
// Ref: #/components/schemas/ContainerRuntime
type ContainerRuntime struct {
	// A command that will be run in place of the images defined startup command.
	Command OptContainerRuntimeCommand `json:"command"`
	// Namespaces the given container will have access to.
	Namespaces []ContainerRuntimeNamespacesItem `json:"namespaces"`
	// A record of environment variables for the given container.
	EnvironmentVars OptContainerRuntimeEnvironmentVars `json:"environment_vars"`
	// Selecting this option will give this container full permissions on the server. This is not
	// recommended and increases the likelihood of your server being compromised.
	Privileged bool `json:"privileged"`
	// A list of linux kernel capabilites for the given container.
	Capabilities []ContainerRuntimeCapabilitiesItem `json:"capabilities"`
	// Configure the working directory for the given container.
	Workdir OptString `json:"workdir"`
	// A record of sysctl fields and values for a given container.
	Sysctl OptContainerRuntimeSysctl `json:"sysctl"`
	// A record of rlimits and their values.
	Rlimits OptContainerRuntimeRlimits `json:"rlimits"`
	Seccomp NilContainerRuntimeSeccomp `json:"seccomp"`
	Rootfs  OptContainerRuntimeRootfs  `json:"rootfs"`
}

// GetCommand returns the value of Command.
func (s *ContainerRuntime) GetCommand() OptContainerRuntimeCommand {
	return s.Command
}

// GetNamespaces returns the value of Namespaces.
func (s *ContainerRuntime) GetNamespaces() []ContainerRuntimeNamespacesItem {
	return s.Namespaces
}

// GetEnvironmentVars returns the value of EnvironmentVars.
func (s *ContainerRuntime) GetEnvironmentVars() OptContainerRuntimeEnvironmentVars {
	return s.EnvironmentVars
}

// GetPrivileged returns the value of Privileged.
func (s *ContainerRuntime) GetPrivileged() bool {
	return s.Privileged
}

// GetCapabilities returns the value of Capabilities.
func (s *ContainerRuntime) GetCapabilities() []ContainerRuntimeCapabilitiesItem {
	return s.Capabilities
}

// GetWorkdir returns the value of Workdir.
func (s *ContainerRuntime) GetWorkdir() OptString {
	return s.Workdir
}

// GetSysctl returns the value of Sysctl.
func (s *ContainerRuntime) GetSysctl() OptContainerRuntimeSysctl {
	return s.Sysctl
}

// GetRlimits returns the value of Rlimits.
func (s *ContainerRuntime) GetRlimits() OptContainerRuntimeRlimits {
	return s.Rlimits
}

// GetSeccomp returns the value of Seccomp.
func (s *ContainerRuntime) GetSeccomp() NilContainerRuntimeSeccomp {
	return s.Seccomp
}

// GetRootfs returns the value of Rootfs.
func (s *ContainerRuntime) GetRootfs() OptContainerRuntimeRootfs {
	return s.Rootfs
}

// SetCommand sets the value of Command.
func (s *ContainerRuntime) SetCommand(val OptContainerRuntimeCommand) {
	s.Command = val
}

// SetNamespaces sets the value of Namespaces.
func (s *ContainerRuntime) SetNamespaces(val []ContainerRuntimeNamespacesItem) {
	s.Namespaces = val
}

// SetEnvironmentVars sets the value of EnvironmentVars.
func (s *ContainerRuntime) SetEnvironmentVars(val OptContainerRuntimeEnvironmentVars) {
	s.EnvironmentVars = val
}

// SetPrivileged sets the value of Privileged.
func (s *ContainerRuntime) SetPrivileged(val bool) {
	s.Privileged = val
}

// SetCapabilities sets the value of Capabilities.
func (s *ContainerRuntime) SetCapabilities(val []ContainerRuntimeCapabilitiesItem) {
	s.Capabilities = val
}

// SetWorkdir sets the value of Workdir.
func (s *ContainerRuntime) SetWorkdir(val OptString) {
	s.Workdir = val
}

// SetSysctl sets the value of Sysctl.
func (s *ContainerRuntime) SetSysctl(val OptContainerRuntimeSysctl) {
	s.Sysctl = val
}

// SetRlimits sets the value of Rlimits.
func (s *ContainerRuntime) SetRlimits(val OptContainerRuntimeRlimits) {
	s.Rlimits = val
}

// SetSeccomp sets the value of Seccomp.
func (s *ContainerRuntime) SetSeccomp(val NilContainerRuntimeSeccomp) {
	s.Seccomp = val
}

// SetRootfs sets the value of Rootfs.
func (s *ContainerRuntime) SetRootfs(val OptContainerRuntimeRootfs) {
	s.Rootfs = val
}

type ContainerRuntimeCapabilitiesItem string

const (
	ContainerRuntimeCapabilitiesItemCAPCHOWN          ContainerRuntimeCapabilitiesItem = "CAP_CHOWN"
	ContainerRuntimeCapabilitiesItemCAPFSETID         ContainerRuntimeCapabilitiesItem = "CAP_FSETID"
	ContainerRuntimeCapabilitiesItemCAPDACOVERRIDE    ContainerRuntimeCapabilitiesItem = "CAP_DAC_OVERRIDE"
	ContainerRuntimeCapabilitiesItemCAPFOWNER         ContainerRuntimeCapabilitiesItem = "CAP_FOWNER"
	ContainerRuntimeCapabilitiesItemCAPSETFCAP        ContainerRuntimeCapabilitiesItem = "CAP_SETFCAP"
	ContainerRuntimeCapabilitiesItemCAPSETGID         ContainerRuntimeCapabilitiesItem = "CAP_SETGID"
	ContainerRuntimeCapabilitiesItemCAPSETUID         ContainerRuntimeCapabilitiesItem = "CAP_SETUID"
	ContainerRuntimeCapabilitiesItemCAPKILL           ContainerRuntimeCapabilitiesItem = "CAP_KILL"
	ContainerRuntimeCapabilitiesItemCAPMKNOD          ContainerRuntimeCapabilitiesItem = "CAP_MKNOD"
	ContainerRuntimeCapabilitiesItemCAPNETBINDSERVICE ContainerRuntimeCapabilitiesItem = "CAP_NET_BIND_SERVICE"
	ContainerRuntimeCapabilitiesItemCAPNETRAW         ContainerRuntimeCapabilitiesItem = "CAP_NET_RAW"
	ContainerRuntimeCapabilitiesItemCAPAUDITWRITE     ContainerRuntimeCapabilitiesItem = "CAP_AUDIT_WRITE"
	ContainerRuntimeCapabilitiesItemCAPSYSCHROOT      ContainerRuntimeCapabilitiesItem = "CAP_SYS_CHROOT"
	ContainerRuntimeCapabilitiesItemCAPSETPCAP        ContainerRuntimeCapabilitiesItem = "CAP_SETPCAP"
	ContainerRuntimeCapabilitiesItemCAPDACREADSEARCH  ContainerRuntimeCapabilitiesItem = "CAP_DAC_READ_SEARCH"
	ContainerRuntimeCapabilitiesItemCAPNETADMIN       ContainerRuntimeCapabilitiesItem = "CAP_NET_ADMIN"
	ContainerRuntimeCapabilitiesItemCAPNETBROADCAST   ContainerRuntimeCapabilitiesItem = "CAP_NET_BROADCAST"
	ContainerRuntimeCapabilitiesItemCAPSYSADMIN       ContainerRuntimeCapabilitiesItem = "CAP_SYS_ADMIN"
	ContainerRuntimeCapabilitiesItemCAPSYSMODULE      ContainerRuntimeCapabilitiesItem = "CAP_SYS_MODULE"
	ContainerRuntimeCapabilitiesItemCAPSYSNICE        ContainerRuntimeCapabilitiesItem = "CAP_SYS_NICE"
	ContainerRuntimeCapabilitiesItemCAPSYSPACCT       ContainerRuntimeCapabilitiesItem = "CAP_SYS_PACCT"
	ContainerRuntimeCapabilitiesItemCAPSYSPTRACE      ContainerRuntimeCapabilitiesItem = "CAP_SYS_PTRACE"
	ContainerRuntimeCapabilitiesItemCAPSYSRAWIO       ContainerRuntimeCapabilitiesItem = "CAP_SYS_RAWIO"
	ContainerRuntimeCapabilitiesItemCAPSYSRESOURCE    ContainerRuntimeCapabilitiesItem = "CAP_SYS_RESOURCE"
	ContainerRuntimeCapabilitiesItemCAPSYSBOOT        ContainerRuntimeCapabilitiesItem = "CAP_SYS_BOOT"
	ContainerRuntimeCapabilitiesItemCAPSYSTIME        ContainerRuntimeCapabilitiesItem = "CAP_SYS_TIME"
	ContainerRuntimeCapabilitiesItemCAPSYSTTYCONFIG   ContainerRuntimeCapabilitiesItem = "CAP_SYS_TTY_CONFIG"
	ContainerRuntimeCapabilitiesItemCAPSYSLOG         ContainerRuntimeCapabilitiesItem = "CAP_SYSLOG"
	ContainerRuntimeCapabilitiesItemCAPAUDITCONTROL   ContainerRuntimeCapabilitiesItem = "CAP_AUDIT_CONTROL"
	ContainerRuntimeCapabilitiesItemCAPAUDITREAD      ContainerRuntimeCapabilitiesItem = "CAP_AUDIT_READ"
	ContainerRuntimeCapabilitiesItemCAPIPCLOCK        ContainerRuntimeCapabilitiesItem = "CAP_IPC_LOCK"
	ContainerRuntimeCapabilitiesItemCAPIPCOWNER       ContainerRuntimeCapabilitiesItem = "CAP_IPC_OWNER"
	ContainerRuntimeCapabilitiesItemCAPLINUXIMMUTABLE ContainerRuntimeCapabilitiesItem = "CAP_LINUX_IMMUTABLE"
	ContainerRuntimeCapabilitiesItemCAPMACADMIN       ContainerRuntimeCapabilitiesItem = "CAP_MAC_ADMIN"
	ContainerRuntimeCapabilitiesItemCAPMACOVERRIDE    ContainerRuntimeCapabilitiesItem = "CAP_MAC_OVERRIDE"
	ContainerRuntimeCapabilitiesItemCAPBLOCKSUSPEND   ContainerRuntimeCapabilitiesItem = "CAP_BLOCK_SUSPEND"
	ContainerRuntimeCapabilitiesItemCAPLEASE          ContainerRuntimeCapabilitiesItem = "CAP_LEASE"
	ContainerRuntimeCapabilitiesItemCAPWAKEALARM      ContainerRuntimeCapabilitiesItem = "CAP_WAKE_ALARM"
)

// MarshalText implements encoding.TextMarshaler.
func (s ContainerRuntimeCapabilitiesItem) MarshalText() ([]byte, error) {
	switch s {
	case ContainerRuntimeCapabilitiesItemCAPCHOWN:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPFSETID:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPDACOVERRIDE:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPFOWNER:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSETFCAP:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSETGID:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSETUID:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPKILL:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPMKNOD:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPNETBINDSERVICE:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPNETRAW:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPAUDITWRITE:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSCHROOT:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSETPCAP:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPDACREADSEARCH:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPNETADMIN:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPNETBROADCAST:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSADMIN:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSMODULE:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSNICE:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSPACCT:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSPTRACE:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSRAWIO:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSRESOURCE:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSBOOT:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSTIME:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSTTYCONFIG:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSLOG:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPAUDITCONTROL:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPAUDITREAD:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPIPCLOCK:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPIPCOWNER:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPLINUXIMMUTABLE:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPMACADMIN:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPMACOVERRIDE:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPBLOCKSUSPEND:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPLEASE:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPWAKEALARM:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerRuntimeCapabilitiesItem) UnmarshalText(data []byte) error {
	switch ContainerRuntimeCapabilitiesItem(data) {
	case ContainerRuntimeCapabilitiesItemCAPCHOWN:
		*s = ContainerRuntimeCapabilitiesItemCAPCHOWN
		return nil
	case ContainerRuntimeCapabilitiesItemCAPFSETID:
		*s = ContainerRuntimeCapabilitiesItemCAPFSETID
		return nil
	case ContainerRuntimeCapabilitiesItemCAPDACOVERRIDE:
		*s = ContainerRuntimeCapabilitiesItemCAPDACOVERRIDE
		return nil
	case ContainerRuntimeCapabilitiesItemCAPFOWNER:
		*s = ContainerRuntimeCapabilitiesItemCAPFOWNER
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSETFCAP:
		*s = ContainerRuntimeCapabilitiesItemCAPSETFCAP
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSETGID:
		*s = ContainerRuntimeCapabilitiesItemCAPSETGID
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSETUID:
		*s = ContainerRuntimeCapabilitiesItemCAPSETUID
		return nil
	case ContainerRuntimeCapabilitiesItemCAPKILL:
		*s = ContainerRuntimeCapabilitiesItemCAPKILL
		return nil
	case ContainerRuntimeCapabilitiesItemCAPMKNOD:
		*s = ContainerRuntimeCapabilitiesItemCAPMKNOD
		return nil
	case ContainerRuntimeCapabilitiesItemCAPNETBINDSERVICE:
		*s = ContainerRuntimeCapabilitiesItemCAPNETBINDSERVICE
		return nil
	case ContainerRuntimeCapabilitiesItemCAPNETRAW:
		*s = ContainerRuntimeCapabilitiesItemCAPNETRAW
		return nil
	case ContainerRuntimeCapabilitiesItemCAPAUDITWRITE:
		*s = ContainerRuntimeCapabilitiesItemCAPAUDITWRITE
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSCHROOT:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSCHROOT
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSETPCAP:
		*s = ContainerRuntimeCapabilitiesItemCAPSETPCAP
		return nil
	case ContainerRuntimeCapabilitiesItemCAPDACREADSEARCH:
		*s = ContainerRuntimeCapabilitiesItemCAPDACREADSEARCH
		return nil
	case ContainerRuntimeCapabilitiesItemCAPNETADMIN:
		*s = ContainerRuntimeCapabilitiesItemCAPNETADMIN
		return nil
	case ContainerRuntimeCapabilitiesItemCAPNETBROADCAST:
		*s = ContainerRuntimeCapabilitiesItemCAPNETBROADCAST
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSADMIN:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSADMIN
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSMODULE:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSMODULE
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSNICE:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSNICE
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSPACCT:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSPACCT
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSPTRACE:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSPTRACE
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSRAWIO:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSRAWIO
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSRESOURCE:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSRESOURCE
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSBOOT:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSBOOT
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSTIME:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSTIME
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSTTYCONFIG:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSTTYCONFIG
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSLOG:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSLOG
		return nil
	case ContainerRuntimeCapabilitiesItemCAPAUDITCONTROL:
		*s = ContainerRuntimeCapabilitiesItemCAPAUDITCONTROL
		return nil
	case ContainerRuntimeCapabilitiesItemCAPAUDITREAD:
		*s = ContainerRuntimeCapabilitiesItemCAPAUDITREAD
		return nil
	case ContainerRuntimeCapabilitiesItemCAPIPCLOCK:
		*s = ContainerRuntimeCapabilitiesItemCAPIPCLOCK
		return nil
	case ContainerRuntimeCapabilitiesItemCAPIPCOWNER:
		*s = ContainerRuntimeCapabilitiesItemCAPIPCOWNER
		return nil
	case ContainerRuntimeCapabilitiesItemCAPLINUXIMMUTABLE:
		*s = ContainerRuntimeCapabilitiesItemCAPLINUXIMMUTABLE
		return nil
	case ContainerRuntimeCapabilitiesItemCAPMACADMIN:
		*s = ContainerRuntimeCapabilitiesItemCAPMACADMIN
		return nil
	case ContainerRuntimeCapabilitiesItemCAPMACOVERRIDE:
		*s = ContainerRuntimeCapabilitiesItemCAPMACOVERRIDE
		return nil
	case ContainerRuntimeCapabilitiesItemCAPBLOCKSUSPEND:
		*s = ContainerRuntimeCapabilitiesItemCAPBLOCKSUSPEND
		return nil
	case ContainerRuntimeCapabilitiesItemCAPLEASE:
		*s = ContainerRuntimeCapabilitiesItemCAPLEASE
		return nil
	case ContainerRuntimeCapabilitiesItemCAPWAKEALARM:
		*s = ContainerRuntimeCapabilitiesItemCAPWAKEALARM
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A command that will be run in place of the images defined startup command.
type ContainerRuntimeCommand struct {
	// System path for the command.
	Path string `json:"path"`
	// Arguments to pass to the command.
	Args string `json:"args"`
}

// GetPath returns the value of Path.
func (s *ContainerRuntimeCommand) GetPath() string {
	return s.Path
}

// GetArgs returns the value of Args.
func (s *ContainerRuntimeCommand) GetArgs() string {
	return s.Args
}

// SetPath sets the value of Path.
func (s *ContainerRuntimeCommand) SetPath(val string) {
	s.Path = val
}

// SetArgs sets the value of Args.
func (s *ContainerRuntimeCommand) SetArgs(val string) {
	s.Args = val
}

// A record of environment variables for the given container.
type ContainerRuntimeEnvironmentVars map[string]string

func (s *ContainerRuntimeEnvironmentVars) init() ContainerRuntimeEnvironmentVars {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type ContainerRuntimeNamespacesItem string

const (
	ContainerRuntimeNamespacesItemIpc     ContainerRuntimeNamespacesItem = "ipc"
	ContainerRuntimeNamespacesItemPid     ContainerRuntimeNamespacesItem = "pid"
	ContainerRuntimeNamespacesItemUts     ContainerRuntimeNamespacesItem = "uts"
	ContainerRuntimeNamespacesItemNetwork ContainerRuntimeNamespacesItem = "network"
	ContainerRuntimeNamespacesItemMount   ContainerRuntimeNamespacesItem = "mount"
	ContainerRuntimeNamespacesItemUser    ContainerRuntimeNamespacesItem = "user"
)

// MarshalText implements encoding.TextMarshaler.
func (s ContainerRuntimeNamespacesItem) MarshalText() ([]byte, error) {
	switch s {
	case ContainerRuntimeNamespacesItemIpc:
		return []byte(s), nil
	case ContainerRuntimeNamespacesItemPid:
		return []byte(s), nil
	case ContainerRuntimeNamespacesItemUts:
		return []byte(s), nil
	case ContainerRuntimeNamespacesItemNetwork:
		return []byte(s), nil
	case ContainerRuntimeNamespacesItemMount:
		return []byte(s), nil
	case ContainerRuntimeNamespacesItemUser:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerRuntimeNamespacesItem) UnmarshalText(data []byte) error {
	switch ContainerRuntimeNamespacesItem(data) {
	case ContainerRuntimeNamespacesItemIpc:
		*s = ContainerRuntimeNamespacesItemIpc
		return nil
	case ContainerRuntimeNamespacesItemPid:
		*s = ContainerRuntimeNamespacesItemPid
		return nil
	case ContainerRuntimeNamespacesItemUts:
		*s = ContainerRuntimeNamespacesItemUts
		return nil
	case ContainerRuntimeNamespacesItemNetwork:
		*s = ContainerRuntimeNamespacesItemNetwork
		return nil
	case ContainerRuntimeNamespacesItemMount:
		*s = ContainerRuntimeNamespacesItemMount
		return nil
	case ContainerRuntimeNamespacesItemUser:
		*s = ContainerRuntimeNamespacesItemUser
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A record of rlimits and their values.
type ContainerRuntimeRlimits map[string]ContainerRuntimeRlimitsItem

func (s *ContainerRuntimeRlimits) init() ContainerRuntimeRlimits {
	m := *s
	if m == nil {
		m = map[string]ContainerRuntimeRlimitsItem{}
		*s = m
	}
	return m
}

type ContainerRuntimeRlimitsItem struct {
	// The hard limit for the rlimit.
	Hard OptInt `json:"hard"`
	// The soft limit for the rlimit.
	Soft OptInt `json:"soft"`
}

// GetHard returns the value of Hard.
func (s *ContainerRuntimeRlimitsItem) GetHard() OptInt {
	return s.Hard
}

// GetSoft returns the value of Soft.
func (s *ContainerRuntimeRlimitsItem) GetSoft() OptInt {
	return s.Soft
}

// SetHard sets the value of Hard.
func (s *ContainerRuntimeRlimitsItem) SetHard(val OptInt) {
	s.Hard = val
}

// SetSoft sets the value of Soft.
func (s *ContainerRuntimeRlimitsItem) SetSoft(val OptInt) {
	s.Soft = val
}

type ContainerRuntimeRootfs struct {
	// Enabling this option will set the containers filesystem to readonly. Volumes associated with the
	// container will not be affected by this.
	Readonly OptBool `json:"readonly"`
}

// GetReadonly returns the value of Readonly.
func (s *ContainerRuntimeRootfs) GetReadonly() OptBool {
	return s.Readonly
}

// SetReadonly sets the value of Readonly.
func (s *ContainerRuntimeRootfs) SetReadonly(val OptBool) {
	s.Readonly = val
}

type ContainerRuntimeSeccomp struct {
	Disable OptBool       `json:"disable"`
	Rules   []SeccompRule `json:"rules"`
}

// GetDisable returns the value of Disable.
func (s *ContainerRuntimeSeccomp) GetDisable() OptBool {
	return s.Disable
}

// GetRules returns the value of Rules.
func (s *ContainerRuntimeSeccomp) GetRules() []SeccompRule {
	return s.Rules
}

// SetDisable sets the value of Disable.
func (s *ContainerRuntimeSeccomp) SetDisable(val OptBool) {
	s.Disable = val
}

// SetRules sets the value of Rules.
func (s *ContainerRuntimeSeccomp) SetRules(val []SeccompRule) {
	s.Rules = val
}

// A record of sysctl fields and values for a given container.
type ContainerRuntimeSysctl map[string]string

func (s *ContainerRuntimeSysctl) init() ContainerRuntimeSysctl {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Merged schema.
// Ref: #/components/schemas/ContainerState
type ContainerState struct {
	// The current state of the container.
	Current ContainerStateCurrent `json:"current"`
	// The desired state of the container.
	Desired OptContainerStateDesired `json:"desired"`
	Changed DateTime                 `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptContainerStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *ContainerState) GetCurrent() ContainerStateCurrent {
	return s.Current
}

// GetDesired returns the value of Desired.
func (s *ContainerState) GetDesired() OptContainerStateDesired {
	return s.Desired
}

// GetChanged returns the value of Changed.
func (s *ContainerState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *ContainerState) GetError() OptContainerStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *ContainerState) SetCurrent(val ContainerStateCurrent) {
	s.Current = val
}

// SetDesired sets the value of Desired.
func (s *ContainerState) SetDesired(val OptContainerStateDesired) {
	s.Desired = val
}

// SetChanged sets the value of Changed.
func (s *ContainerState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *ContainerState) SetError(val OptContainerStateError) {
	s.Error = val
}

// The current state of the container.
type ContainerStateCurrent string

const (
	ContainerStateCurrentNew      ContainerStateCurrent = "new"
	ContainerStateCurrentStarting ContainerStateCurrent = "starting"
	ContainerStateCurrentRunning  ContainerStateCurrent = "running"
	ContainerStateCurrentStopping ContainerStateCurrent = "stopping"
	ContainerStateCurrentStopped  ContainerStateCurrent = "stopped"
	ContainerStateCurrentDeleting ContainerStateCurrent = "deleting"
	ContainerStateCurrentDeleted  ContainerStateCurrent = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s ContainerStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case ContainerStateCurrentNew:
		return []byte(s), nil
	case ContainerStateCurrentStarting:
		return []byte(s), nil
	case ContainerStateCurrentRunning:
		return []byte(s), nil
	case ContainerStateCurrentStopping:
		return []byte(s), nil
	case ContainerStateCurrentStopped:
		return []byte(s), nil
	case ContainerStateCurrentDeleting:
		return []byte(s), nil
	case ContainerStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerStateCurrent) UnmarshalText(data []byte) error {
	switch ContainerStateCurrent(data) {
	case ContainerStateCurrentNew:
		*s = ContainerStateCurrentNew
		return nil
	case ContainerStateCurrentStarting:
		*s = ContainerStateCurrentStarting
		return nil
	case ContainerStateCurrentRunning:
		*s = ContainerStateCurrentRunning
		return nil
	case ContainerStateCurrentStopping:
		*s = ContainerStateCurrentStopping
		return nil
	case ContainerStateCurrentStopped:
		*s = ContainerStateCurrentStopped
		return nil
	case ContainerStateCurrentDeleting:
		*s = ContainerStateCurrentDeleting
		return nil
	case ContainerStateCurrentDeleted:
		*s = ContainerStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The desired state of the container.
type ContainerStateDesired string

const (
	ContainerStateDesiredNew      ContainerStateDesired = "new"
	ContainerStateDesiredStarting ContainerStateDesired = "starting"
	ContainerStateDesiredRunning  ContainerStateDesired = "running"
	ContainerStateDesiredStopping ContainerStateDesired = "stopping"
	ContainerStateDesiredStopped  ContainerStateDesired = "stopped"
	ContainerStateDesiredDeleting ContainerStateDesired = "deleting"
	ContainerStateDesiredDeleted  ContainerStateDesired = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s ContainerStateDesired) MarshalText() ([]byte, error) {
	switch s {
	case ContainerStateDesiredNew:
		return []byte(s), nil
	case ContainerStateDesiredStarting:
		return []byte(s), nil
	case ContainerStateDesiredRunning:
		return []byte(s), nil
	case ContainerStateDesiredStopping:
		return []byte(s), nil
	case ContainerStateDesiredStopped:
		return []byte(s), nil
	case ContainerStateDesiredDeleting:
		return []byte(s), nil
	case ContainerStateDesiredDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerStateDesired) UnmarshalText(data []byte) error {
	switch ContainerStateDesired(data) {
	case ContainerStateDesiredNew:
		*s = ContainerStateDesiredNew
		return nil
	case ContainerStateDesiredStarting:
		*s = ContainerStateDesiredStarting
		return nil
	case ContainerStateDesiredRunning:
		*s = ContainerStateDesiredRunning
		return nil
	case ContainerStateDesiredStopping:
		*s = ContainerStateDesiredStopping
		return nil
	case ContainerStateDesiredStopped:
		*s = ContainerStateDesiredStopped
		return nil
	case ContainerStateDesiredDeleting:
		*s = ContainerStateDesiredDeleting
		return nil
	case ContainerStateDesiredDeleted:
		*s = ContainerStateDesiredDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type ContainerStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *ContainerStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *ContainerStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *ContainerStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *ContainerStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Contains useful and relevant data/statistics for a container that would otherwise be several
// separate API calls.
// Ref: #/components/schemas/ContainerSummary
type ContainerSummary struct {
	ID ID `json:"id"`
	// A user defined name for the container resource.
	Name        string                      `json:"name"`
	State       ContainerState              `json:"state"`
	Image       ContainerImageSummary       `json:"image"`
	Environment ContainerEnvironmentSummary `json:"environment"`
}

// GetID returns the value of ID.
func (s *ContainerSummary) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *ContainerSummary) GetName() string {
	return s.Name
}

// GetState returns the value of State.
func (s *ContainerSummary) GetState() ContainerState {
	return s.State
}

// GetImage returns the value of Image.
func (s *ContainerSummary) GetImage() ContainerImageSummary {
	return s.Image
}

// GetEnvironment returns the value of Environment.
func (s *ContainerSummary) GetEnvironment() ContainerEnvironmentSummary {
	return s.Environment
}

// SetID sets the value of ID.
func (s *ContainerSummary) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ContainerSummary) SetName(val string) {
	s.Name = val
}

// SetState sets the value of State.
func (s *ContainerSummary) SetState(val ContainerState) {
	s.State = val
}

// SetImage sets the value of Image.
func (s *ContainerSummary) SetImage(val ContainerImageSummary) {
	s.Image = val
}

// SetEnvironment sets the value of Environment.
func (s *ContainerSummary) SetEnvironment(val ContainerEnvironmentSummary) {
	s.Environment = val
}

// A resource thats associated with a contianer.
// Ref: #/components/schemas/ContainersIncludes
type ContainersIncludes map[string]Container

func (s *ContainersIncludes) init() ContainersIncludes {
	m := *s
	if m == nil {
		m = map[string]Container{}
		*s = m
	}
	return m
}

type ContainersListServersMetaItem string

const (
	ContainersListServersMetaItemPrimaryIP ContainersListServersMetaItem = "primary_ip"
)

// MarshalText implements encoding.TextMarshaler.
func (s ContainersListServersMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case ContainersListServersMetaItemPrimaryIP:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainersListServersMetaItem) UnmarshalText(data []byte) error {
	switch ContainersListServersMetaItem(data) {
	case ContainersListServersMetaItemPrimaryIP:
		*s = ContainersListServersMetaItemPrimaryIP
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ContainersListServersOK struct {
	Data OptServersList `json:"data"`
}

// GetData returns the value of Data.
func (s *ContainersListServersOK) GetData() OptServersList {
	return s.Data
}

// SetData sets the value of Data.
func (s *ContainersListServersOK) SetData(val OptServersList) {
	s.Data = val
}

type ContainersListServersPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *ContainersListServersPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *ContainersListServersPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *ContainersListServersPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *ContainersListServersPage) SetSize(val OptFloat64) {
	s.Size = val
}

// A list of meta fields that can be applied to a container.
// Ref: #/components/schemas/ContainersMeta
type ContainersMeta struct {
	InstancesCount OptStateCountSummary `json:"instances_count"`
	// The FQDN for this container, if there is one.
	Domain  OptString                   `json:"domain"`
	Domains []ContainersMetaDomainsItem `json:"domains"`
	// An array of IP resources.
	Ips []IP `json:"ips"`
}

// GetInstancesCount returns the value of InstancesCount.
func (s *ContainersMeta) GetInstancesCount() OptStateCountSummary {
	return s.InstancesCount
}

// GetDomain returns the value of Domain.
func (s *ContainersMeta) GetDomain() OptString {
	return s.Domain
}

// GetDomains returns the value of Domains.
func (s *ContainersMeta) GetDomains() []ContainersMetaDomainsItem {
	return s.Domains
}

// GetIps returns the value of Ips.
func (s *ContainersMeta) GetIps() []IP {
	return s.Ips
}

// SetInstancesCount sets the value of InstancesCount.
func (s *ContainersMeta) SetInstancesCount(val OptStateCountSummary) {
	s.InstancesCount = val
}

// SetDomain sets the value of Domain.
func (s *ContainersMeta) SetDomain(val OptString) {
	s.Domain = val
}

// SetDomains sets the value of Domains.
func (s *ContainersMeta) SetDomains(val []ContainersMetaDomainsItem) {
	s.Domains = val
}

// SetIps sets the value of Ips.
func (s *ContainersMeta) SetIps(val []IP) {
	s.Ips = val
}

// Holds domain name and record mappings.
type ContainersMetaDomainsItem struct {
	// The fully qualified domain name.
	Fqdn   string `json:"fqdn"`
	Record Record `json:"record"`
}

// GetFqdn returns the value of Fqdn.
func (s *ContainersMetaDomainsItem) GetFqdn() string {
	return s.Fqdn
}

// GetRecord returns the value of Record.
func (s *ContainersMetaDomainsItem) GetRecord() Record {
	return s.Record
}

// SetFqdn sets the value of Fqdn.
func (s *ContainersMetaDomainsItem) SetFqdn(val string) {
	s.Fqdn = val
}

// SetRecord sets the value of Record.
func (s *ContainersMetaDomainsItem) SetRecord(val Record) {
	s.Record = val
}

type CreateApiKeyCreated struct {
	Data OptApiKey `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateApiKeyCreated) GetData() OptApiKey {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateApiKeyCreated) SetData(val OptApiKey) {
	s.Data = val
}

type CreateApiKeyReq struct {
	// A name given to the API Key.
	Name        OptString      `json:"name"`
	Permissions OptPermissions `json:"permissions"`
	// An object defining the capabilities of the given API key.
	Capabilities OptCreateApiKeyReqCapabilities `json:"capabilities"`
	// An array of approved IPs from which this API Key can be used.
	Ips OptNilStringArray `json:"ips"`
}

// GetName returns the value of Name.
func (s *CreateApiKeyReq) GetName() OptString {
	return s.Name
}

// GetPermissions returns the value of Permissions.
func (s *CreateApiKeyReq) GetPermissions() OptPermissions {
	return s.Permissions
}

// GetCapabilities returns the value of Capabilities.
func (s *CreateApiKeyReq) GetCapabilities() OptCreateApiKeyReqCapabilities {
	return s.Capabilities
}

// GetIps returns the value of Ips.
func (s *CreateApiKeyReq) GetIps() OptNilStringArray {
	return s.Ips
}

// SetName sets the value of Name.
func (s *CreateApiKeyReq) SetName(val OptString) {
	s.Name = val
}

// SetPermissions sets the value of Permissions.
func (s *CreateApiKeyReq) SetPermissions(val OptPermissions) {
	s.Permissions = val
}

// SetCapabilities sets the value of Capabilities.
func (s *CreateApiKeyReq) SetCapabilities(val OptCreateApiKeyReqCapabilities) {
	s.Capabilities = val
}

// SetIps sets the value of Ips.
func (s *CreateApiKeyReq) SetIps(val OptNilStringArray) {
	s.Ips = val
}

// An object defining the capabilities of the given API key.
type CreateApiKeyReqCapabilities struct {
	// A boolean where true is giving the key all grantable capabilities.
	All bool `json:"all"`
	// An array of capabilites.
	Specific []Capability `json:"specific"`
}

// GetAll returns the value of All.
func (s *CreateApiKeyReqCapabilities) GetAll() bool {
	return s.All
}

// GetSpecific returns the value of Specific.
func (s *CreateApiKeyReqCapabilities) GetSpecific() []Capability {
	return s.Specific
}

// SetAll sets the value of All.
func (s *CreateApiKeyReqCapabilities) SetAll(val bool) {
	s.All = val
}

// SetSpecific sets the value of Specific.
func (s *CreateApiKeyReqCapabilities) SetSpecific(val []Capability) {
	s.Specific = val
}

type CreateBillingMethodOK struct {
	Data OptMethod `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateBillingMethodOK) GetData() OptMethod {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateBillingMethodOK) SetData(val OptMethod) {
	s.Data = val
}

type CreateBillingMethodReq struct {
	// A name for the billing method.
	Name string `json:"name"`
	// A boolean where true represents a billing method being primary.
	Primary    bool                             `json:"primary"`
	Address    Address                          `json:"address"`
	CreditCard CreateBillingMethodReqCreditCard `json:"credit_card"`
}

// GetName returns the value of Name.
func (s *CreateBillingMethodReq) GetName() string {
	return s.Name
}

// GetPrimary returns the value of Primary.
func (s *CreateBillingMethodReq) GetPrimary() bool {
	return s.Primary
}

// GetAddress returns the value of Address.
func (s *CreateBillingMethodReq) GetAddress() Address {
	return s.Address
}

// GetCreditCard returns the value of CreditCard.
func (s *CreateBillingMethodReq) GetCreditCard() CreateBillingMethodReqCreditCard {
	return s.CreditCard
}

// SetName sets the value of Name.
func (s *CreateBillingMethodReq) SetName(val string) {
	s.Name = val
}

// SetPrimary sets the value of Primary.
func (s *CreateBillingMethodReq) SetPrimary(val bool) {
	s.Primary = val
}

// SetAddress sets the value of Address.
func (s *CreateBillingMethodReq) SetAddress(val Address) {
	s.Address = val
}

// SetCreditCard sets the value of CreditCard.
func (s *CreateBillingMethodReq) SetCreditCard(val CreateBillingMethodReqCreditCard) {
	s.CreditCard = val
}

type CreateBillingMethodReqCreditCard struct {
	Name       string                                     `json:"name"`
	Number     string                                     `json:"number"`
	Cvv        string                                     `json:"cvv"`
	Expiration CreateBillingMethodReqCreditCardExpiration `json:"expiration"`
}

// GetName returns the value of Name.
func (s *CreateBillingMethodReqCreditCard) GetName() string {
	return s.Name
}

// GetNumber returns the value of Number.
func (s *CreateBillingMethodReqCreditCard) GetNumber() string {
	return s.Number
}

// GetCvv returns the value of Cvv.
func (s *CreateBillingMethodReqCreditCard) GetCvv() string {
	return s.Cvv
}

// GetExpiration returns the value of Expiration.
func (s *CreateBillingMethodReqCreditCard) GetExpiration() CreateBillingMethodReqCreditCardExpiration {
	return s.Expiration
}

// SetName sets the value of Name.
func (s *CreateBillingMethodReqCreditCard) SetName(val string) {
	s.Name = val
}

// SetNumber sets the value of Number.
func (s *CreateBillingMethodReqCreditCard) SetNumber(val string) {
	s.Number = val
}

// SetCvv sets the value of Cvv.
func (s *CreateBillingMethodReqCreditCard) SetCvv(val string) {
	s.Cvv = val
}

// SetExpiration sets the value of Expiration.
func (s *CreateBillingMethodReqCreditCard) SetExpiration(val CreateBillingMethodReqCreditCardExpiration) {
	s.Expiration = val
}

type CreateBillingMethodReqCreditCardExpiration struct {
	Month float64 `json:"month"`
	Year  float64 `json:"year"`
}

// GetMonth returns the value of Month.
func (s *CreateBillingMethodReqCreditCardExpiration) GetMonth() float64 {
	return s.Month
}

// GetYear returns the value of Year.
func (s *CreateBillingMethodReqCreditCardExpiration) GetYear() float64 {
	return s.Year
}

// SetMonth sets the value of Month.
func (s *CreateBillingMethodReqCreditCardExpiration) SetMonth(val float64) {
	s.Month = val
}

// SetYear sets the value of Year.
func (s *CreateBillingMethodReqCreditCardExpiration) SetYear(val float64) {
	s.Year = val
}

type CreateContainerCreated struct {
	Data OptContainer `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateContainerCreated) GetData() OptContainer {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateContainerCreated) SetData(val OptContainer) {
	s.Data = val
}

type CreateContainerInstanceAccepted struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateContainerInstanceAccepted) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateContainerInstanceAccepted) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type CreateContainerInstanceJobAccepted struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateContainerInstanceJobAccepted) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateContainerInstanceJobAccepted) SetData(val OptTaskDescriptor) {
	s.Data = val
}

// CreateContainerInstanceJobReq represents sum type.
type CreateContainerInstanceJobReq struct {
	Type            CreateContainerInstanceJobReqType // switch on this field
	RevertMigration RevertMigration
	Migrate         Migrate
}

// CreateContainerInstanceJobReqType is oneOf type of CreateContainerInstanceJobReq.
type CreateContainerInstanceJobReqType string

// Possible values for CreateContainerInstanceJobReqType.
const (
	RevertMigrationCreateContainerInstanceJobReq CreateContainerInstanceJobReqType = "RevertMigration"
	MigrateCreateContainerInstanceJobReq         CreateContainerInstanceJobReqType = "Migrate"
)

// IsRevertMigration reports whether CreateContainerInstanceJobReq is RevertMigration.
func (s CreateContainerInstanceJobReq) IsRevertMigration() bool {
	return s.Type == RevertMigrationCreateContainerInstanceJobReq
}

// IsMigrate reports whether CreateContainerInstanceJobReq is Migrate.
func (s CreateContainerInstanceJobReq) IsMigrate() bool {
	return s.Type == MigrateCreateContainerInstanceJobReq
}

// SetRevertMigration sets CreateContainerInstanceJobReq to RevertMigration.
func (s *CreateContainerInstanceJobReq) SetRevertMigration(v RevertMigration) {
	s.Type = RevertMigrationCreateContainerInstanceJobReq
	s.RevertMigration = v
}

// GetRevertMigration returns RevertMigration and true boolean if CreateContainerInstanceJobReq is RevertMigration.
func (s CreateContainerInstanceJobReq) GetRevertMigration() (v RevertMigration, ok bool) {
	if !s.IsRevertMigration() {
		return v, false
	}
	return s.RevertMigration, true
}

// NewRevertMigrationCreateContainerInstanceJobReq returns new CreateContainerInstanceJobReq from RevertMigration.
func NewRevertMigrationCreateContainerInstanceJobReq(v RevertMigration) CreateContainerInstanceJobReq {
	var s CreateContainerInstanceJobReq
	s.SetRevertMigration(v)
	return s
}

// SetMigrate sets CreateContainerInstanceJobReq to Migrate.
func (s *CreateContainerInstanceJobReq) SetMigrate(v Migrate) {
	s.Type = MigrateCreateContainerInstanceJobReq
	s.Migrate = v
}

// GetMigrate returns Migrate and true boolean if CreateContainerInstanceJobReq is Migrate.
func (s CreateContainerInstanceJobReq) GetMigrate() (v Migrate, ok bool) {
	if !s.IsMigrate() {
		return v, false
	}
	return s.Migrate, true
}

// NewMigrateCreateContainerInstanceJobReq returns new CreateContainerInstanceJobReq from Migrate.
func NewMigrateCreateContainerInstanceJobReq(v Migrate) CreateContainerInstanceJobReq {
	var s CreateContainerInstanceJobReq
	s.SetMigrate(v)
	return s
}

type CreateContainerInstanceReqItem struct {
	// The ID of the server the new instance(s) should be deployed to.
	ServerID string `json:"server_id"`
	// The number of new instances to be created on the given server.
	NewInstances int `json:"new_instances"`
}

// GetServerID returns the value of ServerID.
func (s *CreateContainerInstanceReqItem) GetServerID() string {
	return s.ServerID
}

// GetNewInstances returns the value of NewInstances.
func (s *CreateContainerInstanceReqItem) GetNewInstances() int {
	return s.NewInstances
}

// SetServerID sets the value of ServerID.
func (s *CreateContainerInstanceReqItem) SetServerID(val string) {
	s.ServerID = val
}

// SetNewInstances sets the value of NewInstances.
func (s *CreateContainerInstanceReqItem) SetNewInstances(val int) {
	s.NewInstances = val
}

type CreateContainerReq struct {
	// A user defined name for the container.
	Name string `json:"name"`
	// An identifier for the environment this container will be deployed to.
	EnvironmentID string `json:"environment_id"`
	// An identifier for the image used to create this container.
	ImageID string `json:"image_id"`
	// A boolean where true represents this container is stateful.
	Stateful bool      `json:"stateful"`
	Config   Config    `json:"config"`
	Volumes  []Volumes `json:"volumes"`
	// User defined meta data for the container.
	Annotations OptCreateContainerReqAnnotations `json:"annotations"`
}

// GetName returns the value of Name.
func (s *CreateContainerReq) GetName() string {
	return s.Name
}

// GetEnvironmentID returns the value of EnvironmentID.
func (s *CreateContainerReq) GetEnvironmentID() string {
	return s.EnvironmentID
}

// GetImageID returns the value of ImageID.
func (s *CreateContainerReq) GetImageID() string {
	return s.ImageID
}

// GetStateful returns the value of Stateful.
func (s *CreateContainerReq) GetStateful() bool {
	return s.Stateful
}

// GetConfig returns the value of Config.
func (s *CreateContainerReq) GetConfig() Config {
	return s.Config
}

// GetVolumes returns the value of Volumes.
func (s *CreateContainerReq) GetVolumes() []Volumes {
	return s.Volumes
}

// GetAnnotations returns the value of Annotations.
func (s *CreateContainerReq) GetAnnotations() OptCreateContainerReqAnnotations {
	return s.Annotations
}

// SetName sets the value of Name.
func (s *CreateContainerReq) SetName(val string) {
	s.Name = val
}

// SetEnvironmentID sets the value of EnvironmentID.
func (s *CreateContainerReq) SetEnvironmentID(val string) {
	s.EnvironmentID = val
}

// SetImageID sets the value of ImageID.
func (s *CreateContainerReq) SetImageID(val string) {
	s.ImageID = val
}

// SetStateful sets the value of Stateful.
func (s *CreateContainerReq) SetStateful(val bool) {
	s.Stateful = val
}

// SetConfig sets the value of Config.
func (s *CreateContainerReq) SetConfig(val Config) {
	s.Config = val
}

// SetVolumes sets the value of Volumes.
func (s *CreateContainerReq) SetVolumes(val []Volumes) {
	s.Volumes = val
}

// SetAnnotations sets the value of Annotations.
func (s *CreateContainerReq) SetAnnotations(val OptCreateContainerReqAnnotations) {
	s.Annotations = val
}

// User defined meta data for the container.
type CreateContainerReqAnnotations map[string]string

func (s *CreateContainerReqAnnotations) init() CreateContainerReqAnnotations {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type CreateDNSRecordCreated struct {
	Data OptRecord `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateDNSRecordCreated) GetData() OptRecord {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateDNSRecordCreated) SetData(val OptRecord) {
	s.Data = val
}

type CreateDNSRecordReq struct {
	Type RecordTypes `json:"type"`
	// A name for the given record where `@` represents the desire to use the root of the origin.
	Name string `json:"name"`
}

// GetType returns the value of Type.
func (s *CreateDNSRecordReq) GetType() RecordTypes {
	return s.Type
}

// GetName returns the value of Name.
func (s *CreateDNSRecordReq) GetName() string {
	return s.Name
}

// SetType sets the value of Type.
func (s *CreateDNSRecordReq) SetType(val RecordTypes) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *CreateDNSRecordReq) SetName(val string) {
	s.Name = val
}

type CreateDNSZoneCreated struct {
	Data OptZone `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateDNSZoneCreated) GetData() OptZone {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateDNSZoneCreated) SetData(val OptZone) {
	s.Data = val
}

type CreateDNSZoneReq struct {
	// A boolean where true represents the desire for the origin to be of the type `hosted`.
	Hosted bool `json:"hosted"`
	// The origin that will be created.
	Origin string `json:"origin"`
}

// GetHosted returns the value of Hosted.
func (s *CreateDNSZoneReq) GetHosted() bool {
	return s.Hosted
}

// GetOrigin returns the value of Origin.
func (s *CreateDNSZoneReq) GetOrigin() string {
	return s.Origin
}

// SetHosted sets the value of Hosted.
func (s *CreateDNSZoneReq) SetHosted(val bool) {
	s.Hosted = val
}

// SetOrigin sets the value of Origin.
func (s *CreateDNSZoneReq) SetOrigin(val string) {
	s.Origin = val
}

type CreateEnvironmentCreated struct {
	Data OptEnvironment `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateEnvironmentCreated) GetData() OptEnvironment {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateEnvironmentCreated) SetData(val OptEnvironment) {
	s.Data = val
}

type CreateEnvironmentJobAccepted struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateEnvironmentJobAccepted) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateEnvironmentJobAccepted) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type CreateEnvironmentJobReq struct {
	// The name of the action to perform.
	Action CreateEnvironmentJobReqAction `json:"action"`
}

// GetAction returns the value of Action.
func (s *CreateEnvironmentJobReq) GetAction() CreateEnvironmentJobReqAction {
	return s.Action
}

// SetAction sets the value of Action.
func (s *CreateEnvironmentJobReq) SetAction(val CreateEnvironmentJobReqAction) {
	s.Action = val
}

// The name of the action to perform.
type CreateEnvironmentJobReqAction string

const (
	CreateEnvironmentJobReqActionStart      CreateEnvironmentJobReqAction = "start"
	CreateEnvironmentJobReqActionStop       CreateEnvironmentJobReqAction = "stop"
	CreateEnvironmentJobReqActionInitialize CreateEnvironmentJobReqAction = "initialize"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateEnvironmentJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreateEnvironmentJobReqActionStart:
		return []byte(s), nil
	case CreateEnvironmentJobReqActionStop:
		return []byte(s), nil
	case CreateEnvironmentJobReqActionInitialize:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateEnvironmentJobReqAction) UnmarshalText(data []byte) error {
	switch CreateEnvironmentJobReqAction(data) {
	case CreateEnvironmentJobReqActionStart:
		*s = CreateEnvironmentJobReqActionStart
		return nil
	case CreateEnvironmentJobReqActionStop:
		*s = CreateEnvironmentJobReqActionStop
		return nil
	case CreateEnvironmentJobReqActionInitialize:
		*s = CreateEnvironmentJobReqActionInitialize
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateEnvironmentReq struct {
	// A user defined name for the environment resource.
	Name string `json:"name"`
	// The cluster this environment is associated with.
	Cluster string `json:"cluster"`
	// Contains details regarding the environment.
	About    CreateEnvironmentReqAbout `json:"about"`
	Features Features                  `json:"features"`
	// An object representing the associated stack.
	Stack NilCreateEnvironmentReqStack `json:"stack"`
}

// GetName returns the value of Name.
func (s *CreateEnvironmentReq) GetName() string {
	return s.Name
}

// GetCluster returns the value of Cluster.
func (s *CreateEnvironmentReq) GetCluster() string {
	return s.Cluster
}

// GetAbout returns the value of About.
func (s *CreateEnvironmentReq) GetAbout() CreateEnvironmentReqAbout {
	return s.About
}

// GetFeatures returns the value of Features.
func (s *CreateEnvironmentReq) GetFeatures() Features {
	return s.Features
}

// GetStack returns the value of Stack.
func (s *CreateEnvironmentReq) GetStack() NilCreateEnvironmentReqStack {
	return s.Stack
}

// SetName sets the value of Name.
func (s *CreateEnvironmentReq) SetName(val string) {
	s.Name = val
}

// SetCluster sets the value of Cluster.
func (s *CreateEnvironmentReq) SetCluster(val string) {
	s.Cluster = val
}

// SetAbout sets the value of About.
func (s *CreateEnvironmentReq) SetAbout(val CreateEnvironmentReqAbout) {
	s.About = val
}

// SetFeatures sets the value of Features.
func (s *CreateEnvironmentReq) SetFeatures(val Features) {
	s.Features = val
}

// SetStack sets the value of Stack.
func (s *CreateEnvironmentReq) SetStack(val NilCreateEnvironmentReqStack) {
	s.Stack = val
}

// Contains details regarding the environment.
type CreateEnvironmentReqAbout struct {
	// A custom description for this environment.
	Description string `json:"description"`
}

// GetDescription returns the value of Description.
func (s *CreateEnvironmentReqAbout) GetDescription() string {
	return s.Description
}

// SetDescription sets the value of Description.
func (s *CreateEnvironmentReqAbout) SetDescription(val string) {
	s.Description = val
}

// An object representing the associated stack.
type CreateEnvironmentReqStack struct {
	ID      ID `json:"id"`
	BuildID ID `json:"build_id"`
}

// GetID returns the value of ID.
func (s *CreateEnvironmentReqStack) GetID() ID {
	return s.ID
}

// GetBuildID returns the value of BuildID.
func (s *CreateEnvironmentReqStack) GetBuildID() ID {
	return s.BuildID
}

// SetID sets the value of ID.
func (s *CreateEnvironmentReqStack) SetID(val ID) {
	s.ID = val
}

// SetBuildID sets the value of BuildID.
func (s *CreateEnvironmentReqStack) SetBuildID(val ID) {
	s.BuildID = val
}

type CreateHubInviteCreated struct {
	Data OptHubMembership `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateHubInviteCreated) GetData() OptHubMembership {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateHubInviteCreated) SetData(val OptHubMembership) {
	s.Data = val
}

type CreateHubInviteReq struct {
	// The email address of the invitee.
	Recipient OptString `json:"recipient"`
	// The account role.
	Role OptCreateHubInviteReqRole `json:"role"`
	// The environment permissions the invitee will have.
	Permissions OptCreateHubInviteReqPermissions `json:"permissions"`
}

// GetRecipient returns the value of Recipient.
func (s *CreateHubInviteReq) GetRecipient() OptString {
	return s.Recipient
}

// GetRole returns the value of Role.
func (s *CreateHubInviteReq) GetRole() OptCreateHubInviteReqRole {
	return s.Role
}

// GetPermissions returns the value of Permissions.
func (s *CreateHubInviteReq) GetPermissions() OptCreateHubInviteReqPermissions {
	return s.Permissions
}

// SetRecipient sets the value of Recipient.
func (s *CreateHubInviteReq) SetRecipient(val OptString) {
	s.Recipient = val
}

// SetRole sets the value of Role.
func (s *CreateHubInviteReq) SetRole(val OptCreateHubInviteReqRole) {
	s.Role = val
}

// SetPermissions sets the value of Permissions.
func (s *CreateHubInviteReq) SetPermissions(val OptCreateHubInviteReqPermissions) {
	s.Permissions = val
}

// The environment permissions the invitee will have.
type CreateHubInviteReqPermissions struct {
	// Boolean value that indicates the user has access to all environments.
	AllEnvironments bool `json:"all_environments"`
	// A list of objects that describe the specific environments the invitee will have access to.
	Environments []CreateHubInviteReqPermissionsEnvironmentsItem `json:"environments"`
}

// GetAllEnvironments returns the value of AllEnvironments.
func (s *CreateHubInviteReqPermissions) GetAllEnvironments() bool {
	return s.AllEnvironments
}

// GetEnvironments returns the value of Environments.
func (s *CreateHubInviteReqPermissions) GetEnvironments() []CreateHubInviteReqPermissionsEnvironmentsItem {
	return s.Environments
}

// SetAllEnvironments sets the value of AllEnvironments.
func (s *CreateHubInviteReqPermissions) SetAllEnvironments(val bool) {
	s.AllEnvironments = val
}

// SetEnvironments sets the value of Environments.
func (s *CreateHubInviteReqPermissions) SetEnvironments(val []CreateHubInviteReqPermissionsEnvironmentsItem) {
	s.Environments = val
}

type CreateHubInviteReqPermissionsEnvironmentsItem struct {
	// The ID of the environment.
	ID string `json:"id"`
	// Boolean indicating the invitee has manage rights to environment.
	Manage bool `json:"manage"`
}

// GetID returns the value of ID.
func (s *CreateHubInviteReqPermissionsEnvironmentsItem) GetID() string {
	return s.ID
}

// GetManage returns the value of Manage.
func (s *CreateHubInviteReqPermissionsEnvironmentsItem) GetManage() bool {
	return s.Manage
}

// SetID sets the value of ID.
func (s *CreateHubInviteReqPermissionsEnvironmentsItem) SetID(val string) {
	s.ID = val
}

// SetManage sets the value of Manage.
func (s *CreateHubInviteReqPermissionsEnvironmentsItem) SetManage(val bool) {
	s.Manage = val
}

// The account role.
type CreateHubInviteReqRole string

const (
	CreateHubInviteReqRoleOwner     CreateHubInviteReqRole = "owner"
	CreateHubInviteReqRoleAdmin     CreateHubInviteReqRole = "admin"
	CreateHubInviteReqRoleDeveloper CreateHubInviteReqRole = "developer"
	CreateHubInviteReqRoleAnalyst   CreateHubInviteReqRole = "analyst"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateHubInviteReqRole) MarshalText() ([]byte, error) {
	switch s {
	case CreateHubInviteReqRoleOwner:
		return []byte(s), nil
	case CreateHubInviteReqRoleAdmin:
		return []byte(s), nil
	case CreateHubInviteReqRoleDeveloper:
		return []byte(s), nil
	case CreateHubInviteReqRoleAnalyst:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateHubInviteReqRole) UnmarshalText(data []byte) error {
	switch CreateHubInviteReqRole(data) {
	case CreateHubInviteReqRoleOwner:
		*s = CreateHubInviteReqRoleOwner
		return nil
	case CreateHubInviteReqRoleAdmin:
		*s = CreateHubInviteReqRoleAdmin
		return nil
	case CreateHubInviteReqRoleDeveloper:
		*s = CreateHubInviteReqRoleDeveloper
		return nil
	case CreateHubInviteReqRoleAnalyst:
		*s = CreateHubInviteReqRoleAnalyst
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateHubOK struct {
	Data OptHub `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateHubOK) GetData() OptHub {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateHubOK) SetData(val OptHub) {
	s.Data = val
}

type CreateHubReq struct {
	// A name for the hub.
	Name         OptString          `json:"name"`
	Integrations OptHubIntegrations `json:"integrations"`
	// All hub webhooks for the given hub.
	Webhooks OptCreateHubReqWebhooks `json:"webhooks"`
}

// GetName returns the value of Name.
func (s *CreateHubReq) GetName() OptString {
	return s.Name
}

// GetIntegrations returns the value of Integrations.
func (s *CreateHubReq) GetIntegrations() OptHubIntegrations {
	return s.Integrations
}

// GetWebhooks returns the value of Webhooks.
func (s *CreateHubReq) GetWebhooks() OptCreateHubReqWebhooks {
	return s.Webhooks
}

// SetName sets the value of Name.
func (s *CreateHubReq) SetName(val OptString) {
	s.Name = val
}

// SetIntegrations sets the value of Integrations.
func (s *CreateHubReq) SetIntegrations(val OptHubIntegrations) {
	s.Integrations = val
}

// SetWebhooks sets the value of Webhooks.
func (s *CreateHubReq) SetWebhooks(val OptCreateHubReqWebhooks) {
	s.Webhooks = val
}

// All hub webhooks for the given hub.
type CreateHubReqWebhooks struct {
	// A webhook to report information to each time a server is deployed on the given hub.
	ServerDeployed NilString `json:"server_deployed"`
}

// GetServerDeployed returns the value of ServerDeployed.
func (s *CreateHubReqWebhooks) GetServerDeployed() NilString {
	return s.ServerDeployed
}

// SetServerDeployed sets the value of ServerDeployed.
func (s *CreateHubReqWebhooks) SetServerDeployed(val NilString) {
	s.ServerDeployed = val
}

type CreateImageCollectionJobAccepted struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateImageCollectionJobAccepted) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateImageCollectionJobAccepted) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type CreateImageCollectionJobReq struct {
	// The action is the job type to create.
	Action CreateImageCollectionJobReqAction `json:"action"`
	// Additional contents needed by the platform to create the job.
	Contents CreateImageCollectionJobReqContents `json:"contents"`
}

// GetAction returns the value of Action.
func (s *CreateImageCollectionJobReq) GetAction() CreateImageCollectionJobReqAction {
	return s.Action
}

// GetContents returns the value of Contents.
func (s *CreateImageCollectionJobReq) GetContents() CreateImageCollectionJobReqContents {
	return s.Contents
}

// SetAction sets the value of Action.
func (s *CreateImageCollectionJobReq) SetAction(val CreateImageCollectionJobReqAction) {
	s.Action = val
}

// SetContents sets the value of Contents.
func (s *CreateImageCollectionJobReq) SetContents(val CreateImageCollectionJobReqContents) {
	s.Contents = val
}

// The action is the job type to create.
type CreateImageCollectionJobReqAction string

const (
	CreateImageCollectionJobReqActionPrune CreateImageCollectionJobReqAction = "prune"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateImageCollectionJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreateImageCollectionJobReqActionPrune:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateImageCollectionJobReqAction) UnmarshalText(data []byte) error {
	switch CreateImageCollectionJobReqAction(data) {
	case CreateImageCollectionJobReqActionPrune:
		*s = CreateImageCollectionJobReqActionPrune
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Additional contents needed by the platform to create the job.
type CreateImageCollectionJobReqContents struct {
	// A list of source_ids to be pruned.
	SourceIds []string `json:"source_ids"`
}

// GetSourceIds returns the value of SourceIds.
func (s *CreateImageCollectionJobReqContents) GetSourceIds() []string {
	return s.SourceIds
}

// SetSourceIds sets the value of SourceIds.
func (s *CreateImageCollectionJobReqContents) SetSourceIds(val []string) {
	s.SourceIds = val
}

type CreateImageJobOK struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateImageJobOK) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateImageJobOK) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type CreateImageJobReq struct {
	Action CreateImageJobReqAction `json:"action"`
}

// GetAction returns the value of Action.
func (s *CreateImageJobReq) GetAction() CreateImageJobReqAction {
	return s.Action
}

// SetAction sets the value of Action.
func (s *CreateImageJobReq) SetAction(val CreateImageJobReqAction) {
	s.Action = val
}

type CreateImageJobReqAction string

const (
	CreateImageJobReqActionImport CreateImageJobReqAction = "import"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateImageJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreateImageJobReqActionImport:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateImageJobReqAction) UnmarshalText(data []byte) error {
	switch CreateImageJobReqAction(data) {
	case CreateImageJobReqActionImport:
		*s = CreateImageJobReqActionImport
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateInvoiceJobOK struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateInvoiceJobOK) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateInvoiceJobOK) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type CreateInvoiceJobReq struct {
	// The name of the action to perform.
	Action CreateInvoiceJobReqAction `json:"action"`
}

// GetAction returns the value of Action.
func (s *CreateInvoiceJobReq) GetAction() CreateInvoiceJobReqAction {
	return s.Action
}

// SetAction sets the value of Action.
func (s *CreateInvoiceJobReq) SetAction(val CreateInvoiceJobReqAction) {
	s.Action = val
}

// The name of the action to perform.
type CreateInvoiceJobReqAction string

const (
	CreateInvoiceJobReqActionPay CreateInvoiceJobReqAction = "pay"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateInvoiceJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreateInvoiceJobReqActionPay:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateInvoiceJobReqAction) UnmarshalText(data []byte) error {
	switch CreateInvoiceJobReqAction(data) {
	case CreateInvoiceJobReqActionPay:
		*s = CreateInvoiceJobReqActionPay
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateNetworkJobOK struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateNetworkJobOK) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateNetworkJobOK) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type CreateNetworkJobReq struct {
	// The job to do.
	Action CreateNetworkJobReqAction `json:"action"`
	// Additional information needed for the job.
	Contents CreateNetworkJobReqContents `json:"contents"`
}

// GetAction returns the value of Action.
func (s *CreateNetworkJobReq) GetAction() CreateNetworkJobReqAction {
	return s.Action
}

// GetContents returns the value of Contents.
func (s *CreateNetworkJobReq) GetContents() CreateNetworkJobReqContents {
	return s.Contents
}

// SetAction sets the value of Action.
func (s *CreateNetworkJobReq) SetAction(val CreateNetworkJobReqAction) {
	s.Action = val
}

// SetContents sets the value of Contents.
func (s *CreateNetworkJobReq) SetContents(val CreateNetworkJobReqContents) {
	s.Contents = val
}

// The job to do.
type CreateNetworkJobReqAction string

const (
	CreateNetworkJobReqActionReconfigure CreateNetworkJobReqAction = "reconfigure"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateNetworkJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreateNetworkJobReqActionReconfigure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateNetworkJobReqAction) UnmarshalText(data []byte) error {
	switch CreateNetworkJobReqAction(data) {
	case CreateNetworkJobReqActionReconfigure:
		*s = CreateNetworkJobReqActionReconfigure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Additional information needed for the job.
type CreateNetworkJobReqContents struct {
	// An array of environment identifiers for the network.
	EnvironmentIds []string `json:"environment_ids"`
}

// GetEnvironmentIds returns the value of EnvironmentIds.
func (s *CreateNetworkJobReqContents) GetEnvironmentIds() []string {
	return s.EnvironmentIds
}

// SetEnvironmentIds sets the value of EnvironmentIds.
func (s *CreateNetworkJobReqContents) SetEnvironmentIds(val []string) {
	s.EnvironmentIds = val
}

type CreateOrderCreated struct {
	Data OptBillingOrder `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateOrderCreated) GetData() OptBillingOrder {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateOrderCreated) SetData(val OptBillingOrder) {
	s.Data = val
}

type CreateOrderJobAccepted struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateOrderJobAccepted) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateOrderJobAccepted) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type CreateOrderJobReq struct {
	// The name of the action to perform.
	Action CreateOrderJobReqAction `json:"action"`
}

// GetAction returns the value of Action.
func (s *CreateOrderJobReq) GetAction() CreateOrderJobReqAction {
	return s.Action
}

// SetAction sets the value of Action.
func (s *CreateOrderJobReq) SetAction(val CreateOrderJobReqAction) {
	s.Action = val
}

// The name of the action to perform.
type CreateOrderJobReqAction string

const (
	CreateOrderJobReqActionConfirm CreateOrderJobReqAction = "confirm"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateOrderJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreateOrderJobReqActionConfirm:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateOrderJobReqAction) UnmarshalText(data []byte) error {
	switch CreateOrderJobReqAction(data) {
	case CreateOrderJobReqActionConfirm:
		*s = CreateOrderJobReqActionConfirm
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateOrderReq struct {
	// Id associated with the tier plan.
	TierPlanID OptString `json:"tier_plan_id"`
	// Id associated with the support plan.
	SupportPlanID OptString `json:"support_plan_id"`
	// String that defines term length.
	TermLength OptCreateOrderReqTermLength `json:"term_length"`
	// String that defines a promo code.
	PromoCode OptString `json:"promo_code"`
}

// GetTierPlanID returns the value of TierPlanID.
func (s *CreateOrderReq) GetTierPlanID() OptString {
	return s.TierPlanID
}

// GetSupportPlanID returns the value of SupportPlanID.
func (s *CreateOrderReq) GetSupportPlanID() OptString {
	return s.SupportPlanID
}

// GetTermLength returns the value of TermLength.
func (s *CreateOrderReq) GetTermLength() OptCreateOrderReqTermLength {
	return s.TermLength
}

// GetPromoCode returns the value of PromoCode.
func (s *CreateOrderReq) GetPromoCode() OptString {
	return s.PromoCode
}

// SetTierPlanID sets the value of TierPlanID.
func (s *CreateOrderReq) SetTierPlanID(val OptString) {
	s.TierPlanID = val
}

// SetSupportPlanID sets the value of SupportPlanID.
func (s *CreateOrderReq) SetSupportPlanID(val OptString) {
	s.SupportPlanID = val
}

// SetTermLength sets the value of TermLength.
func (s *CreateOrderReq) SetTermLength(val OptCreateOrderReqTermLength) {
	s.TermLength = val
}

// SetPromoCode sets the value of PromoCode.
func (s *CreateOrderReq) SetPromoCode(val OptString) {
	s.PromoCode = val
}

// String that defines term length.
type CreateOrderReqTermLength string

const (
	CreateOrderReqTermLengthOnce    CreateOrderReqTermLength = "once"
	CreateOrderReqTermLengthMonthly CreateOrderReqTermLength = "monthly"
	CreateOrderReqTermLengthYearly  CreateOrderReqTermLength = "yearly"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateOrderReqTermLength) MarshalText() ([]byte, error) {
	switch s {
	case CreateOrderReqTermLengthOnce:
		return []byte(s), nil
	case CreateOrderReqTermLengthMonthly:
		return []byte(s), nil
	case CreateOrderReqTermLengthYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateOrderReqTermLength) UnmarshalText(data []byte) error {
	switch CreateOrderReqTermLength(data) {
	case CreateOrderReqTermLengthOnce:
		*s = CreateOrderReqTermLengthOnce
		return nil
	case CreateOrderReqTermLengthMonthly:
		*s = CreateOrderReqTermLengthMonthly
		return nil
	case CreateOrderReqTermLengthYearly:
		*s = CreateOrderReqTermLengthYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreatePipelineJobOK struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreatePipelineJobOK) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreatePipelineJobOK) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type CreatePipelineJobReq struct {
	// The job to do.
	Action CreatePipelineJobReqAction `json:"action"`
}

// GetAction returns the value of Action.
func (s *CreatePipelineJobReq) GetAction() CreatePipelineJobReqAction {
	return s.Action
}

// SetAction sets the value of Action.
func (s *CreatePipelineJobReq) SetAction(val CreatePipelineJobReqAction) {
	s.Action = val
}

// The job to do.
type CreatePipelineJobReqAction string

const (
	CreatePipelineJobReqActionTrigger CreatePipelineJobReqAction = "trigger"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreatePipelineJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreatePipelineJobReqActionTrigger:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePipelineJobReqAction) UnmarshalText(data []byte) error {
	switch CreatePipelineJobReqAction(data) {
	case CreatePipelineJobReqActionTrigger:
		*s = CreatePipelineJobReqActionTrigger
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreatePipelineTriggerKeyCreated struct {
	Data OptTriggerKey `json:"data"`
}

// GetData returns the value of Data.
func (s *CreatePipelineTriggerKeyCreated) GetData() OptTriggerKey {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreatePipelineTriggerKeyCreated) SetData(val OptTriggerKey) {
	s.Data = val
}

type CreatePipelineTriggerKeyReq struct {
	// A name for the trigger key.
	Name OptString `json:"name"`
	// An array of ips this trigger key is usable from.
	Ips []string `json:"ips"`
}

// GetName returns the value of Name.
func (s *CreatePipelineTriggerKeyReq) GetName() OptString {
	return s.Name
}

// GetIps returns the value of Ips.
func (s *CreatePipelineTriggerKeyReq) GetIps() []string {
	return s.Ips
}

// SetName sets the value of Name.
func (s *CreatePipelineTriggerKeyReq) SetName(val OptString) {
	s.Name = val
}

// SetIps sets the value of Ips.
func (s *CreatePipelineTriggerKeyReq) SetIps(val []string) {
	s.Ips = val
}

type CreateProviderCreated struct {
	Data OptProvider `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateProviderCreated) GetData() OptProvider {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateProviderCreated) SetData(val OptProvider) {
	s.Data = val
}

type CreateProviderJobAccepted struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateProviderJobAccepted) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateProviderJobAccepted) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type CreateProviderJobReq struct {
	// The action the job takes.
	Action CreateProviderJobReqAction `json:"action"`
}

// GetAction returns the value of Action.
func (s *CreateProviderJobReq) GetAction() CreateProviderJobReqAction {
	return s.Action
}

// SetAction sets the value of Action.
func (s *CreateProviderJobReq) SetAction(val CreateProviderJobReqAction) {
	s.Action = val
}

// The action the job takes.
type CreateProviderJobReqAction string

const (
	CreateProviderJobReqActionVerify CreateProviderJobReqAction = "verify"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateProviderJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreateProviderJobReqActionVerify:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateProviderJobReqAction) UnmarshalText(data []byte) error {
	switch CreateProviderJobReqAction(data) {
	case CreateProviderJobReqActionVerify:
		*s = CreateProviderJobReqActionVerify
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateProviderReq struct {
	// An integration object defining the provider integration assets and endpoints.
	Integration CreateProviderReqIntegration `json:"integration"`
}

// GetIntegration returns the value of Integration.
func (s *CreateProviderReq) GetIntegration() CreateProviderReqIntegration {
	return s.Integration
}

// SetIntegration sets the value of Integration.
func (s *CreateProviderReq) SetIntegration(val CreateProviderReqIntegration) {
	s.Integration = val
}

// An integration object defining the provider integration assets and endpoints.
type CreateProviderReqIntegration struct {
	// Nativly supported IAL provider integration.
	Native OptCreateProviderReqIntegrationNative `json:"native"`
	// Custom provider information.
	Abstraction OptCreateProviderReqIntegrationAbstraction `json:"abstraction"`
}

// GetNative returns the value of Native.
func (s *CreateProviderReqIntegration) GetNative() OptCreateProviderReqIntegrationNative {
	return s.Native
}

// GetAbstraction returns the value of Abstraction.
func (s *CreateProviderReqIntegration) GetAbstraction() OptCreateProviderReqIntegrationAbstraction {
	return s.Abstraction
}

// SetNative sets the value of Native.
func (s *CreateProviderReqIntegration) SetNative(val OptCreateProviderReqIntegrationNative) {
	s.Native = val
}

// SetAbstraction sets the value of Abstraction.
func (s *CreateProviderReqIntegration) SetAbstraction(val OptCreateProviderReqIntegrationAbstraction) {
	s.Abstraction = val
}

// Custom provider information.
type CreateProviderReqIntegrationAbstraction struct {
	// A name for the custom provider abstraction.
	Name string `json:"name"`
	// The url to use when making calls to the abstraction for provision events.
	BaseURL string     `json:"base_url"`
	Auth    OptIALAuth `json:"auth"`
}

// GetName returns the value of Name.
func (s *CreateProviderReqIntegrationAbstraction) GetName() string {
	return s.Name
}

// GetBaseURL returns the value of BaseURL.
func (s *CreateProviderReqIntegrationAbstraction) GetBaseURL() string {
	return s.BaseURL
}

// GetAuth returns the value of Auth.
func (s *CreateProviderReqIntegrationAbstraction) GetAuth() OptIALAuth {
	return s.Auth
}

// SetName sets the value of Name.
func (s *CreateProviderReqIntegrationAbstraction) SetName(val string) {
	s.Name = val
}

// SetBaseURL sets the value of BaseURL.
func (s *CreateProviderReqIntegrationAbstraction) SetBaseURL(val string) {
	s.BaseURL = val
}

// SetAuth sets the value of Auth.
func (s *CreateProviderReqIntegrationAbstraction) SetAuth(val OptIALAuth) {
	s.Auth = val
}

// Nativly supported IAL provider integration.
type CreateProviderReqIntegrationNative struct {
	// An identifier for the provider.
	Identifier string  `json:"identifier"`
	Auth       IALAuth `json:"auth"`
}

// GetIdentifier returns the value of Identifier.
func (s *CreateProviderReqIntegrationNative) GetIdentifier() string {
	return s.Identifier
}

// GetAuth returns the value of Auth.
func (s *CreateProviderReqIntegrationNative) GetAuth() IALAuth {
	return s.Auth
}

// SetIdentifier sets the value of Identifier.
func (s *CreateProviderReqIntegrationNative) SetIdentifier(val string) {
	s.Identifier = val
}

// SetAuth sets the value of Auth.
func (s *CreateProviderReqIntegrationNative) SetAuth(val IALAuth) {
	s.Auth = val
}

type CreateSDNNetworkCreated struct {
	Data OptSDNNetwork `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateSDNNetworkCreated) GetData() OptSDNNetwork {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateSDNNetworkCreated) SetData(val OptSDNNetwork) {
	s.Data = val
}

type CreateSDNNetworkReq struct {
	// The name of the network.
	Name string `json:"name"`
	// A network identifier used to construct http calls that specifically use this network over another.
	Identifier string `json:"identifier"`
	// The infrastructure cluster the environments belonging to this network belong to.
	Cluster string `json:"cluster"`
	// An array of environment Ids.
	Environments []string `json:"environments"`
}

// GetName returns the value of Name.
func (s *CreateSDNNetworkReq) GetName() string {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *CreateSDNNetworkReq) GetIdentifier() string {
	return s.Identifier
}

// GetCluster returns the value of Cluster.
func (s *CreateSDNNetworkReq) GetCluster() string {
	return s.Cluster
}

// GetEnvironments returns the value of Environments.
func (s *CreateSDNNetworkReq) GetEnvironments() []string {
	return s.Environments
}

// SetName sets the value of Name.
func (s *CreateSDNNetworkReq) SetName(val string) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *CreateSDNNetworkReq) SetIdentifier(val string) {
	s.Identifier = val
}

// SetCluster sets the value of Cluster.
func (s *CreateSDNNetworkReq) SetCluster(val string) {
	s.Cluster = val
}

// SetEnvironments sets the value of Environments.
func (s *CreateSDNNetworkReq) SetEnvironments(val []string) {
	s.Environments = val
}

type CreateServerCreated struct {
	Data OptInfraServer `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateServerCreated) GetData() OptInfraServer {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateServerCreated) SetData(val OptInfraServer) {
	s.Data = val
}

type CreateServerReq struct {
	// The existing or new cluster this infrastructure should be provisioned in.
	Cluster string `json:"cluster"`
	// An array of servers to provision.
	Servers []CreateServerReqServersItem `json:"servers"`
}

// GetCluster returns the value of Cluster.
func (s *CreateServerReq) GetCluster() string {
	return s.Cluster
}

// GetServers returns the value of Servers.
func (s *CreateServerReq) GetServers() []CreateServerReqServersItem {
	return s.Servers
}

// SetCluster sets the value of Cluster.
func (s *CreateServerReq) SetCluster(val string) {
	s.Cluster = val
}

// SetServers sets the value of Servers.
func (s *CreateServerReq) SetServers(val []CreateServerReqServersItem) {
	s.Servers = val
}

type CreateServerReqServersItem struct {
	// The provider this server is from.
	Provider string `json:"provider"`
	// The model ID of the server.
	ModelID string `json:"model_id"`
	// The location ID of the server.
	LocationID string `json:"location_id"`
	// The number of this server at this location to deploy.
	Quantity int `json:"quantity"`
	// An array of hostnames for the given servers.
	Hostnames []string                                 `json:"hostnames"`
	Advanced  []CreateServerReqServersItemAdvancedItem `json:"advanced"`
}

// GetProvider returns the value of Provider.
func (s *CreateServerReqServersItem) GetProvider() string {
	return s.Provider
}

// GetModelID returns the value of ModelID.
func (s *CreateServerReqServersItem) GetModelID() string {
	return s.ModelID
}

// GetLocationID returns the value of LocationID.
func (s *CreateServerReqServersItem) GetLocationID() string {
	return s.LocationID
}

// GetQuantity returns the value of Quantity.
func (s *CreateServerReqServersItem) GetQuantity() int {
	return s.Quantity
}

// GetHostnames returns the value of Hostnames.
func (s *CreateServerReqServersItem) GetHostnames() []string {
	return s.Hostnames
}

// GetAdvanced returns the value of Advanced.
func (s *CreateServerReqServersItem) GetAdvanced() []CreateServerReqServersItemAdvancedItem {
	return s.Advanced
}

// SetProvider sets the value of Provider.
func (s *CreateServerReqServersItem) SetProvider(val string) {
	s.Provider = val
}

// SetModelID sets the value of ModelID.
func (s *CreateServerReqServersItem) SetModelID(val string) {
	s.ModelID = val
}

// SetLocationID sets the value of LocationID.
func (s *CreateServerReqServersItem) SetLocationID(val string) {
	s.LocationID = val
}

// SetQuantity sets the value of Quantity.
func (s *CreateServerReqServersItem) SetQuantity(val int) {
	s.Quantity = val
}

// SetHostnames sets the value of Hostnames.
func (s *CreateServerReqServersItem) SetHostnames(val []string) {
	s.Hostnames = val
}

// SetAdvanced sets the value of Advanced.
func (s *CreateServerReqServersItem) SetAdvanced(val []CreateServerReqServersItemAdvancedItem) {
	s.Advanced = val
}

type CreateServerReqServersItemAdvancedItem struct {
	ProvisionOptions OptCreateServerReqServersItemAdvancedItemProvisionOptions `json:"provision_options"`
	Zone             OptString                                                 `json:"zone"`
}

// GetProvisionOptions returns the value of ProvisionOptions.
func (s *CreateServerReqServersItemAdvancedItem) GetProvisionOptions() OptCreateServerReqServersItemAdvancedItemProvisionOptions {
	return s.ProvisionOptions
}

// GetZone returns the value of Zone.
func (s *CreateServerReqServersItemAdvancedItem) GetZone() OptString {
	return s.Zone
}

// SetProvisionOptions sets the value of ProvisionOptions.
func (s *CreateServerReqServersItemAdvancedItem) SetProvisionOptions(val OptCreateServerReqServersItemAdvancedItemProvisionOptions) {
	s.ProvisionOptions = val
}

// SetZone sets the value of Zone.
func (s *CreateServerReqServersItemAdvancedItem) SetZone(val OptString) {
	s.Zone = val
}

type CreateServerReqServersItemAdvancedItemProvisionOptions struct {
	AttachedStorageSize OptFloat64 `json:"attached_storage_size"`
	ReservationID       OptString  `json:"reservation_id"`
}

// GetAttachedStorageSize returns the value of AttachedStorageSize.
func (s *CreateServerReqServersItemAdvancedItemProvisionOptions) GetAttachedStorageSize() OptFloat64 {
	return s.AttachedStorageSize
}

// GetReservationID returns the value of ReservationID.
func (s *CreateServerReqServersItemAdvancedItemProvisionOptions) GetReservationID() OptString {
	return s.ReservationID
}

// SetAttachedStorageSize sets the value of AttachedStorageSize.
func (s *CreateServerReqServersItemAdvancedItemProvisionOptions) SetAttachedStorageSize(val OptFloat64) {
	s.AttachedStorageSize = val
}

// SetReservationID sets the value of ReservationID.
func (s *CreateServerReqServersItemAdvancedItemProvisionOptions) SetReservationID(val OptString) {
	s.ReservationID = val
}

type CreateStackBuildJobOK struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateStackBuildJobOK) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateStackBuildJobOK) SetData(val OptTaskDescriptor) {
	s.Data = val
}

// CreateStackBuildJobReq represents sum type.
type CreateStackBuildJobReq struct {
	Type                     CreateStackBuildJobReqType // switch on this field
	GenerateStackBuildAction GenerateStackBuildAction
	DeployStackBuildAction   DeployStackBuildAction
}

// CreateStackBuildJobReqType is oneOf type of CreateStackBuildJobReq.
type CreateStackBuildJobReqType string

// Possible values for CreateStackBuildJobReqType.
const (
	GenerateStackBuildActionCreateStackBuildJobReq CreateStackBuildJobReqType = "GenerateStackBuildAction"
	DeployStackBuildActionCreateStackBuildJobReq   CreateStackBuildJobReqType = "DeployStackBuildAction"
)

// IsGenerateStackBuildAction reports whether CreateStackBuildJobReq is GenerateStackBuildAction.
func (s CreateStackBuildJobReq) IsGenerateStackBuildAction() bool {
	return s.Type == GenerateStackBuildActionCreateStackBuildJobReq
}

// IsDeployStackBuildAction reports whether CreateStackBuildJobReq is DeployStackBuildAction.
func (s CreateStackBuildJobReq) IsDeployStackBuildAction() bool {
	return s.Type == DeployStackBuildActionCreateStackBuildJobReq
}

// SetGenerateStackBuildAction sets CreateStackBuildJobReq to GenerateStackBuildAction.
func (s *CreateStackBuildJobReq) SetGenerateStackBuildAction(v GenerateStackBuildAction) {
	s.Type = GenerateStackBuildActionCreateStackBuildJobReq
	s.GenerateStackBuildAction = v
}

// GetGenerateStackBuildAction returns GenerateStackBuildAction and true boolean if CreateStackBuildJobReq is GenerateStackBuildAction.
func (s CreateStackBuildJobReq) GetGenerateStackBuildAction() (v GenerateStackBuildAction, ok bool) {
	if !s.IsGenerateStackBuildAction() {
		return v, false
	}
	return s.GenerateStackBuildAction, true
}

// NewGenerateStackBuildActionCreateStackBuildJobReq returns new CreateStackBuildJobReq from GenerateStackBuildAction.
func NewGenerateStackBuildActionCreateStackBuildJobReq(v GenerateStackBuildAction) CreateStackBuildJobReq {
	var s CreateStackBuildJobReq
	s.SetGenerateStackBuildAction(v)
	return s
}

// SetDeployStackBuildAction sets CreateStackBuildJobReq to DeployStackBuildAction.
func (s *CreateStackBuildJobReq) SetDeployStackBuildAction(v DeployStackBuildAction) {
	s.Type = DeployStackBuildActionCreateStackBuildJobReq
	s.DeployStackBuildAction = v
}

// GetDeployStackBuildAction returns DeployStackBuildAction and true boolean if CreateStackBuildJobReq is DeployStackBuildAction.
func (s CreateStackBuildJobReq) GetDeployStackBuildAction() (v DeployStackBuildAction, ok bool) {
	if !s.IsDeployStackBuildAction() {
		return v, false
	}
	return s.DeployStackBuildAction, true
}

// NewDeployStackBuildActionCreateStackBuildJobReq returns new CreateStackBuildJobReq from DeployStackBuildAction.
func NewDeployStackBuildActionCreateStackBuildJobReq(v DeployStackBuildAction) CreateStackBuildJobReq {
	var s CreateStackBuildJobReq
	s.SetDeployStackBuildAction(v)
	return s
}

type CreateStackJobOK struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateStackJobOK) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateStackJobOK) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type CreateStackJobReq struct {
	// The job to do.
	Action CreateStackJobReqAction `json:"action"`
}

// GetAction returns the value of Action.
func (s *CreateStackJobReq) GetAction() CreateStackJobReqAction {
	return s.Action
}

// SetAction sets the value of Action.
func (s *CreateStackJobReq) SetAction(val CreateStackJobReqAction) {
	s.Action = val
}

// The job to do.
type CreateStackJobReqAction string

const (
	CreateStackJobReqActionPrune CreateStackJobReqAction = "prune"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateStackJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreateStackJobReqActionPrune:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateStackJobReqAction) UnmarshalText(data []byte) error {
	switch CreateStackJobReqAction(data) {
	case CreateStackJobReqActionPrune:
		*s = CreateStackJobReqActionPrune
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateVPNUserCreated struct {
	Data OptVPNUsers `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateVPNUserCreated) GetData() OptVPNUsers {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateVPNUserCreated) SetData(val OptVPNUsers) {
	s.Data = val
}

type CreateVPNUserReq struct {
	Value VPNUsers `json:"value"`
}

// GetValue returns the value of Value.
func (s *CreateVPNUserReq) GetValue() VPNUsers {
	return s.Value
}

// SetValue sets the value of Value.
func (s *CreateVPNUserReq) SetValue(val VPNUsers) {
	s.Value = val
}

// An identity that created a resource.
// Ref: #/components/schemas/CreatorInclude
type CreatorInclude struct {
	// Included creators that are public accounts, keyed by ID.
	Accounts OptCreatorIncludeAccounts `json:"accounts"`
	// Included creators that are employees of Cycle, keyed by ID.
	Employees OptCreatorIncludeEmployees `json:"employees"`
	// Included creators that are not Cycle accounts, keyed by ID.
	Visitors OptCreatorIncludeVisitors `json:"visitors"`
	// Included creators that are Cycle environments (usually automatically created resources), keyed by
	// ID.
	Environments OptCreatorIncludeEnvironments `json:"environments"`
	// Included creators that are Cycle API Keys, keyed by ID.
	APIKeys OptCreatorIncludeAPIKeys `json:"api_keys"`
}

// GetAccounts returns the value of Accounts.
func (s *CreatorInclude) GetAccounts() OptCreatorIncludeAccounts {
	return s.Accounts
}

// GetEmployees returns the value of Employees.
func (s *CreatorInclude) GetEmployees() OptCreatorIncludeEmployees {
	return s.Employees
}

// GetVisitors returns the value of Visitors.
func (s *CreatorInclude) GetVisitors() OptCreatorIncludeVisitors {
	return s.Visitors
}

// GetEnvironments returns the value of Environments.
func (s *CreatorInclude) GetEnvironments() OptCreatorIncludeEnvironments {
	return s.Environments
}

// GetAPIKeys returns the value of APIKeys.
func (s *CreatorInclude) GetAPIKeys() OptCreatorIncludeAPIKeys {
	return s.APIKeys
}

// SetAccounts sets the value of Accounts.
func (s *CreatorInclude) SetAccounts(val OptCreatorIncludeAccounts) {
	s.Accounts = val
}

// SetEmployees sets the value of Employees.
func (s *CreatorInclude) SetEmployees(val OptCreatorIncludeEmployees) {
	s.Employees = val
}

// SetVisitors sets the value of Visitors.
func (s *CreatorInclude) SetVisitors(val OptCreatorIncludeVisitors) {
	s.Visitors = val
}

// SetEnvironments sets the value of Environments.
func (s *CreatorInclude) SetEnvironments(val OptCreatorIncludeEnvironments) {
	s.Environments = val
}

// SetAPIKeys sets the value of APIKeys.
func (s *CreatorInclude) SetAPIKeys(val OptCreatorIncludeAPIKeys) {
	s.APIKeys = val
}

// Included creators that are Cycle API Keys, keyed by ID.
type CreatorIncludeAPIKeys map[string]ApiKeyCreator

func (s *CreatorIncludeAPIKeys) init() CreatorIncludeAPIKeys {
	m := *s
	if m == nil {
		m = map[string]ApiKeyCreator{}
		*s = m
	}
	return m
}

// Included creators that are public accounts, keyed by ID.
type CreatorIncludeAccounts map[string]PublicAccount

func (s *CreatorIncludeAccounts) init() CreatorIncludeAccounts {
	m := *s
	if m == nil {
		m = map[string]PublicAccount{}
		*s = m
	}
	return m
}

// Included creators that are employees of Cycle, keyed by ID.
type CreatorIncludeEmployees map[string]PublicAccount

func (s *CreatorIncludeEmployees) init() CreatorIncludeEmployees {
	m := *s
	if m == nil {
		m = map[string]PublicAccount{}
		*s = m
	}
	return m
}

// Included creators that are Cycle environments (usually automatically created resources), keyed by
// ID.
type CreatorIncludeEnvironments map[string]Environment

func (s *CreatorIncludeEnvironments) init() CreatorIncludeEnvironments {
	m := *s
	if m == nil {
		m = map[string]Environment{}
		*s = m
	}
	return m
}

// Included creators that are not Cycle accounts, keyed by ID.
type CreatorIncludeVisitors map[string]PublicAccount

func (s *CreatorIncludeVisitors) init() CreatorIncludeVisitors {
	m := *s
	if m == nil {
		m = map[string]PublicAccount{}
		*s = m
	}
	return m
}

// The creator scope is embedded in resource objects to describe who created them.
// Ref: #/components/schemas/CreatorScope
type CreatorScope struct {
	ID   ID               `json:"id"`
	Type CreatorScopeType `json:"type"`
}

// GetID returns the value of ID.
func (s *CreatorScope) GetID() ID {
	return s.ID
}

// GetType returns the value of Type.
func (s *CreatorScope) GetType() CreatorScopeType {
	return s.Type
}

// SetID sets the value of ID.
func (s *CreatorScope) SetID(val ID) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *CreatorScope) SetType(val CreatorScopeType) {
	s.Type = val
}

type CreatorScopeType string

const (
	CreatorScopeTypeAccount          CreatorScopeType = "account"
	CreatorScopeTypeEnvironment      CreatorScopeType = "environment"
	CreatorScopeTypePlatform         CreatorScopeType = "platform"
	CreatorScopeTypePlatformPipeline CreatorScopeType = "platform-pipeline"
	CreatorScopeTypeEmployee         CreatorScopeType = "employee"
	CreatorScopeTypeAPIKey           CreatorScopeType = "api-key"
	CreatorScopeTypeVisitor          CreatorScopeType = "visitor"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreatorScopeType) MarshalText() ([]byte, error) {
	switch s {
	case CreatorScopeTypeAccount:
		return []byte(s), nil
	case CreatorScopeTypeEnvironment:
		return []byte(s), nil
	case CreatorScopeTypePlatform:
		return []byte(s), nil
	case CreatorScopeTypePlatformPipeline:
		return []byte(s), nil
	case CreatorScopeTypeEmployee:
		return []byte(s), nil
	case CreatorScopeTypeAPIKey:
		return []byte(s), nil
	case CreatorScopeTypeVisitor:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatorScopeType) UnmarshalText(data []byte) error {
	switch CreatorScopeType(data) {
	case CreatorScopeTypeAccount:
		*s = CreatorScopeTypeAccount
		return nil
	case CreatorScopeTypeEnvironment:
		*s = CreatorScopeTypeEnvironment
		return nil
	case CreatorScopeTypePlatform:
		*s = CreatorScopeTypePlatform
		return nil
	case CreatorScopeTypePlatformPipeline:
		*s = CreatorScopeTypePlatformPipeline
		return nil
	case CreatorScopeTypeEmployee:
		*s = CreatorScopeTypeEmployee
		return nil
	case CreatorScopeTypeAPIKey:
		*s = CreatorScopeTypeAPIKey
		return nil
	case CreatorScopeTypeVisitor:
		*s = CreatorScopeTypeVisitor
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Information about a billing credit.
// Ref: #/components/schemas/Credit
type Credit struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// Some extra information about the billing credit.
	Description string `json:"description"`
	// The account the credit was issued to.
	AccountID string `json:"account_id"`
	// The amount of credit.
	Amount int `json:"amount"`
	// The amount of the credit that remains after being applied to invoices.
	AmountRemaining int `json:"amount_remaining"`
	// Information on when the billing credit expires.
	Expires NilCreditExpires `json:"expires"`
	// A collection of timestamps for each event in the billing order's lifetime.
	Events CreditEvents `json:"events"`
	State  CreditState  `json:"state"`
}

// GetID returns the value of ID.
func (s *Credit) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *Credit) GetHubID() HubID {
	return s.HubID
}

// GetDescription returns the value of Description.
func (s *Credit) GetDescription() string {
	return s.Description
}

// GetAccountID returns the value of AccountID.
func (s *Credit) GetAccountID() string {
	return s.AccountID
}

// GetAmount returns the value of Amount.
func (s *Credit) GetAmount() int {
	return s.Amount
}

// GetAmountRemaining returns the value of AmountRemaining.
func (s *Credit) GetAmountRemaining() int {
	return s.AmountRemaining
}

// GetExpires returns the value of Expires.
func (s *Credit) GetExpires() NilCreditExpires {
	return s.Expires
}

// GetEvents returns the value of Events.
func (s *Credit) GetEvents() CreditEvents {
	return s.Events
}

// GetState returns the value of State.
func (s *Credit) GetState() CreditState {
	return s.State
}

// SetID sets the value of ID.
func (s *Credit) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *Credit) SetHubID(val HubID) {
	s.HubID = val
}

// SetDescription sets the value of Description.
func (s *Credit) SetDescription(val string) {
	s.Description = val
}

// SetAccountID sets the value of AccountID.
func (s *Credit) SetAccountID(val string) {
	s.AccountID = val
}

// SetAmount sets the value of Amount.
func (s *Credit) SetAmount(val int) {
	s.Amount = val
}

// SetAmountRemaining sets the value of AmountRemaining.
func (s *Credit) SetAmountRemaining(val int) {
	s.AmountRemaining = val
}

// SetExpires sets the value of Expires.
func (s *Credit) SetExpires(val NilCreditExpires) {
	s.Expires = val
}

// SetEvents sets the value of Events.
func (s *Credit) SetEvents(val CreditEvents) {
	s.Events = val
}

// SetState sets the value of State.
func (s *Credit) SetState(val CreditState) {
	s.State = val
}

type CreditCard jx.Raw

// A collection of timestamps for each event in the billing order's lifetime.
type CreditEvents struct {
	// The timestamp of when the billing order was created.
	Created DateTime `json:"created"`
	// The timestamp of when the billing order was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the billing order was deleted.
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *CreditEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CreditEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *CreditEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *CreditEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CreditEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *CreditEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// Information on when the billing credit expires.
type CreditExpires struct {
	// A timestamp of when the billing credit expires.
	Date OptDateTime `json:"date"`
}

// GetDate returns the value of Date.
func (s *CreditExpires) GetDate() OptDateTime {
	return s.Date
}

// SetDate sets the value of Date.
func (s *CreditExpires) SetDate(val OptDateTime) {
	s.Date = val
}

// Merged schema.
type CreditState struct {
	// The current state of the credit.
	Current CreditStateCurrent `json:"current"`
	Changed DateTime           `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptCreditStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *CreditState) GetCurrent() CreditStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *CreditState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *CreditState) GetError() OptCreditStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *CreditState) SetCurrent(val CreditStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *CreditState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *CreditState) SetError(val OptCreditStateError) {
	s.Error = val
}

// The current state of the credit.
type CreditStateCurrent string

const (
	CreditStateCurrentNew     CreditStateCurrent = "new"
	CreditStateCurrentLive    CreditStateCurrent = "live"
	CreditStateCurrentExpired CreditStateCurrent = "expired"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreditStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case CreditStateCurrentNew:
		return []byte(s), nil
	case CreditStateCurrentLive:
		return []byte(s), nil
	case CreditStateCurrentExpired:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreditStateCurrent) UnmarshalText(data []byte) error {
	switch CreditStateCurrent(data) {
	case CreditStateCurrentNew:
		*s = CreditStateCurrentNew
		return nil
	case CreditStateCurrentLive:
		*s = CreditStateCurrentLive
		return nil
	case CreditStateCurrentExpired:
		*s = CreditStateCurrentExpired
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type CreditStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *CreditStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *CreditStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *CreditStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *CreditStateError) SetTime(val OptDateTime) {
	s.Time = val
}

type DNSRecordTaskAccepted struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DNSRecordTaskAccepted) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DNSRecordTaskAccepted) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type DNSRecordTaskReq struct {
	// The action that the job will take.
	Action DNSRecordTaskReqAction `json:"action"`
}

// GetAction returns the value of Action.
func (s *DNSRecordTaskReq) GetAction() DNSRecordTaskReqAction {
	return s.Action
}

// SetAction sets the value of Action.
func (s *DNSRecordTaskReq) SetAction(val DNSRecordTaskReqAction) {
	s.Action = val
}

// The action that the job will take.
type DNSRecordTaskReqAction string

const (
	DNSRecordTaskReqActionGenerateCert DNSRecordTaskReqAction = "generateCert"
)

// MarshalText implements encoding.TextMarshaler.
func (s DNSRecordTaskReqAction) MarshalText() ([]byte, error) {
	switch s {
	case DNSRecordTaskReqActionGenerateCert:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DNSRecordTaskReqAction) UnmarshalText(data []byte) error {
	switch DNSRecordTaskReqAction(data) {
	case DNSRecordTaskReqActionGenerateCert:
		*s = DNSRecordTaskReqActionGenerateCert
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DNSTLSAttemptsFilter map[string]DNSTLSAttemptsFilterItem

func (s *DNSTLSAttemptsFilter) init() DNSTLSAttemptsFilter {
	m := *s
	if m == nil {
		m = map[string]DNSTLSAttemptsFilterItem{}
		*s = m
	}
	return m
}

// DNSTLSAttemptsFilterItem represents sum type.
type DNSTLSAttemptsFilterItem struct {
	Type        DNSTLSAttemptsFilterItemType // switch on this field
	String      string
	StringArray []string
}

// DNSTLSAttemptsFilterItemType is oneOf type of DNSTLSAttemptsFilterItem.
type DNSTLSAttemptsFilterItemType string

// Possible values for DNSTLSAttemptsFilterItemType.
const (
	StringDNSTLSAttemptsFilterItem      DNSTLSAttemptsFilterItemType = "string"
	StringArrayDNSTLSAttemptsFilterItem DNSTLSAttemptsFilterItemType = "[]string"
)

// IsString reports whether DNSTLSAttemptsFilterItem is string.
func (s DNSTLSAttemptsFilterItem) IsString() bool { return s.Type == StringDNSTLSAttemptsFilterItem }

// IsStringArray reports whether DNSTLSAttemptsFilterItem is []string.
func (s DNSTLSAttemptsFilterItem) IsStringArray() bool {
	return s.Type == StringArrayDNSTLSAttemptsFilterItem
}

// SetString sets DNSTLSAttemptsFilterItem to string.
func (s *DNSTLSAttemptsFilterItem) SetString(v string) {
	s.Type = StringDNSTLSAttemptsFilterItem
	s.String = v
}

// GetString returns string and true boolean if DNSTLSAttemptsFilterItem is string.
func (s DNSTLSAttemptsFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringDNSTLSAttemptsFilterItem returns new DNSTLSAttemptsFilterItem from string.
func NewStringDNSTLSAttemptsFilterItem(v string) DNSTLSAttemptsFilterItem {
	var s DNSTLSAttemptsFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets DNSTLSAttemptsFilterItem to []string.
func (s *DNSTLSAttemptsFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayDNSTLSAttemptsFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if DNSTLSAttemptsFilterItem is []string.
func (s DNSTLSAttemptsFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayDNSTLSAttemptsFilterItem returns new DNSTLSAttemptsFilterItem from []string.
func NewStringArrayDNSTLSAttemptsFilterItem(v []string) DNSTLSAttemptsFilterItem {
	var s DNSTLSAttemptsFilterItem
	s.SetStringArray(v)
	return s
}

type DNSTLSAttemptsOK struct {
	Data []Attempt `json:"data"`
}

// GetData returns the value of Data.
func (s *DNSTLSAttemptsOK) GetData() []Attempt {
	return s.Data
}

// SetData sets the value of Data.
func (s *DNSTLSAttemptsOK) SetData(val []Attempt) {
	s.Data = val
}

type DNSTLSAttemptsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *DNSTLSAttemptsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *DNSTLSAttemptsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *DNSTLSAttemptsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *DNSTLSAttemptsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type DNSZoneTaskAccepted struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DNSZoneTaskAccepted) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DNSZoneTaskAccepted) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type DNSZoneTaskReq struct {
	// The action that the job will take.
	Action DNSZoneTaskReqAction `json:"action"`
}

// GetAction returns the value of Action.
func (s *DNSZoneTaskReq) GetAction() DNSZoneTaskReqAction {
	return s.Action
}

// SetAction sets the value of Action.
func (s *DNSZoneTaskReq) SetAction(val DNSZoneTaskReqAction) {
	s.Action = val
}

// The action that the job will take.
type DNSZoneTaskReqAction string

const (
	DNSZoneTaskReqActionVerify DNSZoneTaskReqAction = "verify"
)

// MarshalText implements encoding.TextMarshaler.
func (s DNSZoneTaskReqAction) MarshalText() ([]byte, error) {
	switch s {
	case DNSZoneTaskReqActionVerify:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DNSZoneTaskReqAction) UnmarshalText(data []byte) error {
	switch DNSZoneTaskReqAction(data) {
	case DNSZoneTaskReqActionVerify:
		*s = DNSZoneTaskReqActionVerify
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DateTime time.Time

// Ref: #/components/schemas/DeployStackBuildAction
type DeployStackBuildAction struct {
	// The action the job takes.
	Action DeployStackBuildActionAction `json:"action"`
	// Additional information needed for the job.
	Contents DeployStackBuildActionContents `json:"contents"`
}

// GetAction returns the value of Action.
func (s *DeployStackBuildAction) GetAction() DeployStackBuildActionAction {
	return s.Action
}

// GetContents returns the value of Contents.
func (s *DeployStackBuildAction) GetContents() DeployStackBuildActionContents {
	return s.Contents
}

// SetAction sets the value of Action.
func (s *DeployStackBuildAction) SetAction(val DeployStackBuildActionAction) {
	s.Action = val
}

// SetContents sets the value of Contents.
func (s *DeployStackBuildAction) SetContents(val DeployStackBuildActionContents) {
	s.Contents = val
}

// The action the job takes.
type DeployStackBuildActionAction string

const (
	DeployStackBuildActionActionDeploy DeployStackBuildActionAction = "deploy"
)

// MarshalText implements encoding.TextMarshaler.
func (s DeployStackBuildActionAction) MarshalText() ([]byte, error) {
	switch s {
	case DeployStackBuildActionActionDeploy:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DeployStackBuildActionAction) UnmarshalText(data []byte) error {
	switch DeployStackBuildActionAction(data) {
	case DeployStackBuildActionActionDeploy:
		*s = DeployStackBuildActionActionDeploy
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Additional information needed for the job.
type DeployStackBuildActionContents struct {
	// The ID for the environment this stack build will be deployed to.
	EnvironmentID string                       `json:"environment_id"`
	Update        OptStackBuildContainerUpdate `json:"update"`
}

// GetEnvironmentID returns the value of EnvironmentID.
func (s *DeployStackBuildActionContents) GetEnvironmentID() string {
	return s.EnvironmentID
}

// GetUpdate returns the value of Update.
func (s *DeployStackBuildActionContents) GetUpdate() OptStackBuildContainerUpdate {
	return s.Update
}

// SetEnvironmentID sets the value of EnvironmentID.
func (s *DeployStackBuildActionContents) SetEnvironmentID(val string) {
	s.EnvironmentID = val
}

// SetUpdate sets the value of Update.
func (s *DeployStackBuildActionContents) SetUpdate(val OptStackBuildContainerUpdate) {
	s.Update = val
}

// A deployed volume resource.
// Ref: #/components/schemas/DeployedVolume
type DeployedVolume struct {
	// The ID of the server the instance is deployed to.
	ServerID string `json:"server_id"`
	// The ID of the container the instance was created from.
	ContainerID string `json:"container_id"`
	// The ID for the volume withing the context of the container.
	ContainerVolumeID string `json:"container_volume_id"`
	// The ID for the container instance this volume is attached to.
	InstanceID string `json:"instance_id"`
	// A hash used as part of the identification mechanisms for the platform and API.
	Hash string `json:"hash"`
	// The path where the volume is mounted on the instnace filesystem.
	Path string `json:"path"`
	// Storage information for the volume.
	Storage DeployedVolumeStorage `json:"storage"`
}

// GetServerID returns the value of ServerID.
func (s *DeployedVolume) GetServerID() string {
	return s.ServerID
}

// GetContainerID returns the value of ContainerID.
func (s *DeployedVolume) GetContainerID() string {
	return s.ContainerID
}

// GetContainerVolumeID returns the value of ContainerVolumeID.
func (s *DeployedVolume) GetContainerVolumeID() string {
	return s.ContainerVolumeID
}

// GetInstanceID returns the value of InstanceID.
func (s *DeployedVolume) GetInstanceID() string {
	return s.InstanceID
}

// GetHash returns the value of Hash.
func (s *DeployedVolume) GetHash() string {
	return s.Hash
}

// GetPath returns the value of Path.
func (s *DeployedVolume) GetPath() string {
	return s.Path
}

// GetStorage returns the value of Storage.
func (s *DeployedVolume) GetStorage() DeployedVolumeStorage {
	return s.Storage
}

// SetServerID sets the value of ServerID.
func (s *DeployedVolume) SetServerID(val string) {
	s.ServerID = val
}

// SetContainerID sets the value of ContainerID.
func (s *DeployedVolume) SetContainerID(val string) {
	s.ContainerID = val
}

// SetContainerVolumeID sets the value of ContainerVolumeID.
func (s *DeployedVolume) SetContainerVolumeID(val string) {
	s.ContainerVolumeID = val
}

// SetInstanceID sets the value of InstanceID.
func (s *DeployedVolume) SetInstanceID(val string) {
	s.InstanceID = val
}

// SetHash sets the value of Hash.
func (s *DeployedVolume) SetHash(val string) {
	s.Hash = val
}

// SetPath sets the value of Path.
func (s *DeployedVolume) SetPath(val string) {
	s.Path = val
}

// SetStorage sets the value of Storage.
func (s *DeployedVolume) SetStorage(val DeployedVolumeStorage) {
	s.Storage = val
}

// Storage information for the volume.
type DeployedVolumeStorage struct {
	// The amount of volume storage used, in MB's.
	Used int `json:"used"`
	// The total amount of volume storage available, in MB's.
	Total int `json:"total"`
}

// GetUsed returns the value of Used.
func (s *DeployedVolumeStorage) GetUsed() int {
	return s.Used
}

// GetTotal returns the value of Total.
func (s *DeployedVolumeStorage) GetTotal() int {
	return s.Total
}

// SetUsed sets the value of Used.
func (s *DeployedVolumeStorage) SetUsed(val int) {
	s.Used = val
}

// SetTotal sets the value of Total.
func (s *DeployedVolumeStorage) SetTotal(val int) {
	s.Total = val
}

// Information about supported container deployment strategies.
// Ref: #/components/schemas/DeploymentStrategy
type DeploymentStrategy struct {
	// The human-friendly name of the deployment strategy.
	Name string `json:"name"`
	// A boolean where true signifies a strategy is either not yet or no longer available.
	Disabled bool `json:"disabled"`
	// A description for the deployment strategy.
	Description string `json:"description"`
}

// GetName returns the value of Name.
func (s *DeploymentStrategy) GetName() string {
	return s.Name
}

// GetDisabled returns the value of Disabled.
func (s *DeploymentStrategy) GetDisabled() bool {
	return s.Disabled
}

// GetDescription returns the value of Description.
func (s *DeploymentStrategy) GetDescription() string {
	return s.Description
}

// SetName sets the value of Name.
func (s *DeploymentStrategy) SetName(val string) {
	s.Name = val
}

// SetDisabled sets the value of Disabled.
func (s *DeploymentStrategy) SetDisabled(val bool) {
	s.Disabled = val
}

// SetDescription sets the value of Description.
func (s *DeploymentStrategy) SetDescription(val string) {
	s.Description = val
}

// Ref: #/components/schemas/DeploymentStrategyName
type DeploymentStrategyName string

const (
	DeploymentStrategyNameResourceDensity  DeploymentStrategyName = "resource-density"
	DeploymentStrategyNameHighAvailability DeploymentStrategyName = "high-availability"
	DeploymentStrategyNameFirstAvailable   DeploymentStrategyName = "first-available"
	DeploymentStrategyNameNode             DeploymentStrategyName = "node"
	DeploymentStrategyNameEdge             DeploymentStrategyName = "edge"
	DeploymentStrategyNameManual           DeploymentStrategyName = "manual"
)

// MarshalText implements encoding.TextMarshaler.
func (s DeploymentStrategyName) MarshalText() ([]byte, error) {
	switch s {
	case DeploymentStrategyNameResourceDensity:
		return []byte(s), nil
	case DeploymentStrategyNameHighAvailability:
		return []byte(s), nil
	case DeploymentStrategyNameFirstAvailable:
		return []byte(s), nil
	case DeploymentStrategyNameNode:
		return []byte(s), nil
	case DeploymentStrategyNameEdge:
		return []byte(s), nil
	case DeploymentStrategyNameManual:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DeploymentStrategyName) UnmarshalText(data []byte) error {
	switch DeploymentStrategyName(data) {
	case DeploymentStrategyNameResourceDensity:
		*s = DeploymentStrategyNameResourceDensity
		return nil
	case DeploymentStrategyNameHighAvailability:
		*s = DeploymentStrategyNameHighAvailability
		return nil
	case DeploymentStrategyNameFirstAvailable:
		*s = DeploymentStrategyNameFirstAvailable
		return nil
	case DeploymentStrategyNameNode:
		*s = DeploymentStrategyNameNode
		return nil
	case DeploymentStrategyNameEdge:
		*s = DeploymentStrategyNameEdge
		return nil
	case DeploymentStrategyNameManual:
		*s = DeploymentStrategyNameManual
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DisableTwoFaOK struct {
	Data OptTwoFaDisableResponse `json:"data"`
}

// GetData returns the value of Data.
func (s *DisableTwoFaOK) GetData() OptTwoFaDisableResponse {
	return s.Data
}

// SetData sets the value of Data.
func (s *DisableTwoFaOK) SetData(val OptTwoFaDisableResponse) {
	s.Data = val
}

type DisableTwoFaReq struct {
	// The token to authenticate TwoFa Disable.
	Token string `json:"token"`
}

// GetToken returns the value of Token.
func (s *DisableTwoFaReq) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *DisableTwoFaReq) SetToken(val string) {
	s.Token = val
}

// Billing discount information.
// Ref: #/components/schemas/Discount
type Discount struct {
	ID     ID            `json:"id"`
	Amount BillingAmount `json:"amount"`
	// A timestamp of when the discount expires.
	Expires DateTime `json:"expires"`
}

// GetID returns the value of ID.
func (s *Discount) GetID() ID {
	return s.ID
}

// GetAmount returns the value of Amount.
func (s *Discount) GetAmount() BillingAmount {
	return s.Amount
}

// GetExpires returns the value of Expires.
func (s *Discount) GetExpires() DateTime {
	return s.Expires
}

// SetID sets the value of ID.
func (s *Discount) SetID(val ID) {
	s.ID = val
}

// SetAmount sets the value of Amount.
func (s *Discount) SetAmount(val BillingAmount) {
	s.Amount = val
}

// SetExpires sets the value of Expires.
func (s *Discount) SetExpires(val DateTime) {
	s.Expires = val
}

// Information about the environments discovery service(s).
// Ref: #/components/schemas/DiscoveryEnvironmentService
type DiscoveryEnvironmentService struct {
	// Whether or not the discovery service is enabled.
	Enable bool `json:"enable"`
	// The ID of the discovery service container.
	ContainerID string `json:"container_id"`
	// A boolean representing if this service container is set to high availability mode or not.
	HighAvailability bool `json:"high_availability"`
	// The config object for the discovery service.
	Config jx.Raw `json:"config"`
}

// GetEnable returns the value of Enable.
func (s *DiscoveryEnvironmentService) GetEnable() bool {
	return s.Enable
}

// GetContainerID returns the value of ContainerID.
func (s *DiscoveryEnvironmentService) GetContainerID() string {
	return s.ContainerID
}

// GetHighAvailability returns the value of HighAvailability.
func (s *DiscoveryEnvironmentService) GetHighAvailability() bool {
	return s.HighAvailability
}

// GetConfig returns the value of Config.
func (s *DiscoveryEnvironmentService) GetConfig() jx.Raw {
	return s.Config
}

// SetEnable sets the value of Enable.
func (s *DiscoveryEnvironmentService) SetEnable(val bool) {
	s.Enable = val
}

// SetContainerID sets the value of ContainerID.
func (s *DiscoveryEnvironmentService) SetContainerID(val string) {
	s.ContainerID = val
}

// SetHighAvailability sets the value of HighAvailability.
func (s *DiscoveryEnvironmentService) SetHighAvailability(val bool) {
	s.HighAvailability = val
}

// SetConfig sets the value of Config.
func (s *DiscoveryEnvironmentService) SetConfig(val jx.Raw) {
	s.Config = val
}

// A DNS TLS certificate.
// Ref: #/components/schemas/DnsTlsCertificate
type DnsTlsCertificate struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// A list of domains associated with the certificate.
	Domains []string `json:"domains"`
	// A collection of timestamps for each event in the certificate's lifetime.
	Events DnsTlsCertificateEvents `json:"events"`
	// The certificate bundle.
	Bundle string `json:"bundle"`
	// The private key for the certificate.
	PrivateKey string `json:"private_key"`
}

// GetID returns the value of ID.
func (s *DnsTlsCertificate) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *DnsTlsCertificate) GetHubID() HubID {
	return s.HubID
}

// GetDomains returns the value of Domains.
func (s *DnsTlsCertificate) GetDomains() []string {
	return s.Domains
}

// GetEvents returns the value of Events.
func (s *DnsTlsCertificate) GetEvents() DnsTlsCertificateEvents {
	return s.Events
}

// GetBundle returns the value of Bundle.
func (s *DnsTlsCertificate) GetBundle() string {
	return s.Bundle
}

// GetPrivateKey returns the value of PrivateKey.
func (s *DnsTlsCertificate) GetPrivateKey() string {
	return s.PrivateKey
}

// SetID sets the value of ID.
func (s *DnsTlsCertificate) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *DnsTlsCertificate) SetHubID(val HubID) {
	s.HubID = val
}

// SetDomains sets the value of Domains.
func (s *DnsTlsCertificate) SetDomains(val []string) {
	s.Domains = val
}

// SetEvents sets the value of Events.
func (s *DnsTlsCertificate) SetEvents(val DnsTlsCertificateEvents) {
	s.Events = val
}

// SetBundle sets the value of Bundle.
func (s *DnsTlsCertificate) SetBundle(val string) {
	s.Bundle = val
}

// SetPrivateKey sets the value of PrivateKey.
func (s *DnsTlsCertificate) SetPrivateKey(val string) {
	s.PrivateKey = val
}

// A collection of timestamps for each event in the certificate's lifetime.
type DnsTlsCertificateEvents struct {
	// [unused].
	Created OptDateTime `json:"created"`
	// [unused].
	Updated OptDateTime `json:"updated"`
	// [unused].
	Deleted OptDateTime `json:"deleted"`
	// When the certificate was generated; useful for calculating expiration (+90 days).
	Generated OptDateTime `json:"generated"`
}

// GetCreated returns the value of Created.
func (s *DnsTlsCertificateEvents) GetCreated() OptDateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *DnsTlsCertificateEvents) GetUpdated() OptDateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *DnsTlsCertificateEvents) GetDeleted() OptDateTime {
	return s.Deleted
}

// GetGenerated returns the value of Generated.
func (s *DnsTlsCertificateEvents) GetGenerated() OptDateTime {
	return s.Generated
}

// SetCreated sets the value of Created.
func (s *DnsTlsCertificateEvents) SetCreated(val OptDateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *DnsTlsCertificateEvents) SetUpdated(val OptDateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *DnsTlsCertificateEvents) SetDeleted(val OptDateTime) {
	s.Deleted = val
}

// SetGenerated sets the value of Generated.
func (s *DnsTlsCertificateEvents) SetGenerated(val OptDateTime) {
	s.Generated = val
}

// Merged schema.
// Ref: #/components/schemas/EmployeeLogin
type EmployeeLogin struct {
	// Merged property.
	ID string `json:"id"`
	// The first and last name associated with the account.
	Name EmployeeLoginName `json:"name"`
	// Information about the email address associated with the account.
	Email EmployeeLoginEmail `json:"email"`
	// Two factor auth verification information.
	TwoFactorAuth OptNilEmployeeLoginTwoFactorAuth `json:"two_factor_auth"`
	// Indicates whether or not Cycle employees have authorization to log in to this account in a support
	// capacity.
	AllowSupportLogin OptBool      `json:"allow_support_login"`
	State             AccountState `json:"state"`
	// A collection of timestamps for each event in the account's lifetime.
	Events  EmployeeLoginEvents `json:"events"`
	Account AccountInfo         `json:"account"`
	// A timestamp of the time the login occurred.
	Time DateTime `json:"time"`
	// The type of login mechanism used.
	Type EmployeeLoginType `json:"type"`
	// A boolean where true reflects that the login was successful.
	Success bool `json:"success"`
}

// GetID returns the value of ID.
func (s *EmployeeLogin) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *EmployeeLogin) GetName() EmployeeLoginName {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *EmployeeLogin) GetEmail() EmployeeLoginEmail {
	return s.Email
}

// GetTwoFactorAuth returns the value of TwoFactorAuth.
func (s *EmployeeLogin) GetTwoFactorAuth() OptNilEmployeeLoginTwoFactorAuth {
	return s.TwoFactorAuth
}

// GetAllowSupportLogin returns the value of AllowSupportLogin.
func (s *EmployeeLogin) GetAllowSupportLogin() OptBool {
	return s.AllowSupportLogin
}

// GetState returns the value of State.
func (s *EmployeeLogin) GetState() AccountState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *EmployeeLogin) GetEvents() EmployeeLoginEvents {
	return s.Events
}

// GetAccount returns the value of Account.
func (s *EmployeeLogin) GetAccount() AccountInfo {
	return s.Account
}

// GetTime returns the value of Time.
func (s *EmployeeLogin) GetTime() DateTime {
	return s.Time
}

// GetType returns the value of Type.
func (s *EmployeeLogin) GetType() EmployeeLoginType {
	return s.Type
}

// GetSuccess returns the value of Success.
func (s *EmployeeLogin) GetSuccess() bool {
	return s.Success
}

// SetID sets the value of ID.
func (s *EmployeeLogin) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *EmployeeLogin) SetName(val EmployeeLoginName) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *EmployeeLogin) SetEmail(val EmployeeLoginEmail) {
	s.Email = val
}

// SetTwoFactorAuth sets the value of TwoFactorAuth.
func (s *EmployeeLogin) SetTwoFactorAuth(val OptNilEmployeeLoginTwoFactorAuth) {
	s.TwoFactorAuth = val
}

// SetAllowSupportLogin sets the value of AllowSupportLogin.
func (s *EmployeeLogin) SetAllowSupportLogin(val OptBool) {
	s.AllowSupportLogin = val
}

// SetState sets the value of State.
func (s *EmployeeLogin) SetState(val AccountState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *EmployeeLogin) SetEvents(val EmployeeLoginEvents) {
	s.Events = val
}

// SetAccount sets the value of Account.
func (s *EmployeeLogin) SetAccount(val AccountInfo) {
	s.Account = val
}

// SetTime sets the value of Time.
func (s *EmployeeLogin) SetTime(val DateTime) {
	s.Time = val
}

// SetType sets the value of Type.
func (s *EmployeeLogin) SetType(val EmployeeLoginType) {
	s.Type = val
}

// SetSuccess sets the value of Success.
func (s *EmployeeLogin) SetSuccess(val bool) {
	s.Success = val
}

// Information about the email address associated with the account.
type EmployeeLoginEmail struct {
	// The email address.
	Address string `json:"address"`
	// If true, the email has been verified and the account is active.
	Verified bool `json:"verified"`
	// The date the email was added to the account.
	Added DateTime `json:"added"`
}

// GetAddress returns the value of Address.
func (s *EmployeeLoginEmail) GetAddress() string {
	return s.Address
}

// GetVerified returns the value of Verified.
func (s *EmployeeLoginEmail) GetVerified() bool {
	return s.Verified
}

// GetAdded returns the value of Added.
func (s *EmployeeLoginEmail) GetAdded() DateTime {
	return s.Added
}

// SetAddress sets the value of Address.
func (s *EmployeeLoginEmail) SetAddress(val string) {
	s.Address = val
}

// SetVerified sets the value of Verified.
func (s *EmployeeLoginEmail) SetVerified(val bool) {
	s.Verified = val
}

// SetAdded sets the value of Added.
func (s *EmployeeLoginEmail) SetAdded(val DateTime) {
	s.Added = val
}

// A collection of timestamps for each event in the account's lifetime.
type EmployeeLoginEvents struct {
	// The timestamp of when the image was created.
	Created DateTime `json:"created"`
	// The timestamp of when the image was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the image was deleted.
	Deleted DateTime `json:"deleted"`
	// The timestamp of when the account was last accessed.
	LastLogin DateTime `json:"last_login"`
}

// GetCreated returns the value of Created.
func (s *EmployeeLoginEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *EmployeeLoginEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *EmployeeLoginEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetLastLogin returns the value of LastLogin.
func (s *EmployeeLoginEvents) GetLastLogin() DateTime {
	return s.LastLogin
}

// SetCreated sets the value of Created.
func (s *EmployeeLoginEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *EmployeeLoginEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *EmployeeLoginEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetLastLogin sets the value of LastLogin.
func (s *EmployeeLoginEvents) SetLastLogin(val DateTime) {
	s.LastLogin = val
}

// The first and last name associated with the account.
type EmployeeLoginName struct {
	// The first name of the account owner.
	First string `json:"first"`
	// The last name of the account owner.
	Last string `json:"last"`
}

// GetFirst returns the value of First.
func (s *EmployeeLoginName) GetFirst() string {
	return s.First
}

// GetLast returns the value of Last.
func (s *EmployeeLoginName) GetLast() string {
	return s.Last
}

// SetFirst sets the value of First.
func (s *EmployeeLoginName) SetFirst(val string) {
	s.First = val
}

// SetLast sets the value of Last.
func (s *EmployeeLoginName) SetLast(val string) {
	s.Last = val
}

// Two factor auth verification information.
type EmployeeLoginTwoFactorAuth struct {
	// A boolean representing if the account has verified with TwoFA.
	Verified bool `json:"verified"`
}

// GetVerified returns the value of Verified.
func (s *EmployeeLoginTwoFactorAuth) GetVerified() bool {
	return s.Verified
}

// SetVerified sets the value of Verified.
func (s *EmployeeLoginTwoFactorAuth) SetVerified(val bool) {
	s.Verified = val
}

// The type of login mechanism used.
type EmployeeLoginType string

const (
	EmployeeLoginTypePassword EmployeeLoginType = "password"
	EmployeeLoginTypeEmployee EmployeeLoginType = "employee"
)

// MarshalText implements encoding.TextMarshaler.
func (s EmployeeLoginType) MarshalText() ([]byte, error) {
	switch s {
	case EmployeeLoginTypePassword:
		return []byte(s), nil
	case EmployeeLoginTypeEmployee:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EmployeeLoginType) UnmarshalText(data []byte) error {
	switch EmployeeLoginType(data) {
	case EmployeeLoginTypePassword:
		*s = EmployeeLoginTypePassword
		return nil
	case EmployeeLoginTypeEmployee:
		*s = EmployeeLoginTypeEmployee
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Environments are groups of containers with a private network built between them. For more
// information on environments, see the [main docs](https://docs.cycle.io/environments/overview/).
// Ref: #/components/schemas/Environment
type Environment struct {
	ID ID `json:"id"`
	// A user defined name for the environment resource.
	Name string `json:"name"`
	// The cluster this environment is associated with.
	Cluster string           `json:"cluster"`
	About   EnvironmentAbout `json:"about"`
	Creator CreatorScope     `json:"creator"`
	HubID   HubID            `json:"hub_id"`
	State   EnvironmentState `json:"state"`
	// A collection of timestamps for each event in the environment's lifetime.
	Events         EnvironmentEvents   `json:"events"`
	Features       Features            `json:"features"`
	Services       EnvironmentServices `json:"services"`
	PrivateNetwork NilPrivateNetwork   `json:"private_network"`
	Meta           OptEnvironmentMeta  `json:"meta"`
}

// GetID returns the value of ID.
func (s *Environment) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *Environment) GetName() string {
	return s.Name
}

// GetCluster returns the value of Cluster.
func (s *Environment) GetCluster() string {
	return s.Cluster
}

// GetAbout returns the value of About.
func (s *Environment) GetAbout() EnvironmentAbout {
	return s.About
}

// GetCreator returns the value of Creator.
func (s *Environment) GetCreator() CreatorScope {
	return s.Creator
}

// GetHubID returns the value of HubID.
func (s *Environment) GetHubID() HubID {
	return s.HubID
}

// GetState returns the value of State.
func (s *Environment) GetState() EnvironmentState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *Environment) GetEvents() EnvironmentEvents {
	return s.Events
}

// GetFeatures returns the value of Features.
func (s *Environment) GetFeatures() Features {
	return s.Features
}

// GetServices returns the value of Services.
func (s *Environment) GetServices() EnvironmentServices {
	return s.Services
}

// GetPrivateNetwork returns the value of PrivateNetwork.
func (s *Environment) GetPrivateNetwork() NilPrivateNetwork {
	return s.PrivateNetwork
}

// GetMeta returns the value of Meta.
func (s *Environment) GetMeta() OptEnvironmentMeta {
	return s.Meta
}

// SetID sets the value of ID.
func (s *Environment) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Environment) SetName(val string) {
	s.Name = val
}

// SetCluster sets the value of Cluster.
func (s *Environment) SetCluster(val string) {
	s.Cluster = val
}

// SetAbout sets the value of About.
func (s *Environment) SetAbout(val EnvironmentAbout) {
	s.About = val
}

// SetCreator sets the value of Creator.
func (s *Environment) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetHubID sets the value of HubID.
func (s *Environment) SetHubID(val HubID) {
	s.HubID = val
}

// SetState sets the value of State.
func (s *Environment) SetState(val EnvironmentState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *Environment) SetEvents(val EnvironmentEvents) {
	s.Events = val
}

// SetFeatures sets the value of Features.
func (s *Environment) SetFeatures(val Features) {
	s.Features = val
}

// SetServices sets the value of Services.
func (s *Environment) SetServices(val EnvironmentServices) {
	s.Services = val
}

// SetPrivateNetwork sets the value of PrivateNetwork.
func (s *Environment) SetPrivateNetwork(val NilPrivateNetwork) {
	s.PrivateNetwork = val
}

// SetMeta sets the value of Meta.
func (s *Environment) SetMeta(val OptEnvironmentMeta) {
	s.Meta = val
}

// Contains details regarding the environment.
// Ref: #/components/schemas/EnvironmentAbout
type EnvironmentAbout struct {
	// A custom description for this environment.
	Description string `json:"description"`
	// If true, this environment has been marked as a favorite.
	Favorite bool `json:"favorite"`
}

// GetDescription returns the value of Description.
func (s *EnvironmentAbout) GetDescription() string {
	return s.Description
}

// GetFavorite returns the value of Favorite.
func (s *EnvironmentAbout) GetFavorite() bool {
	return s.Favorite
}

// SetDescription sets the value of Description.
func (s *EnvironmentAbout) SetDescription(val string) {
	s.Description = val
}

// SetFavorite sets the value of Favorite.
func (s *EnvironmentAbout) SetFavorite(val bool) {
	s.Favorite = val
}

// A collection of timestamps for each event in the environment's lifetime.
type EnvironmentEvents struct {
	// The timestamp of when the environment was created.
	Created DateTime `json:"created"`
	// The timestamp of when the environment was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the environment was deleted.
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *EnvironmentEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *EnvironmentEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *EnvironmentEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *EnvironmentEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *EnvironmentEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *EnvironmentEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// An identity that is associated with an environment.
// Ref: #/components/schemas/EnvironmentIncludes
type EnvironmentIncludes map[string]Environment

func (s *EnvironmentIncludes) init() EnvironmentIncludes {
	m := *s
	if m == nil {
		m = map[string]Environment{}
		*s = m
	}
	return m
}

// A list of meta fields that can be applied to this environment.
// Ref: #/components/schemas/EnvironmentMeta
type EnvironmentMeta struct {
	ContainersCount OptStateCountSummary `json:"containers_count"`
	InstancesCount  OptStateCountSummary `json:"instances_count"`
	Containers      []ContainerSummary   `json:"containers"`
}

// GetContainersCount returns the value of ContainersCount.
func (s *EnvironmentMeta) GetContainersCount() OptStateCountSummary {
	return s.ContainersCount
}

// GetInstancesCount returns the value of InstancesCount.
func (s *EnvironmentMeta) GetInstancesCount() OptStateCountSummary {
	return s.InstancesCount
}

// GetContainers returns the value of Containers.
func (s *EnvironmentMeta) GetContainers() []ContainerSummary {
	return s.Containers
}

// SetContainersCount sets the value of ContainersCount.
func (s *EnvironmentMeta) SetContainersCount(val OptStateCountSummary) {
	s.ContainersCount = val
}

// SetInstancesCount sets the value of InstancesCount.
func (s *EnvironmentMeta) SetInstancesCount(val OptStateCountSummary) {
	s.InstancesCount = val
}

// SetContainers sets the value of Containers.
func (s *EnvironmentMeta) SetContainers(val []ContainerSummary) {
	s.Containers = val
}

// An object containing information about a service container associated with this environment.
// Ref: #/components/schemas/EnvironmentServiceContainerSummary
type EnvironmentServiceContainerSummary struct {
	// Whether or not the service is enabled.
	Enable      bool           `json:"enable"`
	ContainerID ID             `json:"container_id"`
	State       ContainerState `json:"state"`
	// Whether or not the service is deployed in high availability.
	HighAvailability bool `json:"high_availability"`
}

// GetEnable returns the value of Enable.
func (s *EnvironmentServiceContainerSummary) GetEnable() bool {
	return s.Enable
}

// GetContainerID returns the value of ContainerID.
func (s *EnvironmentServiceContainerSummary) GetContainerID() ID {
	return s.ContainerID
}

// GetState returns the value of State.
func (s *EnvironmentServiceContainerSummary) GetState() ContainerState {
	return s.State
}

// GetHighAvailability returns the value of HighAvailability.
func (s *EnvironmentServiceContainerSummary) GetHighAvailability() bool {
	return s.HighAvailability
}

// SetEnable sets the value of Enable.
func (s *EnvironmentServiceContainerSummary) SetEnable(val bool) {
	s.Enable = val
}

// SetContainerID sets the value of ContainerID.
func (s *EnvironmentServiceContainerSummary) SetContainerID(val ID) {
	s.ContainerID = val
}

// SetState sets the value of State.
func (s *EnvironmentServiceContainerSummary) SetState(val ContainerState) {
	s.State = val
}

// SetHighAvailability sets the value of HighAvailability.
func (s *EnvironmentServiceContainerSummary) SetHighAvailability(val bool) {
	s.HighAvailability = val
}

// Service containers run by this environment and their configurations.
// Ref: #/components/schemas/EnvironmentServices
type EnvironmentServices struct {
	Loadbalancer NilLoadBalancerEnvironmentService `json:"loadbalancer"`
	Discovery    OptNilDiscoveryEnvironmentService `json:"discovery"`
	Vpn          OptNilVpnEnvironmentService       `json:"vpn"`
}

// GetLoadbalancer returns the value of Loadbalancer.
func (s *EnvironmentServices) GetLoadbalancer() NilLoadBalancerEnvironmentService {
	return s.Loadbalancer
}

// GetDiscovery returns the value of Discovery.
func (s *EnvironmentServices) GetDiscovery() OptNilDiscoveryEnvironmentService {
	return s.Discovery
}

// GetVpn returns the value of Vpn.
func (s *EnvironmentServices) GetVpn() OptNilVpnEnvironmentService {
	return s.Vpn
}

// SetLoadbalancer sets the value of Loadbalancer.
func (s *EnvironmentServices) SetLoadbalancer(val NilLoadBalancerEnvironmentService) {
	s.Loadbalancer = val
}

// SetDiscovery sets the value of Discovery.
func (s *EnvironmentServices) SetDiscovery(val OptNilDiscoveryEnvironmentService) {
	s.Discovery = val
}

// SetVpn sets the value of Vpn.
func (s *EnvironmentServices) SetVpn(val OptNilVpnEnvironmentService) {
	s.Vpn = val
}

// Merged schema.
// Ref: #/components/schemas/EnvironmentState
type EnvironmentState struct {
	// The current state of the environment.
	Current EnvironmentStateCurrent `json:"current"`
	Changed DateTime                `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptEnvironmentStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *EnvironmentState) GetCurrent() EnvironmentStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *EnvironmentState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *EnvironmentState) GetError() OptEnvironmentStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *EnvironmentState) SetCurrent(val EnvironmentStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *EnvironmentState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *EnvironmentState) SetError(val OptEnvironmentStateError) {
	s.Error = val
}

// The current state of the environment.
type EnvironmentStateCurrent string

const (
	EnvironmentStateCurrentNew      EnvironmentStateCurrent = "new"
	EnvironmentStateCurrentLive     EnvironmentStateCurrent = "live"
	EnvironmentStateCurrentCloning  EnvironmentStateCurrent = "cloning"
	EnvironmentStateCurrentDeleting EnvironmentStateCurrent = "deleting"
	EnvironmentStateCurrentDeleted  EnvironmentStateCurrent = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentStateCurrentNew:
		return []byte(s), nil
	case EnvironmentStateCurrentLive:
		return []byte(s), nil
	case EnvironmentStateCurrentCloning:
		return []byte(s), nil
	case EnvironmentStateCurrentDeleting:
		return []byte(s), nil
	case EnvironmentStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentStateCurrent) UnmarshalText(data []byte) error {
	switch EnvironmentStateCurrent(data) {
	case EnvironmentStateCurrentNew:
		*s = EnvironmentStateCurrentNew
		return nil
	case EnvironmentStateCurrentLive:
		*s = EnvironmentStateCurrentLive
		return nil
	case EnvironmentStateCurrentCloning:
		*s = EnvironmentStateCurrentCloning
		return nil
	case EnvironmentStateCurrentDeleting:
		*s = EnvironmentStateCurrentDeleting
		return nil
	case EnvironmentStateCurrentDeleted:
		*s = EnvironmentStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type EnvironmentStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *EnvironmentStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *EnvironmentStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *EnvironmentStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *EnvironmentStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Contains useful and relevant data/statistics for an environment that would otherwise be several
// separate API calls.
// Ref: #/components/schemas/EnvironmentSummary
type EnvironmentSummary struct {
	ID    ID               `json:"id"`
	State EnvironmentState `json:"state"`
	// An object containing information about the service containers associated with this container. Each
	// key is the name of a service, one of `discovery`, `vpn`, or `loadbalancer`.
	Services EnvironmentSummaryServices `json:"services"`
	// Statistics about the containers and instances associated with this environment.
	Stats EnvironmentSummaryStats `json:"stats"`
}

// GetID returns the value of ID.
func (s *EnvironmentSummary) GetID() ID {
	return s.ID
}

// GetState returns the value of State.
func (s *EnvironmentSummary) GetState() EnvironmentState {
	return s.State
}

// GetServices returns the value of Services.
func (s *EnvironmentSummary) GetServices() EnvironmentSummaryServices {
	return s.Services
}

// GetStats returns the value of Stats.
func (s *EnvironmentSummary) GetStats() EnvironmentSummaryStats {
	return s.Stats
}

// SetID sets the value of ID.
func (s *EnvironmentSummary) SetID(val ID) {
	s.ID = val
}

// SetState sets the value of State.
func (s *EnvironmentSummary) SetState(val EnvironmentState) {
	s.State = val
}

// SetServices sets the value of Services.
func (s *EnvironmentSummary) SetServices(val EnvironmentSummaryServices) {
	s.Services = val
}

// SetStats sets the value of Stats.
func (s *EnvironmentSummary) SetStats(val EnvironmentSummaryStats) {
	s.Stats = val
}

// An object containing information about the service containers associated with this container. Each
// key is the name of a service, one of `discovery`, `vpn`, or `loadbalancer`.
type EnvironmentSummaryServices struct {
	Loadbalancer EnvironmentServiceContainerSummary `json:"loadbalancer"`
	Discovery    EnvironmentServiceContainerSummary `json:"discovery"`
	Vpn          EnvironmentServiceContainerSummary `json:"vpn"`
}

// GetLoadbalancer returns the value of Loadbalancer.
func (s *EnvironmentSummaryServices) GetLoadbalancer() EnvironmentServiceContainerSummary {
	return s.Loadbalancer
}

// GetDiscovery returns the value of Discovery.
func (s *EnvironmentSummaryServices) GetDiscovery() EnvironmentServiceContainerSummary {
	return s.Discovery
}

// GetVpn returns the value of Vpn.
func (s *EnvironmentSummaryServices) GetVpn() EnvironmentServiceContainerSummary {
	return s.Vpn
}

// SetLoadbalancer sets the value of Loadbalancer.
func (s *EnvironmentSummaryServices) SetLoadbalancer(val EnvironmentServiceContainerSummary) {
	s.Loadbalancer = val
}

// SetDiscovery sets the value of Discovery.
func (s *EnvironmentSummaryServices) SetDiscovery(val EnvironmentServiceContainerSummary) {
	s.Discovery = val
}

// SetVpn sets the value of Vpn.
func (s *EnvironmentSummaryServices) SetVpn(val EnvironmentServiceContainerSummary) {
	s.Vpn = val
}

// Statistics about the containers and instances associated with this environment.
type EnvironmentSummaryStats struct {
	Containers StateCountSummary `json:"containers"`
	Instances  StateCountSummary `json:"instances"`
}

// GetContainers returns the value of Containers.
func (s *EnvironmentSummaryStats) GetContainers() StateCountSummary {
	return s.Containers
}

// GetInstances returns the value of Instances.
func (s *EnvironmentSummaryStats) GetInstances() StateCountSummary {
	return s.Instances
}

// SetContainers sets the value of Containers.
func (s *EnvironmentSummaryStats) SetContainers(val StateCountSummary) {
	s.Containers = val
}

// SetInstances sets the value of Instances.
func (s *EnvironmentSummaryStats) SetInstances(val StateCountSummary) {
	s.Instances = val
}

// The Cycle API uses standard HTTP response codes to indicate the success or failure of an API
// request. Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate a request
// that failed due to input, and codes in the `5xx` range indicate an error on Cycle's part (rare).
// There are two types of error response objects. Errors with authentication are formatted to follow
// the OAuth spec, while all other errors follow the same convention. If you're using one of our API
// Libraries, they will standardize OAuth errors to fit the general convention.
// Ref: #/components/schemas/Error
type Error struct {
	// The HTTP response code.
	Status OptErrorStatus `json:"status"`
	// A Cycle standard error code.
	Code OptErrorCode `json:"code"`
	// The main text describing the error.
	Title OptString `json:"title"`
	// A more detailed description of the error.
	Detail OptString `json:"detail"`
	// A [JSON pointer](https://tools.ietf.org/html/rfc6901/) describing the source of an error.
	Source OptString `json:"source"`
}

// GetStatus returns the value of Status.
func (s *Error) GetStatus() OptErrorStatus {
	return s.Status
}

// GetCode returns the value of Code.
func (s *Error) GetCode() OptErrorCode {
	return s.Code
}

// GetTitle returns the value of Title.
func (s *Error) GetTitle() OptString {
	return s.Title
}

// GetDetail returns the value of Detail.
func (s *Error) GetDetail() OptString {
	return s.Detail
}

// GetSource returns the value of Source.
func (s *Error) GetSource() OptString {
	return s.Source
}

// SetStatus sets the value of Status.
func (s *Error) SetStatus(val OptErrorStatus) {
	s.Status = val
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val OptErrorCode) {
	s.Code = val
}

// SetTitle sets the value of Title.
func (s *Error) SetTitle(val OptString) {
	s.Title = val
}

// SetDetail sets the value of Detail.
func (s *Error) SetDetail(val OptString) {
	s.Detail = val
}

// SetSource sets the value of Source.
func (s *Error) SetSource(val OptString) {
	s.Source = val
}

// A Cycle standard error code.
type ErrorCode string

const (
	ErrorCode400InvalidSyntax              ErrorCode = "400.invalid_syntax"
	ErrorCode401AuthInvalid                ErrorCode = "401.auth_invalid"
	ErrorCode401AuthExpired                ErrorCode = "401.auth_expired"
	ErrorCode401NoCookie                   ErrorCode = "401.no_cookie"
	ErrorCode401UnauthorizedApplication    ErrorCode = "401.unauthorized_application"
	ErrorCode403Mismatch                   ErrorCode = "403.mismatch"
	ErrorCode403WrongHub                   ErrorCode = "403.wrong_hub"
	ErrorCode403NotReady                   ErrorCode = "403.not_ready"
	ErrorCode403Expired                    ErrorCode = "403.expired"
	ErrorCode403RestrictedPortal           ErrorCode = "403.restricted_portal"
	ErrorCode403Permissions                ErrorCode = "403.permissions"
	ErrorCode403WrongScope                 ErrorCode = "403.wrong_scope"
	ErrorCode403InvalidIP                  ErrorCode = "403.invalid_ip"
	ErrorCode403InvalidState               ErrorCode = "403.invalid_state"
	ErrorCode403NotApproved                ErrorCode = "403.not_approved"
	ErrorCode403NotAllowed                 ErrorCode = "403.not_allowed"
	ErrorCode403PlatformDisabled           ErrorCode = "403.platform_disabled"
	ErrorCode4032FARequired                ErrorCode = "403.2fa_required"
	ErrorCode4032FAFailed                  ErrorCode = "403.2fa_failed"
	ErrorCode403NewApplicationCapabilities ErrorCode = "403.new_application_capabilities"
	ErrorCode403TierRestricted             ErrorCode = "403.tier_restricted"
	ErrorCode404Hub                        ErrorCode = "404.hub"
	ErrorCode404HubInvitation              ErrorCode = "404.hub.invitation"
	ErrorCode404SdnNetwork                 ErrorCode = "404.sdn_network"
	ErrorCode404Environment                ErrorCode = "404.environment"
	ErrorCode404EnvironmentScopedVariable  ErrorCode = "404.environment.scoped-variable"
	ErrorCode404HubAPIKey                  ErrorCode = "404.hub.api_key"
	ErrorCode404HubProvider                ErrorCode = "404.hub.provider"
	ErrorCode404URI                        ErrorCode = "404.uri"
	ErrorCode404Provider                   ErrorCode = "404.provider"
	ErrorCode404Stack                      ErrorCode = "404.stack"
	ErrorCode404Survey                     ErrorCode = "404.survey"
	ErrorCode404SurveyResponse             ErrorCode = "404.survey_response"
	ErrorCode404Notification               ErrorCode = "404.notification"
	ErrorCode404StackBuild                 ErrorCode = "404.stack_build"
	ErrorCode404Image                      ErrorCode = "404.image"
	ErrorCode404ImageSource                ErrorCode = "404.image.source"
	ErrorCode404ImageBuildLog              ErrorCode = "404.image.build_log"
	ErrorCode404Job                        ErrorCode = "404.job"
	ErrorCode404BillingOrder               ErrorCode = "404.billing.order"
	ErrorCode404BillingService             ErrorCode = "404.billing.service"
	ErrorCode404BillingCredit              ErrorCode = "404.billing.credit"
	ErrorCode404BillingInvoice             ErrorCode = "404.billing.invoice"
	ErrorCode404BillingTier                ErrorCode = "404.billing.tier"
	ErrorCode404BillingSupport             ErrorCode = "404.billing.support"
	ErrorCode404BillingPaymentMethod       ErrorCode = "404.billing.payment_method"
	ErrorCode404BillingPromoCode           ErrorCode = "404.billing.promo_code"
	ErrorCode404Node                       ErrorCode = "404.node"
	ErrorCode404InfrastructureLocation     ErrorCode = "404.infrastructure.location"
	ErrorCode404InfrastructureIpsPool      ErrorCode = "404.infrastructure.ips.pool"
	ErrorCode404InfrastructureProvider     ErrorCode = "404.infrastructure.provider"
	ErrorCode404InfrastructureServer       ErrorCode = "404.infrastructure.server"
	ErrorCode404InfrastructureModel        ErrorCode = "404.infrastructure.model"
	ErrorCode404Account                    ErrorCode = "404.account"
	ErrorCode404Container                  ErrorCode = "404.container"
	ErrorCode404ContainerBackup            ErrorCode = "404.container.backup"
	ErrorCode404VpnAccount                 ErrorCode = "404.vpn_account"
	ErrorCode404Instance                   ErrorCode = "404.instance"
	ErrorCode404Pipeline                   ErrorCode = "404.pipeline"
	ErrorCode404PipelineRun                ErrorCode = "404.pipeline.run"
	ErrorCode404PipelineKey                ErrorCode = "404.pipeline.key"
	ErrorCode404DNSZone                    ErrorCode = "404.dns.zone"
	ErrorCode404DNSRecord                  ErrorCode = "404.dns.record"
	ErrorCode404Cluster                    ErrorCode = "404.cluster"
	ErrorCode404PlatformBuild              ErrorCode = "404.platform_build"
	ErrorCode404CycleosBuild               ErrorCode = "404.cycleos_build"
	ErrorCode404EmailVerification          ErrorCode = "404.email_verification"
	ErrorCode404HubMembership              ErrorCode = "404.hub.membership"
	ErrorCode404Announcement               ErrorCode = "404.announcement"
	ErrorCode404HaServiceSession           ErrorCode = "404.ha_service_session"
	ErrorCode404SalesLead                  ErrorCode = "404.sales_lead"
	ErrorCode409DuplicateFound             ErrorCode = "409.duplicate_found"
	ErrorCode415InvalidContentType         ErrorCode = "415.invalid_content_type"
	ErrorCode422MissingArgument            ErrorCode = "422.missing_argument"
	ErrorCode422InvalidArgument            ErrorCode = "422.invalid_argument\""
	ErrorCode422InvalidInput               ErrorCode = "422.invalid_input\""
	ErrorCode422MaxExceeded                ErrorCode = "422.max_exceeded"
	ErrorCode422NotCompatible              ErrorCode = "422.not_compatible"
	ErrorCode422AlreadyExists              ErrorCode = "422.already_exists"
	ErrorCode429RateLimiting               ErrorCode = "429.rate_limiting"
	ErrorCode500Database                   ErrorCode = "500.database"
	ErrorCode500DatabaseInsert             ErrorCode = "500.database_insert"
	ErrorCode500DatabaseUpdate             ErrorCode = "500.database_update"
	ErrorCode500DatabaseRemove             ErrorCode = "500.database_remove"
	ErrorCode500Jobd                       ErrorCode = "500.jobd"
	ErrorCode500Unknown                    ErrorCode = "500.unknown"
	ErrorCode500Dev                        ErrorCode = "500.dev"
	ErrorCode500Email                      ErrorCode = "500.email"
	ErrorCode500PaymentGateway             ErrorCode = "500.payment_gateway"
	ErrorCode503NotReady                   ErrorCode = "503.not_ready"
	ErrorCode503NotEnabled                 ErrorCode = "503.not_enabled"
	ErrorCode503DependencyNotEnabled       ErrorCode = "503.dependency_not_enabled"
)

// MarshalText implements encoding.TextMarshaler.
func (s ErrorCode) MarshalText() ([]byte, error) {
	switch s {
	case ErrorCode400InvalidSyntax:
		return []byte(s), nil
	case ErrorCode401AuthInvalid:
		return []byte(s), nil
	case ErrorCode401AuthExpired:
		return []byte(s), nil
	case ErrorCode401NoCookie:
		return []byte(s), nil
	case ErrorCode401UnauthorizedApplication:
		return []byte(s), nil
	case ErrorCode403Mismatch:
		return []byte(s), nil
	case ErrorCode403WrongHub:
		return []byte(s), nil
	case ErrorCode403NotReady:
		return []byte(s), nil
	case ErrorCode403Expired:
		return []byte(s), nil
	case ErrorCode403RestrictedPortal:
		return []byte(s), nil
	case ErrorCode403Permissions:
		return []byte(s), nil
	case ErrorCode403WrongScope:
		return []byte(s), nil
	case ErrorCode403InvalidIP:
		return []byte(s), nil
	case ErrorCode403InvalidState:
		return []byte(s), nil
	case ErrorCode403NotApproved:
		return []byte(s), nil
	case ErrorCode403NotAllowed:
		return []byte(s), nil
	case ErrorCode403PlatformDisabled:
		return []byte(s), nil
	case ErrorCode4032FARequired:
		return []byte(s), nil
	case ErrorCode4032FAFailed:
		return []byte(s), nil
	case ErrorCode403NewApplicationCapabilities:
		return []byte(s), nil
	case ErrorCode403TierRestricted:
		return []byte(s), nil
	case ErrorCode404Hub:
		return []byte(s), nil
	case ErrorCode404HubInvitation:
		return []byte(s), nil
	case ErrorCode404SdnNetwork:
		return []byte(s), nil
	case ErrorCode404Environment:
		return []byte(s), nil
	case ErrorCode404EnvironmentScopedVariable:
		return []byte(s), nil
	case ErrorCode404HubAPIKey:
		return []byte(s), nil
	case ErrorCode404HubProvider:
		return []byte(s), nil
	case ErrorCode404URI:
		return []byte(s), nil
	case ErrorCode404Provider:
		return []byte(s), nil
	case ErrorCode404Stack:
		return []byte(s), nil
	case ErrorCode404Survey:
		return []byte(s), nil
	case ErrorCode404SurveyResponse:
		return []byte(s), nil
	case ErrorCode404Notification:
		return []byte(s), nil
	case ErrorCode404StackBuild:
		return []byte(s), nil
	case ErrorCode404Image:
		return []byte(s), nil
	case ErrorCode404ImageSource:
		return []byte(s), nil
	case ErrorCode404ImageBuildLog:
		return []byte(s), nil
	case ErrorCode404Job:
		return []byte(s), nil
	case ErrorCode404BillingOrder:
		return []byte(s), nil
	case ErrorCode404BillingService:
		return []byte(s), nil
	case ErrorCode404BillingCredit:
		return []byte(s), nil
	case ErrorCode404BillingInvoice:
		return []byte(s), nil
	case ErrorCode404BillingTier:
		return []byte(s), nil
	case ErrorCode404BillingSupport:
		return []byte(s), nil
	case ErrorCode404BillingPaymentMethod:
		return []byte(s), nil
	case ErrorCode404BillingPromoCode:
		return []byte(s), nil
	case ErrorCode404Node:
		return []byte(s), nil
	case ErrorCode404InfrastructureLocation:
		return []byte(s), nil
	case ErrorCode404InfrastructureIpsPool:
		return []byte(s), nil
	case ErrorCode404InfrastructureProvider:
		return []byte(s), nil
	case ErrorCode404InfrastructureServer:
		return []byte(s), nil
	case ErrorCode404InfrastructureModel:
		return []byte(s), nil
	case ErrorCode404Account:
		return []byte(s), nil
	case ErrorCode404Container:
		return []byte(s), nil
	case ErrorCode404ContainerBackup:
		return []byte(s), nil
	case ErrorCode404VpnAccount:
		return []byte(s), nil
	case ErrorCode404Instance:
		return []byte(s), nil
	case ErrorCode404Pipeline:
		return []byte(s), nil
	case ErrorCode404PipelineRun:
		return []byte(s), nil
	case ErrorCode404PipelineKey:
		return []byte(s), nil
	case ErrorCode404DNSZone:
		return []byte(s), nil
	case ErrorCode404DNSRecord:
		return []byte(s), nil
	case ErrorCode404Cluster:
		return []byte(s), nil
	case ErrorCode404PlatformBuild:
		return []byte(s), nil
	case ErrorCode404CycleosBuild:
		return []byte(s), nil
	case ErrorCode404EmailVerification:
		return []byte(s), nil
	case ErrorCode404HubMembership:
		return []byte(s), nil
	case ErrorCode404Announcement:
		return []byte(s), nil
	case ErrorCode404HaServiceSession:
		return []byte(s), nil
	case ErrorCode404SalesLead:
		return []byte(s), nil
	case ErrorCode409DuplicateFound:
		return []byte(s), nil
	case ErrorCode415InvalidContentType:
		return []byte(s), nil
	case ErrorCode422MissingArgument:
		return []byte(s), nil
	case ErrorCode422InvalidArgument:
		return []byte(s), nil
	case ErrorCode422InvalidInput:
		return []byte(s), nil
	case ErrorCode422MaxExceeded:
		return []byte(s), nil
	case ErrorCode422NotCompatible:
		return []byte(s), nil
	case ErrorCode422AlreadyExists:
		return []byte(s), nil
	case ErrorCode429RateLimiting:
		return []byte(s), nil
	case ErrorCode500Database:
		return []byte(s), nil
	case ErrorCode500DatabaseInsert:
		return []byte(s), nil
	case ErrorCode500DatabaseUpdate:
		return []byte(s), nil
	case ErrorCode500DatabaseRemove:
		return []byte(s), nil
	case ErrorCode500Jobd:
		return []byte(s), nil
	case ErrorCode500Unknown:
		return []byte(s), nil
	case ErrorCode500Dev:
		return []byte(s), nil
	case ErrorCode500Email:
		return []byte(s), nil
	case ErrorCode500PaymentGateway:
		return []byte(s), nil
	case ErrorCode503NotReady:
		return []byte(s), nil
	case ErrorCode503NotEnabled:
		return []byte(s), nil
	case ErrorCode503DependencyNotEnabled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ErrorCode) UnmarshalText(data []byte) error {
	switch ErrorCode(data) {
	case ErrorCode400InvalidSyntax:
		*s = ErrorCode400InvalidSyntax
		return nil
	case ErrorCode401AuthInvalid:
		*s = ErrorCode401AuthInvalid
		return nil
	case ErrorCode401AuthExpired:
		*s = ErrorCode401AuthExpired
		return nil
	case ErrorCode401NoCookie:
		*s = ErrorCode401NoCookie
		return nil
	case ErrorCode401UnauthorizedApplication:
		*s = ErrorCode401UnauthorizedApplication
		return nil
	case ErrorCode403Mismatch:
		*s = ErrorCode403Mismatch
		return nil
	case ErrorCode403WrongHub:
		*s = ErrorCode403WrongHub
		return nil
	case ErrorCode403NotReady:
		*s = ErrorCode403NotReady
		return nil
	case ErrorCode403Expired:
		*s = ErrorCode403Expired
		return nil
	case ErrorCode403RestrictedPortal:
		*s = ErrorCode403RestrictedPortal
		return nil
	case ErrorCode403Permissions:
		*s = ErrorCode403Permissions
		return nil
	case ErrorCode403WrongScope:
		*s = ErrorCode403WrongScope
		return nil
	case ErrorCode403InvalidIP:
		*s = ErrorCode403InvalidIP
		return nil
	case ErrorCode403InvalidState:
		*s = ErrorCode403InvalidState
		return nil
	case ErrorCode403NotApproved:
		*s = ErrorCode403NotApproved
		return nil
	case ErrorCode403NotAllowed:
		*s = ErrorCode403NotAllowed
		return nil
	case ErrorCode403PlatformDisabled:
		*s = ErrorCode403PlatformDisabled
		return nil
	case ErrorCode4032FARequired:
		*s = ErrorCode4032FARequired
		return nil
	case ErrorCode4032FAFailed:
		*s = ErrorCode4032FAFailed
		return nil
	case ErrorCode403NewApplicationCapabilities:
		*s = ErrorCode403NewApplicationCapabilities
		return nil
	case ErrorCode403TierRestricted:
		*s = ErrorCode403TierRestricted
		return nil
	case ErrorCode404Hub:
		*s = ErrorCode404Hub
		return nil
	case ErrorCode404HubInvitation:
		*s = ErrorCode404HubInvitation
		return nil
	case ErrorCode404SdnNetwork:
		*s = ErrorCode404SdnNetwork
		return nil
	case ErrorCode404Environment:
		*s = ErrorCode404Environment
		return nil
	case ErrorCode404EnvironmentScopedVariable:
		*s = ErrorCode404EnvironmentScopedVariable
		return nil
	case ErrorCode404HubAPIKey:
		*s = ErrorCode404HubAPIKey
		return nil
	case ErrorCode404HubProvider:
		*s = ErrorCode404HubProvider
		return nil
	case ErrorCode404URI:
		*s = ErrorCode404URI
		return nil
	case ErrorCode404Provider:
		*s = ErrorCode404Provider
		return nil
	case ErrorCode404Stack:
		*s = ErrorCode404Stack
		return nil
	case ErrorCode404Survey:
		*s = ErrorCode404Survey
		return nil
	case ErrorCode404SurveyResponse:
		*s = ErrorCode404SurveyResponse
		return nil
	case ErrorCode404Notification:
		*s = ErrorCode404Notification
		return nil
	case ErrorCode404StackBuild:
		*s = ErrorCode404StackBuild
		return nil
	case ErrorCode404Image:
		*s = ErrorCode404Image
		return nil
	case ErrorCode404ImageSource:
		*s = ErrorCode404ImageSource
		return nil
	case ErrorCode404ImageBuildLog:
		*s = ErrorCode404ImageBuildLog
		return nil
	case ErrorCode404Job:
		*s = ErrorCode404Job
		return nil
	case ErrorCode404BillingOrder:
		*s = ErrorCode404BillingOrder
		return nil
	case ErrorCode404BillingService:
		*s = ErrorCode404BillingService
		return nil
	case ErrorCode404BillingCredit:
		*s = ErrorCode404BillingCredit
		return nil
	case ErrorCode404BillingInvoice:
		*s = ErrorCode404BillingInvoice
		return nil
	case ErrorCode404BillingTier:
		*s = ErrorCode404BillingTier
		return nil
	case ErrorCode404BillingSupport:
		*s = ErrorCode404BillingSupport
		return nil
	case ErrorCode404BillingPaymentMethod:
		*s = ErrorCode404BillingPaymentMethod
		return nil
	case ErrorCode404BillingPromoCode:
		*s = ErrorCode404BillingPromoCode
		return nil
	case ErrorCode404Node:
		*s = ErrorCode404Node
		return nil
	case ErrorCode404InfrastructureLocation:
		*s = ErrorCode404InfrastructureLocation
		return nil
	case ErrorCode404InfrastructureIpsPool:
		*s = ErrorCode404InfrastructureIpsPool
		return nil
	case ErrorCode404InfrastructureProvider:
		*s = ErrorCode404InfrastructureProvider
		return nil
	case ErrorCode404InfrastructureServer:
		*s = ErrorCode404InfrastructureServer
		return nil
	case ErrorCode404InfrastructureModel:
		*s = ErrorCode404InfrastructureModel
		return nil
	case ErrorCode404Account:
		*s = ErrorCode404Account
		return nil
	case ErrorCode404Container:
		*s = ErrorCode404Container
		return nil
	case ErrorCode404ContainerBackup:
		*s = ErrorCode404ContainerBackup
		return nil
	case ErrorCode404VpnAccount:
		*s = ErrorCode404VpnAccount
		return nil
	case ErrorCode404Instance:
		*s = ErrorCode404Instance
		return nil
	case ErrorCode404Pipeline:
		*s = ErrorCode404Pipeline
		return nil
	case ErrorCode404PipelineRun:
		*s = ErrorCode404PipelineRun
		return nil
	case ErrorCode404PipelineKey:
		*s = ErrorCode404PipelineKey
		return nil
	case ErrorCode404DNSZone:
		*s = ErrorCode404DNSZone
		return nil
	case ErrorCode404DNSRecord:
		*s = ErrorCode404DNSRecord
		return nil
	case ErrorCode404Cluster:
		*s = ErrorCode404Cluster
		return nil
	case ErrorCode404PlatformBuild:
		*s = ErrorCode404PlatformBuild
		return nil
	case ErrorCode404CycleosBuild:
		*s = ErrorCode404CycleosBuild
		return nil
	case ErrorCode404EmailVerification:
		*s = ErrorCode404EmailVerification
		return nil
	case ErrorCode404HubMembership:
		*s = ErrorCode404HubMembership
		return nil
	case ErrorCode404Announcement:
		*s = ErrorCode404Announcement
		return nil
	case ErrorCode404HaServiceSession:
		*s = ErrorCode404HaServiceSession
		return nil
	case ErrorCode404SalesLead:
		*s = ErrorCode404SalesLead
		return nil
	case ErrorCode409DuplicateFound:
		*s = ErrorCode409DuplicateFound
		return nil
	case ErrorCode415InvalidContentType:
		*s = ErrorCode415InvalidContentType
		return nil
	case ErrorCode422MissingArgument:
		*s = ErrorCode422MissingArgument
		return nil
	case ErrorCode422InvalidArgument:
		*s = ErrorCode422InvalidArgument
		return nil
	case ErrorCode422InvalidInput:
		*s = ErrorCode422InvalidInput
		return nil
	case ErrorCode422MaxExceeded:
		*s = ErrorCode422MaxExceeded
		return nil
	case ErrorCode422NotCompatible:
		*s = ErrorCode422NotCompatible
		return nil
	case ErrorCode422AlreadyExists:
		*s = ErrorCode422AlreadyExists
		return nil
	case ErrorCode429RateLimiting:
		*s = ErrorCode429RateLimiting
		return nil
	case ErrorCode500Database:
		*s = ErrorCode500Database
		return nil
	case ErrorCode500DatabaseInsert:
		*s = ErrorCode500DatabaseInsert
		return nil
	case ErrorCode500DatabaseUpdate:
		*s = ErrorCode500DatabaseUpdate
		return nil
	case ErrorCode500DatabaseRemove:
		*s = ErrorCode500DatabaseRemove
		return nil
	case ErrorCode500Jobd:
		*s = ErrorCode500Jobd
		return nil
	case ErrorCode500Unknown:
		*s = ErrorCode500Unknown
		return nil
	case ErrorCode500Dev:
		*s = ErrorCode500Dev
		return nil
	case ErrorCode500Email:
		*s = ErrorCode500Email
		return nil
	case ErrorCode500PaymentGateway:
		*s = ErrorCode500PaymentGateway
		return nil
	case ErrorCode503NotReady:
		*s = ErrorCode503NotReady
		return nil
	case ErrorCode503NotEnabled:
		*s = ErrorCode503NotEnabled
		return nil
	case ErrorCode503DependencyNotEnabled:
		*s = ErrorCode503DependencyNotEnabled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error response.
// Ref: #/components/schemas/ErrorEnvelope
type ErrorEnvelope struct {
	Error Error `json:"error"`
	// Data will always be `null` here.
	Data jx.Raw `json:"data"`
}

// GetError returns the value of Error.
func (s *ErrorEnvelope) GetError() Error {
	return s.Error
}

// GetData returns the value of Data.
func (s *ErrorEnvelope) GetData() jx.Raw {
	return s.Data
}

// SetError sets the value of Error.
func (s *ErrorEnvelope) SetError(val Error) {
	s.Error = val
}

// SetData sets the value of Data.
func (s *ErrorEnvelope) SetData(val jx.Raw) {
	s.Data = val
}

// ErrorEnvelopeStatusCode wraps ErrorEnvelope with StatusCode.
type ErrorEnvelopeStatusCode struct {
	StatusCode int
	Response   ErrorEnvelope
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorEnvelopeStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorEnvelopeStatusCode) GetResponse() ErrorEnvelope {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorEnvelopeStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorEnvelopeStatusCode) SetResponse(val ErrorEnvelope) {
	s.Response = val
}

// The HTTP response code.
type ErrorStatus int

const (
	ErrorStatus400 ErrorStatus = 400
	ErrorStatus401 ErrorStatus = 401
	ErrorStatus403 ErrorStatus = 403
	ErrorStatus404 ErrorStatus = 404
	ErrorStatus409 ErrorStatus = 409
	ErrorStatus415 ErrorStatus = 415
	ErrorStatus422 ErrorStatus = 422
	ErrorStatus500 ErrorStatus = 500
)

// Cycle resources usually contain an events field, the event being the key and a formatted time
// string being the value.
// Ref: #/components/schemas/Events
type Events map[string]DateTime

func (s *Events) init() Events {
	m := *s
	if m == nil {
		m = map[string]DateTime{}
		*s = m
	}
	return m
}

type ExpireInstanceSSHTokensOK struct {
	// The number of tokens expired.
	Data OptExpireInstanceSSHTokensOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *ExpireInstanceSSHTokensOK) GetData() OptExpireInstanceSSHTokensOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *ExpireInstanceSSHTokensOK) SetData(val OptExpireInstanceSSHTokensOKData) {
	s.Data = val
}

// The number of tokens expired.
type ExpireInstanceSSHTokensOKData struct {
	// The number of tokens expired.
	Tokens int `json:"tokens"`
}

// GetTokens returns the value of Tokens.
func (s *ExpireInstanceSSHTokensOKData) GetTokens() int {
	return s.Tokens
}

// SetTokens sets the value of Tokens.
func (s *ExpireInstanceSSHTokensOKData) SetTokens(val int) {
	s.Tokens = val
}

// An object representing specialized features configured for this environment.
// Ref: #/components/schemas/Features
type Features struct {
	// Whether or not legacy networking mode is enabled on this environment.
	LegacyNetworking bool `json:"legacy_networking"`
}

// GetLegacyNetworking returns the value of LegacyNetworking.
func (s *Features) GetLegacyNetworking() bool {
	return s.LegacyNetworking
}

// SetLegacyNetworking sets the value of LegacyNetworking.
func (s *Features) SetLegacyNetworking(val bool) {
	s.LegacyNetworking = val
}

// The spec for server features.
// Ref: #/components/schemas/FeaturesSpec
type FeaturesSpec struct {
	// The type of raid supported, if any.
	Raid NilString `json:"raid"`
	// Features specific to AWS.
	AWS OptFeaturesSpecAWS `json:"aws"`
}

// GetRaid returns the value of Raid.
func (s *FeaturesSpec) GetRaid() NilString {
	return s.Raid
}

// GetAWS returns the value of AWS.
func (s *FeaturesSpec) GetAWS() OptFeaturesSpecAWS {
	return s.AWS
}

// SetRaid sets the value of Raid.
func (s *FeaturesSpec) SetRaid(val NilString) {
	s.Raid = val
}

// SetAWS sets the value of AWS.
func (s *FeaturesSpec) SetAWS(val OptFeaturesSpecAWS) {
	s.AWS = val
}

// Features specific to AWS.
type FeaturesSpecAWS struct {
	// A boolean where true indicates this is a machine that can support a much higher networking
	// throughput.
	EnaSupport bool `json:"ena_support"`
	// A boolean where true indicates this is a machine that can support higher storage throughput.
	EbsOptimized bool `json:"ebs_optimized"`
}

// GetEnaSupport returns the value of EnaSupport.
func (s *FeaturesSpecAWS) GetEnaSupport() bool {
	return s.EnaSupport
}

// GetEbsOptimized returns the value of EbsOptimized.
func (s *FeaturesSpecAWS) GetEbsOptimized() bool {
	return s.EbsOptimized
}

// SetEnaSupport sets the value of EnaSupport.
func (s *FeaturesSpecAWS) SetEnaSupport(val bool) {
	s.EnaSupport = val
}

// SetEbsOptimized sets the value of EbsOptimized.
func (s *FeaturesSpecAWS) SetEbsOptimized(val bool) {
	s.EbsOptimized = val
}

// Information about a given servers GPU resources.
// Ref: #/components/schemas/GPUSpec
type GPUSpec struct {
	// The number of GPUs.
	Count int `json:"count"`
	// The number of cores.
	Cores OptInt `json:"cores"`
	// The amount of virtaul RAM for the GPU.
	VramGB OptInt `json:"vram_gb"`
	// The type of the GPU.
	Type string `json:"type"`
	// A boolean where true represents the GPU is shared.
	Shared OptBool `json:"shared"`
	// Extra information about the GPU if there is any.
	Extra OptGPUSpecExtra `json:"extra"`
}

// GetCount returns the value of Count.
func (s *GPUSpec) GetCount() int {
	return s.Count
}

// GetCores returns the value of Cores.
func (s *GPUSpec) GetCores() OptInt {
	return s.Cores
}

// GetVramGB returns the value of VramGB.
func (s *GPUSpec) GetVramGB() OptInt {
	return s.VramGB
}

// GetType returns the value of Type.
func (s *GPUSpec) GetType() string {
	return s.Type
}

// GetShared returns the value of Shared.
func (s *GPUSpec) GetShared() OptBool {
	return s.Shared
}

// GetExtra returns the value of Extra.
func (s *GPUSpec) GetExtra() OptGPUSpecExtra {
	return s.Extra
}

// SetCount sets the value of Count.
func (s *GPUSpec) SetCount(val int) {
	s.Count = val
}

// SetCores sets the value of Cores.
func (s *GPUSpec) SetCores(val OptInt) {
	s.Cores = val
}

// SetVramGB sets the value of VramGB.
func (s *GPUSpec) SetVramGB(val OptInt) {
	s.VramGB = val
}

// SetType sets the value of Type.
func (s *GPUSpec) SetType(val string) {
	s.Type = val
}

// SetShared sets the value of Shared.
func (s *GPUSpec) SetShared(val OptBool) {
	s.Shared = val
}

// SetExtra sets the value of Extra.
func (s *GPUSpec) SetExtra(val OptGPUSpecExtra) {
	s.Extra = val
}

// Extra information about the GPU if there is any.
type GPUSpecExtra map[string]string

func (s *GPUSpecExtra) init() GPUSpecExtra {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/GenerateStackBuildAction
type GenerateStackBuildAction struct {
	// The job to do.
	Action GenerateStackBuildActionAction `json:"action"`
}

// GetAction returns the value of Action.
func (s *GenerateStackBuildAction) GetAction() GenerateStackBuildActionAction {
	return s.Action
}

// SetAction sets the value of Action.
func (s *GenerateStackBuildAction) SetAction(val GenerateStackBuildActionAction) {
	s.Action = val
}

// The job to do.
type GenerateStackBuildActionAction string

const (
	GenerateStackBuildActionActionGenerate GenerateStackBuildActionAction = "generate"
)

// MarshalText implements encoding.TextMarshaler.
func (s GenerateStackBuildActionAction) MarshalText() ([]byte, error) {
	switch s {
	case GenerateStackBuildActionActionGenerate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GenerateStackBuildActionAction) UnmarshalText(data []byte) error {
	switch GenerateStackBuildActionAction(data) {
	case GenerateStackBuildActionActionGenerate:
		*s = GenerateStackBuildActionActionGenerate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Geographic information about a provider location.
// Ref: #/components/schemas/Geographic
type Geographic struct {
	// The latitude of the given provider datacenter.
	Latitude int `json:"latitude"`
	// The longitude of the given provider datacenter.
	Longitude int `json:"longitude"`
	// The city the datacenter resides in.
	City string `json:"city"`
	// The state the datacenter resides in.
	State string `json:"state"`
	// The country the datacenter resides in.
	Country string `json:"country"`
	// The region the datacenter resides in.
	Region string `json:"region"`
}

// GetLatitude returns the value of Latitude.
func (s *Geographic) GetLatitude() int {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s *Geographic) GetLongitude() int {
	return s.Longitude
}

// GetCity returns the value of City.
func (s *Geographic) GetCity() string {
	return s.City
}

// GetState returns the value of State.
func (s *Geographic) GetState() string {
	return s.State
}

// GetCountry returns the value of Country.
func (s *Geographic) GetCountry() string {
	return s.Country
}

// GetRegion returns the value of Region.
func (s *Geographic) GetRegion() string {
	return s.Region
}

// SetLatitude sets the value of Latitude.
func (s *Geographic) SetLatitude(val int) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *Geographic) SetLongitude(val int) {
	s.Longitude = val
}

// SetCity sets the value of City.
func (s *Geographic) SetCity(val string) {
	s.City = val
}

// SetState sets the value of State.
func (s *Geographic) SetState(val string) {
	s.State = val
}

// SetCountry sets the value of Country.
func (s *Geographic) SetCountry(val string) {
	s.Country = val
}

// SetRegion sets the value of Region.
func (s *Geographic) SetRegion(val string) {
	s.Region = val
}

type GetAccountInvitesFilter map[string]GetAccountInvitesFilterItem

func (s *GetAccountInvitesFilter) init() GetAccountInvitesFilter {
	m := *s
	if m == nil {
		m = map[string]GetAccountInvitesFilterItem{}
		*s = m
	}
	return m
}

// GetAccountInvitesFilterItem represents sum type.
type GetAccountInvitesFilterItem struct {
	Type                         GetAccountInvitesFilterItemType // switch on this field
	String                       string
	StringArray                  []string
	GetAccountInvitesFilterItem2 GetAccountInvitesFilterItem2
}

// GetAccountInvitesFilterItemType is oneOf type of GetAccountInvitesFilterItem.
type GetAccountInvitesFilterItemType string

// Possible values for GetAccountInvitesFilterItemType.
const (
	StringGetAccountInvitesFilterItem                       GetAccountInvitesFilterItemType = "string"
	StringArrayGetAccountInvitesFilterItem                  GetAccountInvitesFilterItemType = "[]string"
	GetAccountInvitesFilterItem2GetAccountInvitesFilterItem GetAccountInvitesFilterItemType = "GetAccountInvitesFilterItem2"
)

// IsString reports whether GetAccountInvitesFilterItem is string.
func (s GetAccountInvitesFilterItem) IsString() bool {
	return s.Type == StringGetAccountInvitesFilterItem
}

// IsStringArray reports whether GetAccountInvitesFilterItem is []string.
func (s GetAccountInvitesFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetAccountInvitesFilterItem
}

// IsGetAccountInvitesFilterItem2 reports whether GetAccountInvitesFilterItem is GetAccountInvitesFilterItem2.
func (s GetAccountInvitesFilterItem) IsGetAccountInvitesFilterItem2() bool {
	return s.Type == GetAccountInvitesFilterItem2GetAccountInvitesFilterItem
}

// SetString sets GetAccountInvitesFilterItem to string.
func (s *GetAccountInvitesFilterItem) SetString(v string) {
	s.Type = StringGetAccountInvitesFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetAccountInvitesFilterItem is string.
func (s GetAccountInvitesFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetAccountInvitesFilterItem returns new GetAccountInvitesFilterItem from string.
func NewStringGetAccountInvitesFilterItem(v string) GetAccountInvitesFilterItem {
	var s GetAccountInvitesFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetAccountInvitesFilterItem to []string.
func (s *GetAccountInvitesFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetAccountInvitesFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetAccountInvitesFilterItem is []string.
func (s GetAccountInvitesFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetAccountInvitesFilterItem returns new GetAccountInvitesFilterItem from []string.
func NewStringArrayGetAccountInvitesFilterItem(v []string) GetAccountInvitesFilterItem {
	var s GetAccountInvitesFilterItem
	s.SetStringArray(v)
	return s
}

// SetGetAccountInvitesFilterItem2 sets GetAccountInvitesFilterItem to GetAccountInvitesFilterItem2.
func (s *GetAccountInvitesFilterItem) SetGetAccountInvitesFilterItem2(v GetAccountInvitesFilterItem2) {
	s.Type = GetAccountInvitesFilterItem2GetAccountInvitesFilterItem
	s.GetAccountInvitesFilterItem2 = v
}

// GetGetAccountInvitesFilterItem2 returns GetAccountInvitesFilterItem2 and true boolean if GetAccountInvitesFilterItem is GetAccountInvitesFilterItem2.
func (s GetAccountInvitesFilterItem) GetGetAccountInvitesFilterItem2() (v GetAccountInvitesFilterItem2, ok bool) {
	if !s.IsGetAccountInvitesFilterItem2() {
		return v, false
	}
	return s.GetAccountInvitesFilterItem2, true
}

// NewGetAccountInvitesFilterItem2GetAccountInvitesFilterItem returns new GetAccountInvitesFilterItem from GetAccountInvitesFilterItem2.
func NewGetAccountInvitesFilterItem2GetAccountInvitesFilterItem(v GetAccountInvitesFilterItem2) GetAccountInvitesFilterItem {
	var s GetAccountInvitesFilterItem
	s.SetGetAccountInvitesFilterItem2(v)
	return s
}

type GetAccountInvitesFilterItem2 map[string]string

func (s *GetAccountInvitesFilterItem2) init() GetAccountInvitesFilterItem2 {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type GetAccountInvitesIncludeItem string

const (
	GetAccountInvitesIncludeItemSenders  GetAccountInvitesIncludeItem = "senders"
	GetAccountInvitesIncludeItemHubs     GetAccountInvitesIncludeItem = "hubs"
	GetAccountInvitesIncludeItemAccounts GetAccountInvitesIncludeItem = "accounts"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetAccountInvitesIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetAccountInvitesIncludeItemSenders:
		return []byte(s), nil
	case GetAccountInvitesIncludeItemHubs:
		return []byte(s), nil
	case GetAccountInvitesIncludeItemAccounts:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAccountInvitesIncludeItem) UnmarshalText(data []byte) error {
	switch GetAccountInvitesIncludeItem(data) {
	case GetAccountInvitesIncludeItemSenders:
		*s = GetAccountInvitesIncludeItemSenders
		return nil
	case GetAccountInvitesIncludeItemHubs:
		*s = GetAccountInvitesIncludeItemHubs
		return nil
	case GetAccountInvitesIncludeItemAccounts:
		*s = GetAccountInvitesIncludeItemAccounts
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetAccountInvitesMetaItem string

const (
	GetAccountInvitesMetaItemCapabilities GetAccountInvitesMetaItem = "capabilities"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetAccountInvitesMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetAccountInvitesMetaItemCapabilities:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAccountInvitesMetaItem) UnmarshalText(data []byte) error {
	switch GetAccountInvitesMetaItem(data) {
	case GetAccountInvitesMetaItemCapabilities:
		*s = GetAccountInvitesMetaItemCapabilities
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetAccountInvitesOK struct {
	Data     []HubMembership          `json:"data"`
	Includes OptHubMembershipIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetAccountInvitesOK) GetData() []HubMembership {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetAccountInvitesOK) GetIncludes() OptHubMembershipIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetAccountInvitesOK) SetData(val []HubMembership) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetAccountInvitesOK) SetIncludes(val OptHubMembershipIncludes) {
	s.Includes = val
}

type GetAccountInvitesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetAccountInvitesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetAccountInvitesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetAccountInvitesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetAccountInvitesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetAccountLoginsFilter map[string]GetAccountLoginsFilterItem

func (s *GetAccountLoginsFilter) init() GetAccountLoginsFilter {
	m := *s
	if m == nil {
		m = map[string]GetAccountLoginsFilterItem{}
		*s = m
	}
	return m
}

// GetAccountLoginsFilterItem represents sum type.
type GetAccountLoginsFilterItem struct {
	Type                        GetAccountLoginsFilterItemType // switch on this field
	String                      string
	StringArray                 []string
	GetAccountLoginsFilterItem2 GetAccountLoginsFilterItem2
}

// GetAccountLoginsFilterItemType is oneOf type of GetAccountLoginsFilterItem.
type GetAccountLoginsFilterItemType string

// Possible values for GetAccountLoginsFilterItemType.
const (
	StringGetAccountLoginsFilterItem                      GetAccountLoginsFilterItemType = "string"
	StringArrayGetAccountLoginsFilterItem                 GetAccountLoginsFilterItemType = "[]string"
	GetAccountLoginsFilterItem2GetAccountLoginsFilterItem GetAccountLoginsFilterItemType = "GetAccountLoginsFilterItem2"
)

// IsString reports whether GetAccountLoginsFilterItem is string.
func (s GetAccountLoginsFilterItem) IsString() bool {
	return s.Type == StringGetAccountLoginsFilterItem
}

// IsStringArray reports whether GetAccountLoginsFilterItem is []string.
func (s GetAccountLoginsFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetAccountLoginsFilterItem
}

// IsGetAccountLoginsFilterItem2 reports whether GetAccountLoginsFilterItem is GetAccountLoginsFilterItem2.
func (s GetAccountLoginsFilterItem) IsGetAccountLoginsFilterItem2() bool {
	return s.Type == GetAccountLoginsFilterItem2GetAccountLoginsFilterItem
}

// SetString sets GetAccountLoginsFilterItem to string.
func (s *GetAccountLoginsFilterItem) SetString(v string) {
	s.Type = StringGetAccountLoginsFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetAccountLoginsFilterItem is string.
func (s GetAccountLoginsFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetAccountLoginsFilterItem returns new GetAccountLoginsFilterItem from string.
func NewStringGetAccountLoginsFilterItem(v string) GetAccountLoginsFilterItem {
	var s GetAccountLoginsFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetAccountLoginsFilterItem to []string.
func (s *GetAccountLoginsFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetAccountLoginsFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetAccountLoginsFilterItem is []string.
func (s GetAccountLoginsFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetAccountLoginsFilterItem returns new GetAccountLoginsFilterItem from []string.
func NewStringArrayGetAccountLoginsFilterItem(v []string) GetAccountLoginsFilterItem {
	var s GetAccountLoginsFilterItem
	s.SetStringArray(v)
	return s
}

// SetGetAccountLoginsFilterItem2 sets GetAccountLoginsFilterItem to GetAccountLoginsFilterItem2.
func (s *GetAccountLoginsFilterItem) SetGetAccountLoginsFilterItem2(v GetAccountLoginsFilterItem2) {
	s.Type = GetAccountLoginsFilterItem2GetAccountLoginsFilterItem
	s.GetAccountLoginsFilterItem2 = v
}

// GetGetAccountLoginsFilterItem2 returns GetAccountLoginsFilterItem2 and true boolean if GetAccountLoginsFilterItem is GetAccountLoginsFilterItem2.
func (s GetAccountLoginsFilterItem) GetGetAccountLoginsFilterItem2() (v GetAccountLoginsFilterItem2, ok bool) {
	if !s.IsGetAccountLoginsFilterItem2() {
		return v, false
	}
	return s.GetAccountLoginsFilterItem2, true
}

// NewGetAccountLoginsFilterItem2GetAccountLoginsFilterItem returns new GetAccountLoginsFilterItem from GetAccountLoginsFilterItem2.
func NewGetAccountLoginsFilterItem2GetAccountLoginsFilterItem(v GetAccountLoginsFilterItem2) GetAccountLoginsFilterItem {
	var s GetAccountLoginsFilterItem
	s.SetGetAccountLoginsFilterItem2(v)
	return s
}

type GetAccountLoginsFilterItem2 map[string]string

func (s *GetAccountLoginsFilterItem2) init() GetAccountLoginsFilterItem2 {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type GetAccountLoginsOK struct {
	Data []GetAccountLoginsOKDataItem `json:"data"`
}

// GetData returns the value of Data.
func (s *GetAccountLoginsOK) GetData() []GetAccountLoginsOKDataItem {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetAccountLoginsOK) SetData(val []GetAccountLoginsOKDataItem) {
	s.Data = val
}

// GetAccountLoginsOKDataItem represents sum type.
type GetAccountLoginsOKDataItem struct {
	Type          GetAccountLoginsOKDataItemType // switch on this field
	EmployeeLogin EmployeeLogin
	PasswordLogin PasswordLogin
}

// GetAccountLoginsOKDataItemType is oneOf type of GetAccountLoginsOKDataItem.
type GetAccountLoginsOKDataItemType string

// Possible values for GetAccountLoginsOKDataItemType.
const (
	EmployeeLoginGetAccountLoginsOKDataItem GetAccountLoginsOKDataItemType = "EmployeeLogin"
	PasswordLoginGetAccountLoginsOKDataItem GetAccountLoginsOKDataItemType = "PasswordLogin"
)

// IsEmployeeLogin reports whether GetAccountLoginsOKDataItem is EmployeeLogin.
func (s GetAccountLoginsOKDataItem) IsEmployeeLogin() bool {
	return s.Type == EmployeeLoginGetAccountLoginsOKDataItem
}

// IsPasswordLogin reports whether GetAccountLoginsOKDataItem is PasswordLogin.
func (s GetAccountLoginsOKDataItem) IsPasswordLogin() bool {
	return s.Type == PasswordLoginGetAccountLoginsOKDataItem
}

// SetEmployeeLogin sets GetAccountLoginsOKDataItem to EmployeeLogin.
func (s *GetAccountLoginsOKDataItem) SetEmployeeLogin(v EmployeeLogin) {
	s.Type = EmployeeLoginGetAccountLoginsOKDataItem
	s.EmployeeLogin = v
}

// GetEmployeeLogin returns EmployeeLogin and true boolean if GetAccountLoginsOKDataItem is EmployeeLogin.
func (s GetAccountLoginsOKDataItem) GetEmployeeLogin() (v EmployeeLogin, ok bool) {
	if !s.IsEmployeeLogin() {
		return v, false
	}
	return s.EmployeeLogin, true
}

// NewEmployeeLoginGetAccountLoginsOKDataItem returns new GetAccountLoginsOKDataItem from EmployeeLogin.
func NewEmployeeLoginGetAccountLoginsOKDataItem(v EmployeeLogin) GetAccountLoginsOKDataItem {
	var s GetAccountLoginsOKDataItem
	s.SetEmployeeLogin(v)
	return s
}

// SetPasswordLogin sets GetAccountLoginsOKDataItem to PasswordLogin.
func (s *GetAccountLoginsOKDataItem) SetPasswordLogin(v PasswordLogin) {
	s.Type = PasswordLoginGetAccountLoginsOKDataItem
	s.PasswordLogin = v
}

// GetPasswordLogin returns PasswordLogin and true boolean if GetAccountLoginsOKDataItem is PasswordLogin.
func (s GetAccountLoginsOKDataItem) GetPasswordLogin() (v PasswordLogin, ok bool) {
	if !s.IsPasswordLogin() {
		return v, false
	}
	return s.PasswordLogin, true
}

// NewPasswordLoginGetAccountLoginsOKDataItem returns new GetAccountLoginsOKDataItem from PasswordLogin.
func NewPasswordLoginGetAccountLoginsOKDataItem(v PasswordLogin) GetAccountLoginsOKDataItem {
	var s GetAccountLoginsOKDataItem
	s.SetPasswordLogin(v)
	return s
}

type GetAccountLoginsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetAccountLoginsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetAccountLoginsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetAccountLoginsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetAccountLoginsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetAccountMembershipsOK struct {
	Data []HubMembership `json:"data"`
}

// GetData returns the value of Data.
func (s *GetAccountMembershipsOK) GetData() []HubMembership {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetAccountMembershipsOK) SetData(val []HubMembership) {
	s.Data = val
}

type GetAccountOK struct {
	Data OptAccount `json:"data"`
}

// GetData returns the value of Data.
func (s *GetAccountOK) GetData() OptAccount {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetAccountOK) SetData(val OptAccount) {
	s.Data = val
}

type GetAnnouncementsListFilter map[string]GetAnnouncementsListFilterItem

func (s *GetAnnouncementsListFilter) init() GetAnnouncementsListFilter {
	m := *s
	if m == nil {
		m = map[string]GetAnnouncementsListFilterItem{}
		*s = m
	}
	return m
}

// GetAnnouncementsListFilterItem represents sum type.
type GetAnnouncementsListFilterItem struct {
	Type                            GetAnnouncementsListFilterItemType // switch on this field
	String                          string
	StringArray                     []string
	GetAnnouncementsListFilterItem2 GetAnnouncementsListFilterItem2
}

// GetAnnouncementsListFilterItemType is oneOf type of GetAnnouncementsListFilterItem.
type GetAnnouncementsListFilterItemType string

// Possible values for GetAnnouncementsListFilterItemType.
const (
	StringGetAnnouncementsListFilterItem                          GetAnnouncementsListFilterItemType = "string"
	StringArrayGetAnnouncementsListFilterItem                     GetAnnouncementsListFilterItemType = "[]string"
	GetAnnouncementsListFilterItem2GetAnnouncementsListFilterItem GetAnnouncementsListFilterItemType = "GetAnnouncementsListFilterItem2"
)

// IsString reports whether GetAnnouncementsListFilterItem is string.
func (s GetAnnouncementsListFilterItem) IsString() bool {
	return s.Type == StringGetAnnouncementsListFilterItem
}

// IsStringArray reports whether GetAnnouncementsListFilterItem is []string.
func (s GetAnnouncementsListFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetAnnouncementsListFilterItem
}

// IsGetAnnouncementsListFilterItem2 reports whether GetAnnouncementsListFilterItem is GetAnnouncementsListFilterItem2.
func (s GetAnnouncementsListFilterItem) IsGetAnnouncementsListFilterItem2() bool {
	return s.Type == GetAnnouncementsListFilterItem2GetAnnouncementsListFilterItem
}

// SetString sets GetAnnouncementsListFilterItem to string.
func (s *GetAnnouncementsListFilterItem) SetString(v string) {
	s.Type = StringGetAnnouncementsListFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetAnnouncementsListFilterItem is string.
func (s GetAnnouncementsListFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetAnnouncementsListFilterItem returns new GetAnnouncementsListFilterItem from string.
func NewStringGetAnnouncementsListFilterItem(v string) GetAnnouncementsListFilterItem {
	var s GetAnnouncementsListFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetAnnouncementsListFilterItem to []string.
func (s *GetAnnouncementsListFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetAnnouncementsListFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetAnnouncementsListFilterItem is []string.
func (s GetAnnouncementsListFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetAnnouncementsListFilterItem returns new GetAnnouncementsListFilterItem from []string.
func NewStringArrayGetAnnouncementsListFilterItem(v []string) GetAnnouncementsListFilterItem {
	var s GetAnnouncementsListFilterItem
	s.SetStringArray(v)
	return s
}

// SetGetAnnouncementsListFilterItem2 sets GetAnnouncementsListFilterItem to GetAnnouncementsListFilterItem2.
func (s *GetAnnouncementsListFilterItem) SetGetAnnouncementsListFilterItem2(v GetAnnouncementsListFilterItem2) {
	s.Type = GetAnnouncementsListFilterItem2GetAnnouncementsListFilterItem
	s.GetAnnouncementsListFilterItem2 = v
}

// GetGetAnnouncementsListFilterItem2 returns GetAnnouncementsListFilterItem2 and true boolean if GetAnnouncementsListFilterItem is GetAnnouncementsListFilterItem2.
func (s GetAnnouncementsListFilterItem) GetGetAnnouncementsListFilterItem2() (v GetAnnouncementsListFilterItem2, ok bool) {
	if !s.IsGetAnnouncementsListFilterItem2() {
		return v, false
	}
	return s.GetAnnouncementsListFilterItem2, true
}

// NewGetAnnouncementsListFilterItem2GetAnnouncementsListFilterItem returns new GetAnnouncementsListFilterItem from GetAnnouncementsListFilterItem2.
func NewGetAnnouncementsListFilterItem2GetAnnouncementsListFilterItem(v GetAnnouncementsListFilterItem2) GetAnnouncementsListFilterItem {
	var s GetAnnouncementsListFilterItem
	s.SetGetAnnouncementsListFilterItem2(v)
	return s
}

type GetAnnouncementsListFilterItem2 map[string]string

func (s *GetAnnouncementsListFilterItem2) init() GetAnnouncementsListFilterItem2 {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type GetAnnouncementsListOK struct {
	Data []Announcement `json:"data"`
}

// GetData returns the value of Data.
func (s *GetAnnouncementsListOK) GetData() []Announcement {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetAnnouncementsListOK) SetData(val []Announcement) {
	s.Data = val
}

type GetAnnouncementsListPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetAnnouncementsListPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetAnnouncementsListPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetAnnouncementsListPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetAnnouncementsListPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetApiKeyOK struct {
	Data OptApiKey `json:"data"`
}

// GetData returns the value of Data.
func (s *GetApiKeyOK) GetData() OptApiKey {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetApiKeyOK) SetData(val OptApiKey) {
	s.Data = val
}

type GetApiKeysFilter map[string]GetApiKeysFilterItem

func (s *GetApiKeysFilter) init() GetApiKeysFilter {
	m := *s
	if m == nil {
		m = map[string]GetApiKeysFilterItem{}
		*s = m
	}
	return m
}

// GetApiKeysFilterItem represents sum type.
type GetApiKeysFilterItem struct {
	Type                  GetApiKeysFilterItemType // switch on this field
	String                string
	StringArray           []string
	GetApiKeysFilterItem2 GetApiKeysFilterItem2
}

// GetApiKeysFilterItemType is oneOf type of GetApiKeysFilterItem.
type GetApiKeysFilterItemType string

// Possible values for GetApiKeysFilterItemType.
const (
	StringGetApiKeysFilterItem                GetApiKeysFilterItemType = "string"
	StringArrayGetApiKeysFilterItem           GetApiKeysFilterItemType = "[]string"
	GetApiKeysFilterItem2GetApiKeysFilterItem GetApiKeysFilterItemType = "GetApiKeysFilterItem2"
)

// IsString reports whether GetApiKeysFilterItem is string.
func (s GetApiKeysFilterItem) IsString() bool { return s.Type == StringGetApiKeysFilterItem }

// IsStringArray reports whether GetApiKeysFilterItem is []string.
func (s GetApiKeysFilterItem) IsStringArray() bool { return s.Type == StringArrayGetApiKeysFilterItem }

// IsGetApiKeysFilterItem2 reports whether GetApiKeysFilterItem is GetApiKeysFilterItem2.
func (s GetApiKeysFilterItem) IsGetApiKeysFilterItem2() bool {
	return s.Type == GetApiKeysFilterItem2GetApiKeysFilterItem
}

// SetString sets GetApiKeysFilterItem to string.
func (s *GetApiKeysFilterItem) SetString(v string) {
	s.Type = StringGetApiKeysFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetApiKeysFilterItem is string.
func (s GetApiKeysFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetApiKeysFilterItem returns new GetApiKeysFilterItem from string.
func NewStringGetApiKeysFilterItem(v string) GetApiKeysFilterItem {
	var s GetApiKeysFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetApiKeysFilterItem to []string.
func (s *GetApiKeysFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetApiKeysFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetApiKeysFilterItem is []string.
func (s GetApiKeysFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetApiKeysFilterItem returns new GetApiKeysFilterItem from []string.
func NewStringArrayGetApiKeysFilterItem(v []string) GetApiKeysFilterItem {
	var s GetApiKeysFilterItem
	s.SetStringArray(v)
	return s
}

// SetGetApiKeysFilterItem2 sets GetApiKeysFilterItem to GetApiKeysFilterItem2.
func (s *GetApiKeysFilterItem) SetGetApiKeysFilterItem2(v GetApiKeysFilterItem2) {
	s.Type = GetApiKeysFilterItem2GetApiKeysFilterItem
	s.GetApiKeysFilterItem2 = v
}

// GetGetApiKeysFilterItem2 returns GetApiKeysFilterItem2 and true boolean if GetApiKeysFilterItem is GetApiKeysFilterItem2.
func (s GetApiKeysFilterItem) GetGetApiKeysFilterItem2() (v GetApiKeysFilterItem2, ok bool) {
	if !s.IsGetApiKeysFilterItem2() {
		return v, false
	}
	return s.GetApiKeysFilterItem2, true
}

// NewGetApiKeysFilterItem2GetApiKeysFilterItem returns new GetApiKeysFilterItem from GetApiKeysFilterItem2.
func NewGetApiKeysFilterItem2GetApiKeysFilterItem(v GetApiKeysFilterItem2) GetApiKeysFilterItem {
	var s GetApiKeysFilterItem
	s.SetGetApiKeysFilterItem2(v)
	return s
}

type GetApiKeysFilterItem2 map[string]string

func (s *GetApiKeysFilterItem2) init() GetApiKeysFilterItem2 {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type GetApiKeysOK struct {
	Data []ApiKey `json:"data"`
}

// GetData returns the value of Data.
func (s *GetApiKeysOK) GetData() []ApiKey {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetApiKeysOK) SetData(val []ApiKey) {
	s.Data = val
}

type GetApiKeysPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetApiKeysPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetApiKeysPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetApiKeysPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetApiKeysPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetBackupLogsOK struct {
	Data []Logs `json:"data"`
}

// GetData returns the value of Data.
func (s *GetBackupLogsOK) GetData() []Logs {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetBackupLogsOK) SetData(val []Logs) {
	s.Data = val
}

type GetBackupOK struct {
	Data OptBackup `json:"data"`
}

// GetData returns the value of Data.
func (s *GetBackupOK) GetData() OptBackup {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetBackupOK) SetData(val OptBackup) {
	s.Data = val
}

type GetBackupsCollectionOK struct {
	Data []Backup `json:"data"`
}

// GetData returns the value of Data.
func (s *GetBackupsCollectionOK) GetData() []Backup {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetBackupsCollectionOK) SetData(val []Backup) {
	s.Data = val
}

type GetBackupsCollectionPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetBackupsCollectionPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetBackupsCollectionPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetBackupsCollectionPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetBackupsCollectionPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetBillingMethodOK struct {
	Data OptMethod `json:"data"`
}

// GetData returns the value of Data.
func (s *GetBillingMethodOK) GetData() OptMethod {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetBillingMethodOK) SetData(val OptMethod) {
	s.Data = val
}

type GetBillingMethodsFilter map[string]GetBillingMethodsFilterItem

func (s *GetBillingMethodsFilter) init() GetBillingMethodsFilter {
	m := *s
	if m == nil {
		m = map[string]GetBillingMethodsFilterItem{}
		*s = m
	}
	return m
}

// GetBillingMethodsFilterItem represents sum type.
type GetBillingMethodsFilterItem struct {
	Type                         GetBillingMethodsFilterItemType // switch on this field
	String                       string
	StringArray                  []string
	GetBillingMethodsFilterItem2 GetBillingMethodsFilterItem2
}

// GetBillingMethodsFilterItemType is oneOf type of GetBillingMethodsFilterItem.
type GetBillingMethodsFilterItemType string

// Possible values for GetBillingMethodsFilterItemType.
const (
	StringGetBillingMethodsFilterItem                       GetBillingMethodsFilterItemType = "string"
	StringArrayGetBillingMethodsFilterItem                  GetBillingMethodsFilterItemType = "[]string"
	GetBillingMethodsFilterItem2GetBillingMethodsFilterItem GetBillingMethodsFilterItemType = "GetBillingMethodsFilterItem2"
)

// IsString reports whether GetBillingMethodsFilterItem is string.
func (s GetBillingMethodsFilterItem) IsString() bool {
	return s.Type == StringGetBillingMethodsFilterItem
}

// IsStringArray reports whether GetBillingMethodsFilterItem is []string.
func (s GetBillingMethodsFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetBillingMethodsFilterItem
}

// IsGetBillingMethodsFilterItem2 reports whether GetBillingMethodsFilterItem is GetBillingMethodsFilterItem2.
func (s GetBillingMethodsFilterItem) IsGetBillingMethodsFilterItem2() bool {
	return s.Type == GetBillingMethodsFilterItem2GetBillingMethodsFilterItem
}

// SetString sets GetBillingMethodsFilterItem to string.
func (s *GetBillingMethodsFilterItem) SetString(v string) {
	s.Type = StringGetBillingMethodsFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetBillingMethodsFilterItem is string.
func (s GetBillingMethodsFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetBillingMethodsFilterItem returns new GetBillingMethodsFilterItem from string.
func NewStringGetBillingMethodsFilterItem(v string) GetBillingMethodsFilterItem {
	var s GetBillingMethodsFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetBillingMethodsFilterItem to []string.
func (s *GetBillingMethodsFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetBillingMethodsFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetBillingMethodsFilterItem is []string.
func (s GetBillingMethodsFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetBillingMethodsFilterItem returns new GetBillingMethodsFilterItem from []string.
func NewStringArrayGetBillingMethodsFilterItem(v []string) GetBillingMethodsFilterItem {
	var s GetBillingMethodsFilterItem
	s.SetStringArray(v)
	return s
}

// SetGetBillingMethodsFilterItem2 sets GetBillingMethodsFilterItem to GetBillingMethodsFilterItem2.
func (s *GetBillingMethodsFilterItem) SetGetBillingMethodsFilterItem2(v GetBillingMethodsFilterItem2) {
	s.Type = GetBillingMethodsFilterItem2GetBillingMethodsFilterItem
	s.GetBillingMethodsFilterItem2 = v
}

// GetGetBillingMethodsFilterItem2 returns GetBillingMethodsFilterItem2 and true boolean if GetBillingMethodsFilterItem is GetBillingMethodsFilterItem2.
func (s GetBillingMethodsFilterItem) GetGetBillingMethodsFilterItem2() (v GetBillingMethodsFilterItem2, ok bool) {
	if !s.IsGetBillingMethodsFilterItem2() {
		return v, false
	}
	return s.GetBillingMethodsFilterItem2, true
}

// NewGetBillingMethodsFilterItem2GetBillingMethodsFilterItem returns new GetBillingMethodsFilterItem from GetBillingMethodsFilterItem2.
func NewGetBillingMethodsFilterItem2GetBillingMethodsFilterItem(v GetBillingMethodsFilterItem2) GetBillingMethodsFilterItem {
	var s GetBillingMethodsFilterItem
	s.SetGetBillingMethodsFilterItem2(v)
	return s
}

type GetBillingMethodsFilterItem2 map[string]string

func (s *GetBillingMethodsFilterItem2) init() GetBillingMethodsFilterItem2 {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type GetBillingMethodsOK struct {
	Data []Method `json:"data"`
}

// GetData returns the value of Data.
func (s *GetBillingMethodsOK) GetData() []Method {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetBillingMethodsOK) SetData(val []Method) {
	s.Data = val
}

type GetBillingMethodsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetBillingMethodsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetBillingMethodsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetBillingMethodsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetBillingMethodsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetBillingOrderOK struct {
	Data OptOrder `json:"data"`
}

// GetData returns the value of Data.
func (s *GetBillingOrderOK) GetData() OptOrder {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetBillingOrderOK) SetData(val OptOrder) {
	s.Data = val
}

type GetBillingOveragesFilter map[string]GetBillingOveragesFilterItem

func (s *GetBillingOveragesFilter) init() GetBillingOveragesFilter {
	m := *s
	if m == nil {
		m = map[string]GetBillingOveragesFilterItem{}
		*s = m
	}
	return m
}

// GetBillingOveragesFilterItem represents sum type.
type GetBillingOveragesFilterItem struct {
	Type                          GetBillingOveragesFilterItemType // switch on this field
	String                        string
	StringArray                   []string
	GetBillingOveragesFilterItem2 GetBillingOveragesFilterItem2
}

// GetBillingOveragesFilterItemType is oneOf type of GetBillingOveragesFilterItem.
type GetBillingOveragesFilterItemType string

// Possible values for GetBillingOveragesFilterItemType.
const (
	StringGetBillingOveragesFilterItem                        GetBillingOveragesFilterItemType = "string"
	StringArrayGetBillingOveragesFilterItem                   GetBillingOveragesFilterItemType = "[]string"
	GetBillingOveragesFilterItem2GetBillingOveragesFilterItem GetBillingOveragesFilterItemType = "GetBillingOveragesFilterItem2"
)

// IsString reports whether GetBillingOveragesFilterItem is string.
func (s GetBillingOveragesFilterItem) IsString() bool {
	return s.Type == StringGetBillingOveragesFilterItem
}

// IsStringArray reports whether GetBillingOveragesFilterItem is []string.
func (s GetBillingOveragesFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetBillingOveragesFilterItem
}

// IsGetBillingOveragesFilterItem2 reports whether GetBillingOveragesFilterItem is GetBillingOveragesFilterItem2.
func (s GetBillingOveragesFilterItem) IsGetBillingOveragesFilterItem2() bool {
	return s.Type == GetBillingOveragesFilterItem2GetBillingOveragesFilterItem
}

// SetString sets GetBillingOveragesFilterItem to string.
func (s *GetBillingOveragesFilterItem) SetString(v string) {
	s.Type = StringGetBillingOveragesFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetBillingOveragesFilterItem is string.
func (s GetBillingOveragesFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetBillingOveragesFilterItem returns new GetBillingOveragesFilterItem from string.
func NewStringGetBillingOveragesFilterItem(v string) GetBillingOveragesFilterItem {
	var s GetBillingOveragesFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetBillingOveragesFilterItem to []string.
func (s *GetBillingOveragesFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetBillingOveragesFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetBillingOveragesFilterItem is []string.
func (s GetBillingOveragesFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetBillingOveragesFilterItem returns new GetBillingOveragesFilterItem from []string.
func NewStringArrayGetBillingOveragesFilterItem(v []string) GetBillingOveragesFilterItem {
	var s GetBillingOveragesFilterItem
	s.SetStringArray(v)
	return s
}

// SetGetBillingOveragesFilterItem2 sets GetBillingOveragesFilterItem to GetBillingOveragesFilterItem2.
func (s *GetBillingOveragesFilterItem) SetGetBillingOveragesFilterItem2(v GetBillingOveragesFilterItem2) {
	s.Type = GetBillingOveragesFilterItem2GetBillingOveragesFilterItem
	s.GetBillingOveragesFilterItem2 = v
}

// GetGetBillingOveragesFilterItem2 returns GetBillingOveragesFilterItem2 and true boolean if GetBillingOveragesFilterItem is GetBillingOveragesFilterItem2.
func (s GetBillingOveragesFilterItem) GetGetBillingOveragesFilterItem2() (v GetBillingOveragesFilterItem2, ok bool) {
	if !s.IsGetBillingOveragesFilterItem2() {
		return v, false
	}
	return s.GetBillingOveragesFilterItem2, true
}

// NewGetBillingOveragesFilterItem2GetBillingOveragesFilterItem returns new GetBillingOveragesFilterItem from GetBillingOveragesFilterItem2.
func NewGetBillingOveragesFilterItem2GetBillingOveragesFilterItem(v GetBillingOveragesFilterItem2) GetBillingOveragesFilterItem {
	var s GetBillingOveragesFilterItem
	s.SetGetBillingOveragesFilterItem2(v)
	return s
}

type GetBillingOveragesFilterItem2 map[string]string

func (s *GetBillingOveragesFilterItem2) init() GetBillingOveragesFilterItem2 {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type GetBillingOveragesOK struct {
	Data []Overage `json:"data"`
}

// GetData returns the value of Data.
func (s *GetBillingOveragesOK) GetData() []Overage {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetBillingOveragesOK) SetData(val []Overage) {
	s.Data = val
}

type GetBillingOveragesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetBillingOveragesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetBillingOveragesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetBillingOveragesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetBillingOveragesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetBillingServiceOK struct {
	Data OptService `json:"data"`
}

// GetData returns the value of Data.
func (s *GetBillingServiceOK) GetData() OptService {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetBillingServiceOK) SetData(val OptService) {
	s.Data = val
}

type GetBillingServicesFilter map[string]GetBillingServicesFilterItem

func (s *GetBillingServicesFilter) init() GetBillingServicesFilter {
	m := *s
	if m == nil {
		m = map[string]GetBillingServicesFilterItem{}
		*s = m
	}
	return m
}

// GetBillingServicesFilterItem represents sum type.
type GetBillingServicesFilterItem struct {
	Type                          GetBillingServicesFilterItemType // switch on this field
	String                        string
	StringArray                   []string
	GetBillingServicesFilterItem2 GetBillingServicesFilterItem2
}

// GetBillingServicesFilterItemType is oneOf type of GetBillingServicesFilterItem.
type GetBillingServicesFilterItemType string

// Possible values for GetBillingServicesFilterItemType.
const (
	StringGetBillingServicesFilterItem                        GetBillingServicesFilterItemType = "string"
	StringArrayGetBillingServicesFilterItem                   GetBillingServicesFilterItemType = "[]string"
	GetBillingServicesFilterItem2GetBillingServicesFilterItem GetBillingServicesFilterItemType = "GetBillingServicesFilterItem2"
)

// IsString reports whether GetBillingServicesFilterItem is string.
func (s GetBillingServicesFilterItem) IsString() bool {
	return s.Type == StringGetBillingServicesFilterItem
}

// IsStringArray reports whether GetBillingServicesFilterItem is []string.
func (s GetBillingServicesFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetBillingServicesFilterItem
}

// IsGetBillingServicesFilterItem2 reports whether GetBillingServicesFilterItem is GetBillingServicesFilterItem2.
func (s GetBillingServicesFilterItem) IsGetBillingServicesFilterItem2() bool {
	return s.Type == GetBillingServicesFilterItem2GetBillingServicesFilterItem
}

// SetString sets GetBillingServicesFilterItem to string.
func (s *GetBillingServicesFilterItem) SetString(v string) {
	s.Type = StringGetBillingServicesFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetBillingServicesFilterItem is string.
func (s GetBillingServicesFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetBillingServicesFilterItem returns new GetBillingServicesFilterItem from string.
func NewStringGetBillingServicesFilterItem(v string) GetBillingServicesFilterItem {
	var s GetBillingServicesFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetBillingServicesFilterItem to []string.
func (s *GetBillingServicesFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetBillingServicesFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetBillingServicesFilterItem is []string.
func (s GetBillingServicesFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetBillingServicesFilterItem returns new GetBillingServicesFilterItem from []string.
func NewStringArrayGetBillingServicesFilterItem(v []string) GetBillingServicesFilterItem {
	var s GetBillingServicesFilterItem
	s.SetStringArray(v)
	return s
}

// SetGetBillingServicesFilterItem2 sets GetBillingServicesFilterItem to GetBillingServicesFilterItem2.
func (s *GetBillingServicesFilterItem) SetGetBillingServicesFilterItem2(v GetBillingServicesFilterItem2) {
	s.Type = GetBillingServicesFilterItem2GetBillingServicesFilterItem
	s.GetBillingServicesFilterItem2 = v
}

// GetGetBillingServicesFilterItem2 returns GetBillingServicesFilterItem2 and true boolean if GetBillingServicesFilterItem is GetBillingServicesFilterItem2.
func (s GetBillingServicesFilterItem) GetGetBillingServicesFilterItem2() (v GetBillingServicesFilterItem2, ok bool) {
	if !s.IsGetBillingServicesFilterItem2() {
		return v, false
	}
	return s.GetBillingServicesFilterItem2, true
}

// NewGetBillingServicesFilterItem2GetBillingServicesFilterItem returns new GetBillingServicesFilterItem from GetBillingServicesFilterItem2.
func NewGetBillingServicesFilterItem2GetBillingServicesFilterItem(v GetBillingServicesFilterItem2) GetBillingServicesFilterItem {
	var s GetBillingServicesFilterItem
	s.SetGetBillingServicesFilterItem2(v)
	return s
}

type GetBillingServicesFilterItem2 map[string]string

func (s *GetBillingServicesFilterItem2) init() GetBillingServicesFilterItem2 {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type GetBillingServicesOK struct {
	Data []Service `json:"data"`
}

// GetData returns the value of Data.
func (s *GetBillingServicesOK) GetData() []Service {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetBillingServicesOK) SetData(val []Service) {
	s.Data = val
}

type GetBillingServicesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetBillingServicesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetBillingServicesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetBillingServicesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetBillingServicesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetBillingSupportPlansFilter map[string]GetBillingSupportPlansFilterItem

func (s *GetBillingSupportPlansFilter) init() GetBillingSupportPlansFilter {
	m := *s
	if m == nil {
		m = map[string]GetBillingSupportPlansFilterItem{}
		*s = m
	}
	return m
}

// GetBillingSupportPlansFilterItem represents sum type.
type GetBillingSupportPlansFilterItem struct {
	Type                              GetBillingSupportPlansFilterItemType // switch on this field
	String                            string
	StringArray                       []string
	GetBillingSupportPlansFilterItem2 GetBillingSupportPlansFilterItem2
}

// GetBillingSupportPlansFilterItemType is oneOf type of GetBillingSupportPlansFilterItem.
type GetBillingSupportPlansFilterItemType string

// Possible values for GetBillingSupportPlansFilterItemType.
const (
	StringGetBillingSupportPlansFilterItem                            GetBillingSupportPlansFilterItemType = "string"
	StringArrayGetBillingSupportPlansFilterItem                       GetBillingSupportPlansFilterItemType = "[]string"
	GetBillingSupportPlansFilterItem2GetBillingSupportPlansFilterItem GetBillingSupportPlansFilterItemType = "GetBillingSupportPlansFilterItem2"
)

// IsString reports whether GetBillingSupportPlansFilterItem is string.
func (s GetBillingSupportPlansFilterItem) IsString() bool {
	return s.Type == StringGetBillingSupportPlansFilterItem
}

// IsStringArray reports whether GetBillingSupportPlansFilterItem is []string.
func (s GetBillingSupportPlansFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetBillingSupportPlansFilterItem
}

// IsGetBillingSupportPlansFilterItem2 reports whether GetBillingSupportPlansFilterItem is GetBillingSupportPlansFilterItem2.
func (s GetBillingSupportPlansFilterItem) IsGetBillingSupportPlansFilterItem2() bool {
	return s.Type == GetBillingSupportPlansFilterItem2GetBillingSupportPlansFilterItem
}

// SetString sets GetBillingSupportPlansFilterItem to string.
func (s *GetBillingSupportPlansFilterItem) SetString(v string) {
	s.Type = StringGetBillingSupportPlansFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetBillingSupportPlansFilterItem is string.
func (s GetBillingSupportPlansFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetBillingSupportPlansFilterItem returns new GetBillingSupportPlansFilterItem from string.
func NewStringGetBillingSupportPlansFilterItem(v string) GetBillingSupportPlansFilterItem {
	var s GetBillingSupportPlansFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetBillingSupportPlansFilterItem to []string.
func (s *GetBillingSupportPlansFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetBillingSupportPlansFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetBillingSupportPlansFilterItem is []string.
func (s GetBillingSupportPlansFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetBillingSupportPlansFilterItem returns new GetBillingSupportPlansFilterItem from []string.
func NewStringArrayGetBillingSupportPlansFilterItem(v []string) GetBillingSupportPlansFilterItem {
	var s GetBillingSupportPlansFilterItem
	s.SetStringArray(v)
	return s
}

// SetGetBillingSupportPlansFilterItem2 sets GetBillingSupportPlansFilterItem to GetBillingSupportPlansFilterItem2.
func (s *GetBillingSupportPlansFilterItem) SetGetBillingSupportPlansFilterItem2(v GetBillingSupportPlansFilterItem2) {
	s.Type = GetBillingSupportPlansFilterItem2GetBillingSupportPlansFilterItem
	s.GetBillingSupportPlansFilterItem2 = v
}

// GetGetBillingSupportPlansFilterItem2 returns GetBillingSupportPlansFilterItem2 and true boolean if GetBillingSupportPlansFilterItem is GetBillingSupportPlansFilterItem2.
func (s GetBillingSupportPlansFilterItem) GetGetBillingSupportPlansFilterItem2() (v GetBillingSupportPlansFilterItem2, ok bool) {
	if !s.IsGetBillingSupportPlansFilterItem2() {
		return v, false
	}
	return s.GetBillingSupportPlansFilterItem2, true
}

// NewGetBillingSupportPlansFilterItem2GetBillingSupportPlansFilterItem returns new GetBillingSupportPlansFilterItem from GetBillingSupportPlansFilterItem2.
func NewGetBillingSupportPlansFilterItem2GetBillingSupportPlansFilterItem(v GetBillingSupportPlansFilterItem2) GetBillingSupportPlansFilterItem {
	var s GetBillingSupportPlansFilterItem
	s.SetGetBillingSupportPlansFilterItem2(v)
	return s
}

type GetBillingSupportPlansFilterItem2 map[string]string

func (s *GetBillingSupportPlansFilterItem2) init() GetBillingSupportPlansFilterItem2 {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type GetBillingSupportPlansOK struct {
	Data []SupportPlan `json:"data"`
}

// GetData returns the value of Data.
func (s *GetBillingSupportPlansOK) GetData() []SupportPlan {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetBillingSupportPlansOK) SetData(val []SupportPlan) {
	s.Data = val
}

type GetBillingSupportPlansPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetBillingSupportPlansPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetBillingSupportPlansPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetBillingSupportPlansPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetBillingSupportPlansPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetContainerByIdIncludeItem string

const (
	GetContainerByIdIncludeItemCreators     GetContainerByIdIncludeItem = "creators"
	GetContainerByIdIncludeItemImages       GetContainerByIdIncludeItem = "images"
	GetContainerByIdIncludeItemStackBuilds  GetContainerByIdIncludeItem = "stack_builds"
	GetContainerByIdIncludeItemStacks       GetContainerByIdIncludeItem = "stacks"
	GetContainerByIdIncludeItemEnvironments GetContainerByIdIncludeItem = "environments"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetContainerByIdIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetContainerByIdIncludeItemCreators:
		return []byte(s), nil
	case GetContainerByIdIncludeItemImages:
		return []byte(s), nil
	case GetContainerByIdIncludeItemStackBuilds:
		return []byte(s), nil
	case GetContainerByIdIncludeItemStacks:
		return []byte(s), nil
	case GetContainerByIdIncludeItemEnvironments:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetContainerByIdIncludeItem) UnmarshalText(data []byte) error {
	switch GetContainerByIdIncludeItem(data) {
	case GetContainerByIdIncludeItemCreators:
		*s = GetContainerByIdIncludeItemCreators
		return nil
	case GetContainerByIdIncludeItemImages:
		*s = GetContainerByIdIncludeItemImages
		return nil
	case GetContainerByIdIncludeItemStackBuilds:
		*s = GetContainerByIdIncludeItemStackBuilds
		return nil
	case GetContainerByIdIncludeItemStacks:
		*s = GetContainerByIdIncludeItemStacks
		return nil
	case GetContainerByIdIncludeItemEnvironments:
		*s = GetContainerByIdIncludeItemEnvironments
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetContainerByIdMetaItem string

const (
	GetContainerByIdMetaItemInstancesCount GetContainerByIdMetaItem = "instances_count"
	GetContainerByIdMetaItemDomain         GetContainerByIdMetaItem = "domain"
	GetContainerByIdMetaItemDomains        GetContainerByIdMetaItem = "domains"
	GetContainerByIdMetaItemIps            GetContainerByIdMetaItem = "ips"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetContainerByIdMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetContainerByIdMetaItemInstancesCount:
		return []byte(s), nil
	case GetContainerByIdMetaItemDomain:
		return []byte(s), nil
	case GetContainerByIdMetaItemDomains:
		return []byte(s), nil
	case GetContainerByIdMetaItemIps:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetContainerByIdMetaItem) UnmarshalText(data []byte) error {
	switch GetContainerByIdMetaItem(data) {
	case GetContainerByIdMetaItemInstancesCount:
		*s = GetContainerByIdMetaItemInstancesCount
		return nil
	case GetContainerByIdMetaItemDomain:
		*s = GetContainerByIdMetaItemDomain
		return nil
	case GetContainerByIdMetaItemDomains:
		*s = GetContainerByIdMetaItemDomains
		return nil
	case GetContainerByIdMetaItemIps:
		*s = GetContainerByIdMetaItemIps
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetContainerByIdOK struct {
	Data     OptContainer        `json:"data"`
	Includes OptInstanceIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetContainerByIdOK) GetData() OptContainer {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetContainerByIdOK) GetIncludes() OptInstanceIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetContainerByIdOK) SetData(val OptContainer) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetContainerByIdOK) SetIncludes(val OptInstanceIncludes) {
	s.Includes = val
}

type GetContainerInstanceIncludeItem string

const (
	GetContainerInstanceIncludeItemCreators     GetContainerInstanceIncludeItem = "creators"
	GetContainerInstanceIncludeItemServers      GetContainerInstanceIncludeItem = "servers"
	GetContainerInstanceIncludeItemLocations    GetContainerInstanceIncludeItem = "locations"
	GetContainerInstanceIncludeItemProviders    GetContainerInstanceIncludeItem = "providers"
	GetContainerInstanceIncludeItemContainers   GetContainerInstanceIncludeItem = "containers"
	GetContainerInstanceIncludeItemEnvironments GetContainerInstanceIncludeItem = "environments"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetContainerInstanceIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetContainerInstanceIncludeItemCreators:
		return []byte(s), nil
	case GetContainerInstanceIncludeItemServers:
		return []byte(s), nil
	case GetContainerInstanceIncludeItemLocations:
		return []byte(s), nil
	case GetContainerInstanceIncludeItemProviders:
		return []byte(s), nil
	case GetContainerInstanceIncludeItemContainers:
		return []byte(s), nil
	case GetContainerInstanceIncludeItemEnvironments:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetContainerInstanceIncludeItem) UnmarshalText(data []byte) error {
	switch GetContainerInstanceIncludeItem(data) {
	case GetContainerInstanceIncludeItemCreators:
		*s = GetContainerInstanceIncludeItemCreators
		return nil
	case GetContainerInstanceIncludeItemServers:
		*s = GetContainerInstanceIncludeItemServers
		return nil
	case GetContainerInstanceIncludeItemLocations:
		*s = GetContainerInstanceIncludeItemLocations
		return nil
	case GetContainerInstanceIncludeItemProviders:
		*s = GetContainerInstanceIncludeItemProviders
		return nil
	case GetContainerInstanceIncludeItemContainers:
		*s = GetContainerInstanceIncludeItemContainers
		return nil
	case GetContainerInstanceIncludeItemEnvironments:
		*s = GetContainerInstanceIncludeItemEnvironments
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetContainerInstanceOK struct {
	Data     OptInstance         `json:"data"`
	Includes OptInstanceIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetContainerInstanceOK) GetData() OptInstance {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetContainerInstanceOK) GetIncludes() OptInstanceIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetContainerInstanceOK) SetData(val OptInstance) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetContainerInstanceOK) SetIncludes(val OptInstanceIncludes) {
	s.Includes = val
}

type GetContainerInstanceVolumesOK struct {
	Data []InstanceVolume `json:"data"`
}

// GetData returns the value of Data.
func (s *GetContainerInstanceVolumesOK) GetData() []InstanceVolume {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetContainerInstanceVolumesOK) SetData(val []InstanceVolume) {
	s.Data = val
}

type GetContainerInstanceVolumesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetContainerInstanceVolumesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetContainerInstanceVolumesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetContainerInstanceVolumesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetContainerInstanceVolumesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetContainerInstancesTelemetryFilter map[string]GetContainerInstancesTelemetryFilterItem

func (s *GetContainerInstancesTelemetryFilter) init() GetContainerInstancesTelemetryFilter {
	m := *s
	if m == nil {
		m = map[string]GetContainerInstancesTelemetryFilterItem{}
		*s = m
	}
	return m
}

// GetContainerInstancesTelemetryFilterItem represents sum type.
type GetContainerInstancesTelemetryFilterItem struct {
	Type        GetContainerInstancesTelemetryFilterItemType // switch on this field
	String      string
	StringArray []string
}

// GetContainerInstancesTelemetryFilterItemType is oneOf type of GetContainerInstancesTelemetryFilterItem.
type GetContainerInstancesTelemetryFilterItemType string

// Possible values for GetContainerInstancesTelemetryFilterItemType.
const (
	StringGetContainerInstancesTelemetryFilterItem      GetContainerInstancesTelemetryFilterItemType = "string"
	StringArrayGetContainerInstancesTelemetryFilterItem GetContainerInstancesTelemetryFilterItemType = "[]string"
)

// IsString reports whether GetContainerInstancesTelemetryFilterItem is string.
func (s GetContainerInstancesTelemetryFilterItem) IsString() bool {
	return s.Type == StringGetContainerInstancesTelemetryFilterItem
}

// IsStringArray reports whether GetContainerInstancesTelemetryFilterItem is []string.
func (s GetContainerInstancesTelemetryFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetContainerInstancesTelemetryFilterItem
}

// SetString sets GetContainerInstancesTelemetryFilterItem to string.
func (s *GetContainerInstancesTelemetryFilterItem) SetString(v string) {
	s.Type = StringGetContainerInstancesTelemetryFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetContainerInstancesTelemetryFilterItem is string.
func (s GetContainerInstancesTelemetryFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetContainerInstancesTelemetryFilterItem returns new GetContainerInstancesTelemetryFilterItem from string.
func NewStringGetContainerInstancesTelemetryFilterItem(v string) GetContainerInstancesTelemetryFilterItem {
	var s GetContainerInstancesTelemetryFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetContainerInstancesTelemetryFilterItem to []string.
func (s *GetContainerInstancesTelemetryFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetContainerInstancesTelemetryFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetContainerInstancesTelemetryFilterItem is []string.
func (s GetContainerInstancesTelemetryFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetContainerInstancesTelemetryFilterItem returns new GetContainerInstancesTelemetryFilterItem from []string.
func NewStringArrayGetContainerInstancesTelemetryFilterItem(v []string) GetContainerInstancesTelemetryFilterItem {
	var s GetContainerInstancesTelemetryFilterItem
	s.SetStringArray(v)
	return s
}

type GetContainerInstancesTelemetryOK struct {
	Data []InstanceTelemetryPoint `json:"data"`
}

// GetData returns the value of Data.
func (s *GetContainerInstancesTelemetryOK) GetData() []InstanceTelemetryPoint {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetContainerInstancesTelemetryOK) SetData(val []InstanceTelemetryPoint) {
	s.Data = val
}

type GetContainerSummaryOK struct {
	Data OptContainerSummary `json:"data"`
}

// GetData returns the value of Data.
func (s *GetContainerSummaryOK) GetData() OptContainerSummary {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetContainerSummaryOK) SetData(val OptContainerSummary) {
	s.Data = val
}

type GetCreditOK struct {
	Data OptCredit `json:"data"`
}

// GetData returns the value of Data.
func (s *GetCreditOK) GetData() OptCredit {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetCreditOK) SetData(val OptCredit) {
	s.Data = val
}

type GetCreditsFilter map[string]GetCreditsFilterItem

func (s *GetCreditsFilter) init() GetCreditsFilter {
	m := *s
	if m == nil {
		m = map[string]GetCreditsFilterItem{}
		*s = m
	}
	return m
}

// GetCreditsFilterItem represents sum type.
type GetCreditsFilterItem struct {
	Type                  GetCreditsFilterItemType // switch on this field
	String                string
	StringArray           []string
	GetCreditsFilterItem2 GetCreditsFilterItem2
}

// GetCreditsFilterItemType is oneOf type of GetCreditsFilterItem.
type GetCreditsFilterItemType string

// Possible values for GetCreditsFilterItemType.
const (
	StringGetCreditsFilterItem                GetCreditsFilterItemType = "string"
	StringArrayGetCreditsFilterItem           GetCreditsFilterItemType = "[]string"
	GetCreditsFilterItem2GetCreditsFilterItem GetCreditsFilterItemType = "GetCreditsFilterItem2"
)

// IsString reports whether GetCreditsFilterItem is string.
func (s GetCreditsFilterItem) IsString() bool { return s.Type == StringGetCreditsFilterItem }

// IsStringArray reports whether GetCreditsFilterItem is []string.
func (s GetCreditsFilterItem) IsStringArray() bool { return s.Type == StringArrayGetCreditsFilterItem }

// IsGetCreditsFilterItem2 reports whether GetCreditsFilterItem is GetCreditsFilterItem2.
func (s GetCreditsFilterItem) IsGetCreditsFilterItem2() bool {
	return s.Type == GetCreditsFilterItem2GetCreditsFilterItem
}

// SetString sets GetCreditsFilterItem to string.
func (s *GetCreditsFilterItem) SetString(v string) {
	s.Type = StringGetCreditsFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetCreditsFilterItem is string.
func (s GetCreditsFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetCreditsFilterItem returns new GetCreditsFilterItem from string.
func NewStringGetCreditsFilterItem(v string) GetCreditsFilterItem {
	var s GetCreditsFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetCreditsFilterItem to []string.
func (s *GetCreditsFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetCreditsFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetCreditsFilterItem is []string.
func (s GetCreditsFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetCreditsFilterItem returns new GetCreditsFilterItem from []string.
func NewStringArrayGetCreditsFilterItem(v []string) GetCreditsFilterItem {
	var s GetCreditsFilterItem
	s.SetStringArray(v)
	return s
}

// SetGetCreditsFilterItem2 sets GetCreditsFilterItem to GetCreditsFilterItem2.
func (s *GetCreditsFilterItem) SetGetCreditsFilterItem2(v GetCreditsFilterItem2) {
	s.Type = GetCreditsFilterItem2GetCreditsFilterItem
	s.GetCreditsFilterItem2 = v
}

// GetGetCreditsFilterItem2 returns GetCreditsFilterItem2 and true boolean if GetCreditsFilterItem is GetCreditsFilterItem2.
func (s GetCreditsFilterItem) GetGetCreditsFilterItem2() (v GetCreditsFilterItem2, ok bool) {
	if !s.IsGetCreditsFilterItem2() {
		return v, false
	}
	return s.GetCreditsFilterItem2, true
}

// NewGetCreditsFilterItem2GetCreditsFilterItem returns new GetCreditsFilterItem from GetCreditsFilterItem2.
func NewGetCreditsFilterItem2GetCreditsFilterItem(v GetCreditsFilterItem2) GetCreditsFilterItem {
	var s GetCreditsFilterItem
	s.SetGetCreditsFilterItem2(v)
	return s
}

type GetCreditsFilterItem2 map[string]string

func (s *GetCreditsFilterItem2) init() GetCreditsFilterItem2 {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type GetCreditsOK struct {
	Data []Credit `json:"data"`
}

// GetData returns the value of Data.
func (s *GetCreditsOK) GetData() []Credit {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetCreditsOK) SetData(val []Credit) {
	s.Data = val
}

type GetCreditsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetCreditsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetCreditsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetCreditsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetCreditsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetDNSZoneOK struct {
	Data OptZone `json:"data"`
}

// GetData returns the value of Data.
func (s *GetDNSZoneOK) GetData() OptZone {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetDNSZoneOK) SetData(val OptZone) {
	s.Data = val
}

type GetDeploymentStrategiesOK struct {
	Data OptGetDeploymentStrategiesOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetDeploymentStrategiesOK) GetData() OptGetDeploymentStrategiesOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetDeploymentStrategiesOK) SetData(val OptGetDeploymentStrategiesOKData) {
	s.Data = val
}

type GetDeploymentStrategiesOKData struct {
	ResourceMinusDensity  OptDeploymentStrategy `json:"resource-density"`
	HighMinusAvailability OptDeploymentStrategy `json:"high-availability"`
	FirstMinusAvailable   OptDeploymentStrategy `json:"first-available"`
	Node                  OptDeploymentStrategy `json:"node"`
	Edge                  OptDeploymentStrategy `json:"edge"`
	Manual                OptDeploymentStrategy `json:"manual"`
}

// GetResourceMinusDensity returns the value of ResourceMinusDensity.
func (s *GetDeploymentStrategiesOKData) GetResourceMinusDensity() OptDeploymentStrategy {
	return s.ResourceMinusDensity
}

// GetHighMinusAvailability returns the value of HighMinusAvailability.
func (s *GetDeploymentStrategiesOKData) GetHighMinusAvailability() OptDeploymentStrategy {
	return s.HighMinusAvailability
}

// GetFirstMinusAvailable returns the value of FirstMinusAvailable.
func (s *GetDeploymentStrategiesOKData) GetFirstMinusAvailable() OptDeploymentStrategy {
	return s.FirstMinusAvailable
}

// GetNode returns the value of Node.
func (s *GetDeploymentStrategiesOKData) GetNode() OptDeploymentStrategy {
	return s.Node
}

// GetEdge returns the value of Edge.
func (s *GetDeploymentStrategiesOKData) GetEdge() OptDeploymentStrategy {
	return s.Edge
}

// GetManual returns the value of Manual.
func (s *GetDeploymentStrategiesOKData) GetManual() OptDeploymentStrategy {
	return s.Manual
}

// SetResourceMinusDensity sets the value of ResourceMinusDensity.
func (s *GetDeploymentStrategiesOKData) SetResourceMinusDensity(val OptDeploymentStrategy) {
	s.ResourceMinusDensity = val
}

// SetHighMinusAvailability sets the value of HighMinusAvailability.
func (s *GetDeploymentStrategiesOKData) SetHighMinusAvailability(val OptDeploymentStrategy) {
	s.HighMinusAvailability = val
}

// SetFirstMinusAvailable sets the value of FirstMinusAvailable.
func (s *GetDeploymentStrategiesOKData) SetFirstMinusAvailable(val OptDeploymentStrategy) {
	s.FirstMinusAvailable = val
}

// SetNode sets the value of Node.
func (s *GetDeploymentStrategiesOKData) SetNode(val OptDeploymentStrategy) {
	s.Node = val
}

// SetEdge sets the value of Edge.
func (s *GetDeploymentStrategiesOKData) SetEdge(val OptDeploymentStrategy) {
	s.Edge = val
}

// SetManual sets the value of Manual.
func (s *GetDeploymentStrategiesOKData) SetManual(val OptDeploymentStrategy) {
	s.Manual = val
}

type GetEnvironmentByIdIncludeItem string

const (
	GetEnvironmentByIdIncludeItemCreators GetEnvironmentByIdIncludeItem = "creators"
	GetEnvironmentByIdIncludeItemStacks   GetEnvironmentByIdIncludeItem = "stacks"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetEnvironmentByIdIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetEnvironmentByIdIncludeItemCreators:
		return []byte(s), nil
	case GetEnvironmentByIdIncludeItemStacks:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetEnvironmentByIdIncludeItem) UnmarshalText(data []byte) error {
	switch GetEnvironmentByIdIncludeItem(data) {
	case GetEnvironmentByIdIncludeItemCreators:
		*s = GetEnvironmentByIdIncludeItemCreators
		return nil
	case GetEnvironmentByIdIncludeItemStacks:
		*s = GetEnvironmentByIdIncludeItemStacks
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetEnvironmentByIdMetaItem string

const (
	GetEnvironmentByIdMetaItemContainers      GetEnvironmentByIdMetaItem = "containers"
	GetEnvironmentByIdMetaItemContainersCount GetEnvironmentByIdMetaItem = "containers_count"
	GetEnvironmentByIdMetaItemInstancesCount  GetEnvironmentByIdMetaItem = "instances_count"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetEnvironmentByIdMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetEnvironmentByIdMetaItemContainers:
		return []byte(s), nil
	case GetEnvironmentByIdMetaItemContainersCount:
		return []byte(s), nil
	case GetEnvironmentByIdMetaItemInstancesCount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetEnvironmentByIdMetaItem) UnmarshalText(data []byte) error {
	switch GetEnvironmentByIdMetaItem(data) {
	case GetEnvironmentByIdMetaItemContainers:
		*s = GetEnvironmentByIdMetaItemContainers
		return nil
	case GetEnvironmentByIdMetaItemContainersCount:
		*s = GetEnvironmentByIdMetaItemContainersCount
		return nil
	case GetEnvironmentByIdMetaItemInstancesCount:
		*s = GetEnvironmentByIdMetaItemInstancesCount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetEnvironmentByIdOK struct {
	Data     OptEnvironment                  `json:"data"`
	Includes OptGetEnvironmentByIdOKIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetEnvironmentByIdOK) GetData() OptEnvironment {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetEnvironmentByIdOK) GetIncludes() OptGetEnvironmentByIdOKIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetEnvironmentByIdOK) SetData(val OptEnvironment) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetEnvironmentByIdOK) SetIncludes(val OptGetEnvironmentByIdOKIncludes) {
	s.Includes = val
}

type GetEnvironmentByIdOKIncludes struct {
	Creators OptCreatorInclude `json:"creators"`
}

// GetCreators returns the value of Creators.
func (s *GetEnvironmentByIdOKIncludes) GetCreators() OptCreatorInclude {
	return s.Creators
}

// SetCreators sets the value of Creators.
func (s *GetEnvironmentByIdOKIncludes) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

type GetEnvironmentInstancesTelemetryFilter map[string]GetEnvironmentInstancesTelemetryFilterItem

func (s *GetEnvironmentInstancesTelemetryFilter) init() GetEnvironmentInstancesTelemetryFilter {
	m := *s
	if m == nil {
		m = map[string]GetEnvironmentInstancesTelemetryFilterItem{}
		*s = m
	}
	return m
}

// GetEnvironmentInstancesTelemetryFilterItem represents sum type.
type GetEnvironmentInstancesTelemetryFilterItem struct {
	Type        GetEnvironmentInstancesTelemetryFilterItemType // switch on this field
	String      string
	StringArray []string
}

// GetEnvironmentInstancesTelemetryFilterItemType is oneOf type of GetEnvironmentInstancesTelemetryFilterItem.
type GetEnvironmentInstancesTelemetryFilterItemType string

// Possible values for GetEnvironmentInstancesTelemetryFilterItemType.
const (
	StringGetEnvironmentInstancesTelemetryFilterItem      GetEnvironmentInstancesTelemetryFilterItemType = "string"
	StringArrayGetEnvironmentInstancesTelemetryFilterItem GetEnvironmentInstancesTelemetryFilterItemType = "[]string"
)

// IsString reports whether GetEnvironmentInstancesTelemetryFilterItem is string.
func (s GetEnvironmentInstancesTelemetryFilterItem) IsString() bool {
	return s.Type == StringGetEnvironmentInstancesTelemetryFilterItem
}

// IsStringArray reports whether GetEnvironmentInstancesTelemetryFilterItem is []string.
func (s GetEnvironmentInstancesTelemetryFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetEnvironmentInstancesTelemetryFilterItem
}

// SetString sets GetEnvironmentInstancesTelemetryFilterItem to string.
func (s *GetEnvironmentInstancesTelemetryFilterItem) SetString(v string) {
	s.Type = StringGetEnvironmentInstancesTelemetryFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetEnvironmentInstancesTelemetryFilterItem is string.
func (s GetEnvironmentInstancesTelemetryFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetEnvironmentInstancesTelemetryFilterItem returns new GetEnvironmentInstancesTelemetryFilterItem from string.
func NewStringGetEnvironmentInstancesTelemetryFilterItem(v string) GetEnvironmentInstancesTelemetryFilterItem {
	var s GetEnvironmentInstancesTelemetryFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetEnvironmentInstancesTelemetryFilterItem to []string.
func (s *GetEnvironmentInstancesTelemetryFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetEnvironmentInstancesTelemetryFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetEnvironmentInstancesTelemetryFilterItem is []string.
func (s GetEnvironmentInstancesTelemetryFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetEnvironmentInstancesTelemetryFilterItem returns new GetEnvironmentInstancesTelemetryFilterItem from []string.
func NewStringArrayGetEnvironmentInstancesTelemetryFilterItem(v []string) GetEnvironmentInstancesTelemetryFilterItem {
	var s GetEnvironmentInstancesTelemetryFilterItem
	s.SetStringArray(v)
	return s
}

type GetEnvironmentInstancesTelemetryOK struct {
	Data []InstanceTelemetryPoint `json:"data"`
}

// GetData returns the value of Data.
func (s *GetEnvironmentInstancesTelemetryOK) GetData() []InstanceTelemetryPoint {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetEnvironmentInstancesTelemetryOK) SetData(val []InstanceTelemetryPoint) {
	s.Data = val
}

type GetEnvironmentSummaryOK struct {
	Data OptEnvironmentSummary `json:"data"`
}

// GetData returns the value of Data.
func (s *GetEnvironmentSummaryOK) GetData() OptEnvironmentSummary {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetEnvironmentSummaryOK) SetData(val OptEnvironmentSummary) {
	s.Data = val
}

type GetEnvironmentsFilter map[string]GetEnvironmentsFilterItem

func (s *GetEnvironmentsFilter) init() GetEnvironmentsFilter {
	m := *s
	if m == nil {
		m = map[string]GetEnvironmentsFilterItem{}
		*s = m
	}
	return m
}

// GetEnvironmentsFilterItem represents sum type.
type GetEnvironmentsFilterItem struct {
	Type        GetEnvironmentsFilterItemType // switch on this field
	String      string
	StringArray []string
}

// GetEnvironmentsFilterItemType is oneOf type of GetEnvironmentsFilterItem.
type GetEnvironmentsFilterItemType string

// Possible values for GetEnvironmentsFilterItemType.
const (
	StringGetEnvironmentsFilterItem      GetEnvironmentsFilterItemType = "string"
	StringArrayGetEnvironmentsFilterItem GetEnvironmentsFilterItemType = "[]string"
)

// IsString reports whether GetEnvironmentsFilterItem is string.
func (s GetEnvironmentsFilterItem) IsString() bool { return s.Type == StringGetEnvironmentsFilterItem }

// IsStringArray reports whether GetEnvironmentsFilterItem is []string.
func (s GetEnvironmentsFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetEnvironmentsFilterItem
}

// SetString sets GetEnvironmentsFilterItem to string.
func (s *GetEnvironmentsFilterItem) SetString(v string) {
	s.Type = StringGetEnvironmentsFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetEnvironmentsFilterItem is string.
func (s GetEnvironmentsFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetEnvironmentsFilterItem returns new GetEnvironmentsFilterItem from string.
func NewStringGetEnvironmentsFilterItem(v string) GetEnvironmentsFilterItem {
	var s GetEnvironmentsFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetEnvironmentsFilterItem to []string.
func (s *GetEnvironmentsFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetEnvironmentsFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetEnvironmentsFilterItem is []string.
func (s GetEnvironmentsFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetEnvironmentsFilterItem returns new GetEnvironmentsFilterItem from []string.
func NewStringArrayGetEnvironmentsFilterItem(v []string) GetEnvironmentsFilterItem {
	var s GetEnvironmentsFilterItem
	s.SetStringArray(v)
	return s
}

type GetEnvironmentsIncludeItem string

const (
	GetEnvironmentsIncludeItemCreators GetEnvironmentsIncludeItem = "creators"
	GetEnvironmentsIncludeItemStacks   GetEnvironmentsIncludeItem = "stacks"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetEnvironmentsIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetEnvironmentsIncludeItemCreators:
		return []byte(s), nil
	case GetEnvironmentsIncludeItemStacks:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetEnvironmentsIncludeItem) UnmarshalText(data []byte) error {
	switch GetEnvironmentsIncludeItem(data) {
	case GetEnvironmentsIncludeItemCreators:
		*s = GetEnvironmentsIncludeItemCreators
		return nil
	case GetEnvironmentsIncludeItemStacks:
		*s = GetEnvironmentsIncludeItemStacks
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetEnvironmentsMetaItem string

const (
	GetEnvironmentsMetaItemContainers      GetEnvironmentsMetaItem = "containers"
	GetEnvironmentsMetaItemContainersCount GetEnvironmentsMetaItem = "containers_count"
	GetEnvironmentsMetaItemInstancesCount  GetEnvironmentsMetaItem = "instances_count"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetEnvironmentsMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetEnvironmentsMetaItemContainers:
		return []byte(s), nil
	case GetEnvironmentsMetaItemContainersCount:
		return []byte(s), nil
	case GetEnvironmentsMetaItemInstancesCount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetEnvironmentsMetaItem) UnmarshalText(data []byte) error {
	switch GetEnvironmentsMetaItem(data) {
	case GetEnvironmentsMetaItemContainers:
		*s = GetEnvironmentsMetaItemContainers
		return nil
	case GetEnvironmentsMetaItemContainersCount:
		*s = GetEnvironmentsMetaItemContainersCount
		return nil
	case GetEnvironmentsMetaItemInstancesCount:
		*s = GetEnvironmentsMetaItemInstancesCount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetEnvironmentsOK struct {
	Data     []Environment                `json:"data"`
	Includes OptGetEnvironmentsOKIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetEnvironmentsOK) GetData() []Environment {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetEnvironmentsOK) GetIncludes() OptGetEnvironmentsOKIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetEnvironmentsOK) SetData(val []Environment) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetEnvironmentsOK) SetIncludes(val OptGetEnvironmentsOKIncludes) {
	s.Includes = val
}

type GetEnvironmentsOKIncludes struct {
	Creators OptCreatorInclude `json:"creators"`
}

// GetCreators returns the value of Creators.
func (s *GetEnvironmentsOKIncludes) GetCreators() OptCreatorInclude {
	return s.Creators
}

// SetCreators sets the value of Creators.
func (s *GetEnvironmentsOKIncludes) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

type GetEnvironmentsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetEnvironmentsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetEnvironmentsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetEnvironmentsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetEnvironmentsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetHubCapabilitiesOK struct {
	Data []Capability `json:"data"`
}

// GetData returns the value of Data.
func (s *GetHubCapabilitiesOK) GetData() []Capability {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetHubCapabilitiesOK) SetData(val []Capability) {
	s.Data = val
}

type GetHubInvitesFilter map[string]GetHubInvitesFilterItem

func (s *GetHubInvitesFilter) init() GetHubInvitesFilter {
	m := *s
	if m == nil {
		m = map[string]GetHubInvitesFilterItem{}
		*s = m
	}
	return m
}

// GetHubInvitesFilterItem represents sum type.
type GetHubInvitesFilterItem struct {
	Type                     GetHubInvitesFilterItemType // switch on this field
	String                   string
	StringArray              []string
	GetHubInvitesFilterItem2 GetHubInvitesFilterItem2
}

// GetHubInvitesFilterItemType is oneOf type of GetHubInvitesFilterItem.
type GetHubInvitesFilterItemType string

// Possible values for GetHubInvitesFilterItemType.
const (
	StringGetHubInvitesFilterItem                   GetHubInvitesFilterItemType = "string"
	StringArrayGetHubInvitesFilterItem              GetHubInvitesFilterItemType = "[]string"
	GetHubInvitesFilterItem2GetHubInvitesFilterItem GetHubInvitesFilterItemType = "GetHubInvitesFilterItem2"
)

// IsString reports whether GetHubInvitesFilterItem is string.
func (s GetHubInvitesFilterItem) IsString() bool { return s.Type == StringGetHubInvitesFilterItem }

// IsStringArray reports whether GetHubInvitesFilterItem is []string.
func (s GetHubInvitesFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetHubInvitesFilterItem
}

// IsGetHubInvitesFilterItem2 reports whether GetHubInvitesFilterItem is GetHubInvitesFilterItem2.
func (s GetHubInvitesFilterItem) IsGetHubInvitesFilterItem2() bool {
	return s.Type == GetHubInvitesFilterItem2GetHubInvitesFilterItem
}

// SetString sets GetHubInvitesFilterItem to string.
func (s *GetHubInvitesFilterItem) SetString(v string) {
	s.Type = StringGetHubInvitesFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetHubInvitesFilterItem is string.
func (s GetHubInvitesFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetHubInvitesFilterItem returns new GetHubInvitesFilterItem from string.
func NewStringGetHubInvitesFilterItem(v string) GetHubInvitesFilterItem {
	var s GetHubInvitesFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetHubInvitesFilterItem to []string.
func (s *GetHubInvitesFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetHubInvitesFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetHubInvitesFilterItem is []string.
func (s GetHubInvitesFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetHubInvitesFilterItem returns new GetHubInvitesFilterItem from []string.
func NewStringArrayGetHubInvitesFilterItem(v []string) GetHubInvitesFilterItem {
	var s GetHubInvitesFilterItem
	s.SetStringArray(v)
	return s
}

// SetGetHubInvitesFilterItem2 sets GetHubInvitesFilterItem to GetHubInvitesFilterItem2.
func (s *GetHubInvitesFilterItem) SetGetHubInvitesFilterItem2(v GetHubInvitesFilterItem2) {
	s.Type = GetHubInvitesFilterItem2GetHubInvitesFilterItem
	s.GetHubInvitesFilterItem2 = v
}

// GetGetHubInvitesFilterItem2 returns GetHubInvitesFilterItem2 and true boolean if GetHubInvitesFilterItem is GetHubInvitesFilterItem2.
func (s GetHubInvitesFilterItem) GetGetHubInvitesFilterItem2() (v GetHubInvitesFilterItem2, ok bool) {
	if !s.IsGetHubInvitesFilterItem2() {
		return v, false
	}
	return s.GetHubInvitesFilterItem2, true
}

// NewGetHubInvitesFilterItem2GetHubInvitesFilterItem returns new GetHubInvitesFilterItem from GetHubInvitesFilterItem2.
func NewGetHubInvitesFilterItem2GetHubInvitesFilterItem(v GetHubInvitesFilterItem2) GetHubInvitesFilterItem {
	var s GetHubInvitesFilterItem
	s.SetGetHubInvitesFilterItem2(v)
	return s
}

type GetHubInvitesFilterItem2 map[string]string

func (s *GetHubInvitesFilterItem2) init() GetHubInvitesFilterItem2 {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type GetHubInvitesIncludeItem string

const (
	GetHubInvitesIncludeItemSenders  GetHubInvitesIncludeItem = "senders"
	GetHubInvitesIncludeItemHubs     GetHubInvitesIncludeItem = "hubs"
	GetHubInvitesIncludeItemAccounts GetHubInvitesIncludeItem = "accounts"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetHubInvitesIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetHubInvitesIncludeItemSenders:
		return []byte(s), nil
	case GetHubInvitesIncludeItemHubs:
		return []byte(s), nil
	case GetHubInvitesIncludeItemAccounts:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetHubInvitesIncludeItem) UnmarshalText(data []byte) error {
	switch GetHubInvitesIncludeItem(data) {
	case GetHubInvitesIncludeItemSenders:
		*s = GetHubInvitesIncludeItemSenders
		return nil
	case GetHubInvitesIncludeItemHubs:
		*s = GetHubInvitesIncludeItemHubs
		return nil
	case GetHubInvitesIncludeItemAccounts:
		*s = GetHubInvitesIncludeItemAccounts
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetHubInvitesMetaItem string

const (
	GetHubInvitesMetaItemCapabilities GetHubInvitesMetaItem = "capabilities"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetHubInvitesMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetHubInvitesMetaItemCapabilities:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetHubInvitesMetaItem) UnmarshalText(data []byte) error {
	switch GetHubInvitesMetaItem(data) {
	case GetHubInvitesMetaItemCapabilities:
		*s = GetHubInvitesMetaItemCapabilities
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetHubInvitesOK struct {
	Data     []HubMembership          `json:"data"`
	Includes OptHubMembershipIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetHubInvitesOK) GetData() []HubMembership {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetHubInvitesOK) GetIncludes() OptHubMembershipIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetHubInvitesOK) SetData(val []HubMembership) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetHubInvitesOK) SetIncludes(val OptHubMembershipIncludes) {
	s.Includes = val
}

type GetHubInvitesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetHubInvitesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetHubInvitesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetHubInvitesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetHubInvitesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetHubMemberIncludeItem string

const (
	GetHubMemberIncludeItemSenders  GetHubMemberIncludeItem = "senders"
	GetHubMemberIncludeItemHubs     GetHubMemberIncludeItem = "hubs"
	GetHubMemberIncludeItemAccounts GetHubMemberIncludeItem = "accounts"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetHubMemberIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetHubMemberIncludeItemSenders:
		return []byte(s), nil
	case GetHubMemberIncludeItemHubs:
		return []byte(s), nil
	case GetHubMemberIncludeItemAccounts:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetHubMemberIncludeItem) UnmarshalText(data []byte) error {
	switch GetHubMemberIncludeItem(data) {
	case GetHubMemberIncludeItemSenders:
		*s = GetHubMemberIncludeItemSenders
		return nil
	case GetHubMemberIncludeItemHubs:
		*s = GetHubMemberIncludeItemHubs
		return nil
	case GetHubMemberIncludeItemAccounts:
		*s = GetHubMemberIncludeItemAccounts
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetHubMemberOK struct {
	Data     OptHubMembership         `json:"data"`
	Includes OptHubMembershipIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetHubMemberOK) GetData() OptHubMembership {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetHubMemberOK) GetIncludes() OptHubMembershipIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetHubMemberOK) SetData(val OptHubMembership) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetHubMemberOK) SetIncludes(val OptHubMembershipIncludes) {
	s.Includes = val
}

type GetHubMembersAccountIncludeItem string

const (
	GetHubMembersAccountIncludeItemSenders  GetHubMembersAccountIncludeItem = "senders"
	GetHubMembersAccountIncludeItemHubs     GetHubMembersAccountIncludeItem = "hubs"
	GetHubMembersAccountIncludeItemAccounts GetHubMembersAccountIncludeItem = "accounts"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetHubMembersAccountIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetHubMembersAccountIncludeItemSenders:
		return []byte(s), nil
	case GetHubMembersAccountIncludeItemHubs:
		return []byte(s), nil
	case GetHubMembersAccountIncludeItemAccounts:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetHubMembersAccountIncludeItem) UnmarshalText(data []byte) error {
	switch GetHubMembersAccountIncludeItem(data) {
	case GetHubMembersAccountIncludeItemSenders:
		*s = GetHubMembersAccountIncludeItemSenders
		return nil
	case GetHubMembersAccountIncludeItemHubs:
		*s = GetHubMembersAccountIncludeItemHubs
		return nil
	case GetHubMembersAccountIncludeItemAccounts:
		*s = GetHubMembersAccountIncludeItemAccounts
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetHubMembersAccountMetaItem string

const (
	GetHubMembersAccountMetaItemCapabilities GetHubMembersAccountMetaItem = "capabilities"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetHubMembersAccountMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetHubMembersAccountMetaItemCapabilities:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetHubMembersAccountMetaItem) UnmarshalText(data []byte) error {
	switch GetHubMembersAccountMetaItem(data) {
	case GetHubMembersAccountMetaItemCapabilities:
		*s = GetHubMembersAccountMetaItemCapabilities
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetHubMembersAccountOK struct {
	Data     OptHubMembership         `json:"data"`
	Includes OptHubMembershipIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetHubMembersAccountOK) GetData() OptHubMembership {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetHubMembersAccountOK) GetIncludes() OptHubMembershipIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetHubMembersAccountOK) SetData(val OptHubMembership) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetHubMembersAccountOK) SetIncludes(val OptHubMembershipIncludes) {
	s.Includes = val
}

type GetHubMembersFilter map[string]GetHubMembersFilterItem

func (s *GetHubMembersFilter) init() GetHubMembersFilter {
	m := *s
	if m == nil {
		m = map[string]GetHubMembersFilterItem{}
		*s = m
	}
	return m
}

// GetHubMembersFilterItem represents sum type.
type GetHubMembersFilterItem struct {
	Type                     GetHubMembersFilterItemType // switch on this field
	String                   string
	StringArray              []string
	GetHubMembersFilterItem2 GetHubMembersFilterItem2
}

// GetHubMembersFilterItemType is oneOf type of GetHubMembersFilterItem.
type GetHubMembersFilterItemType string

// Possible values for GetHubMembersFilterItemType.
const (
	StringGetHubMembersFilterItem                   GetHubMembersFilterItemType = "string"
	StringArrayGetHubMembersFilterItem              GetHubMembersFilterItemType = "[]string"
	GetHubMembersFilterItem2GetHubMembersFilterItem GetHubMembersFilterItemType = "GetHubMembersFilterItem2"
)

// IsString reports whether GetHubMembersFilterItem is string.
func (s GetHubMembersFilterItem) IsString() bool { return s.Type == StringGetHubMembersFilterItem }

// IsStringArray reports whether GetHubMembersFilterItem is []string.
func (s GetHubMembersFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetHubMembersFilterItem
}

// IsGetHubMembersFilterItem2 reports whether GetHubMembersFilterItem is GetHubMembersFilterItem2.
func (s GetHubMembersFilterItem) IsGetHubMembersFilterItem2() bool {
	return s.Type == GetHubMembersFilterItem2GetHubMembersFilterItem
}

// SetString sets GetHubMembersFilterItem to string.
func (s *GetHubMembersFilterItem) SetString(v string) {
	s.Type = StringGetHubMembersFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetHubMembersFilterItem is string.
func (s GetHubMembersFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetHubMembersFilterItem returns new GetHubMembersFilterItem from string.
func NewStringGetHubMembersFilterItem(v string) GetHubMembersFilterItem {
	var s GetHubMembersFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetHubMembersFilterItem to []string.
func (s *GetHubMembersFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetHubMembersFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetHubMembersFilterItem is []string.
func (s GetHubMembersFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetHubMembersFilterItem returns new GetHubMembersFilterItem from []string.
func NewStringArrayGetHubMembersFilterItem(v []string) GetHubMembersFilterItem {
	var s GetHubMembersFilterItem
	s.SetStringArray(v)
	return s
}

// SetGetHubMembersFilterItem2 sets GetHubMembersFilterItem to GetHubMembersFilterItem2.
func (s *GetHubMembersFilterItem) SetGetHubMembersFilterItem2(v GetHubMembersFilterItem2) {
	s.Type = GetHubMembersFilterItem2GetHubMembersFilterItem
	s.GetHubMembersFilterItem2 = v
}

// GetGetHubMembersFilterItem2 returns GetHubMembersFilterItem2 and true boolean if GetHubMembersFilterItem is GetHubMembersFilterItem2.
func (s GetHubMembersFilterItem) GetGetHubMembersFilterItem2() (v GetHubMembersFilterItem2, ok bool) {
	if !s.IsGetHubMembersFilterItem2() {
		return v, false
	}
	return s.GetHubMembersFilterItem2, true
}

// NewGetHubMembersFilterItem2GetHubMembersFilterItem returns new GetHubMembersFilterItem from GetHubMembersFilterItem2.
func NewGetHubMembersFilterItem2GetHubMembersFilterItem(v GetHubMembersFilterItem2) GetHubMembersFilterItem {
	var s GetHubMembersFilterItem
	s.SetGetHubMembersFilterItem2(v)
	return s
}

type GetHubMembersFilterItem2 map[string]string

func (s *GetHubMembersFilterItem2) init() GetHubMembersFilterItem2 {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type GetHubMembersIncludeItem string

const (
	GetHubMembersIncludeItemSenders  GetHubMembersIncludeItem = "senders"
	GetHubMembersIncludeItemHubs     GetHubMembersIncludeItem = "hubs"
	GetHubMembersIncludeItemAccounts GetHubMembersIncludeItem = "accounts"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetHubMembersIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetHubMembersIncludeItemSenders:
		return []byte(s), nil
	case GetHubMembersIncludeItemHubs:
		return []byte(s), nil
	case GetHubMembersIncludeItemAccounts:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetHubMembersIncludeItem) UnmarshalText(data []byte) error {
	switch GetHubMembersIncludeItem(data) {
	case GetHubMembersIncludeItemSenders:
		*s = GetHubMembersIncludeItemSenders
		return nil
	case GetHubMembersIncludeItemHubs:
		*s = GetHubMembersIncludeItemHubs
		return nil
	case GetHubMembersIncludeItemAccounts:
		*s = GetHubMembersIncludeItemAccounts
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetHubMembersMetaItem string

const (
	GetHubMembersMetaItemCapabilities GetHubMembersMetaItem = "capabilities"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetHubMembersMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetHubMembersMetaItemCapabilities:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetHubMembersMetaItem) UnmarshalText(data []byte) error {
	switch GetHubMembersMetaItem(data) {
	case GetHubMembersMetaItemCapabilities:
		*s = GetHubMembersMetaItemCapabilities
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetHubMembersOK struct {
	Data     []HubMembership          `json:"data"`
	Includes OptHubMembershipIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetHubMembersOK) GetData() []HubMembership {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetHubMembersOK) GetIncludes() OptHubMembershipIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetHubMembersOK) SetData(val []HubMembership) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetHubMembersOK) SetIncludes(val OptHubMembershipIncludes) {
	s.Includes = val
}

type GetHubMembersPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetHubMembersPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetHubMembersPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetHubMembersPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetHubMembersPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetHubMetaItem string

const (
	GetHubMetaItemMemberships GetHubMetaItem = "memberships"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetHubMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetHubMetaItemMemberships:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetHubMetaItem) UnmarshalText(data []byte) error {
	switch GetHubMetaItem(data) {
	case GetHubMetaItemMemberships:
		*s = GetHubMetaItemMemberships
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetHubOK struct {
	Data OptHub `json:"data"`
}

// GetData returns the value of Data.
func (s *GetHubOK) GetData() OptHub {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetHubOK) SetData(val OptHub) {
	s.Data = val
}

type GetHubUsageFilter map[string]GetHubUsageFilterItem

func (s *GetHubUsageFilter) init() GetHubUsageFilter {
	m := *s
	if m == nil {
		m = map[string]GetHubUsageFilterItem{}
		*s = m
	}
	return m
}

// GetHubUsageFilterItem represents sum type.
type GetHubUsageFilterItem struct {
	Type                   GetHubUsageFilterItemType // switch on this field
	String                 string
	StringArray            []string
	GetHubUsageFilterItem2 GetHubUsageFilterItem2
}

// GetHubUsageFilterItemType is oneOf type of GetHubUsageFilterItem.
type GetHubUsageFilterItemType string

// Possible values for GetHubUsageFilterItemType.
const (
	StringGetHubUsageFilterItem                 GetHubUsageFilterItemType = "string"
	StringArrayGetHubUsageFilterItem            GetHubUsageFilterItemType = "[]string"
	GetHubUsageFilterItem2GetHubUsageFilterItem GetHubUsageFilterItemType = "GetHubUsageFilterItem2"
)

// IsString reports whether GetHubUsageFilterItem is string.
func (s GetHubUsageFilterItem) IsString() bool { return s.Type == StringGetHubUsageFilterItem }

// IsStringArray reports whether GetHubUsageFilterItem is []string.
func (s GetHubUsageFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetHubUsageFilterItem
}

// IsGetHubUsageFilterItem2 reports whether GetHubUsageFilterItem is GetHubUsageFilterItem2.
func (s GetHubUsageFilterItem) IsGetHubUsageFilterItem2() bool {
	return s.Type == GetHubUsageFilterItem2GetHubUsageFilterItem
}

// SetString sets GetHubUsageFilterItem to string.
func (s *GetHubUsageFilterItem) SetString(v string) {
	s.Type = StringGetHubUsageFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetHubUsageFilterItem is string.
func (s GetHubUsageFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetHubUsageFilterItem returns new GetHubUsageFilterItem from string.
func NewStringGetHubUsageFilterItem(v string) GetHubUsageFilterItem {
	var s GetHubUsageFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetHubUsageFilterItem to []string.
func (s *GetHubUsageFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetHubUsageFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetHubUsageFilterItem is []string.
func (s GetHubUsageFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetHubUsageFilterItem returns new GetHubUsageFilterItem from []string.
func NewStringArrayGetHubUsageFilterItem(v []string) GetHubUsageFilterItem {
	var s GetHubUsageFilterItem
	s.SetStringArray(v)
	return s
}

// SetGetHubUsageFilterItem2 sets GetHubUsageFilterItem to GetHubUsageFilterItem2.
func (s *GetHubUsageFilterItem) SetGetHubUsageFilterItem2(v GetHubUsageFilterItem2) {
	s.Type = GetHubUsageFilterItem2GetHubUsageFilterItem
	s.GetHubUsageFilterItem2 = v
}

// GetGetHubUsageFilterItem2 returns GetHubUsageFilterItem2 and true boolean if GetHubUsageFilterItem is GetHubUsageFilterItem2.
func (s GetHubUsageFilterItem) GetGetHubUsageFilterItem2() (v GetHubUsageFilterItem2, ok bool) {
	if !s.IsGetHubUsageFilterItem2() {
		return v, false
	}
	return s.GetHubUsageFilterItem2, true
}

// NewGetHubUsageFilterItem2GetHubUsageFilterItem returns new GetHubUsageFilterItem from GetHubUsageFilterItem2.
func NewGetHubUsageFilterItem2GetHubUsageFilterItem(v GetHubUsageFilterItem2) GetHubUsageFilterItem {
	var s GetHubUsageFilterItem
	s.SetGetHubUsageFilterItem2(v)
	return s
}

type GetHubUsageFilterItem2 map[string]string

func (s *GetHubUsageFilterItem2) init() GetHubUsageFilterItem2 {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type GetHubUsageOK struct {
	Data []HubUsageDatum `json:"data"`
}

// GetData returns the value of Data.
func (s *GetHubUsageOK) GetData() []HubUsageDatum {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetHubUsageOK) SetData(val []HubUsageDatum) {
	s.Data = val
}

type GetHubsOK struct {
	Data []Hub `json:"data"`
}

// GetData returns the value of Data.
func (s *GetHubsOK) GetData() []Hub {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetHubsOK) SetData(val []Hub) {
	s.Data = val
}

type GetImageBuildLogOK struct {
	Data OptBuildLog `json:"data"`
}

// GetData returns the value of Data.
func (s *GetImageBuildLogOK) GetData() OptBuildLog {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetImageBuildLogOK) SetData(val OptBuildLog) {
	s.Data = val
}

type GetInfrastructureIPPoolIncludeItem string

const (
	GetInfrastructureIPPoolIncludeItemCreators  GetInfrastructureIPPoolIncludeItem = "creators"
	GetInfrastructureIPPoolIncludeItemServers   GetInfrastructureIPPoolIncludeItem = "servers"
	GetInfrastructureIPPoolIncludeItemProviders GetInfrastructureIPPoolIncludeItem = "providers"
	GetInfrastructureIPPoolIncludeItemLocations GetInfrastructureIPPoolIncludeItem = "locations"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetInfrastructureIPPoolIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetInfrastructureIPPoolIncludeItemCreators:
		return []byte(s), nil
	case GetInfrastructureIPPoolIncludeItemServers:
		return []byte(s), nil
	case GetInfrastructureIPPoolIncludeItemProviders:
		return []byte(s), nil
	case GetInfrastructureIPPoolIncludeItemLocations:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetInfrastructureIPPoolIncludeItem) UnmarshalText(data []byte) error {
	switch GetInfrastructureIPPoolIncludeItem(data) {
	case GetInfrastructureIPPoolIncludeItemCreators:
		*s = GetInfrastructureIPPoolIncludeItemCreators
		return nil
	case GetInfrastructureIPPoolIncludeItemServers:
		*s = GetInfrastructureIPPoolIncludeItemServers
		return nil
	case GetInfrastructureIPPoolIncludeItemProviders:
		*s = GetInfrastructureIPPoolIncludeItemProviders
		return nil
	case GetInfrastructureIPPoolIncludeItemLocations:
		*s = GetInfrastructureIPPoolIncludeItemLocations
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetInfrastructureIPPoolOK struct {
	Data     OptPool         `json:"data"`
	Includes OptPoolIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetInfrastructureIPPoolOK) GetData() OptPool {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetInfrastructureIPPoolOK) GetIncludes() OptPoolIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetInfrastructureIPPoolOK) SetData(val OptPool) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetInfrastructureIPPoolOK) SetIncludes(val OptPoolIncludes) {
	s.Includes = val
}

type GetInfrastructureIPPoolsIncludeItem string

const (
	GetInfrastructureIPPoolsIncludeItemCreators  GetInfrastructureIPPoolsIncludeItem = "creators"
	GetInfrastructureIPPoolsIncludeItemServers   GetInfrastructureIPPoolsIncludeItem = "servers"
	GetInfrastructureIPPoolsIncludeItemProviders GetInfrastructureIPPoolsIncludeItem = "providers"
	GetInfrastructureIPPoolsIncludeItemLocations GetInfrastructureIPPoolsIncludeItem = "locations"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetInfrastructureIPPoolsIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetInfrastructureIPPoolsIncludeItemCreators:
		return []byte(s), nil
	case GetInfrastructureIPPoolsIncludeItemServers:
		return []byte(s), nil
	case GetInfrastructureIPPoolsIncludeItemProviders:
		return []byte(s), nil
	case GetInfrastructureIPPoolsIncludeItemLocations:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetInfrastructureIPPoolsIncludeItem) UnmarshalText(data []byte) error {
	switch GetInfrastructureIPPoolsIncludeItem(data) {
	case GetInfrastructureIPPoolsIncludeItemCreators:
		*s = GetInfrastructureIPPoolsIncludeItemCreators
		return nil
	case GetInfrastructureIPPoolsIncludeItemServers:
		*s = GetInfrastructureIPPoolsIncludeItemServers
		return nil
	case GetInfrastructureIPPoolsIncludeItemProviders:
		*s = GetInfrastructureIPPoolsIncludeItemProviders
		return nil
	case GetInfrastructureIPPoolsIncludeItemLocations:
		*s = GetInfrastructureIPPoolsIncludeItemLocations
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetInfrastructureIPPoolsOK struct {
	Data []Pool `json:"data"`
}

// GetData returns the value of Data.
func (s *GetInfrastructureIPPoolsOK) GetData() []Pool {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetInfrastructureIPPoolsOK) SetData(val []Pool) {
	s.Data = val
}

type GetInfrastructureIPPoolsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetInfrastructureIPPoolsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetInfrastructureIPPoolsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetInfrastructureIPPoolsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetInfrastructureIPPoolsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetInfrastructureSummaryFilter map[string]GetInfrastructureSummaryFilterItem

func (s *GetInfrastructureSummaryFilter) init() GetInfrastructureSummaryFilter {
	m := *s
	if m == nil {
		m = map[string]GetInfrastructureSummaryFilterItem{}
		*s = m
	}
	return m
}

// GetInfrastructureSummaryFilterItem represents sum type.
type GetInfrastructureSummaryFilterItem struct {
	Type        GetInfrastructureSummaryFilterItemType // switch on this field
	String      string
	StringArray []string
}

// GetInfrastructureSummaryFilterItemType is oneOf type of GetInfrastructureSummaryFilterItem.
type GetInfrastructureSummaryFilterItemType string

// Possible values for GetInfrastructureSummaryFilterItemType.
const (
	StringGetInfrastructureSummaryFilterItem      GetInfrastructureSummaryFilterItemType = "string"
	StringArrayGetInfrastructureSummaryFilterItem GetInfrastructureSummaryFilterItemType = "[]string"
)

// IsString reports whether GetInfrastructureSummaryFilterItem is string.
func (s GetInfrastructureSummaryFilterItem) IsString() bool {
	return s.Type == StringGetInfrastructureSummaryFilterItem
}

// IsStringArray reports whether GetInfrastructureSummaryFilterItem is []string.
func (s GetInfrastructureSummaryFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetInfrastructureSummaryFilterItem
}

// SetString sets GetInfrastructureSummaryFilterItem to string.
func (s *GetInfrastructureSummaryFilterItem) SetString(v string) {
	s.Type = StringGetInfrastructureSummaryFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetInfrastructureSummaryFilterItem is string.
func (s GetInfrastructureSummaryFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetInfrastructureSummaryFilterItem returns new GetInfrastructureSummaryFilterItem from string.
func NewStringGetInfrastructureSummaryFilterItem(v string) GetInfrastructureSummaryFilterItem {
	var s GetInfrastructureSummaryFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetInfrastructureSummaryFilterItem to []string.
func (s *GetInfrastructureSummaryFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetInfrastructureSummaryFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetInfrastructureSummaryFilterItem is []string.
func (s GetInfrastructureSummaryFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetInfrastructureSummaryFilterItem returns new GetInfrastructureSummaryFilterItem from []string.
func NewStringArrayGetInfrastructureSummaryFilterItem(v []string) GetInfrastructureSummaryFilterItem {
	var s GetInfrastructureSummaryFilterItem
	s.SetStringArray(v)
	return s
}

type GetInfrastructureSummaryOK struct {
	Data OptInfrastructureSummary `json:"data"`
}

// GetData returns the value of Data.
func (s *GetInfrastructureSummaryOK) GetData() OptInfrastructureSummary {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetInfrastructureSummaryOK) SetData(val OptInfrastructureSummary) {
	s.Data = val
}

type GetInstanceResourcesTelemetryReportFilter map[string]GetInstanceResourcesTelemetryReportFilterItem

func (s *GetInstanceResourcesTelemetryReportFilter) init() GetInstanceResourcesTelemetryReportFilter {
	m := *s
	if m == nil {
		m = map[string]GetInstanceResourcesTelemetryReportFilterItem{}
		*s = m
	}
	return m
}

// GetInstanceResourcesTelemetryReportFilterItem represents sum type.
type GetInstanceResourcesTelemetryReportFilterItem struct {
	Type        GetInstanceResourcesTelemetryReportFilterItemType // switch on this field
	String      string
	StringArray []string
}

// GetInstanceResourcesTelemetryReportFilterItemType is oneOf type of GetInstanceResourcesTelemetryReportFilterItem.
type GetInstanceResourcesTelemetryReportFilterItemType string

// Possible values for GetInstanceResourcesTelemetryReportFilterItemType.
const (
	StringGetInstanceResourcesTelemetryReportFilterItem      GetInstanceResourcesTelemetryReportFilterItemType = "string"
	StringArrayGetInstanceResourcesTelemetryReportFilterItem GetInstanceResourcesTelemetryReportFilterItemType = "[]string"
)

// IsString reports whether GetInstanceResourcesTelemetryReportFilterItem is string.
func (s GetInstanceResourcesTelemetryReportFilterItem) IsString() bool {
	return s.Type == StringGetInstanceResourcesTelemetryReportFilterItem
}

// IsStringArray reports whether GetInstanceResourcesTelemetryReportFilterItem is []string.
func (s GetInstanceResourcesTelemetryReportFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetInstanceResourcesTelemetryReportFilterItem
}

// SetString sets GetInstanceResourcesTelemetryReportFilterItem to string.
func (s *GetInstanceResourcesTelemetryReportFilterItem) SetString(v string) {
	s.Type = StringGetInstanceResourcesTelemetryReportFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetInstanceResourcesTelemetryReportFilterItem is string.
func (s GetInstanceResourcesTelemetryReportFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetInstanceResourcesTelemetryReportFilterItem returns new GetInstanceResourcesTelemetryReportFilterItem from string.
func NewStringGetInstanceResourcesTelemetryReportFilterItem(v string) GetInstanceResourcesTelemetryReportFilterItem {
	var s GetInstanceResourcesTelemetryReportFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetInstanceResourcesTelemetryReportFilterItem to []string.
func (s *GetInstanceResourcesTelemetryReportFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetInstanceResourcesTelemetryReportFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetInstanceResourcesTelemetryReportFilterItem is []string.
func (s GetInstanceResourcesTelemetryReportFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetInstanceResourcesTelemetryReportFilterItem returns new GetInstanceResourcesTelemetryReportFilterItem from []string.
func NewStringArrayGetInstanceResourcesTelemetryReportFilterItem(v []string) GetInstanceResourcesTelemetryReportFilterItem {
	var s GetInstanceResourcesTelemetryReportFilterItem
	s.SetStringArray(v)
	return s
}

type GetInstanceResourcesTelemetryReportOK struct {
	Data OptInstanceTelemetryReport `json:"data"`
}

// GetData returns the value of Data.
func (s *GetInstanceResourcesTelemetryReportOK) GetData() OptInstanceTelemetryReport {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetInstanceResourcesTelemetryReportOK) SetData(val OptInstanceTelemetryReport) {
	s.Data = val
}

type GetInstanceResourcesTelemetryStreamOK struct {
	// Credentials for connecting to the instance telemetry stream on compute.
	Data OptGetInstanceResourcesTelemetryStreamOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetInstanceResourcesTelemetryStreamOK) GetData() OptGetInstanceResourcesTelemetryStreamOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetInstanceResourcesTelemetryStreamOK) SetData(val OptGetInstanceResourcesTelemetryStreamOKData) {
	s.Data = val
}

// Credentials for connecting to the instance telemetry stream on compute.
type GetInstanceResourcesTelemetryStreamOKData struct {
	// The authentication token passed into the address as a URL parameter (?token).
	Token string `json:"token"`
	// The URL address to open a websocket to for streaming instance telemetry data.
	Address string `json:"address"`
}

// GetToken returns the value of Token.
func (s *GetInstanceResourcesTelemetryStreamOKData) GetToken() string {
	return s.Token
}

// GetAddress returns the value of Address.
func (s *GetInstanceResourcesTelemetryStreamOKData) GetAddress() string {
	return s.Address
}

// SetToken sets the value of Token.
func (s *GetInstanceResourcesTelemetryStreamOKData) SetToken(val string) {
	s.Token = val
}

// SetAddress sets the value of Address.
func (s *GetInstanceResourcesTelemetryStreamOKData) SetAddress(val string) {
	s.Address = val
}

type GetInstancesFilter map[string]GetInstancesFilterItem

func (s *GetInstancesFilter) init() GetInstancesFilter {
	m := *s
	if m == nil {
		m = map[string]GetInstancesFilterItem{}
		*s = m
	}
	return m
}

// GetInstancesFilterItem represents sum type.
type GetInstancesFilterItem struct {
	Type        GetInstancesFilterItemType // switch on this field
	String      string
	StringArray []string
}

// GetInstancesFilterItemType is oneOf type of GetInstancesFilterItem.
type GetInstancesFilterItemType string

// Possible values for GetInstancesFilterItemType.
const (
	StringGetInstancesFilterItem      GetInstancesFilterItemType = "string"
	StringArrayGetInstancesFilterItem GetInstancesFilterItemType = "[]string"
)

// IsString reports whether GetInstancesFilterItem is string.
func (s GetInstancesFilterItem) IsString() bool { return s.Type == StringGetInstancesFilterItem }

// IsStringArray reports whether GetInstancesFilterItem is []string.
func (s GetInstancesFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetInstancesFilterItem
}

// SetString sets GetInstancesFilterItem to string.
func (s *GetInstancesFilterItem) SetString(v string) {
	s.Type = StringGetInstancesFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetInstancesFilterItem is string.
func (s GetInstancesFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetInstancesFilterItem returns new GetInstancesFilterItem from string.
func NewStringGetInstancesFilterItem(v string) GetInstancesFilterItem {
	var s GetInstancesFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetInstancesFilterItem to []string.
func (s *GetInstancesFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetInstancesFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetInstancesFilterItem is []string.
func (s GetInstancesFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetInstancesFilterItem returns new GetInstancesFilterItem from []string.
func NewStringArrayGetInstancesFilterItem(v []string) GetInstancesFilterItem {
	var s GetInstancesFilterItem
	s.SetStringArray(v)
	return s
}

type GetInstancesIncludeItem string

const (
	GetInstancesIncludeItemCreators     GetInstancesIncludeItem = "creators"
	GetInstancesIncludeItemServers      GetInstancesIncludeItem = "servers"
	GetInstancesIncludeItemLocations    GetInstancesIncludeItem = "locations"
	GetInstancesIncludeItemProviders    GetInstancesIncludeItem = "providers"
	GetInstancesIncludeItemContainers   GetInstancesIncludeItem = "containers"
	GetInstancesIncludeItemEnvironments GetInstancesIncludeItem = "environments"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetInstancesIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetInstancesIncludeItemCreators:
		return []byte(s), nil
	case GetInstancesIncludeItemServers:
		return []byte(s), nil
	case GetInstancesIncludeItemLocations:
		return []byte(s), nil
	case GetInstancesIncludeItemProviders:
		return []byte(s), nil
	case GetInstancesIncludeItemContainers:
		return []byte(s), nil
	case GetInstancesIncludeItemEnvironments:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetInstancesIncludeItem) UnmarshalText(data []byte) error {
	switch GetInstancesIncludeItem(data) {
	case GetInstancesIncludeItemCreators:
		*s = GetInstancesIncludeItemCreators
		return nil
	case GetInstancesIncludeItemServers:
		*s = GetInstancesIncludeItemServers
		return nil
	case GetInstancesIncludeItemLocations:
		*s = GetInstancesIncludeItemLocations
		return nil
	case GetInstancesIncludeItemProviders:
		*s = GetInstancesIncludeItemProviders
		return nil
	case GetInstancesIncludeItemContainers:
		*s = GetInstancesIncludeItemContainers
		return nil
	case GetInstancesIncludeItemEnvironments:
		*s = GetInstancesIncludeItemEnvironments
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetInstancesOK struct {
	Data     []Instance          `json:"data"`
	Includes OptInstanceIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetInstancesOK) GetData() []Instance {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetInstancesOK) GetIncludes() OptInstanceIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetInstancesOK) SetData(val []Instance) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetInstancesOK) SetIncludes(val OptInstanceIncludes) {
	s.Includes = val
}

type GetInstancesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetInstancesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetInstancesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetInstancesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetInstancesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetInvoiceOK struct {
	Data OptInvoice `json:"data"`
}

// GetData returns the value of Data.
func (s *GetInvoiceOK) GetData() OptInvoice {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetInvoiceOK) SetData(val OptInvoice) {
	s.Data = val
}

type GetInvoicesFilter map[string]GetInvoicesFilterItem

func (s *GetInvoicesFilter) init() GetInvoicesFilter {
	m := *s
	if m == nil {
		m = map[string]GetInvoicesFilterItem{}
		*s = m
	}
	return m
}

// GetInvoicesFilterItem represents sum type.
type GetInvoicesFilterItem struct {
	Type                   GetInvoicesFilterItemType // switch on this field
	String                 string
	StringArray            []string
	GetInvoicesFilterItem2 GetInvoicesFilterItem2
}

// GetInvoicesFilterItemType is oneOf type of GetInvoicesFilterItem.
type GetInvoicesFilterItemType string

// Possible values for GetInvoicesFilterItemType.
const (
	StringGetInvoicesFilterItem                 GetInvoicesFilterItemType = "string"
	StringArrayGetInvoicesFilterItem            GetInvoicesFilterItemType = "[]string"
	GetInvoicesFilterItem2GetInvoicesFilterItem GetInvoicesFilterItemType = "GetInvoicesFilterItem2"
)

// IsString reports whether GetInvoicesFilterItem is string.
func (s GetInvoicesFilterItem) IsString() bool { return s.Type == StringGetInvoicesFilterItem }

// IsStringArray reports whether GetInvoicesFilterItem is []string.
func (s GetInvoicesFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetInvoicesFilterItem
}

// IsGetInvoicesFilterItem2 reports whether GetInvoicesFilterItem is GetInvoicesFilterItem2.
func (s GetInvoicesFilterItem) IsGetInvoicesFilterItem2() bool {
	return s.Type == GetInvoicesFilterItem2GetInvoicesFilterItem
}

// SetString sets GetInvoicesFilterItem to string.
func (s *GetInvoicesFilterItem) SetString(v string) {
	s.Type = StringGetInvoicesFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetInvoicesFilterItem is string.
func (s GetInvoicesFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetInvoicesFilterItem returns new GetInvoicesFilterItem from string.
func NewStringGetInvoicesFilterItem(v string) GetInvoicesFilterItem {
	var s GetInvoicesFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetInvoicesFilterItem to []string.
func (s *GetInvoicesFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetInvoicesFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetInvoicesFilterItem is []string.
func (s GetInvoicesFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetInvoicesFilterItem returns new GetInvoicesFilterItem from []string.
func NewStringArrayGetInvoicesFilterItem(v []string) GetInvoicesFilterItem {
	var s GetInvoicesFilterItem
	s.SetStringArray(v)
	return s
}

// SetGetInvoicesFilterItem2 sets GetInvoicesFilterItem to GetInvoicesFilterItem2.
func (s *GetInvoicesFilterItem) SetGetInvoicesFilterItem2(v GetInvoicesFilterItem2) {
	s.Type = GetInvoicesFilterItem2GetInvoicesFilterItem
	s.GetInvoicesFilterItem2 = v
}

// GetGetInvoicesFilterItem2 returns GetInvoicesFilterItem2 and true boolean if GetInvoicesFilterItem is GetInvoicesFilterItem2.
func (s GetInvoicesFilterItem) GetGetInvoicesFilterItem2() (v GetInvoicesFilterItem2, ok bool) {
	if !s.IsGetInvoicesFilterItem2() {
		return v, false
	}
	return s.GetInvoicesFilterItem2, true
}

// NewGetInvoicesFilterItem2GetInvoicesFilterItem returns new GetInvoicesFilterItem from GetInvoicesFilterItem2.
func NewGetInvoicesFilterItem2GetInvoicesFilterItem(v GetInvoicesFilterItem2) GetInvoicesFilterItem {
	var s GetInvoicesFilterItem
	s.SetGetInvoicesFilterItem2(v)
	return s
}

type GetInvoicesFilterItem2 map[string]string

func (s *GetInvoicesFilterItem2) init() GetInvoicesFilterItem2 {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type GetInvoicesMetaItem string

const (
	GetInvoicesMetaItemDue GetInvoicesMetaItem = "due"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetInvoicesMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetInvoicesMetaItemDue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetInvoicesMetaItem) UnmarshalText(data []byte) error {
	switch GetInvoicesMetaItem(data) {
	case GetInvoicesMetaItemDue:
		*s = GetInvoicesMetaItemDue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetInvoicesOK struct {
	Data []Invoice `json:"data"`
}

// GetData returns the value of Data.
func (s *GetInvoicesOK) GetData() []Invoice {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetInvoicesOK) SetData(val []Invoice) {
	s.Data = val
}

type GetInvoicesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetInvoicesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetInvoicesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetInvoicesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetInvoicesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetJobOK struct {
	Data OptJob `json:"data"`
}

// GetData returns the value of Data.
func (s *GetJobOK) GetData() OptJob {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetJobOK) SetData(val OptJob) {
	s.Data = val
}

type GetJobsFilter map[string]GetJobsFilterItem

func (s *GetJobsFilter) init() GetJobsFilter {
	m := *s
	if m == nil {
		m = map[string]GetJobsFilterItem{}
		*s = m
	}
	return m
}

// GetJobsFilterItem represents sum type.
type GetJobsFilterItem struct {
	Type        GetJobsFilterItemType // switch on this field
	String      string
	StringArray []string
}

// GetJobsFilterItemType is oneOf type of GetJobsFilterItem.
type GetJobsFilterItemType string

// Possible values for GetJobsFilterItemType.
const (
	StringGetJobsFilterItem      GetJobsFilterItemType = "string"
	StringArrayGetJobsFilterItem GetJobsFilterItemType = "[]string"
)

// IsString reports whether GetJobsFilterItem is string.
func (s GetJobsFilterItem) IsString() bool { return s.Type == StringGetJobsFilterItem }

// IsStringArray reports whether GetJobsFilterItem is []string.
func (s GetJobsFilterItem) IsStringArray() bool { return s.Type == StringArrayGetJobsFilterItem }

// SetString sets GetJobsFilterItem to string.
func (s *GetJobsFilterItem) SetString(v string) {
	s.Type = StringGetJobsFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetJobsFilterItem is string.
func (s GetJobsFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetJobsFilterItem returns new GetJobsFilterItem from string.
func NewStringGetJobsFilterItem(v string) GetJobsFilterItem {
	var s GetJobsFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetJobsFilterItem to []string.
func (s *GetJobsFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetJobsFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetJobsFilterItem is []string.
func (s GetJobsFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetJobsFilterItem returns new GetJobsFilterItem from []string.
func NewStringArrayGetJobsFilterItem(v []string) GetJobsFilterItem {
	var s GetJobsFilterItem
	s.SetStringArray(v)
	return s
}

type GetJobsIncludeItem string

const (
	GetJobsIncludeItemCreators GetJobsIncludeItem = "creators"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetJobsIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetJobsIncludeItemCreators:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetJobsIncludeItem) UnmarshalText(data []byte) error {
	switch GetJobsIncludeItem(data) {
	case GetJobsIncludeItemCreators:
		*s = GetJobsIncludeItemCreators
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetJobsOK struct {
	Data     []Job          `json:"data"`
	Includes OptJobIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetJobsOK) GetData() []Job {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetJobsOK) GetIncludes() OptJobIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetJobsOK) SetData(val []Job) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetJobsOK) SetIncludes(val OptJobIncludes) {
	s.Includes = val
}

type GetJobsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetJobsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetJobsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetJobsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetJobsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetLatestJobsOK struct {
	Data []Job `json:"data"`
}

// GetData returns the value of Data.
func (s *GetLatestJobsOK) GetData() []Job {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetLatestJobsOK) SetData(val []Job) {
	s.Data = val
}

type GetLoadBalancerInfoOK struct {
	Data OptLoadBalancerInfoReturn `json:"data"`
}

// GetData returns the value of Data.
func (s *GetLoadBalancerInfoOK) GetData() OptLoadBalancerInfoReturn {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetLoadBalancerInfoOK) SetData(val OptLoadBalancerInfoReturn) {
	s.Data = val
}

type GetNativeProvidersFilter map[string]GetNativeProvidersFilterItem

func (s *GetNativeProvidersFilter) init() GetNativeProvidersFilter {
	m := *s
	if m == nil {
		m = map[string]GetNativeProvidersFilterItem{}
		*s = m
	}
	return m
}

// GetNativeProvidersFilterItem represents sum type.
type GetNativeProvidersFilterItem struct {
	Type        GetNativeProvidersFilterItemType // switch on this field
	String      string
	StringArray []string
}

// GetNativeProvidersFilterItemType is oneOf type of GetNativeProvidersFilterItem.
type GetNativeProvidersFilterItemType string

// Possible values for GetNativeProvidersFilterItemType.
const (
	StringGetNativeProvidersFilterItem      GetNativeProvidersFilterItemType = "string"
	StringArrayGetNativeProvidersFilterItem GetNativeProvidersFilterItemType = "[]string"
)

// IsString reports whether GetNativeProvidersFilterItem is string.
func (s GetNativeProvidersFilterItem) IsString() bool {
	return s.Type == StringGetNativeProvidersFilterItem
}

// IsStringArray reports whether GetNativeProvidersFilterItem is []string.
func (s GetNativeProvidersFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetNativeProvidersFilterItem
}

// SetString sets GetNativeProvidersFilterItem to string.
func (s *GetNativeProvidersFilterItem) SetString(v string) {
	s.Type = StringGetNativeProvidersFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetNativeProvidersFilterItem is string.
func (s GetNativeProvidersFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetNativeProvidersFilterItem returns new GetNativeProvidersFilterItem from string.
func NewStringGetNativeProvidersFilterItem(v string) GetNativeProvidersFilterItem {
	var s GetNativeProvidersFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetNativeProvidersFilterItem to []string.
func (s *GetNativeProvidersFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetNativeProvidersFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetNativeProvidersFilterItem is []string.
func (s GetNativeProvidersFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetNativeProvidersFilterItem returns new GetNativeProvidersFilterItem from []string.
func NewStringArrayGetNativeProvidersFilterItem(v []string) GetNativeProvidersFilterItem {
	var s GetNativeProvidersFilterItem
	s.SetStringArray(v)
	return s
}

type GetNativeProvidersMetaItem string

const (
	GetNativeProvidersMetaItemLocations GetNativeProvidersMetaItem = "locations"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetNativeProvidersMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetNativeProvidersMetaItemLocations:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetNativeProvidersMetaItem) UnmarshalText(data []byte) error {
	switch GetNativeProvidersMetaItem(data) {
	case GetNativeProvidersMetaItemLocations:
		*s = GetNativeProvidersMetaItemLocations
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetNativeProvidersOK struct {
	Data []NativeProvider `json:"data"`
}

// GetData returns the value of Data.
func (s *GetNativeProvidersOK) GetData() []NativeProvider {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetNativeProvidersOK) SetData(val []NativeProvider) {
	s.Data = val
}

type GetNativeProvidersPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetNativeProvidersPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetNativeProvidersPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetNativeProvidersPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetNativeProvidersPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetNetworkOK struct {
	Data OptSDNNetwork `json:"data"`
}

// GetData returns the value of Data.
func (s *GetNetworkOK) GetData() OptSDNNetwork {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetNetworkOK) SetData(val OptSDNNetwork) {
	s.Data = val
}

type GetNetworksFilter map[string]GetNetworksFilterItem

func (s *GetNetworksFilter) init() GetNetworksFilter {
	m := *s
	if m == nil {
		m = map[string]GetNetworksFilterItem{}
		*s = m
	}
	return m
}

// GetNetworksFilterItem represents sum type.
type GetNetworksFilterItem struct {
	Type        GetNetworksFilterItemType // switch on this field
	String      string
	StringArray []string
}

// GetNetworksFilterItemType is oneOf type of GetNetworksFilterItem.
type GetNetworksFilterItemType string

// Possible values for GetNetworksFilterItemType.
const (
	StringGetNetworksFilterItem      GetNetworksFilterItemType = "string"
	StringArrayGetNetworksFilterItem GetNetworksFilterItemType = "[]string"
)

// IsString reports whether GetNetworksFilterItem is string.
func (s GetNetworksFilterItem) IsString() bool { return s.Type == StringGetNetworksFilterItem }

// IsStringArray reports whether GetNetworksFilterItem is []string.
func (s GetNetworksFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetNetworksFilterItem
}

// SetString sets GetNetworksFilterItem to string.
func (s *GetNetworksFilterItem) SetString(v string) {
	s.Type = StringGetNetworksFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetNetworksFilterItem is string.
func (s GetNetworksFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetNetworksFilterItem returns new GetNetworksFilterItem from string.
func NewStringGetNetworksFilterItem(v string) GetNetworksFilterItem {
	var s GetNetworksFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetNetworksFilterItem to []string.
func (s *GetNetworksFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetNetworksFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetNetworksFilterItem is []string.
func (s GetNetworksFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetNetworksFilterItem returns new GetNetworksFilterItem from []string.
func NewStringArrayGetNetworksFilterItem(v []string) GetNetworksFilterItem {
	var s GetNetworksFilterItem
	s.SetStringArray(v)
	return s
}

type GetNetworksIncludeItem string

const (
	GetNetworksIncludeItemCreators     GetNetworksIncludeItem = "creators"
	GetNetworksIncludeItemEnvironments GetNetworksIncludeItem = "environments"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetNetworksIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetNetworksIncludeItemCreators:
		return []byte(s), nil
	case GetNetworksIncludeItemEnvironments:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetNetworksIncludeItem) UnmarshalText(data []byte) error {
	switch GetNetworksIncludeItem(data) {
	case GetNetworksIncludeItemCreators:
		*s = GetNetworksIncludeItemCreators
		return nil
	case GetNetworksIncludeItemEnvironments:
		*s = GetNetworksIncludeItemEnvironments
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetNetworksOK struct {
	Data     []SDNNetwork       `json:"data"`
	Includes OptNetworkIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetNetworksOK) GetData() []SDNNetwork {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetNetworksOK) GetIncludes() OptNetworkIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetNetworksOK) SetData(val []SDNNetwork) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetNetworksOK) SetIncludes(val OptNetworkIncludes) {
	s.Includes = val
}

type GetNetworksPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetNetworksPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetNetworksPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetNetworksPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetNetworksPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetOrdersFilter map[string]GetOrdersFilterItem

func (s *GetOrdersFilter) init() GetOrdersFilter {
	m := *s
	if m == nil {
		m = map[string]GetOrdersFilterItem{}
		*s = m
	}
	return m
}

// GetOrdersFilterItem represents sum type.
type GetOrdersFilterItem struct {
	Type                 GetOrdersFilterItemType // switch on this field
	String               string
	StringArray          []string
	GetOrdersFilterItem2 GetOrdersFilterItem2
}

// GetOrdersFilterItemType is oneOf type of GetOrdersFilterItem.
type GetOrdersFilterItemType string

// Possible values for GetOrdersFilterItemType.
const (
	StringGetOrdersFilterItem               GetOrdersFilterItemType = "string"
	StringArrayGetOrdersFilterItem          GetOrdersFilterItemType = "[]string"
	GetOrdersFilterItem2GetOrdersFilterItem GetOrdersFilterItemType = "GetOrdersFilterItem2"
)

// IsString reports whether GetOrdersFilterItem is string.
func (s GetOrdersFilterItem) IsString() bool { return s.Type == StringGetOrdersFilterItem }

// IsStringArray reports whether GetOrdersFilterItem is []string.
func (s GetOrdersFilterItem) IsStringArray() bool { return s.Type == StringArrayGetOrdersFilterItem }

// IsGetOrdersFilterItem2 reports whether GetOrdersFilterItem is GetOrdersFilterItem2.
func (s GetOrdersFilterItem) IsGetOrdersFilterItem2() bool {
	return s.Type == GetOrdersFilterItem2GetOrdersFilterItem
}

// SetString sets GetOrdersFilterItem to string.
func (s *GetOrdersFilterItem) SetString(v string) {
	s.Type = StringGetOrdersFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetOrdersFilterItem is string.
func (s GetOrdersFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetOrdersFilterItem returns new GetOrdersFilterItem from string.
func NewStringGetOrdersFilterItem(v string) GetOrdersFilterItem {
	var s GetOrdersFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetOrdersFilterItem to []string.
func (s *GetOrdersFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetOrdersFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetOrdersFilterItem is []string.
func (s GetOrdersFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetOrdersFilterItem returns new GetOrdersFilterItem from []string.
func NewStringArrayGetOrdersFilterItem(v []string) GetOrdersFilterItem {
	var s GetOrdersFilterItem
	s.SetStringArray(v)
	return s
}

// SetGetOrdersFilterItem2 sets GetOrdersFilterItem to GetOrdersFilterItem2.
func (s *GetOrdersFilterItem) SetGetOrdersFilterItem2(v GetOrdersFilterItem2) {
	s.Type = GetOrdersFilterItem2GetOrdersFilterItem
	s.GetOrdersFilterItem2 = v
}

// GetGetOrdersFilterItem2 returns GetOrdersFilterItem2 and true boolean if GetOrdersFilterItem is GetOrdersFilterItem2.
func (s GetOrdersFilterItem) GetGetOrdersFilterItem2() (v GetOrdersFilterItem2, ok bool) {
	if !s.IsGetOrdersFilterItem2() {
		return v, false
	}
	return s.GetOrdersFilterItem2, true
}

// NewGetOrdersFilterItem2GetOrdersFilterItem returns new GetOrdersFilterItem from GetOrdersFilterItem2.
func NewGetOrdersFilterItem2GetOrdersFilterItem(v GetOrdersFilterItem2) GetOrdersFilterItem {
	var s GetOrdersFilterItem
	s.SetGetOrdersFilterItem2(v)
	return s
}

type GetOrdersFilterItem2 map[string]string

func (s *GetOrdersFilterItem2) init() GetOrdersFilterItem2 {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type GetOrdersIncludeItem string

const (
	GetOrdersIncludeItemPromoCodes GetOrdersIncludeItem = "promo_codes"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetOrdersIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetOrdersIncludeItemPromoCodes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetOrdersIncludeItem) UnmarshalText(data []byte) error {
	switch GetOrdersIncludeItem(data) {
	case GetOrdersIncludeItemPromoCodes:
		*s = GetOrdersIncludeItemPromoCodes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetOrdersMetaItem string

const (
	GetOrdersMetaItemDue GetOrdersMetaItem = "due"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetOrdersMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetOrdersMetaItemDue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetOrdersMetaItem) UnmarshalText(data []byte) error {
	switch GetOrdersMetaItem(data) {
	case GetOrdersMetaItemDue:
		*s = GetOrdersMetaItemDue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetOrdersOK struct {
	Data     []Order          `json:"data"`
	Includes OptOrderIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetOrdersOK) GetData() []Order {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetOrdersOK) GetIncludes() OptOrderIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetOrdersOK) SetData(val []Order) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetOrdersOK) SetIncludes(val OptOrderIncludes) {
	s.Includes = val
}

type GetOrdersPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetOrdersPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetOrdersPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetOrdersPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetOrdersPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetPipelineRunsIncludeItem string

const (
	GetPipelineRunsIncludeItemCreators GetPipelineRunsIncludeItem = "creators"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetPipelineRunsIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetPipelineRunsIncludeItemCreators:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetPipelineRunsIncludeItem) UnmarshalText(data []byte) error {
	switch GetPipelineRunsIncludeItem(data) {
	case GetPipelineRunsIncludeItemCreators:
		*s = GetPipelineRunsIncludeItemCreators
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetPipelineRunsOK struct {
	Data     []Run                        `json:"data"`
	Includes OptGetPipelineRunsOKIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetPipelineRunsOK) GetData() []Run {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetPipelineRunsOK) GetIncludes() OptGetPipelineRunsOKIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetPipelineRunsOK) SetData(val []Run) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetPipelineRunsOK) SetIncludes(val OptGetPipelineRunsOKIncludes) {
	s.Includes = val
}

type GetPipelineRunsOKIncludes struct {
	Creators OptCreatorInclude `json:"creators"`
}

// GetCreators returns the value of Creators.
func (s *GetPipelineRunsOKIncludes) GetCreators() OptCreatorInclude {
	return s.Creators
}

// SetCreators sets the value of Creators.
func (s *GetPipelineRunsOKIncludes) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

type GetPipelineTriggerKeyOK struct {
	Data OptTriggerKey `json:"data"`
}

// GetData returns the value of Data.
func (s *GetPipelineTriggerKeyOK) GetData() OptTriggerKey {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetPipelineTriggerKeyOK) SetData(val OptTriggerKey) {
	s.Data = val
}

type GetPipelineTriggerKeysFilter map[string]GetPipelineTriggerKeysFilterItem

func (s *GetPipelineTriggerKeysFilter) init() GetPipelineTriggerKeysFilter {
	m := *s
	if m == nil {
		m = map[string]GetPipelineTriggerKeysFilterItem{}
		*s = m
	}
	return m
}

// GetPipelineTriggerKeysFilterItem represents sum type.
type GetPipelineTriggerKeysFilterItem struct {
	Type        GetPipelineTriggerKeysFilterItemType // switch on this field
	String      string
	StringArray []string
}

// GetPipelineTriggerKeysFilterItemType is oneOf type of GetPipelineTriggerKeysFilterItem.
type GetPipelineTriggerKeysFilterItemType string

// Possible values for GetPipelineTriggerKeysFilterItemType.
const (
	StringGetPipelineTriggerKeysFilterItem      GetPipelineTriggerKeysFilterItemType = "string"
	StringArrayGetPipelineTriggerKeysFilterItem GetPipelineTriggerKeysFilterItemType = "[]string"
)

// IsString reports whether GetPipelineTriggerKeysFilterItem is string.
func (s GetPipelineTriggerKeysFilterItem) IsString() bool {
	return s.Type == StringGetPipelineTriggerKeysFilterItem
}

// IsStringArray reports whether GetPipelineTriggerKeysFilterItem is []string.
func (s GetPipelineTriggerKeysFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetPipelineTriggerKeysFilterItem
}

// SetString sets GetPipelineTriggerKeysFilterItem to string.
func (s *GetPipelineTriggerKeysFilterItem) SetString(v string) {
	s.Type = StringGetPipelineTriggerKeysFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetPipelineTriggerKeysFilterItem is string.
func (s GetPipelineTriggerKeysFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetPipelineTriggerKeysFilterItem returns new GetPipelineTriggerKeysFilterItem from string.
func NewStringGetPipelineTriggerKeysFilterItem(v string) GetPipelineTriggerKeysFilterItem {
	var s GetPipelineTriggerKeysFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetPipelineTriggerKeysFilterItem to []string.
func (s *GetPipelineTriggerKeysFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetPipelineTriggerKeysFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetPipelineTriggerKeysFilterItem is []string.
func (s GetPipelineTriggerKeysFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetPipelineTriggerKeysFilterItem returns new GetPipelineTriggerKeysFilterItem from []string.
func NewStringArrayGetPipelineTriggerKeysFilterItem(v []string) GetPipelineTriggerKeysFilterItem {
	var s GetPipelineTriggerKeysFilterItem
	s.SetStringArray(v)
	return s
}

type GetPipelineTriggerKeysOK struct {
	Data []TriggerKey `json:"data"`
}

// GetData returns the value of Data.
func (s *GetPipelineTriggerKeysOK) GetData() []TriggerKey {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetPipelineTriggerKeysOK) SetData(val []TriggerKey) {
	s.Data = val
}

type GetPipelineTriggerKeysPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetPipelineTriggerKeysPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetPipelineTriggerKeysPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetPipelineTriggerKeysPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetPipelineTriggerKeysPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetPoolsIPsOK struct {
	Data []IP `json:"data"`
}

// GetData returns the value of Data.
func (s *GetPoolsIPsOK) GetData() []IP {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetPoolsIPsOK) SetData(val []IP) {
	s.Data = val
}

type GetProviderLocationsOK struct {
	Data []InfrastructureProviderLocation `json:"data"`
}

// GetData returns the value of Data.
func (s *GetProviderLocationsOK) GetData() []InfrastructureProviderLocation {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetProviderLocationsOK) SetData(val []InfrastructureProviderLocation) {
	s.Data = val
}

type GetProviderLocationsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetProviderLocationsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetProviderLocationsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetProviderLocationsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetProviderLocationsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetProviderOK struct {
	Data OptProvider `json:"data"`
}

// GetData returns the value of Data.
func (s *GetProviderOK) GetData() OptProvider {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetProviderOK) SetData(val OptProvider) {
	s.Data = val
}

type GetProviderServersOK struct {
	Data []ProviderServer `json:"data"`
}

// GetData returns the value of Data.
func (s *GetProviderServersOK) GetData() []ProviderServer {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetProviderServersOK) SetData(val []ProviderServer) {
	s.Data = val
}

type GetProviderServersPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetProviderServersPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetProviderServersPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetProviderServersPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetProviderServersPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetProvidersFilter map[string]GetProvidersFilterItem

func (s *GetProvidersFilter) init() GetProvidersFilter {
	m := *s
	if m == nil {
		m = map[string]GetProvidersFilterItem{}
		*s = m
	}
	return m
}

// GetProvidersFilterItem represents sum type.
type GetProvidersFilterItem struct {
	Type        GetProvidersFilterItemType // switch on this field
	String      string
	StringArray []string
}

// GetProvidersFilterItemType is oneOf type of GetProvidersFilterItem.
type GetProvidersFilterItemType string

// Possible values for GetProvidersFilterItemType.
const (
	StringGetProvidersFilterItem      GetProvidersFilterItemType = "string"
	StringArrayGetProvidersFilterItem GetProvidersFilterItemType = "[]string"
)

// IsString reports whether GetProvidersFilterItem is string.
func (s GetProvidersFilterItem) IsString() bool { return s.Type == StringGetProvidersFilterItem }

// IsStringArray reports whether GetProvidersFilterItem is []string.
func (s GetProvidersFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetProvidersFilterItem
}

// SetString sets GetProvidersFilterItem to string.
func (s *GetProvidersFilterItem) SetString(v string) {
	s.Type = StringGetProvidersFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetProvidersFilterItem is string.
func (s GetProvidersFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetProvidersFilterItem returns new GetProvidersFilterItem from string.
func NewStringGetProvidersFilterItem(v string) GetProvidersFilterItem {
	var s GetProvidersFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetProvidersFilterItem to []string.
func (s *GetProvidersFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetProvidersFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetProvidersFilterItem is []string.
func (s GetProvidersFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetProvidersFilterItem returns new GetProvidersFilterItem from []string.
func NewStringArrayGetProvidersFilterItem(v []string) GetProvidersFilterItem {
	var s GetProvidersFilterItem
	s.SetStringArray(v)
	return s
}

type GetProvidersMetaItem string

const (
	GetProvidersMetaItemNode           GetProvidersMetaItem = "node"
	GetProvidersMetaItemInstancesCount GetProvidersMetaItem = "instances_count"
	GetProvidersMetaItemLocations      GetProvidersMetaItem = "locations"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetProvidersMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetProvidersMetaItemNode:
		return []byte(s), nil
	case GetProvidersMetaItemInstancesCount:
		return []byte(s), nil
	case GetProvidersMetaItemLocations:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetProvidersMetaItem) UnmarshalText(data []byte) error {
	switch GetProvidersMetaItem(data) {
	case GetProvidersMetaItemNode:
		*s = GetProvidersMetaItemNode
		return nil
	case GetProvidersMetaItemInstancesCount:
		*s = GetProvidersMetaItemInstancesCount
		return nil
	case GetProvidersMetaItemLocations:
		*s = GetProvidersMetaItemLocations
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetProvidersOK struct {
	Data []Provider `json:"data"`
}

// GetData returns the value of Data.
func (s *GetProvidersOK) GetData() []Provider {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetProvidersOK) SetData(val []Provider) {
	s.Data = val
}

type GetProvidersPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetProvidersPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetProvidersPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetProvidersPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetProvidersPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetRecordsCollectionFilter map[string]GetRecordsCollectionFilterItem

func (s *GetRecordsCollectionFilter) init() GetRecordsCollectionFilter {
	m := *s
	if m == nil {
		m = map[string]GetRecordsCollectionFilterItem{}
		*s = m
	}
	return m
}

// GetRecordsCollectionFilterItem represents sum type.
type GetRecordsCollectionFilterItem struct {
	Type        GetRecordsCollectionFilterItemType // switch on this field
	String      string
	StringArray []string
}

// GetRecordsCollectionFilterItemType is oneOf type of GetRecordsCollectionFilterItem.
type GetRecordsCollectionFilterItemType string

// Possible values for GetRecordsCollectionFilterItemType.
const (
	StringGetRecordsCollectionFilterItem      GetRecordsCollectionFilterItemType = "string"
	StringArrayGetRecordsCollectionFilterItem GetRecordsCollectionFilterItemType = "[]string"
)

// IsString reports whether GetRecordsCollectionFilterItem is string.
func (s GetRecordsCollectionFilterItem) IsString() bool {
	return s.Type == StringGetRecordsCollectionFilterItem
}

// IsStringArray reports whether GetRecordsCollectionFilterItem is []string.
func (s GetRecordsCollectionFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetRecordsCollectionFilterItem
}

// SetString sets GetRecordsCollectionFilterItem to string.
func (s *GetRecordsCollectionFilterItem) SetString(v string) {
	s.Type = StringGetRecordsCollectionFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetRecordsCollectionFilterItem is string.
func (s GetRecordsCollectionFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetRecordsCollectionFilterItem returns new GetRecordsCollectionFilterItem from string.
func NewStringGetRecordsCollectionFilterItem(v string) GetRecordsCollectionFilterItem {
	var s GetRecordsCollectionFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetRecordsCollectionFilterItem to []string.
func (s *GetRecordsCollectionFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetRecordsCollectionFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetRecordsCollectionFilterItem is []string.
func (s GetRecordsCollectionFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetRecordsCollectionFilterItem returns new GetRecordsCollectionFilterItem from []string.
func NewStringArrayGetRecordsCollectionFilterItem(v []string) GetRecordsCollectionFilterItem {
	var s GetRecordsCollectionFilterItem
	s.SetStringArray(v)
	return s
}

type GetRecordsCollectionIncludeItem string

const (
	GetRecordsCollectionIncludeItemCreators   GetRecordsCollectionIncludeItem = "creators"
	GetRecordsCollectionIncludeItemContainers GetRecordsCollectionIncludeItem = "containers"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetRecordsCollectionIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetRecordsCollectionIncludeItemCreators:
		return []byte(s), nil
	case GetRecordsCollectionIncludeItemContainers:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetRecordsCollectionIncludeItem) UnmarshalText(data []byte) error {
	switch GetRecordsCollectionIncludeItem(data) {
	case GetRecordsCollectionIncludeItemCreators:
		*s = GetRecordsCollectionIncludeItemCreators
		return nil
	case GetRecordsCollectionIncludeItemContainers:
		*s = GetRecordsCollectionIncludeItemContainers
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetRecordsCollectionOK struct {
	Data     []Record          `json:"data"`
	Includes OptRecordIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetRecordsCollectionOK) GetData() []Record {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetRecordsCollectionOK) GetIncludes() OptRecordIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetRecordsCollectionOK) SetData(val []Record) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetRecordsCollectionOK) SetIncludes(val OptRecordIncludes) {
	s.Includes = val
}

type GetRecordsCollectionPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetRecordsCollectionPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetRecordsCollectionPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetRecordsCollectionPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetRecordsCollectionPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetSSHConnectionOK struct {
	Data OptSSHResponse `json:"data"`
}

// GetData returns the value of Data.
func (s *GetSSHConnectionOK) GetData() OptSSHResponse {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetSSHConnectionOK) SetData(val OptSSHResponse) {
	s.Data = val
}

type GetSearchIndexOK struct {
	Data OptIndex `json:"data"`
}

// GetData returns the value of Data.
func (s *GetSearchIndexOK) GetData() OptIndex {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetSearchIndexOK) SetData(val OptIndex) {
	s.Data = val
}

type GetSecurityReportFilter map[string]GetSecurityReportFilterItem

func (s *GetSecurityReportFilter) init() GetSecurityReportFilter {
	m := *s
	if m == nil {
		m = map[string]GetSecurityReportFilterItem{}
		*s = m
	}
	return m
}

// GetSecurityReportFilterItem represents sum type.
type GetSecurityReportFilterItem struct {
	Type        GetSecurityReportFilterItemType // switch on this field
	String      string
	StringArray []string
}

// GetSecurityReportFilterItemType is oneOf type of GetSecurityReportFilterItem.
type GetSecurityReportFilterItemType string

// Possible values for GetSecurityReportFilterItemType.
const (
	StringGetSecurityReportFilterItem      GetSecurityReportFilterItemType = "string"
	StringArrayGetSecurityReportFilterItem GetSecurityReportFilterItemType = "[]string"
)

// IsString reports whether GetSecurityReportFilterItem is string.
func (s GetSecurityReportFilterItem) IsString() bool {
	return s.Type == StringGetSecurityReportFilterItem
}

// IsStringArray reports whether GetSecurityReportFilterItem is []string.
func (s GetSecurityReportFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetSecurityReportFilterItem
}

// SetString sets GetSecurityReportFilterItem to string.
func (s *GetSecurityReportFilterItem) SetString(v string) {
	s.Type = StringGetSecurityReportFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetSecurityReportFilterItem is string.
func (s GetSecurityReportFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetSecurityReportFilterItem returns new GetSecurityReportFilterItem from string.
func NewStringGetSecurityReportFilterItem(v string) GetSecurityReportFilterItem {
	var s GetSecurityReportFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetSecurityReportFilterItem to []string.
func (s *GetSecurityReportFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetSecurityReportFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetSecurityReportFilterItem is []string.
func (s GetSecurityReportFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetSecurityReportFilterItem returns new GetSecurityReportFilterItem from []string.
func NewStringArrayGetSecurityReportFilterItem(v []string) GetSecurityReportFilterItem {
	var s GetSecurityReportFilterItem
	s.SetStringArray(v)
	return s
}

type GetSecurityReportOK struct {
	Data OptSecurityReport `json:"data"`
}

// GetData returns the value of Data.
func (s *GetSecurityReportOK) GetData() OptSecurityReport {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetSecurityReportOK) SetData(val OptSecurityReport) {
	s.Data = val
}

type GetServerInstancesIncludeItem string

const (
	GetServerInstancesIncludeItemCreator      GetServerInstancesIncludeItem = "creator"
	GetServerInstancesIncludeItemServers      GetServerInstancesIncludeItem = "servers"
	GetServerInstancesIncludeItemLocations    GetServerInstancesIncludeItem = "locations"
	GetServerInstancesIncludeItemProviders    GetServerInstancesIncludeItem = "providers"
	GetServerInstancesIncludeItemContainers   GetServerInstancesIncludeItem = "containers"
	GetServerInstancesIncludeItemEnvironments GetServerInstancesIncludeItem = "environments"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetServerInstancesIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetServerInstancesIncludeItemCreator:
		return []byte(s), nil
	case GetServerInstancesIncludeItemServers:
		return []byte(s), nil
	case GetServerInstancesIncludeItemLocations:
		return []byte(s), nil
	case GetServerInstancesIncludeItemProviders:
		return []byte(s), nil
	case GetServerInstancesIncludeItemContainers:
		return []byte(s), nil
	case GetServerInstancesIncludeItemEnvironments:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetServerInstancesIncludeItem) UnmarshalText(data []byte) error {
	switch GetServerInstancesIncludeItem(data) {
	case GetServerInstancesIncludeItemCreator:
		*s = GetServerInstancesIncludeItemCreator
		return nil
	case GetServerInstancesIncludeItemServers:
		*s = GetServerInstancesIncludeItemServers
		return nil
	case GetServerInstancesIncludeItemLocations:
		*s = GetServerInstancesIncludeItemLocations
		return nil
	case GetServerInstancesIncludeItemProviders:
		*s = GetServerInstancesIncludeItemProviders
		return nil
	case GetServerInstancesIncludeItemContainers:
		*s = GetServerInstancesIncludeItemContainers
		return nil
	case GetServerInstancesIncludeItemEnvironments:
		*s = GetServerInstancesIncludeItemEnvironments
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetServerInstancesOK struct {
	Data     []Instance          `json:"data"`
	Includes OptInstanceIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetServerInstancesOK) GetData() []Instance {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetServerInstancesOK) GetIncludes() OptInstanceIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetServerInstancesOK) SetData(val []Instance) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetServerInstancesOK) SetIncludes(val OptInstanceIncludes) {
	s.Includes = val
}

type GetServerInstancesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetServerInstancesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetServerInstancesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetServerInstancesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetServerInstancesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetServerTagsFilter map[string]GetServerTagsFilterItem

func (s *GetServerTagsFilter) init() GetServerTagsFilter {
	m := *s
	if m == nil {
		m = map[string]GetServerTagsFilterItem{}
		*s = m
	}
	return m
}

// GetServerTagsFilterItem represents sum type.
type GetServerTagsFilterItem struct {
	Type        GetServerTagsFilterItemType // switch on this field
	String      string
	StringArray []string
}

// GetServerTagsFilterItemType is oneOf type of GetServerTagsFilterItem.
type GetServerTagsFilterItemType string

// Possible values for GetServerTagsFilterItemType.
const (
	StringGetServerTagsFilterItem      GetServerTagsFilterItemType = "string"
	StringArrayGetServerTagsFilterItem GetServerTagsFilterItemType = "[]string"
)

// IsString reports whether GetServerTagsFilterItem is string.
func (s GetServerTagsFilterItem) IsString() bool { return s.Type == StringGetServerTagsFilterItem }

// IsStringArray reports whether GetServerTagsFilterItem is []string.
func (s GetServerTagsFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetServerTagsFilterItem
}

// SetString sets GetServerTagsFilterItem to string.
func (s *GetServerTagsFilterItem) SetString(v string) {
	s.Type = StringGetServerTagsFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetServerTagsFilterItem is string.
func (s GetServerTagsFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetServerTagsFilterItem returns new GetServerTagsFilterItem from string.
func NewStringGetServerTagsFilterItem(v string) GetServerTagsFilterItem {
	var s GetServerTagsFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetServerTagsFilterItem to []string.
func (s *GetServerTagsFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetServerTagsFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetServerTagsFilterItem is []string.
func (s GetServerTagsFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetServerTagsFilterItem returns new GetServerTagsFilterItem from []string.
func NewStringArrayGetServerTagsFilterItem(v []string) GetServerTagsFilterItem {
	var s GetServerTagsFilterItem
	s.SetStringArray(v)
	return s
}

type GetServerTelemeteryFilter map[string]GetServerTelemeteryFilterItem

func (s *GetServerTelemeteryFilter) init() GetServerTelemeteryFilter {
	m := *s
	if m == nil {
		m = map[string]GetServerTelemeteryFilterItem{}
		*s = m
	}
	return m
}

// GetServerTelemeteryFilterItem represents sum type.
type GetServerTelemeteryFilterItem struct {
	Type        GetServerTelemeteryFilterItemType // switch on this field
	String      string
	StringArray []string
}

// GetServerTelemeteryFilterItemType is oneOf type of GetServerTelemeteryFilterItem.
type GetServerTelemeteryFilterItemType string

// Possible values for GetServerTelemeteryFilterItemType.
const (
	StringGetServerTelemeteryFilterItem      GetServerTelemeteryFilterItemType = "string"
	StringArrayGetServerTelemeteryFilterItem GetServerTelemeteryFilterItemType = "[]string"
)

// IsString reports whether GetServerTelemeteryFilterItem is string.
func (s GetServerTelemeteryFilterItem) IsString() bool {
	return s.Type == StringGetServerTelemeteryFilterItem
}

// IsStringArray reports whether GetServerTelemeteryFilterItem is []string.
func (s GetServerTelemeteryFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetServerTelemeteryFilterItem
}

// SetString sets GetServerTelemeteryFilterItem to string.
func (s *GetServerTelemeteryFilterItem) SetString(v string) {
	s.Type = StringGetServerTelemeteryFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetServerTelemeteryFilterItem is string.
func (s GetServerTelemeteryFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetServerTelemeteryFilterItem returns new GetServerTelemeteryFilterItem from string.
func NewStringGetServerTelemeteryFilterItem(v string) GetServerTelemeteryFilterItem {
	var s GetServerTelemeteryFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetServerTelemeteryFilterItem to []string.
func (s *GetServerTelemeteryFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetServerTelemeteryFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetServerTelemeteryFilterItem is []string.
func (s GetServerTelemeteryFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetServerTelemeteryFilterItem returns new GetServerTelemeteryFilterItem from []string.
func NewStringArrayGetServerTelemeteryFilterItem(v []string) GetServerTelemeteryFilterItem {
	var s GetServerTelemeteryFilterItem
	s.SetStringArray(v)
	return s
}

type GetServerTelemeteryOK struct {
	Data []ServerStatsTelemetry `json:"data"`
}

// GetData returns the value of Data.
func (s *GetServerTelemeteryOK) GetData() []ServerStatsTelemetry {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetServerTelemeteryOK) SetData(val []ServerStatsTelemetry) {
	s.Data = val
}

type GetServerTelemeteryPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetServerTelemeteryPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetServerTelemeteryPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetServerTelemeteryPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetServerTelemeteryPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetServerUsageOK struct {
	Data OptUsageDatum `json:"data"`
}

// GetData returns the value of Data.
func (s *GetServerUsageOK) GetData() OptUsageDatum {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetServerUsageOK) SetData(val OptUsageDatum) {
	s.Data = val
}

type GetServersClustersOK struct {
	Data []string `json:"data"`
}

// GetData returns the value of Data.
func (s *GetServersClustersOK) GetData() []string {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetServersClustersOK) SetData(val []string) {
	s.Data = val
}

type GetServersCollectionFilter map[string]GetServersCollectionFilterItem

func (s *GetServersCollectionFilter) init() GetServersCollectionFilter {
	m := *s
	if m == nil {
		m = map[string]GetServersCollectionFilterItem{}
		*s = m
	}
	return m
}

// GetServersCollectionFilterItem represents sum type.
type GetServersCollectionFilterItem struct {
	Type        GetServersCollectionFilterItemType // switch on this field
	String      string
	StringArray []string
}

// GetServersCollectionFilterItemType is oneOf type of GetServersCollectionFilterItem.
type GetServersCollectionFilterItemType string

// Possible values for GetServersCollectionFilterItemType.
const (
	StringGetServersCollectionFilterItem      GetServersCollectionFilterItemType = "string"
	StringArrayGetServersCollectionFilterItem GetServersCollectionFilterItemType = "[]string"
)

// IsString reports whether GetServersCollectionFilterItem is string.
func (s GetServersCollectionFilterItem) IsString() bool {
	return s.Type == StringGetServersCollectionFilterItem
}

// IsStringArray reports whether GetServersCollectionFilterItem is []string.
func (s GetServersCollectionFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetServersCollectionFilterItem
}

// SetString sets GetServersCollectionFilterItem to string.
func (s *GetServersCollectionFilterItem) SetString(v string) {
	s.Type = StringGetServersCollectionFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetServersCollectionFilterItem is string.
func (s GetServersCollectionFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetServersCollectionFilterItem returns new GetServersCollectionFilterItem from string.
func NewStringGetServersCollectionFilterItem(v string) GetServersCollectionFilterItem {
	var s GetServersCollectionFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetServersCollectionFilterItem to []string.
func (s *GetServersCollectionFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetServersCollectionFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetServersCollectionFilterItem is []string.
func (s GetServersCollectionFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetServersCollectionFilterItem returns new GetServersCollectionFilterItem from []string.
func NewStringArrayGetServersCollectionFilterItem(v []string) GetServersCollectionFilterItem {
	var s GetServersCollectionFilterItem
	s.SetStringArray(v)
	return s
}

type GetServersCollectionIncludeItem string

const (
	GetServersCollectionIncludeItemLocations GetServersCollectionIncludeItem = "locations"
	GetServersCollectionIncludeItemModels    GetServersCollectionIncludeItem = "models"
	GetServersCollectionIncludeItemProviders GetServersCollectionIncludeItem = "providers"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetServersCollectionIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetServersCollectionIncludeItemLocations:
		return []byte(s), nil
	case GetServersCollectionIncludeItemModels:
		return []byte(s), nil
	case GetServersCollectionIncludeItemProviders:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetServersCollectionIncludeItem) UnmarshalText(data []byte) error {
	switch GetServersCollectionIncludeItem(data) {
	case GetServersCollectionIncludeItemLocations:
		*s = GetServersCollectionIncludeItemLocations
		return nil
	case GetServersCollectionIncludeItemModels:
		*s = GetServersCollectionIncludeItemModels
		return nil
	case GetServersCollectionIncludeItemProviders:
		*s = GetServersCollectionIncludeItemProviders
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetServersCollectionMetaItem string

const (
	GetServersCollectionMetaItemNode           GetServersCollectionMetaItem = "node"
	GetServersCollectionMetaItemInstancesCount GetServersCollectionMetaItem = "instances_count"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetServersCollectionMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetServersCollectionMetaItemNode:
		return []byte(s), nil
	case GetServersCollectionMetaItemInstancesCount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetServersCollectionMetaItem) UnmarshalText(data []byte) error {
	switch GetServersCollectionMetaItem(data) {
	case GetServersCollectionMetaItemNode:
		*s = GetServersCollectionMetaItemNode
		return nil
	case GetServersCollectionMetaItemInstancesCount:
		*s = GetServersCollectionMetaItemInstancesCount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetServersCollectionOK struct {
	Data     []InfraServer     `json:"data"`
	Includes OptServerIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetServersCollectionOK) GetData() []InfraServer {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetServersCollectionOK) GetIncludes() OptServerIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetServersCollectionOK) SetData(val []InfraServer) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetServersCollectionOK) SetIncludes(val OptServerIncludes) {
	s.Includes = val
}

type GetServersCollectionPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetServersCollectionPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetServersCollectionPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetServersCollectionPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetServersCollectionPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetSingleServerIncludeItem string

const (
	GetSingleServerIncludeItemLocations GetSingleServerIncludeItem = "locations"
	GetSingleServerIncludeItemModels    GetSingleServerIncludeItem = "models"
	GetSingleServerIncludeItemProviders GetSingleServerIncludeItem = "providers"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetSingleServerIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetSingleServerIncludeItemLocations:
		return []byte(s), nil
	case GetSingleServerIncludeItemModels:
		return []byte(s), nil
	case GetSingleServerIncludeItemProviders:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetSingleServerIncludeItem) UnmarshalText(data []byte) error {
	switch GetSingleServerIncludeItem(data) {
	case GetSingleServerIncludeItemLocations:
		*s = GetSingleServerIncludeItemLocations
		return nil
	case GetSingleServerIncludeItemModels:
		*s = GetSingleServerIncludeItemModels
		return nil
	case GetSingleServerIncludeItemProviders:
		*s = GetSingleServerIncludeItemProviders
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetSingleServerMetaItem string

const (
	GetSingleServerMetaItemNode           GetSingleServerMetaItem = "node"
	GetSingleServerMetaItemInstancesCount GetSingleServerMetaItem = "instances_count"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetSingleServerMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetSingleServerMetaItemNode:
		return []byte(s), nil
	case GetSingleServerMetaItemInstancesCount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetSingleServerMetaItem) UnmarshalText(data []byte) error {
	switch GetSingleServerMetaItem(data) {
	case GetSingleServerMetaItemNode:
		*s = GetSingleServerMetaItemNode
		return nil
	case GetSingleServerMetaItemInstancesCount:
		*s = GetSingleServerMetaItemInstancesCount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetSingleServerOK struct {
	Data     OptInfraServer    `json:"data"`
	Includes OptServerIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetSingleServerOK) GetData() OptInfraServer {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetSingleServerOK) GetIncludes() OptServerIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetSingleServerOK) SetData(val OptInfraServer) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetSingleServerOK) SetIncludes(val OptServerIncludes) {
	s.Includes = val
}

type GetTiersOK struct {
	Data []TierPlan `json:"data"`
}

// GetData returns the value of Data.
func (s *GetTiersOK) GetData() []TierPlan {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetTiersOK) SetData(val []TierPlan) {
	s.Data = val
}

type GetTwoFaInfoOK struct {
	Data OptTwoFaDisableResponse `json:"data"`
}

// GetData returns the value of Data.
func (s *GetTwoFaInfoOK) GetData() OptTwoFaDisableResponse {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetTwoFaInfoOK) SetData(val OptTwoFaDisableResponse) {
	s.Data = val
}

type GetUsableServersIncludeItem string

const (
	GetUsableServersIncludeItemLocation  GetUsableServersIncludeItem = "location"
	GetUsableServersIncludeItemModels    GetUsableServersIncludeItem = "models"
	GetUsableServersIncludeItemProviders GetUsableServersIncludeItem = "providers"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetUsableServersIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetUsableServersIncludeItemLocation:
		return []byte(s), nil
	case GetUsableServersIncludeItemModels:
		return []byte(s), nil
	case GetUsableServersIncludeItemProviders:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetUsableServersIncludeItem) UnmarshalText(data []byte) error {
	switch GetUsableServersIncludeItem(data) {
	case GetUsableServersIncludeItemLocation:
		*s = GetUsableServersIncludeItemLocation
		return nil
	case GetUsableServersIncludeItemModels:
		*s = GetUsableServersIncludeItemModels
		return nil
	case GetUsableServersIncludeItemProviders:
		*s = GetUsableServersIncludeItemProviders
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetUsableServersMetaItem string

const (
	GetUsableServersMetaItemNode           GetUsableServersMetaItem = "node"
	GetUsableServersMetaItemInstancesCount GetUsableServersMetaItem = "instances_count"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetUsableServersMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetUsableServersMetaItemNode:
		return []byte(s), nil
	case GetUsableServersMetaItemInstancesCount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetUsableServersMetaItem) UnmarshalText(data []byte) error {
	switch GetUsableServersMetaItem(data) {
	case GetUsableServersMetaItemNode:
		*s = GetUsableServersMetaItemNode
		return nil
	case GetUsableServersMetaItemInstancesCount:
		*s = GetUsableServersMetaItemInstancesCount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetUsableServersOK struct {
	Data     []InfraServer     `json:"data"`
	Includes OptServerIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetUsableServersOK) GetData() []InfraServer {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetUsableServersOK) GetIncludes() OptServerIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetUsableServersOK) SetData(val []InfraServer) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetUsableServersOK) SetIncludes(val OptServerIncludes) {
	s.Includes = val
}

type GetUsableServersPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetUsableServersPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetUsableServersPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetUsableServersPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetUsableServersPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetVPNInfoOK struct {
	Data OptVPNInfoReturn `json:"data"`
}

// GetData returns the value of Data.
func (s *GetVPNInfoOK) GetData() OptVPNInfoReturn {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetVPNInfoOK) SetData(val OptVPNInfoReturn) {
	s.Data = val
}

type GetVPNUsersOK struct {
	Data []VPNUsers `json:"data"`
}

// GetData returns the value of Data.
func (s *GetVPNUsersOK) GetData() []VPNUsers {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetVPNUsersOK) SetData(val []VPNUsers) {
	s.Data = val
}

type GetZonesCollectionFilter map[string]GetZonesCollectionFilterItem

func (s *GetZonesCollectionFilter) init() GetZonesCollectionFilter {
	m := *s
	if m == nil {
		m = map[string]GetZonesCollectionFilterItem{}
		*s = m
	}
	return m
}

// GetZonesCollectionFilterItem represents sum type.
type GetZonesCollectionFilterItem struct {
	Type        GetZonesCollectionFilterItemType // switch on this field
	String      string
	StringArray []string
}

// GetZonesCollectionFilterItemType is oneOf type of GetZonesCollectionFilterItem.
type GetZonesCollectionFilterItemType string

// Possible values for GetZonesCollectionFilterItemType.
const (
	StringGetZonesCollectionFilterItem      GetZonesCollectionFilterItemType = "string"
	StringArrayGetZonesCollectionFilterItem GetZonesCollectionFilterItemType = "[]string"
)

// IsString reports whether GetZonesCollectionFilterItem is string.
func (s GetZonesCollectionFilterItem) IsString() bool {
	return s.Type == StringGetZonesCollectionFilterItem
}

// IsStringArray reports whether GetZonesCollectionFilterItem is []string.
func (s GetZonesCollectionFilterItem) IsStringArray() bool {
	return s.Type == StringArrayGetZonesCollectionFilterItem
}

// SetString sets GetZonesCollectionFilterItem to string.
func (s *GetZonesCollectionFilterItem) SetString(v string) {
	s.Type = StringGetZonesCollectionFilterItem
	s.String = v
}

// GetString returns string and true boolean if GetZonesCollectionFilterItem is string.
func (s GetZonesCollectionFilterItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringGetZonesCollectionFilterItem returns new GetZonesCollectionFilterItem from string.
func NewStringGetZonesCollectionFilterItem(v string) GetZonesCollectionFilterItem {
	var s GetZonesCollectionFilterItem
	s.SetString(v)
	return s
}

// SetStringArray sets GetZonesCollectionFilterItem to []string.
func (s *GetZonesCollectionFilterItem) SetStringArray(v []string) {
	s.Type = StringArrayGetZonesCollectionFilterItem
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if GetZonesCollectionFilterItem is []string.
func (s GetZonesCollectionFilterItem) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayGetZonesCollectionFilterItem returns new GetZonesCollectionFilterItem from []string.
func NewStringArrayGetZonesCollectionFilterItem(v []string) GetZonesCollectionFilterItem {
	var s GetZonesCollectionFilterItem
	s.SetStringArray(v)
	return s
}

type GetZonesCollectionIncludeItem string

const (
	GetZonesCollectionIncludeItemCreators GetZonesCollectionIncludeItem = "creators"
)

// MarshalText implements encoding.TextMarshaler.
func (s GetZonesCollectionIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetZonesCollectionIncludeItemCreators:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetZonesCollectionIncludeItem) UnmarshalText(data []byte) error {
	switch GetZonesCollectionIncludeItem(data) {
	case GetZonesCollectionIncludeItemCreators:
		*s = GetZonesCollectionIncludeItemCreators
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetZonesCollectionOK struct {
	Data     []Zone          `json:"data"`
	Includes OptZoneIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetZonesCollectionOK) GetData() []Zone {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetZonesCollectionOK) GetIncludes() OptZoneIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetZonesCollectionOK) SetData(val []Zone) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetZonesCollectionOK) SetIncludes(val OptZoneIncludes) {
	s.Includes = val
}

type GetZonesCollectionPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetZonesCollectionPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetZonesCollectionPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetZonesCollectionPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetZonesCollectionPage) SetSize(val OptFloat64) {
	s.Size = val
}

// Ref: #/components/schemas/HAProxyConfig
type HAProxyConfig struct {
	// Settings that describe how incoming traffic to the load balancer is handled.
	Frontend NilHAProxyConfigFrontend `json:"frontend"`
	// Settings related to how the load balancer routes connections to container instances.
	Backend NilHAProxyConfigBackend `json:"backend"`
}

// GetFrontend returns the value of Frontend.
func (s *HAProxyConfig) GetFrontend() NilHAProxyConfigFrontend {
	return s.Frontend
}

// GetBackend returns the value of Backend.
func (s *HAProxyConfig) GetBackend() NilHAProxyConfigBackend {
	return s.Backend
}

// SetFrontend sets the value of Frontend.
func (s *HAProxyConfig) SetFrontend(val NilHAProxyConfigFrontend) {
	s.Frontend = val
}

// SetBackend sets the value of Backend.
func (s *HAProxyConfig) SetBackend(val NilHAProxyConfigBackend) {
	s.Backend = val
}

// Settings related to how the load balancer routes connections to container instances.
type HAProxyConfigBackend struct {
	// How connections are balanced across your container instances. Can be one of the following:
	// - `round-robin`: Each container instance is used in turns.
	// - `static-rr`: Each container instance is used in turns, but is faster than Round Robin at the
	// expense of being less dynamic.
	// - `leastconn`: Routes traffic to the instance with the least number of active connections.
	// - `first`: Routes traffic to the first available instance.
	// - `source`: The same client IP always reaches the same container instance as long as no instance
	// goes down or up.
	Balance HAProxyConfigBackendBalance `json:"balance"`
	// Various options for handling timeouts when communicating with a container instance behind the load
	// balancer.
	Timeouts NilHAProxyConfigBackendTimeouts `json:"timeouts"`
}

// GetBalance returns the value of Balance.
func (s *HAProxyConfigBackend) GetBalance() HAProxyConfigBackendBalance {
	return s.Balance
}

// GetTimeouts returns the value of Timeouts.
func (s *HAProxyConfigBackend) GetTimeouts() NilHAProxyConfigBackendTimeouts {
	return s.Timeouts
}

// SetBalance sets the value of Balance.
func (s *HAProxyConfigBackend) SetBalance(val HAProxyConfigBackendBalance) {
	s.Balance = val
}

// SetTimeouts sets the value of Timeouts.
func (s *HAProxyConfigBackend) SetTimeouts(val NilHAProxyConfigBackendTimeouts) {
	s.Timeouts = val
}

// How connections are balanced across your container instances. Can be one of the following:
// - `round-robin`: Each container instance is used in turns.
// - `static-rr`: Each container instance is used in turns, but is faster than Round Robin at the
// expense of being less dynamic.
// - `leastconn`: Routes traffic to the instance with the least number of active connections.
// - `first`: Routes traffic to the first available instance.
// - `source`: The same client IP always reaches the same container instance as long as no instance
// goes down or up.
type HAProxyConfigBackendBalance string

const (
	HAProxyConfigBackendBalanceRoundRobin HAProxyConfigBackendBalance = "round-robin"
	HAProxyConfigBackendBalanceStaticRr   HAProxyConfigBackendBalance = "static-rr"
	HAProxyConfigBackendBalanceLeastconn  HAProxyConfigBackendBalance = "leastconn"
	HAProxyConfigBackendBalanceFirst      HAProxyConfigBackendBalance = "first"
	HAProxyConfigBackendBalanceSource     HAProxyConfigBackendBalance = "source"
)

// MarshalText implements encoding.TextMarshaler.
func (s HAProxyConfigBackendBalance) MarshalText() ([]byte, error) {
	switch s {
	case HAProxyConfigBackendBalanceRoundRobin:
		return []byte(s), nil
	case HAProxyConfigBackendBalanceStaticRr:
		return []byte(s), nil
	case HAProxyConfigBackendBalanceLeastconn:
		return []byte(s), nil
	case HAProxyConfigBackendBalanceFirst:
		return []byte(s), nil
	case HAProxyConfigBackendBalanceSource:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HAProxyConfigBackendBalance) UnmarshalText(data []byte) error {
	switch HAProxyConfigBackendBalance(data) {
	case HAProxyConfigBackendBalanceRoundRobin:
		*s = HAProxyConfigBackendBalanceRoundRobin
		return nil
	case HAProxyConfigBackendBalanceStaticRr:
		*s = HAProxyConfigBackendBalanceStaticRr
		return nil
	case HAProxyConfigBackendBalanceLeastconn:
		*s = HAProxyConfigBackendBalanceLeastconn
		return nil
	case HAProxyConfigBackendBalanceFirst:
		*s = HAProxyConfigBackendBalanceFirst
		return nil
	case HAProxyConfigBackendBalanceSource:
		*s = HAProxyConfigBackendBalanceSource
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Various options for handling timeouts when communicating with a container instance behind the load
// balancer.
type HAProxyConfigBackendTimeouts struct {
	// The number of seconds the load balancer will wait for a response from the container instance. See
	// the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.
	// 2-timeout%20server) for more information.
	ServerSecs NilInt `json:"server_secs"`
	// The number of milliseconds the load balancer will wait for the server to send data when one
	// direction is already closed. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.
	// 7/configuration.html#4-timeout%20server-fin) for more information.
	ServerFinMs NilInt `json:"server_fin_ms"`
	// The number of milliseconds the load balancer will wait for a successful connection to a container
	// instance. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.
	// html#4-timeout%20connect) for more information.
	ConnectMs NilInt `json:"connect_ms"`
	// The number of milliseconds the load balancer will hold connections in a queue when the maximum
	// number of connections has been reached. See the [HAProxy Docs](https://cbonte.github.
	// io/haproxy-dconv/1.7/configuration.html#4-timeout%20queue) for more information.
	QueueMs NilInt `json:"queue_ms"`
	// The number of milliseconds the load balancer will allow for inactivity on a bidirectional tunnel.
	// See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.
	// html#4-timeout%20tunnel) for more information.
	TunnelSecs NilInt `json:"tunnel_secs"`
}

// GetServerSecs returns the value of ServerSecs.
func (s *HAProxyConfigBackendTimeouts) GetServerSecs() NilInt {
	return s.ServerSecs
}

// GetServerFinMs returns the value of ServerFinMs.
func (s *HAProxyConfigBackendTimeouts) GetServerFinMs() NilInt {
	return s.ServerFinMs
}

// GetConnectMs returns the value of ConnectMs.
func (s *HAProxyConfigBackendTimeouts) GetConnectMs() NilInt {
	return s.ConnectMs
}

// GetQueueMs returns the value of QueueMs.
func (s *HAProxyConfigBackendTimeouts) GetQueueMs() NilInt {
	return s.QueueMs
}

// GetTunnelSecs returns the value of TunnelSecs.
func (s *HAProxyConfigBackendTimeouts) GetTunnelSecs() NilInt {
	return s.TunnelSecs
}

// SetServerSecs sets the value of ServerSecs.
func (s *HAProxyConfigBackendTimeouts) SetServerSecs(val NilInt) {
	s.ServerSecs = val
}

// SetServerFinMs sets the value of ServerFinMs.
func (s *HAProxyConfigBackendTimeouts) SetServerFinMs(val NilInt) {
	s.ServerFinMs = val
}

// SetConnectMs sets the value of ConnectMs.
func (s *HAProxyConfigBackendTimeouts) SetConnectMs(val NilInt) {
	s.ConnectMs = val
}

// SetQueueMs sets the value of QueueMs.
func (s *HAProxyConfigBackendTimeouts) SetQueueMs(val NilInt) {
	s.QueueMs = val
}

// SetTunnelSecs sets the value of TunnelSecs.
func (s *HAProxyConfigBackendTimeouts) SetTunnelSecs(val NilInt) {
	s.TunnelSecs = val
}

// Settings that describe how incoming traffic to the load balancer is handled.
type HAProxyConfigFrontend struct {
	// The type of traffic expected by the load balancer for this port. Can be either:
	// - tcp: Traffic is forwarded without any parsing or additional manipulation.
	// - http: Traffic is treated as web traffic. If a LINKED record is configured for a container
	// exposing this port, the domain will be parsed and it will be forwarded to the proper container.
	// This allows multiple services to run on port 80 in the same environment.
	Mode HAProxyConfigFrontendMode `json:"mode"`
	// The number of simultaneous connections that can be processed at a time.
	MaxConnections NilInt `json:"max_connections"`
	// Various options for handling timeouts when communicating with the client.
	Timeouts NilHAProxyConfigFrontendTimeouts `json:"timeouts"`
}

// GetMode returns the value of Mode.
func (s *HAProxyConfigFrontend) GetMode() HAProxyConfigFrontendMode {
	return s.Mode
}

// GetMaxConnections returns the value of MaxConnections.
func (s *HAProxyConfigFrontend) GetMaxConnections() NilInt {
	return s.MaxConnections
}

// GetTimeouts returns the value of Timeouts.
func (s *HAProxyConfigFrontend) GetTimeouts() NilHAProxyConfigFrontendTimeouts {
	return s.Timeouts
}

// SetMode sets the value of Mode.
func (s *HAProxyConfigFrontend) SetMode(val HAProxyConfigFrontendMode) {
	s.Mode = val
}

// SetMaxConnections sets the value of MaxConnections.
func (s *HAProxyConfigFrontend) SetMaxConnections(val NilInt) {
	s.MaxConnections = val
}

// SetTimeouts sets the value of Timeouts.
func (s *HAProxyConfigFrontend) SetTimeouts(val NilHAProxyConfigFrontendTimeouts) {
	s.Timeouts = val
}

// The type of traffic expected by the load balancer for this port. Can be either:
// - tcp: Traffic is forwarded without any parsing or additional manipulation.
// - http: Traffic is treated as web traffic. If a LINKED record is configured for a container
// exposing this port, the domain will be parsed and it will be forwarded to the proper container.
// This allows multiple services to run on port 80 in the same environment.
type HAProxyConfigFrontendMode string

const (
	HAProxyConfigFrontendModeTCP  HAProxyConfigFrontendMode = "tcp"
	HAProxyConfigFrontendModeHTTP HAProxyConfigFrontendMode = "http"
)

// MarshalText implements encoding.TextMarshaler.
func (s HAProxyConfigFrontendMode) MarshalText() ([]byte, error) {
	switch s {
	case HAProxyConfigFrontendModeTCP:
		return []byte(s), nil
	case HAProxyConfigFrontendModeHTTP:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HAProxyConfigFrontendMode) UnmarshalText(data []byte) error {
	switch HAProxyConfigFrontendMode(data) {
	case HAProxyConfigFrontendModeTCP:
		*s = HAProxyConfigFrontendModeTCP
		return nil
	case HAProxyConfigFrontendModeHTTP:
		*s = HAProxyConfigFrontendModeHTTP
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Various options for handling timeouts when communicating with the client.
type HAProxyConfigFrontendTimeouts struct {
	// The number of seconds the load balancer will wait for a response from a client before
	// disconnecting.
	ClientSecs NilInt `json:"client_secs"`
	// The number of milliseconds the load balancer will wait for a client to send it data when one
	// direction is already closed. This is particularly useful to avoid keeping connections in a waiting
	// state for too long when clients do not disconnect cleanly.
	ClientFinMs NilInt `json:"client_fin_ms"`
	// The number of milliseconds the load balancer will wait for a new HTTP request to start coming
	// after a response was set. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.
	// 7/configuration.html#4.2-timeout%20http-request) for more information. (`http` mode only).
	HTTPKeepAliveMs NilInt `json:"http_keep_alive_ms"`
	// The number of milliseconds the load balancer will wait for a complete HTTP request. See the
	// [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.
	// 2-timeout%20http-request) for more information. (`http` mode only).
	HTTPRequestMs NilInt `json:"http_request_ms"`
}

// GetClientSecs returns the value of ClientSecs.
func (s *HAProxyConfigFrontendTimeouts) GetClientSecs() NilInt {
	return s.ClientSecs
}

// GetClientFinMs returns the value of ClientFinMs.
func (s *HAProxyConfigFrontendTimeouts) GetClientFinMs() NilInt {
	return s.ClientFinMs
}

// GetHTTPKeepAliveMs returns the value of HTTPKeepAliveMs.
func (s *HAProxyConfigFrontendTimeouts) GetHTTPKeepAliveMs() NilInt {
	return s.HTTPKeepAliveMs
}

// GetHTTPRequestMs returns the value of HTTPRequestMs.
func (s *HAProxyConfigFrontendTimeouts) GetHTTPRequestMs() NilInt {
	return s.HTTPRequestMs
}

// SetClientSecs sets the value of ClientSecs.
func (s *HAProxyConfigFrontendTimeouts) SetClientSecs(val NilInt) {
	s.ClientSecs = val
}

// SetClientFinMs sets the value of ClientFinMs.
func (s *HAProxyConfigFrontendTimeouts) SetClientFinMs(val NilInt) {
	s.ClientFinMs = val
}

// SetHTTPKeepAliveMs sets the value of HTTPKeepAliveMs.
func (s *HAProxyConfigFrontendTimeouts) SetHTTPKeepAliveMs(val NilInt) {
	s.HTTPKeepAliveMs = val
}

// SetHTTPRequestMs sets the value of HTTPRequestMs.
func (s *HAProxyConfigFrontendTimeouts) SetHTTPRequestMs(val NilInt) {
	s.HTTPRequestMs = val
}

// A hub resource.
// Ref: #/components/schemas/Hub
type Hub struct {
	ID ID `json:"id"`
	// A name for the hub.
	Name    string       `json:"name"`
	Creator CreatorScope `json:"creator"`
	// A collection of timestamps for each event in the hub's lifetime.
	Events       HubEvents       `json:"events"`
	State        HubState        `json:"state"`
	Integrations HubIntegrations `json:"integrations"`
	// All hub webhooks for the given hub.
	Webhooks HubWebhooks   `json:"webhooks"`
	Billing  NilHubBilling `json:"billing"`
	Meta     OptHubMeta    `json:"meta"`
}

// GetID returns the value of ID.
func (s *Hub) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *Hub) GetName() string {
	return s.Name
}

// GetCreator returns the value of Creator.
func (s *Hub) GetCreator() CreatorScope {
	return s.Creator
}

// GetEvents returns the value of Events.
func (s *Hub) GetEvents() HubEvents {
	return s.Events
}

// GetState returns the value of State.
func (s *Hub) GetState() HubState {
	return s.State
}

// GetIntegrations returns the value of Integrations.
func (s *Hub) GetIntegrations() HubIntegrations {
	return s.Integrations
}

// GetWebhooks returns the value of Webhooks.
func (s *Hub) GetWebhooks() HubWebhooks {
	return s.Webhooks
}

// GetBilling returns the value of Billing.
func (s *Hub) GetBilling() NilHubBilling {
	return s.Billing
}

// GetMeta returns the value of Meta.
func (s *Hub) GetMeta() OptHubMeta {
	return s.Meta
}

// SetID sets the value of ID.
func (s *Hub) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Hub) SetName(val string) {
	s.Name = val
}

// SetCreator sets the value of Creator.
func (s *Hub) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetEvents sets the value of Events.
func (s *Hub) SetEvents(val HubEvents) {
	s.Events = val
}

// SetState sets the value of State.
func (s *Hub) SetState(val HubState) {
	s.State = val
}

// SetIntegrations sets the value of Integrations.
func (s *Hub) SetIntegrations(val HubIntegrations) {
	s.Integrations = val
}

// SetWebhooks sets the value of Webhooks.
func (s *Hub) SetWebhooks(val HubWebhooks) {
	s.Webhooks = val
}

// SetBilling sets the value of Billing.
func (s *Hub) SetBilling(val NilHubBilling) {
	s.Billing = val
}

// SetMeta sets the value of Meta.
func (s *Hub) SetMeta(val OptHubMeta) {
	s.Meta = val
}

type HubAuth struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *HubAuth) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *HubAuth) SetAPIKey(val string) {
	s.APIKey = val
}

// HubBilling represents sum type.
type HubBilling struct {
	Type              HubBillingType // switch on this field
	HubBillingProfile HubBillingProfile
}

// HubBillingType is oneOf type of HubBilling.
type HubBillingType string

// Possible values for HubBillingType.
const (
	HubBillingProfileHubBilling HubBillingType = "HubBillingProfile"
)

// IsHubBillingProfile reports whether HubBilling is HubBillingProfile.
func (s HubBilling) IsHubBillingProfile() bool { return s.Type == HubBillingProfileHubBilling }

// SetHubBillingProfile sets HubBilling to HubBillingProfile.
func (s *HubBilling) SetHubBillingProfile(v HubBillingProfile) {
	s.Type = HubBillingProfileHubBilling
	s.HubBillingProfile = v
}

// GetHubBillingProfile returns HubBillingProfile and true boolean if HubBilling is HubBillingProfile.
func (s HubBilling) GetHubBillingProfile() (v HubBillingProfile, ok bool) {
	if !s.IsHubBillingProfile() {
		return v, false
	}
	return s.HubBillingProfile, true
}

// NewHubBillingProfileHubBilling returns new HubBilling from HubBillingProfile.
func NewHubBillingProfileHubBilling(v HubBillingProfile) HubBilling {
	var s HubBilling
	s.SetHubBillingProfile(v)
	return s
}

// A billing profile for a given hub.
// Ref: #/components/schemas/HubBillingProfile
type HubBillingProfile struct {
	Term Term `json:"term"`
	// A boolean where true represents this account being approved to use a prepaid card for billing
	// transactions.
	AllowPrepaid OptBool `json:"allow_prepaid"`
	// A boolean where true represents invoices have been paused on this hub for one reason or another.
	PauseInvoices bool `json:"pause_invoices"`
	// A boolean where true means this billing is disabled on this hub.
	Disable OptBool `json:"disable"`
	// Information about the plan associated with this hub.
	Plans HubBillingProfilePlans `json:"plans"`
	// An array of email addresses to whom the billing invoices will be sent to. If left empty, they will
	// be sent to the owner of this hub.
	Emails []string `json:"emails"`
}

// GetTerm returns the value of Term.
func (s *HubBillingProfile) GetTerm() Term {
	return s.Term
}

// GetAllowPrepaid returns the value of AllowPrepaid.
func (s *HubBillingProfile) GetAllowPrepaid() OptBool {
	return s.AllowPrepaid
}

// GetPauseInvoices returns the value of PauseInvoices.
func (s *HubBillingProfile) GetPauseInvoices() bool {
	return s.PauseInvoices
}

// GetDisable returns the value of Disable.
func (s *HubBillingProfile) GetDisable() OptBool {
	return s.Disable
}

// GetPlans returns the value of Plans.
func (s *HubBillingProfile) GetPlans() HubBillingProfilePlans {
	return s.Plans
}

// GetEmails returns the value of Emails.
func (s *HubBillingProfile) GetEmails() []string {
	return s.Emails
}

// SetTerm sets the value of Term.
func (s *HubBillingProfile) SetTerm(val Term) {
	s.Term = val
}

// SetAllowPrepaid sets the value of AllowPrepaid.
func (s *HubBillingProfile) SetAllowPrepaid(val OptBool) {
	s.AllowPrepaid = val
}

// SetPauseInvoices sets the value of PauseInvoices.
func (s *HubBillingProfile) SetPauseInvoices(val bool) {
	s.PauseInvoices = val
}

// SetDisable sets the value of Disable.
func (s *HubBillingProfile) SetDisable(val OptBool) {
	s.Disable = val
}

// SetPlans sets the value of Plans.
func (s *HubBillingProfile) SetPlans(val HubBillingProfilePlans) {
	s.Plans = val
}

// SetEmails sets the value of Emails.
func (s *HubBillingProfile) SetEmails(val []string) {
	s.Emails = val
}

// Information about the plan associated with this hub.
type HubBillingProfilePlans struct {
	// An ID referencing the pricing tier applied to this hub.
	TierID string `json:"tier_id"`
	// An ID referencing the support plan applied to this hub.
	SupportID string `json:"support_id"`
}

// GetTierID returns the value of TierID.
func (s *HubBillingProfilePlans) GetTierID() string {
	return s.TierID
}

// GetSupportID returns the value of SupportID.
func (s *HubBillingProfilePlans) GetSupportID() string {
	return s.SupportID
}

// SetTierID sets the value of TierID.
func (s *HubBillingProfilePlans) SetTierID(val string) {
	s.TierID = val
}

// SetSupportID sets the value of SupportID.
func (s *HubBillingProfilePlans) SetSupportID(val string) {
	s.SupportID = val
}

// A collection of timestamps for each event in the hub's lifetime.
type HubEvents struct {
	// The timestamp of when the hub was created.
	Created DateTime `json:"created"`
	// The timestamp of when the hub was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the hub was deleted.
	Deleted DateTime `json:"deleted"`
	// The timestamp of when the hub had the first converted.
	Converted OptDateTime `json:"converted"`
	// The timestamp of when the hub had the first provider added.
	FirstProvider OptDateTime `json:"first_provider"`
	// The timestamp of when the hub had the first_server deployed.
	FirstServer OptDateTime `json:"first_server"`
	// The timestamp of when the hub had the first environment deployed.
	FirstEnvironment OptDateTime `json:"first_environment"`
	// The timestamp of when the hub had the first image deployed.
	FirstImage OptDateTime `json:"first_image"`
	// The timestamp of when the hub had the first container deployed.
	FirstContainer OptDateTime `json:"first_container"`
}

// GetCreated returns the value of Created.
func (s *HubEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *HubEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *HubEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetConverted returns the value of Converted.
func (s *HubEvents) GetConverted() OptDateTime {
	return s.Converted
}

// GetFirstProvider returns the value of FirstProvider.
func (s *HubEvents) GetFirstProvider() OptDateTime {
	return s.FirstProvider
}

// GetFirstServer returns the value of FirstServer.
func (s *HubEvents) GetFirstServer() OptDateTime {
	return s.FirstServer
}

// GetFirstEnvironment returns the value of FirstEnvironment.
func (s *HubEvents) GetFirstEnvironment() OptDateTime {
	return s.FirstEnvironment
}

// GetFirstImage returns the value of FirstImage.
func (s *HubEvents) GetFirstImage() OptDateTime {
	return s.FirstImage
}

// GetFirstContainer returns the value of FirstContainer.
func (s *HubEvents) GetFirstContainer() OptDateTime {
	return s.FirstContainer
}

// SetCreated sets the value of Created.
func (s *HubEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *HubEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *HubEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetConverted sets the value of Converted.
func (s *HubEvents) SetConverted(val OptDateTime) {
	s.Converted = val
}

// SetFirstProvider sets the value of FirstProvider.
func (s *HubEvents) SetFirstProvider(val OptDateTime) {
	s.FirstProvider = val
}

// SetFirstServer sets the value of FirstServer.
func (s *HubEvents) SetFirstServer(val OptDateTime) {
	s.FirstServer = val
}

// SetFirstEnvironment sets the value of FirstEnvironment.
func (s *HubEvents) SetFirstEnvironment(val OptDateTime) {
	s.FirstEnvironment = val
}

// SetFirstImage sets the value of FirstImage.
func (s *HubEvents) SetFirstImage(val OptDateTime) {
	s.FirstImage = val
}

// SetFirstContainer sets the value of FirstContainer.
func (s *HubEvents) SetFirstContainer(val OptDateTime) {
	s.FirstContainer = val
}

type HubID string

// Integration information for a given hub.
// Ref: #/components/schemas/HubIntegrations
type HubIntegrations struct {
	// A hub integration with Lets Encrypt service.
	Letsencrypt NilHubIntegrationsLetsencrypt `json:"letsencrypt"`
	// Information about the Backblaze account and bucket assocaited with the given hub.
	BackblazeB2 NilHubIntegrationsBackblazeB2 `json:"backblaze_b2"`
}

// GetLetsencrypt returns the value of Letsencrypt.
func (s *HubIntegrations) GetLetsencrypt() NilHubIntegrationsLetsencrypt {
	return s.Letsencrypt
}

// GetBackblazeB2 returns the value of BackblazeB2.
func (s *HubIntegrations) GetBackblazeB2() NilHubIntegrationsBackblazeB2 {
	return s.BackblazeB2
}

// SetLetsencrypt sets the value of Letsencrypt.
func (s *HubIntegrations) SetLetsencrypt(val NilHubIntegrationsLetsencrypt) {
	s.Letsencrypt = val
}

// SetBackblazeB2 sets the value of BackblazeB2.
func (s *HubIntegrations) SetBackblazeB2(val NilHubIntegrationsBackblazeB2) {
	s.BackblazeB2 = val
}

// Information about the Backblaze account and bucket assocaited with the given hub.
type HubIntegrationsBackblazeB2 struct {
	// The bucket name.
	Bucket string `json:"bucket"`
	// The `key_id` from Backblaze for a given key ( the one used for this integration ).
	KeyID string `json:"key_id"`
	// The key associated with the bucket.
	Key string `json:"key"`
}

// GetBucket returns the value of Bucket.
func (s *HubIntegrationsBackblazeB2) GetBucket() string {
	return s.Bucket
}

// GetKeyID returns the value of KeyID.
func (s *HubIntegrationsBackblazeB2) GetKeyID() string {
	return s.KeyID
}

// GetKey returns the value of Key.
func (s *HubIntegrationsBackblazeB2) GetKey() string {
	return s.Key
}

// SetBucket sets the value of Bucket.
func (s *HubIntegrationsBackblazeB2) SetBucket(val string) {
	s.Bucket = val
}

// SetKeyID sets the value of KeyID.
func (s *HubIntegrationsBackblazeB2) SetKeyID(val string) {
	s.KeyID = val
}

// SetKey sets the value of Key.
func (s *HubIntegrationsBackblazeB2) SetKey(val string) {
	s.Key = val
}

// A hub integration with Lets Encrypt service.
type HubIntegrationsLetsencrypt struct {
	// An email address to assocaite with Lets Encrypt certificates generated for DNS records on this hub.
	Email string `json:"email"`
}

// GetEmail returns the value of Email.
func (s *HubIntegrationsLetsencrypt) GetEmail() string {
	return s.Email
}

// SetEmail sets the value of Email.
func (s *HubIntegrationsLetsencrypt) SetEmail(val string) {
	s.Email = val
}

// A membership resource that is scoped to an individual hub.
// Ref: #/components/schemas/HubMembership
type HubMembership struct {
	ID ID `json:"id"`
	// An ID for the account associated with the given membership.
	AccountID string `json:"account_id"`
	HubID     HubID  `json:"hub_id"`
	// A number that maps to the currently set role of the member.
	Role int `json:"role"`
	// A collection of timestamps for each event in the membership's lifetime.
	Events     HubMembershipEvents `json:"events"`
	State      MembershipState     `json:"state"`
	Invitation Invitation          `json:"invitation"`
	// Information about this members permissions for a given hub.
	Permissions HubMembershipPermissions `json:"permissions"`
	// Preference information set by the user for the membership.
	Prefereneces HubMembershipPrefereneces `json:"prefereneces"`
	// Information about the membership as it pertains to the account holders affiliation with being a
	// Cycle employee. Cycle employee accounts do not consume a "membership" for a given hub.
	Cycle OptHubMembershipCycle `json:"cycle"`
	Meta  OptHubMembershipMeta  `json:"meta"`
}

// GetID returns the value of ID.
func (s *HubMembership) GetID() ID {
	return s.ID
}

// GetAccountID returns the value of AccountID.
func (s *HubMembership) GetAccountID() string {
	return s.AccountID
}

// GetHubID returns the value of HubID.
func (s *HubMembership) GetHubID() HubID {
	return s.HubID
}

// GetRole returns the value of Role.
func (s *HubMembership) GetRole() int {
	return s.Role
}

// GetEvents returns the value of Events.
func (s *HubMembership) GetEvents() HubMembershipEvents {
	return s.Events
}

// GetState returns the value of State.
func (s *HubMembership) GetState() MembershipState {
	return s.State
}

// GetInvitation returns the value of Invitation.
func (s *HubMembership) GetInvitation() Invitation {
	return s.Invitation
}

// GetPermissions returns the value of Permissions.
func (s *HubMembership) GetPermissions() HubMembershipPermissions {
	return s.Permissions
}

// GetPrefereneces returns the value of Prefereneces.
func (s *HubMembership) GetPrefereneces() HubMembershipPrefereneces {
	return s.Prefereneces
}

// GetCycle returns the value of Cycle.
func (s *HubMembership) GetCycle() OptHubMembershipCycle {
	return s.Cycle
}

// GetMeta returns the value of Meta.
func (s *HubMembership) GetMeta() OptHubMembershipMeta {
	return s.Meta
}

// SetID sets the value of ID.
func (s *HubMembership) SetID(val ID) {
	s.ID = val
}

// SetAccountID sets the value of AccountID.
func (s *HubMembership) SetAccountID(val string) {
	s.AccountID = val
}

// SetHubID sets the value of HubID.
func (s *HubMembership) SetHubID(val HubID) {
	s.HubID = val
}

// SetRole sets the value of Role.
func (s *HubMembership) SetRole(val int) {
	s.Role = val
}

// SetEvents sets the value of Events.
func (s *HubMembership) SetEvents(val HubMembershipEvents) {
	s.Events = val
}

// SetState sets the value of State.
func (s *HubMembership) SetState(val MembershipState) {
	s.State = val
}

// SetInvitation sets the value of Invitation.
func (s *HubMembership) SetInvitation(val Invitation) {
	s.Invitation = val
}

// SetPermissions sets the value of Permissions.
func (s *HubMembership) SetPermissions(val HubMembershipPermissions) {
	s.Permissions = val
}

// SetPrefereneces sets the value of Prefereneces.
func (s *HubMembership) SetPrefereneces(val HubMembershipPrefereneces) {
	s.Prefereneces = val
}

// SetCycle sets the value of Cycle.
func (s *HubMembership) SetCycle(val OptHubMembershipCycle) {
	s.Cycle = val
}

// SetMeta sets the value of Meta.
func (s *HubMembership) SetMeta(val OptHubMembershipMeta) {
	s.Meta = val
}

// Information about the membership as it pertains to the account holders affiliation with being a
// Cycle employee. Cycle employee accounts do not consume a "membership" for a given hub.
type HubMembershipCycle struct {
	// The ID of the employee this membership is associated with.
	EmployeeID string `json:"employee_id"`
}

// GetEmployeeID returns the value of EmployeeID.
func (s *HubMembershipCycle) GetEmployeeID() string {
	return s.EmployeeID
}

// SetEmployeeID sets the value of EmployeeID.
func (s *HubMembershipCycle) SetEmployeeID(val string) {
	s.EmployeeID = val
}

// A collection of timestamps for each event in the membership's lifetime.
type HubMembershipEvents struct {
	// The timestamp of when the membership was created.
	Created DateTime `json:"created"`
	// The timestamp of when the membership was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the membership was deleted.
	Deleted DateTime `json:"deleted"`
	// The timestamp of when the membership was accepted.
	Joined DateTime `json:"joined"`
}

// GetCreated returns the value of Created.
func (s *HubMembershipEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *HubMembershipEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *HubMembershipEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetJoined returns the value of Joined.
func (s *HubMembershipEvents) GetJoined() DateTime {
	return s.Joined
}

// SetCreated sets the value of Created.
func (s *HubMembershipEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *HubMembershipEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *HubMembershipEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetJoined sets the value of Joined.
func (s *HubMembershipEvents) SetJoined(val DateTime) {
	s.Joined = val
}

// A resource thats associated with a hub membershp.
// Ref: #/components/schemas/HubMembershipIncludes
type HubMembershipIncludes struct {
	// A record with an ID mapped to a public account for the account that sent this memberships initial
	// invite.
	Senders OptHubMembershipIncludesSenders `json:"senders"`
	// A record with an ID mapped to a public account.
	Accounts OptHubMembershipIncludesAccounts `json:"accounts"`
	// A record with an ID mapped to a hub resource.
	Hubs OptHubMembershipIncludesHubs `json:"hubs"`
}

// GetSenders returns the value of Senders.
func (s *HubMembershipIncludes) GetSenders() OptHubMembershipIncludesSenders {
	return s.Senders
}

// GetAccounts returns the value of Accounts.
func (s *HubMembershipIncludes) GetAccounts() OptHubMembershipIncludesAccounts {
	return s.Accounts
}

// GetHubs returns the value of Hubs.
func (s *HubMembershipIncludes) GetHubs() OptHubMembershipIncludesHubs {
	return s.Hubs
}

// SetSenders sets the value of Senders.
func (s *HubMembershipIncludes) SetSenders(val OptHubMembershipIncludesSenders) {
	s.Senders = val
}

// SetAccounts sets the value of Accounts.
func (s *HubMembershipIncludes) SetAccounts(val OptHubMembershipIncludesAccounts) {
	s.Accounts = val
}

// SetHubs sets the value of Hubs.
func (s *HubMembershipIncludes) SetHubs(val OptHubMembershipIncludesHubs) {
	s.Hubs = val
}

// A record with an ID mapped to a public account.
type HubMembershipIncludesAccounts map[string]PublicAccount

func (s *HubMembershipIncludesAccounts) init() HubMembershipIncludesAccounts {
	m := *s
	if m == nil {
		m = map[string]PublicAccount{}
		*s = m
	}
	return m
}

// A record with an ID mapped to a hub resource.
type HubMembershipIncludesHubs map[string]Hub

func (s *HubMembershipIncludesHubs) init() HubMembershipIncludesHubs {
	m := *s
	if m == nil {
		m = map[string]Hub{}
		*s = m
	}
	return m
}

// A record with an ID mapped to a public account for the account that sent this memberships initial
// invite.
type HubMembershipIncludesSenders struct {
	// A record with an ID mapped to a public account.
	Accounts OptHubMembershipIncludesSendersAccounts `json:"accounts"`
}

// GetAccounts returns the value of Accounts.
func (s *HubMembershipIncludesSenders) GetAccounts() OptHubMembershipIncludesSendersAccounts {
	return s.Accounts
}

// SetAccounts sets the value of Accounts.
func (s *HubMembershipIncludesSenders) SetAccounts(val OptHubMembershipIncludesSendersAccounts) {
	s.Accounts = val
}

// A record with an ID mapped to a public account.
type HubMembershipIncludesSendersAccounts map[string]PublicAccount

func (s *HubMembershipIncludesSendersAccounts) init() HubMembershipIncludesSendersAccounts {
	m := *s
	if m == nil {
		m = map[string]PublicAccount{}
		*s = m
	}
	return m
}

// A list of meta fields that can be applied to a membership.
// Ref: #/components/schemas/HubMembershipMeta
type HubMembershipMeta struct {
	Capabilities []Capability `json:"capabilities"`
}

// GetCapabilities returns the value of Capabilities.
func (s *HubMembershipMeta) GetCapabilities() []Capability {
	return s.Capabilities
}

// SetCapabilities sets the value of Capabilities.
func (s *HubMembershipMeta) SetCapabilities(val []Capability) {
	s.Capabilities = val
}

// Information about this members permissions for a given hub.
type HubMembershipPermissions struct {
	// A boolean where true represents the member has access to view and manage all environments for the
	// hub.
	AllEnvironments bool `json:"all_environments"`
	// An array of environments this membership has access to.
	Environments []HubMembershipPermissionsEnvironmentsItem `json:"environments"`
}

// GetAllEnvironments returns the value of AllEnvironments.
func (s *HubMembershipPermissions) GetAllEnvironments() bool {
	return s.AllEnvironments
}

// GetEnvironments returns the value of Environments.
func (s *HubMembershipPermissions) GetEnvironments() []HubMembershipPermissionsEnvironmentsItem {
	return s.Environments
}

// SetAllEnvironments sets the value of AllEnvironments.
func (s *HubMembershipPermissions) SetAllEnvironments(val bool) {
	s.AllEnvironments = val
}

// SetEnvironments sets the value of Environments.
func (s *HubMembershipPermissions) SetEnvironments(val []HubMembershipPermissionsEnvironmentsItem) {
	s.Environments = val
}

// Environment membership resources.
type HubMembershipPermissionsEnvironmentsItem struct {
	ID ID `json:"id"`
	// A boolean where true represents this environment can be managed by the membership (i.e. its not
	// just read-only).
	Manage bool `json:"manage"`
}

// GetID returns the value of ID.
func (s *HubMembershipPermissionsEnvironmentsItem) GetID() ID {
	return s.ID
}

// GetManage returns the value of Manage.
func (s *HubMembershipPermissionsEnvironmentsItem) GetManage() bool {
	return s.Manage
}

// SetID sets the value of ID.
func (s *HubMembershipPermissionsEnvironmentsItem) SetID(val ID) {
	s.ID = val
}

// SetManage sets the value of Manage.
func (s *HubMembershipPermissionsEnvironmentsItem) SetManage(val bool) {
	s.Manage = val
}

// Preference information set by the user for the membership.
type HubMembershipPrefereneces struct {
	Portal HubMembershipPreferenecesPortal `json:"portal"`
	Email  HubMembershipPreferenecesEmail  `json:"email"`
}

// GetPortal returns the value of Portal.
func (s *HubMembershipPrefereneces) GetPortal() HubMembershipPreferenecesPortal {
	return s.Portal
}

// GetEmail returns the value of Email.
func (s *HubMembershipPrefereneces) GetEmail() HubMembershipPreferenecesEmail {
	return s.Email
}

// SetPortal sets the value of Portal.
func (s *HubMembershipPrefereneces) SetPortal(val HubMembershipPreferenecesPortal) {
	s.Portal = val
}

// SetEmail sets the value of Email.
func (s *HubMembershipPrefereneces) SetEmail(val HubMembershipPreferenecesEmail) {
	s.Email = val
}

type HubMembershipPreferenecesEmail struct {
	Notificaitons OptHubMembershipPreferenecesEmailNotificaitons `json:"notificaitons"`
}

// GetNotificaitons returns the value of Notificaitons.
func (s *HubMembershipPreferenecesEmail) GetNotificaitons() OptHubMembershipPreferenecesEmailNotificaitons {
	return s.Notificaitons
}

// SetNotificaitons sets the value of Notificaitons.
func (s *HubMembershipPreferenecesEmail) SetNotificaitons(val OptHubMembershipPreferenecesEmailNotificaitons) {
	s.Notificaitons = val
}

type HubMembershipPreferenecesEmailNotificaitons struct {
	Server HubMembershipPreferenecesEmailNotificaitonsServer `json:"server"`
}

// GetServer returns the value of Server.
func (s *HubMembershipPreferenecesEmailNotificaitons) GetServer() HubMembershipPreferenecesEmailNotificaitonsServer {
	return s.Server
}

// SetServer sets the value of Server.
func (s *HubMembershipPreferenecesEmailNotificaitons) SetServer(val HubMembershipPreferenecesEmailNotificaitonsServer) {
	s.Server = val
}

type HubMembershipPreferenecesEmailNotificaitonsServer struct {
	New     OptBool `json:"new"`
	Offline OptBool `json:"offline"`
}

// GetNew returns the value of New.
func (s *HubMembershipPreferenecesEmailNotificaitonsServer) GetNew() OptBool {
	return s.New
}

// GetOffline returns the value of Offline.
func (s *HubMembershipPreferenecesEmailNotificaitonsServer) GetOffline() OptBool {
	return s.Offline
}

// SetNew sets the value of New.
func (s *HubMembershipPreferenecesEmailNotificaitonsServer) SetNew(val OptBool) {
	s.New = val
}

// SetOffline sets the value of Offline.
func (s *HubMembershipPreferenecesEmailNotificaitonsServer) SetOffline(val OptBool) {
	s.Offline = val
}

type HubMembershipPreferenecesPortal struct {
	Notifications HubMembershipPreferenecesPortalNotifications `json:"notifications"`
}

// GetNotifications returns the value of Notifications.
func (s *HubMembershipPreferenecesPortal) GetNotifications() HubMembershipPreferenecesPortalNotifications {
	return s.Notifications
}

// SetNotifications sets the value of Notifications.
func (s *HubMembershipPreferenecesPortal) SetNotifications(val HubMembershipPreferenecesPortalNotifications) {
	s.Notifications = val
}

type HubMembershipPreferenecesPortalNotifications struct {
	Jobs HubMembershipPreferenecesPortalNotificationsJobs `json:"jobs"`
}

// GetJobs returns the value of Jobs.
func (s *HubMembershipPreferenecesPortalNotifications) GetJobs() HubMembershipPreferenecesPortalNotificationsJobs {
	return s.Jobs
}

// SetJobs sets the value of Jobs.
func (s *HubMembershipPreferenecesPortalNotifications) SetJobs(val HubMembershipPreferenecesPortalNotificationsJobs) {
	s.Jobs = val
}

type HubMembershipPreferenecesPortalNotificationsJobs struct {
	ApikeyAlerts bool `json:"apikey_alerts"`
}

// GetApikeyAlerts returns the value of ApikeyAlerts.
func (s *HubMembershipPreferenecesPortalNotificationsJobs) GetApikeyAlerts() bool {
	return s.ApikeyAlerts
}

// SetApikeyAlerts sets the value of ApikeyAlerts.
func (s *HubMembershipPreferenecesPortalNotificationsJobs) SetApikeyAlerts(val bool) {
	s.ApikeyAlerts = val
}

// A list of meta fields that can be applied to a hub.
// Ref: #/components/schemas/HubMeta
type HubMeta struct {
	Membership OptHubMembership `json:"membership"`
}

// GetMembership returns the value of Membership.
func (s *HubMeta) GetMembership() OptHubMembership {
	return s.Membership
}

// SetMembership sets the value of Membership.
func (s *HubMeta) SetMembership(val OptHubMembership) {
	s.Membership = val
}

// A token resource.
// Ref: #/components/schemas/HubNotificationToken
type HubNotificationToken struct {
	// A token used for connecting to the hub notification pipeline websocket API.
	Token string `json:"token"`
}

// GetToken returns the value of Token.
func (s *HubNotificationToken) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *HubNotificationToken) SetToken(val string) {
	s.Token = val
}

// Merged schema.
// Ref: #/components/schemas/HubState
type HubState struct {
	// The current state of the hub.
	Current HubStateCurrent `json:"current"`
	Changed DateTime        `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptHubStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *HubState) GetCurrent() HubStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *HubState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *HubState) GetError() OptHubStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *HubState) SetCurrent(val HubStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *HubState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *HubState) SetError(val OptHubStateError) {
	s.Error = val
}

// The current state of the hub.
type HubStateCurrent string

const (
	HubStateCurrentNew         HubStateCurrent = "new"
	HubStateCurrentConfiguring HubStateCurrent = "configuring"
	HubStateCurrentLive        HubStateCurrent = "live"
	HubStateCurrentInactive    HubStateCurrent = "inactive"
	HubStateCurrentDeleting    HubStateCurrent = "deleting"
	HubStateCurrentDeleted     HubStateCurrent = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s HubStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case HubStateCurrentNew:
		return []byte(s), nil
	case HubStateCurrentConfiguring:
		return []byte(s), nil
	case HubStateCurrentLive:
		return []byte(s), nil
	case HubStateCurrentInactive:
		return []byte(s), nil
	case HubStateCurrentDeleting:
		return []byte(s), nil
	case HubStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HubStateCurrent) UnmarshalText(data []byte) error {
	switch HubStateCurrent(data) {
	case HubStateCurrentNew:
		*s = HubStateCurrentNew
		return nil
	case HubStateCurrentConfiguring:
		*s = HubStateCurrentConfiguring
		return nil
	case HubStateCurrentLive:
		*s = HubStateCurrentLive
		return nil
	case HubStateCurrentInactive:
		*s = HubStateCurrentInactive
		return nil
	case HubStateCurrentDeleting:
		*s = HubStateCurrentDeleting
		return nil
	case HubStateCurrentDeleted:
		*s = HubStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type HubStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *HubStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *HubStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *HubStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *HubStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// A hub usage data point.
// Ref: #/components/schemas/HubUsageDatum
type HubUsageDatum struct {
	Time         string  `json:"time"`
	Servers      float64 `json:"servers"`
	Members      float64 `json:"members"`
	Environments float64 `json:"environments"`
	Containers   float64 `json:"containers"`
}

// GetTime returns the value of Time.
func (s *HubUsageDatum) GetTime() string {
	return s.Time
}

// GetServers returns the value of Servers.
func (s *HubUsageDatum) GetServers() float64 {
	return s.Servers
}

// GetMembers returns the value of Members.
func (s *HubUsageDatum) GetMembers() float64 {
	return s.Members
}

// GetEnvironments returns the value of Environments.
func (s *HubUsageDatum) GetEnvironments() float64 {
	return s.Environments
}

// GetContainers returns the value of Containers.
func (s *HubUsageDatum) GetContainers() float64 {
	return s.Containers
}

// SetTime sets the value of Time.
func (s *HubUsageDatum) SetTime(val string) {
	s.Time = val
}

// SetServers sets the value of Servers.
func (s *HubUsageDatum) SetServers(val float64) {
	s.Servers = val
}

// SetMembers sets the value of Members.
func (s *HubUsageDatum) SetMembers(val float64) {
	s.Members = val
}

// SetEnvironments sets the value of Environments.
func (s *HubUsageDatum) SetEnvironments(val float64) {
	s.Environments = val
}

// SetContainers sets the value of Containers.
func (s *HubUsageDatum) SetContainers(val float64) {
	s.Containers = val
}

// All hub webhooks for the given hub.
type HubWebhooks struct {
	// A webhook to report information to each time a server is deployed on the given hub.
	ServerDeployed NilString `json:"server_deployed"`
}

// GetServerDeployed returns the value of ServerDeployed.
func (s *HubWebhooks) GetServerDeployed() NilString {
	return s.ServerDeployed
}

// SetServerDeployed sets the value of ServerDeployed.
func (s *HubWebhooks) SetServerDeployed(val NilString) {
	s.ServerDeployed = val
}

// HugeTLB data.
// Ref: #/components/schemas/HugeTLB
type HugeTLB struct {
	// The number of bytes being consumed by huge pages of all sizes.
	Usage OptInt `json:"usage"`
	// The maximum number of bytes allowed to be used for huge pages for this instance.
	Max OptInt `json:"max"`
	// The number of times the hugeTLB memory limit has been exceeded by this instance.
	FailCount OptInt `json:"fail_count"`
}

// GetUsage returns the value of Usage.
func (s *HugeTLB) GetUsage() OptInt {
	return s.Usage
}

// GetMax returns the value of Max.
func (s *HugeTLB) GetMax() OptInt {
	return s.Max
}

// GetFailCount returns the value of FailCount.
func (s *HugeTLB) GetFailCount() OptInt {
	return s.FailCount
}

// SetUsage sets the value of Usage.
func (s *HugeTLB) SetUsage(val OptInt) {
	s.Usage = val
}

// SetMax sets the value of Max.
func (s *HugeTLB) SetMax(val OptInt) {
	s.Max = val
}

// SetFailCount sets the value of FailCount.
func (s *HugeTLB) SetFailCount(val OptInt) {
	s.FailCount = val
}

// Infrastructure abstraction layer authentication information.
// Ref: #/components/schemas/IALAuth
type IALAuth struct {
	// A namespace for the IAL entry.
	Namespace OptString `json:"namespace"`
	// Information about the region being used.
	Region OptString `json:"region"`
	// The API key used to make a request against the given provider.
	APIKey OptString `json:"api_key"`
	// A secret.
	Secret OptString `json:"secret"`
	// A config string.
	Config OptString `json:"config"`
	// Information about the Cycle properties making the request.
	Cycle OptIALAuthCycle `json:"cycle"`
}

// GetNamespace returns the value of Namespace.
func (s *IALAuth) GetNamespace() OptString {
	return s.Namespace
}

// GetRegion returns the value of Region.
func (s *IALAuth) GetRegion() OptString {
	return s.Region
}

// GetAPIKey returns the value of APIKey.
func (s *IALAuth) GetAPIKey() OptString {
	return s.APIKey
}

// GetSecret returns the value of Secret.
func (s *IALAuth) GetSecret() OptString {
	return s.Secret
}

// GetConfig returns the value of Config.
func (s *IALAuth) GetConfig() OptString {
	return s.Config
}

// GetCycle returns the value of Cycle.
func (s *IALAuth) GetCycle() OptIALAuthCycle {
	return s.Cycle
}

// SetNamespace sets the value of Namespace.
func (s *IALAuth) SetNamespace(val OptString) {
	s.Namespace = val
}

// SetRegion sets the value of Region.
func (s *IALAuth) SetRegion(val OptString) {
	s.Region = val
}

// SetAPIKey sets the value of APIKey.
func (s *IALAuth) SetAPIKey(val OptString) {
	s.APIKey = val
}

// SetSecret sets the value of Secret.
func (s *IALAuth) SetSecret(val OptString) {
	s.Secret = val
}

// SetConfig sets the value of Config.
func (s *IALAuth) SetConfig(val OptString) {
	s.Config = val
}

// SetCycle sets the value of Cycle.
func (s *IALAuth) SetCycle(val OptIALAuthCycle) {
	s.Cycle = val
}

// Information about the Cycle properties making the request.
type IALAuthCycle struct {
	// The name of the hub.
	HubName string `json:"hub_name"`
	HubID   HubID  `json:"hub_id"`
}

// GetHubName returns the value of HubName.
func (s *IALAuthCycle) GetHubName() string {
	return s.HubName
}

// GetHubID returns the value of HubID.
func (s *IALAuthCycle) GetHubID() HubID {
	return s.HubID
}

// SetHubName sets the value of HubName.
func (s *IALAuthCycle) SetHubName(val string) {
	s.HubName = val
}

// SetHubID sets the value of HubID.
func (s *IALAuthCycle) SetHubID(val HubID) {
	s.HubID = val
}

type ID string

// An IP resource.
// Ref: #/components/schemas/Ip
type IP struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// The type of IP protocol this IP is.
	Kind IPKind `json:"kind"`
	// Information about the assignment of this IP.
	Assignment OptNilIPAssignment `json:"assignment"`
	// A unique identifier that associates the IP with an IP pool.
	PoolID string `json:"pool_id"`
	// The IP address.
	Address string `json:"address"`
	// The IP gateway.
	Gateway string `json:"gateway"`
	// The CIDR for the IP.
	Cidr  string  `json:"cidr"`
	State IpState `json:"state"`
}

// GetID returns the value of ID.
func (s *IP) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *IP) GetHubID() HubID {
	return s.HubID
}

// GetKind returns the value of Kind.
func (s *IP) GetKind() IPKind {
	return s.Kind
}

// GetAssignment returns the value of Assignment.
func (s *IP) GetAssignment() OptNilIPAssignment {
	return s.Assignment
}

// GetPoolID returns the value of PoolID.
func (s *IP) GetPoolID() string {
	return s.PoolID
}

// GetAddress returns the value of Address.
func (s *IP) GetAddress() string {
	return s.Address
}

// GetGateway returns the value of Gateway.
func (s *IP) GetGateway() string {
	return s.Gateway
}

// GetCidr returns the value of Cidr.
func (s *IP) GetCidr() string {
	return s.Cidr
}

// GetState returns the value of State.
func (s *IP) GetState() IpState {
	return s.State
}

// SetID sets the value of ID.
func (s *IP) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *IP) SetHubID(val HubID) {
	s.HubID = val
}

// SetKind sets the value of Kind.
func (s *IP) SetKind(val IPKind) {
	s.Kind = val
}

// SetAssignment sets the value of Assignment.
func (s *IP) SetAssignment(val OptNilIPAssignment) {
	s.Assignment = val
}

// SetPoolID sets the value of PoolID.
func (s *IP) SetPoolID(val string) {
	s.PoolID = val
}

// SetAddress sets the value of Address.
func (s *IP) SetAddress(val string) {
	s.Address = val
}

// SetGateway sets the value of Gateway.
func (s *IP) SetGateway(val string) {
	s.Gateway = val
}

// SetCidr sets the value of Cidr.
func (s *IP) SetCidr(val string) {
	s.Cidr = val
}

// SetState sets the value of State.
func (s *IP) SetState(val IpState) {
	s.State = val
}

// Information about the assignment of this IP.
type IPAssignment struct {
	ContainerID   string `json:"container_id"`
	InstanceID    string `json:"instance_id"`
	EnvironmentID string `json:"environment_id"`
}

// GetContainerID returns the value of ContainerID.
func (s *IPAssignment) GetContainerID() string {
	return s.ContainerID
}

// GetInstanceID returns the value of InstanceID.
func (s *IPAssignment) GetInstanceID() string {
	return s.InstanceID
}

// GetEnvironmentID returns the value of EnvironmentID.
func (s *IPAssignment) GetEnvironmentID() string {
	return s.EnvironmentID
}

// SetContainerID sets the value of ContainerID.
func (s *IPAssignment) SetContainerID(val string) {
	s.ContainerID = val
}

// SetInstanceID sets the value of InstanceID.
func (s *IPAssignment) SetInstanceID(val string) {
	s.InstanceID = val
}

// SetEnvironmentID sets the value of EnvironmentID.
func (s *IPAssignment) SetEnvironmentID(val string) {
	s.EnvironmentID = val
}

// The type of IP protocol this IP is.
type IPKind string

const (
	IPKindIpv4 IPKind = "ipv4"
	IPKindIpv6 IPKind = "ipv6"
)

// MarshalText implements encoding.TextMarshaler.
func (s IPKind) MarshalText() ([]byte, error) {
	switch s {
	case IPKindIpv4:
		return []byte(s), nil
	case IPKindIpv6:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IPKind) UnmarshalText(data []byte) error {
	switch IPKind(data) {
	case IPKindIpv4:
		*s = IPKindIpv4
		return nil
	case IPKindIpv6:
		*s = IPKindIpv6
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/IPNet
type IPNet struct {
	// The IP address.
	IP string `json:"ip"`
	// The CIDR notation, describing the range of IP addresses.
	Cidr string `json:"cidr"`
}

// GetIP returns the value of IP.
func (s *IPNet) GetIP() string {
	return s.IP
}

// GetCidr returns the value of Cidr.
func (s *IPNet) GetCidr() string {
	return s.Cidr
}

// SetIP sets the value of IP.
func (s *IPNet) SetIP(val string) {
	s.IP = val
}

// SetCidr sets the value of Cidr.
func (s *IPNet) SetCidr(val string) {
	s.Cidr = val
}

// A summary of the image this container was created from.
// Ref: #/components/schemas/ImageSummary
type ImageSummary struct {
	ID OptID `json:"id"`
	// If a service container, the identifier specifying which service it is.
	Service OptNilImageSummaryService `json:"service"`
}

// GetID returns the value of ID.
func (s *ImageSummary) GetID() OptID {
	return s.ID
}

// GetService returns the value of Service.
func (s *ImageSummary) GetService() OptNilImageSummaryService {
	return s.Service
}

// SetID sets the value of ID.
func (s *ImageSummary) SetID(val OptID) {
	s.ID = val
}

// SetService sets the value of Service.
func (s *ImageSummary) SetService(val OptNilImageSummaryService) {
	s.Service = val
}

// If a service container, the identifier specifying which service it is.
type ImageSummaryService string

const (
	ImageSummaryServiceLoadbalancer ImageSummaryService = "loadbalancer"
	ImageSummaryServiceDiscovery    ImageSummaryService = "discovery"
	ImageSummaryServiceVpn          ImageSummaryService = "vpn"
)

// MarshalText implements encoding.TextMarshaler.
func (s ImageSummaryService) MarshalText() ([]byte, error) {
	switch s {
	case ImageSummaryServiceLoadbalancer:
		return []byte(s), nil
	case ImageSummaryServiceDiscovery:
		return []byte(s), nil
	case ImageSummaryServiceVpn:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ImageSummaryService) UnmarshalText(data []byte) error {
	switch ImageSummaryService(data) {
	case ImageSummaryServiceLoadbalancer:
		*s = ImageSummaryServiceLoadbalancer
		return nil
	case ImageSummaryServiceDiscovery:
		*s = ImageSummaryServiceDiscovery
		return nil
	case ImageSummaryServiceVpn:
		*s = ImageSummaryServiceVpn
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An index that enables search in the portal.
// Ref: #/components/schemas/Index
type Index struct {
	// The timestampof when the index was generated.
	Generated DateTime `json:"generated"`
	// Id describing the Hub.
	HubID        string            `json:"hub_id"`
	Containers   IndexContainers   `json:"containers"`
	Environments IndexEnvironments `json:"environments"`
	ImageSources IndexImageSources `json:"image_sources"`
	DNSZones     IndexDNSZones     `json:"dns_zones"`
	Stacks       IndexStacks       `json:"stacks"`
	Servers      IndexServers      `json:"servers"`
}

// GetGenerated returns the value of Generated.
func (s *Index) GetGenerated() DateTime {
	return s.Generated
}

// GetHubID returns the value of HubID.
func (s *Index) GetHubID() string {
	return s.HubID
}

// GetContainers returns the value of Containers.
func (s *Index) GetContainers() IndexContainers {
	return s.Containers
}

// GetEnvironments returns the value of Environments.
func (s *Index) GetEnvironments() IndexEnvironments {
	return s.Environments
}

// GetImageSources returns the value of ImageSources.
func (s *Index) GetImageSources() IndexImageSources {
	return s.ImageSources
}

// GetDNSZones returns the value of DNSZones.
func (s *Index) GetDNSZones() IndexDNSZones {
	return s.DNSZones
}

// GetStacks returns the value of Stacks.
func (s *Index) GetStacks() IndexStacks {
	return s.Stacks
}

// GetServers returns the value of Servers.
func (s *Index) GetServers() IndexServers {
	return s.Servers
}

// SetGenerated sets the value of Generated.
func (s *Index) SetGenerated(val DateTime) {
	s.Generated = val
}

// SetHubID sets the value of HubID.
func (s *Index) SetHubID(val string) {
	s.HubID = val
}

// SetContainers sets the value of Containers.
func (s *Index) SetContainers(val IndexContainers) {
	s.Containers = val
}

// SetEnvironments sets the value of Environments.
func (s *Index) SetEnvironments(val IndexEnvironments) {
	s.Environments = val
}

// SetImageSources sets the value of ImageSources.
func (s *Index) SetImageSources(val IndexImageSources) {
	s.ImageSources = val
}

// SetDNSZones sets the value of DNSZones.
func (s *Index) SetDNSZones(val IndexDNSZones) {
	s.DNSZones = val
}

// SetStacks sets the value of Stacks.
func (s *Index) SetStacks(val IndexStacks) {
	s.Stacks = val
}

// SetServers sets the value of Servers.
func (s *Index) SetServers(val IndexServers) {
	s.Servers = val
}

type IndexContainers map[string]Component

func (s *IndexContainers) init() IndexContainers {
	m := *s
	if m == nil {
		m = map[string]Component{}
		*s = m
	}
	return m
}

type IndexDNSZones map[string]Component

func (s *IndexDNSZones) init() IndexDNSZones {
	m := *s
	if m == nil {
		m = map[string]Component{}
		*s = m
	}
	return m
}

type IndexEnvironments map[string]Component

func (s *IndexEnvironments) init() IndexEnvironments {
	m := *s
	if m == nil {
		m = map[string]Component{}
		*s = m
	}
	return m
}

type IndexImageSources map[string]Component

func (s *IndexImageSources) init() IndexImageSources {
	m := *s
	if m == nil {
		m = map[string]Component{}
		*s = m
	}
	return m
}

type IndexServers map[string]Component

func (s *IndexServers) init() IndexServers {
	m := *s
	if m == nil {
		m = map[string]Component{}
		*s = m
	}
	return m
}

type IndexStacks map[string]Component

func (s *IndexStacks) init() IndexStacks {
	m := *s
	if m == nil {
		m = map[string]Component{}
		*s = m
	}
	return m
}

// The server resource, referring to servers that have been deployed to a Cycle hub.
// Ref: #/components/schemas/Server
type InfraServer struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// An identifier for the location this server is deployed to.
	LocationID string `json:"location_id"`
	// An identifier for the model of server that is deployed.
	ModelID string `json:"model_id"`
	// An identifier for the node.
	NodeID string `json:"node_id"`
	// The server hostname.
	Hostname string         `json:"hostname"`
	Creator  CreatorScope   `json:"creator"`
	Provider ServerProvider `json:"provider"`
	// The cluster the given server is deployed to.
	Cluster     string            `json:"cluster"`
	Features    ServerFeatures    `json:"features"`
	Constraints ServerConstraints `json:"constraints"`
	State       ServerState       `json:"state"`
	// A collection of timestamps for each event in the server's lifetime.
	Events InfraServerEvents `json:"events"`
	Meta   OptServerMeta     `json:"meta"`
}

// GetID returns the value of ID.
func (s *InfraServer) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *InfraServer) GetHubID() HubID {
	return s.HubID
}

// GetLocationID returns the value of LocationID.
func (s *InfraServer) GetLocationID() string {
	return s.LocationID
}

// GetModelID returns the value of ModelID.
func (s *InfraServer) GetModelID() string {
	return s.ModelID
}

// GetNodeID returns the value of NodeID.
func (s *InfraServer) GetNodeID() string {
	return s.NodeID
}

// GetHostname returns the value of Hostname.
func (s *InfraServer) GetHostname() string {
	return s.Hostname
}

// GetCreator returns the value of Creator.
func (s *InfraServer) GetCreator() CreatorScope {
	return s.Creator
}

// GetProvider returns the value of Provider.
func (s *InfraServer) GetProvider() ServerProvider {
	return s.Provider
}

// GetCluster returns the value of Cluster.
func (s *InfraServer) GetCluster() string {
	return s.Cluster
}

// GetFeatures returns the value of Features.
func (s *InfraServer) GetFeatures() ServerFeatures {
	return s.Features
}

// GetConstraints returns the value of Constraints.
func (s *InfraServer) GetConstraints() ServerConstraints {
	return s.Constraints
}

// GetState returns the value of State.
func (s *InfraServer) GetState() ServerState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *InfraServer) GetEvents() InfraServerEvents {
	return s.Events
}

// GetMeta returns the value of Meta.
func (s *InfraServer) GetMeta() OptServerMeta {
	return s.Meta
}

// SetID sets the value of ID.
func (s *InfraServer) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *InfraServer) SetHubID(val HubID) {
	s.HubID = val
}

// SetLocationID sets the value of LocationID.
func (s *InfraServer) SetLocationID(val string) {
	s.LocationID = val
}

// SetModelID sets the value of ModelID.
func (s *InfraServer) SetModelID(val string) {
	s.ModelID = val
}

// SetNodeID sets the value of NodeID.
func (s *InfraServer) SetNodeID(val string) {
	s.NodeID = val
}

// SetHostname sets the value of Hostname.
func (s *InfraServer) SetHostname(val string) {
	s.Hostname = val
}

// SetCreator sets the value of Creator.
func (s *InfraServer) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetProvider sets the value of Provider.
func (s *InfraServer) SetProvider(val ServerProvider) {
	s.Provider = val
}

// SetCluster sets the value of Cluster.
func (s *InfraServer) SetCluster(val string) {
	s.Cluster = val
}

// SetFeatures sets the value of Features.
func (s *InfraServer) SetFeatures(val ServerFeatures) {
	s.Features = val
}

// SetConstraints sets the value of Constraints.
func (s *InfraServer) SetConstraints(val ServerConstraints) {
	s.Constraints = val
}

// SetState sets the value of State.
func (s *InfraServer) SetState(val ServerState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *InfraServer) SetEvents(val InfraServerEvents) {
	s.Events = val
}

// SetMeta sets the value of Meta.
func (s *InfraServer) SetMeta(val OptServerMeta) {
	s.Meta = val
}

// A collection of timestamps for each event in the server's lifetime.
type InfraServerEvents struct {
	// The timestamp of when the server was created.
	Created DateTime `json:"created"`
	// The timestamp of when the server was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the server was deleted.
	Deleted DateTime `json:"deleted"`
	// Information about the provisioning of the server.
	Provisioning InfraServerEventsProvisioning `json:"provisioning"`
}

// GetCreated returns the value of Created.
func (s *InfraServerEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *InfraServerEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *InfraServerEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetProvisioning returns the value of Provisioning.
func (s *InfraServerEvents) GetProvisioning() InfraServerEventsProvisioning {
	return s.Provisioning
}

// SetCreated sets the value of Created.
func (s *InfraServerEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *InfraServerEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *InfraServerEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetProvisioning sets the value of Provisioning.
func (s *InfraServerEvents) SetProvisioning(val InfraServerEventsProvisioning) {
	s.Provisioning = val
}

// Information about the provisioning of the server.
type InfraServerEventsProvisioning struct {
	// A timestamp of when the server started provisioning.
	Started DateTime `json:"started"`
	// A timestamp of when the server completed provisioning.
	Completed DateTime `json:"completed"`
}

// GetStarted returns the value of Started.
func (s *InfraServerEventsProvisioning) GetStarted() DateTime {
	return s.Started
}

// GetCompleted returns the value of Completed.
func (s *InfraServerEventsProvisioning) GetCompleted() DateTime {
	return s.Completed
}

// SetStarted sets the value of Started.
func (s *InfraServerEventsProvisioning) SetStarted(val DateTime) {
	s.Started = val
}

// SetCompleted sets the value of Completed.
func (s *InfraServerEventsProvisioning) SetCompleted(val DateTime) {
	s.Completed = val
}

// Location information for a given provider.
// Ref: #/components/schemas/InfrastructureProviderLocation
type InfrastructureProviderLocation struct {
	ID string `json:"id"`
	// A name for the location.
	Name       string                                      `json:"name"`
	Geographic NilInfrastructureProviderLocationGeographic `json:"geographic"`
	Provider   LocationProvider                            `json:"provider"`
	// A boolean where true means the locaiton is supported by the platform.
	Compatible bool `json:"compatible"`
	// Additional information about available and supported features of the provider location.
	Features InfrastructureProviderLocationFeatures `json:"features"`
	// An abbreviation for the given provider locaiton.
	Abbreviation string `json:"abbreviation"`
	// Additional information about the given provider locaiton.
	Annotations InfrastructureProviderLocationAnnotations `json:"annotations"`
}

// GetID returns the value of ID.
func (s *InfrastructureProviderLocation) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *InfrastructureProviderLocation) GetName() string {
	return s.Name
}

// GetGeographic returns the value of Geographic.
func (s *InfrastructureProviderLocation) GetGeographic() NilInfrastructureProviderLocationGeographic {
	return s.Geographic
}

// GetProvider returns the value of Provider.
func (s *InfrastructureProviderLocation) GetProvider() LocationProvider {
	return s.Provider
}

// GetCompatible returns the value of Compatible.
func (s *InfrastructureProviderLocation) GetCompatible() bool {
	return s.Compatible
}

// GetFeatures returns the value of Features.
func (s *InfrastructureProviderLocation) GetFeatures() InfrastructureProviderLocationFeatures {
	return s.Features
}

// GetAbbreviation returns the value of Abbreviation.
func (s *InfrastructureProviderLocation) GetAbbreviation() string {
	return s.Abbreviation
}

// GetAnnotations returns the value of Annotations.
func (s *InfrastructureProviderLocation) GetAnnotations() InfrastructureProviderLocationAnnotations {
	return s.Annotations
}

// SetID sets the value of ID.
func (s *InfrastructureProviderLocation) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *InfrastructureProviderLocation) SetName(val string) {
	s.Name = val
}

// SetGeographic sets the value of Geographic.
func (s *InfrastructureProviderLocation) SetGeographic(val NilInfrastructureProviderLocationGeographic) {
	s.Geographic = val
}

// SetProvider sets the value of Provider.
func (s *InfrastructureProviderLocation) SetProvider(val LocationProvider) {
	s.Provider = val
}

// SetCompatible sets the value of Compatible.
func (s *InfrastructureProviderLocation) SetCompatible(val bool) {
	s.Compatible = val
}

// SetFeatures sets the value of Features.
func (s *InfrastructureProviderLocation) SetFeatures(val InfrastructureProviderLocationFeatures) {
	s.Features = val
}

// SetAbbreviation sets the value of Abbreviation.
func (s *InfrastructureProviderLocation) SetAbbreviation(val string) {
	s.Abbreviation = val
}

// SetAnnotations sets the value of Annotations.
func (s *InfrastructureProviderLocation) SetAnnotations(val InfrastructureProviderLocationAnnotations) {
	s.Annotations = val
}

// Additional information about the given provider locaiton.
type InfrastructureProviderLocationAnnotations map[string]string

func (s *InfrastructureProviderLocationAnnotations) init() InfrastructureProviderLocationAnnotations {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Additional information about available and supported features of the provider location.
type InfrastructureProviderLocationFeatures struct {
	// Available features for the provider location.
	Available []string `json:"available"`
	// Supported features for the provider location.
	Supported []string `json:"supported"`
}

// GetAvailable returns the value of Available.
func (s *InfrastructureProviderLocationFeatures) GetAvailable() []string {
	return s.Available
}

// GetSupported returns the value of Supported.
func (s *InfrastructureProviderLocationFeatures) GetSupported() []string {
	return s.Supported
}

// SetAvailable sets the value of Available.
func (s *InfrastructureProviderLocationFeatures) SetAvailable(val []string) {
	s.Available = val
}

// SetSupported sets the value of Supported.
func (s *InfrastructureProviderLocationFeatures) SetSupported(val []string) {
	s.Supported = val
}

// InfrastructureProviderLocationGeographic represents sum type.
type InfrastructureProviderLocationGeographic struct {
	Type       InfrastructureProviderLocationGeographicType // switch on this field
	Geographic Geographic
}

// InfrastructureProviderLocationGeographicType is oneOf type of InfrastructureProviderLocationGeographic.
type InfrastructureProviderLocationGeographicType string

// Possible values for InfrastructureProviderLocationGeographicType.
const (
	GeographicInfrastructureProviderLocationGeographic InfrastructureProviderLocationGeographicType = "Geographic"
)

// IsGeographic reports whether InfrastructureProviderLocationGeographic is Geographic.
func (s InfrastructureProviderLocationGeographic) IsGeographic() bool {
	return s.Type == GeographicInfrastructureProviderLocationGeographic
}

// SetGeographic sets InfrastructureProviderLocationGeographic to Geographic.
func (s *InfrastructureProviderLocationGeographic) SetGeographic(v Geographic) {
	s.Type = GeographicInfrastructureProviderLocationGeographic
	s.Geographic = v
}

// GetGeographic returns Geographic and true boolean if InfrastructureProviderLocationGeographic is Geographic.
func (s InfrastructureProviderLocationGeographic) GetGeographic() (v Geographic, ok bool) {
	if !s.IsGeographic() {
		return v, false
	}
	return s.Geographic, true
}

// NewGeographicInfrastructureProviderLocationGeographic returns new InfrastructureProviderLocationGeographic from Geographic.
func NewGeographicInfrastructureProviderLocationGeographic(v Geographic) InfrastructureProviderLocationGeographic {
	var s InfrastructureProviderLocationGeographic
	s.SetGeographic(v)
	return s
}

// An infrastructure summary resource.
// Ref: #/components/schemas/InfrastructureSummary
type InfrastructureSummary struct {
	HubID HubID `json:"hub_id"`
	// The number of servers on the cluster.
	Servers float64 `json:"servers"`
	// Statistics about image usage.
	Images InfrastructureSummaryImages `json:"images"`
	// Records pointing to information about clusters that make up this hubs infrastructure.
	Clusters InfrastructureSummaryClusters `json:"clusters"`
	// A timestamp of when the infrastructure was last updated.
	Updated DateTime `json:"updated"`
}

// GetHubID returns the value of HubID.
func (s *InfrastructureSummary) GetHubID() HubID {
	return s.HubID
}

// GetServers returns the value of Servers.
func (s *InfrastructureSummary) GetServers() float64 {
	return s.Servers
}

// GetImages returns the value of Images.
func (s *InfrastructureSummary) GetImages() InfrastructureSummaryImages {
	return s.Images
}

// GetClusters returns the value of Clusters.
func (s *InfrastructureSummary) GetClusters() InfrastructureSummaryClusters {
	return s.Clusters
}

// GetUpdated returns the value of Updated.
func (s *InfrastructureSummary) GetUpdated() DateTime {
	return s.Updated
}

// SetHubID sets the value of HubID.
func (s *InfrastructureSummary) SetHubID(val HubID) {
	s.HubID = val
}

// SetServers sets the value of Servers.
func (s *InfrastructureSummary) SetServers(val float64) {
	s.Servers = val
}

// SetImages sets the value of Images.
func (s *InfrastructureSummary) SetImages(val InfrastructureSummaryImages) {
	s.Images = val
}

// SetClusters sets the value of Clusters.
func (s *InfrastructureSummary) SetClusters(val InfrastructureSummaryClusters) {
	s.Clusters = val
}

// SetUpdated sets the value of Updated.
func (s *InfrastructureSummary) SetUpdated(val DateTime) {
	s.Updated = val
}

// Records pointing to information about clusters that make up this hubs infrastructure.
type InfrastructureSummaryClusters map[string]InfrastructureSummaryClustersItem

func (s *InfrastructureSummaryClusters) init() InfrastructureSummaryClusters {
	m := *s
	if m == nil {
		m = map[string]InfrastructureSummaryClustersItem{}
		*s = m
	}
	return m
}

type InfrastructureSummaryClustersItem struct {
	// The name of the cluster.
	Name string `json:"name"`
	// Information about the aggregate resources of the cluster.
	Resources ServerResources `json:"resources"`
	// Whether Cycle has determined this cluster to be healthy or not.
	Healthy   bool                                     `json:"healthy"`
	Versions  ClusterVersionServerCount                `json:"versions"`
	Instances StateCountSummary                        `json:"instances"`
	Servers   InfrastructureSummaryClustersItemServers `json:"servers"`
}

// GetName returns the value of Name.
func (s *InfrastructureSummaryClustersItem) GetName() string {
	return s.Name
}

// GetResources returns the value of Resources.
func (s *InfrastructureSummaryClustersItem) GetResources() ServerResources {
	return s.Resources
}

// GetHealthy returns the value of Healthy.
func (s *InfrastructureSummaryClustersItem) GetHealthy() bool {
	return s.Healthy
}

// GetVersions returns the value of Versions.
func (s *InfrastructureSummaryClustersItem) GetVersions() ClusterVersionServerCount {
	return s.Versions
}

// GetInstances returns the value of Instances.
func (s *InfrastructureSummaryClustersItem) GetInstances() StateCountSummary {
	return s.Instances
}

// GetServers returns the value of Servers.
func (s *InfrastructureSummaryClustersItem) GetServers() InfrastructureSummaryClustersItemServers {
	return s.Servers
}

// SetName sets the value of Name.
func (s *InfrastructureSummaryClustersItem) SetName(val string) {
	s.Name = val
}

// SetResources sets the value of Resources.
func (s *InfrastructureSummaryClustersItem) SetResources(val ServerResources) {
	s.Resources = val
}

// SetHealthy sets the value of Healthy.
func (s *InfrastructureSummaryClustersItem) SetHealthy(val bool) {
	s.Healthy = val
}

// SetVersions sets the value of Versions.
func (s *InfrastructureSummaryClustersItem) SetVersions(val ClusterVersionServerCount) {
	s.Versions = val
}

// SetInstances sets the value of Instances.
func (s *InfrastructureSummaryClustersItem) SetInstances(val StateCountSummary) {
	s.Instances = val
}

// SetServers sets the value of Servers.
func (s *InfrastructureSummaryClustersItem) SetServers(val InfrastructureSummaryClustersItemServers) {
	s.Servers = val
}

type InfrastructureSummaryClustersItemServers struct {
	Count     float64                                           `json:"count"`
	Providers InfrastructureSummaryClustersItemServersProviders `json:"providers"`
}

// GetCount returns the value of Count.
func (s *InfrastructureSummaryClustersItemServers) GetCount() float64 {
	return s.Count
}

// GetProviders returns the value of Providers.
func (s *InfrastructureSummaryClustersItemServers) GetProviders() InfrastructureSummaryClustersItemServersProviders {
	return s.Providers
}

// SetCount sets the value of Count.
func (s *InfrastructureSummaryClustersItemServers) SetCount(val float64) {
	s.Count = val
}

// SetProviders sets the value of Providers.
func (s *InfrastructureSummaryClustersItemServers) SetProviders(val InfrastructureSummaryClustersItemServersProviders) {
	s.Providers = val
}

type InfrastructureSummaryClustersItemServersProviders map[string]InfrastructureSummaryClustersItemServersProvidersItem

func (s *InfrastructureSummaryClustersItemServersProviders) init() InfrastructureSummaryClustersItemServersProviders {
	m := *s
	if m == nil {
		m = map[string]InfrastructureSummaryClustersItemServersProvidersItem{}
		*s = m
	}
	return m
}

type InfrastructureSummaryClustersItemServersProvidersItem struct {
	Count     float64                                                        `json:"count"`
	Locations InfrastructureSummaryClustersItemServersProvidersItemLocations `json:"locations"`
	Models    InfrastructureSummaryClustersItemServersProvidersItemModels    `json:"models"`
}

// GetCount returns the value of Count.
func (s *InfrastructureSummaryClustersItemServersProvidersItem) GetCount() float64 {
	return s.Count
}

// GetLocations returns the value of Locations.
func (s *InfrastructureSummaryClustersItemServersProvidersItem) GetLocations() InfrastructureSummaryClustersItemServersProvidersItemLocations {
	return s.Locations
}

// GetModels returns the value of Models.
func (s *InfrastructureSummaryClustersItemServersProvidersItem) GetModels() InfrastructureSummaryClustersItemServersProvidersItemModels {
	return s.Models
}

// SetCount sets the value of Count.
func (s *InfrastructureSummaryClustersItemServersProvidersItem) SetCount(val float64) {
	s.Count = val
}

// SetLocations sets the value of Locations.
func (s *InfrastructureSummaryClustersItemServersProvidersItem) SetLocations(val InfrastructureSummaryClustersItemServersProvidersItemLocations) {
	s.Locations = val
}

// SetModels sets the value of Models.
func (s *InfrastructureSummaryClustersItemServersProvidersItem) SetModels(val InfrastructureSummaryClustersItemServersProvidersItemModels) {
	s.Models = val
}

type InfrastructureSummaryClustersItemServersProvidersItemLocations map[string]float64

func (s *InfrastructureSummaryClustersItemServersProvidersItemLocations) init() InfrastructureSummaryClustersItemServersProvidersItemLocations {
	m := *s
	if m == nil {
		m = map[string]float64{}
		*s = m
	}
	return m
}

type InfrastructureSummaryClustersItemServersProvidersItemModels map[string]float64

func (s *InfrastructureSummaryClustersItemServersProvidersItemModels) init() InfrastructureSummaryClustersItemServersProvidersItemModels {
	m := *s
	if m == nil {
		m = map[string]float64{}
		*s = m
	}
	return m
}

// Statistics about image usage.
type InfrastructureSummaryImages struct {
	// Image tier information.
	Tier InfrastructureSummaryImagesTier `json:"tier"`
}

// GetTier returns the value of Tier.
func (s *InfrastructureSummaryImages) GetTier() InfrastructureSummaryImagesTier {
	return s.Tier
}

// SetTier sets the value of Tier.
func (s *InfrastructureSummaryImages) SetTier(val InfrastructureSummaryImagesTier) {
	s.Tier = val
}

// Image tier information.
type InfrastructureSummaryImagesTier struct {
	// A value in MB representing the total MB of space on the infrastructure available for images.
	TotalMB int `json:"total_mb"`
	// A value in MB representing the amount of allocated space for images.
	AllocatedMB int `json:"allocated_mb"`
	// A value in MB representing the total MB of space images are taking up out of the total megabytes
	// available.
	UsedMB int `json:"used_mb"`
}

// GetTotalMB returns the value of TotalMB.
func (s *InfrastructureSummaryImagesTier) GetTotalMB() int {
	return s.TotalMB
}

// GetAllocatedMB returns the value of AllocatedMB.
func (s *InfrastructureSummaryImagesTier) GetAllocatedMB() int {
	return s.AllocatedMB
}

// GetUsedMB returns the value of UsedMB.
func (s *InfrastructureSummaryImagesTier) GetUsedMB() int {
	return s.UsedMB
}

// SetTotalMB sets the value of TotalMB.
func (s *InfrastructureSummaryImagesTier) SetTotalMB(val int) {
	s.TotalMB = val
}

// SetAllocatedMB sets the value of AllocatedMB.
func (s *InfrastructureSummaryImagesTier) SetAllocatedMB(val int) {
	s.AllocatedMB = val
}

// SetUsedMB sets the value of UsedMB.
func (s *InfrastructureSummaryImagesTier) SetUsedMB(val int) {
	s.UsedMB = val
}

// A container instance resource.
// Ref: #/components/schemas/Instance
type Instance struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// A container identifier for the container that is associated with this instance.
	ContainerID string `json:"container_id"`
	// A location identifier that's associated with the server this instance is deployed to.
	LocationID string `json:"location_id"`
	// Details about the environment network this instance is a member of.
	Environment InstanceEnvironment `json:"environment"`
	// Additional information about the instance relating to its setting as being stateful.
	Stateful NilInstanceStateful `json:"stateful"`
	Provider ProviderSummary     `json:"provider"`
	// An identifier for the server this instance is deployed to.
	ServerID string `json:"server_id"`
	// The state as it relates to the following. * `active` - instance can be started or stopped. *
	// `purge` - instance should be deleted. * `hibernate` - instance is active but not allowed to run.
	ReadyState InstanceReadyState `json:"ready_state"`
	// The hostname of the instance.
	Hostname string `json:"hostname"`
	// If this instance is scheduled to be migrated or has been migrated in the past, there will be
	// information populating this field with the server that the instance came from or the server that
	// the instance was moved to and the instance ID.
	Migration NilInstanceMigration `json:"migration"`
	// If the instance was purged, the timestamp of when that happened.
	PurgeTime OptDateTime `json:"purge_time"`
	// If the instance is an instance of a service container that will be denoted here.
	Service NilInstanceService `json:"service"`
	State   InstanceState      `json:"state"`
	// A collection of timestamps for each event in the instnaces lifetime.
	Events jx.Raw `json:"events"`
}

// GetID returns the value of ID.
func (s *Instance) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *Instance) GetHubID() HubID {
	return s.HubID
}

// GetContainerID returns the value of ContainerID.
func (s *Instance) GetContainerID() string {
	return s.ContainerID
}

// GetLocationID returns the value of LocationID.
func (s *Instance) GetLocationID() string {
	return s.LocationID
}

// GetEnvironment returns the value of Environment.
func (s *Instance) GetEnvironment() InstanceEnvironment {
	return s.Environment
}

// GetStateful returns the value of Stateful.
func (s *Instance) GetStateful() NilInstanceStateful {
	return s.Stateful
}

// GetProvider returns the value of Provider.
func (s *Instance) GetProvider() ProviderSummary {
	return s.Provider
}

// GetServerID returns the value of ServerID.
func (s *Instance) GetServerID() string {
	return s.ServerID
}

// GetReadyState returns the value of ReadyState.
func (s *Instance) GetReadyState() InstanceReadyState {
	return s.ReadyState
}

// GetHostname returns the value of Hostname.
func (s *Instance) GetHostname() string {
	return s.Hostname
}

// GetMigration returns the value of Migration.
func (s *Instance) GetMigration() NilInstanceMigration {
	return s.Migration
}

// GetPurgeTime returns the value of PurgeTime.
func (s *Instance) GetPurgeTime() OptDateTime {
	return s.PurgeTime
}

// GetService returns the value of Service.
func (s *Instance) GetService() NilInstanceService {
	return s.Service
}

// GetState returns the value of State.
func (s *Instance) GetState() InstanceState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *Instance) GetEvents() jx.Raw {
	return s.Events
}

// SetID sets the value of ID.
func (s *Instance) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *Instance) SetHubID(val HubID) {
	s.HubID = val
}

// SetContainerID sets the value of ContainerID.
func (s *Instance) SetContainerID(val string) {
	s.ContainerID = val
}

// SetLocationID sets the value of LocationID.
func (s *Instance) SetLocationID(val string) {
	s.LocationID = val
}

// SetEnvironment sets the value of Environment.
func (s *Instance) SetEnvironment(val InstanceEnvironment) {
	s.Environment = val
}

// SetStateful sets the value of Stateful.
func (s *Instance) SetStateful(val NilInstanceStateful) {
	s.Stateful = val
}

// SetProvider sets the value of Provider.
func (s *Instance) SetProvider(val ProviderSummary) {
	s.Provider = val
}

// SetServerID sets the value of ServerID.
func (s *Instance) SetServerID(val string) {
	s.ServerID = val
}

// SetReadyState sets the value of ReadyState.
func (s *Instance) SetReadyState(val InstanceReadyState) {
	s.ReadyState = val
}

// SetHostname sets the value of Hostname.
func (s *Instance) SetHostname(val string) {
	s.Hostname = val
}

// SetMigration sets the value of Migration.
func (s *Instance) SetMigration(val NilInstanceMigration) {
	s.Migration = val
}

// SetPurgeTime sets the value of PurgeTime.
func (s *Instance) SetPurgeTime(val OptDateTime) {
	s.PurgeTime = val
}

// SetService sets the value of Service.
func (s *Instance) SetService(val NilInstanceService) {
	s.Service = val
}

// SetState sets the value of State.
func (s *Instance) SetState(val InstanceState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *Instance) SetEvents(val jx.Raw) {
	s.Events = val
}

// Resources needed to connect to the instance console websocket.
// Ref: #/components/schemas/InstanceConsoleAuth
type InstanceConsoleAuth struct {
	// A token used for connecting to the instance console through the websocket API.
	Token string `json:"token"`
	// The protocol and url for connecting to the console.
	Address string `json:"address"`
}

// GetToken returns the value of Token.
func (s *InstanceConsoleAuth) GetToken() string {
	return s.Token
}

// GetAddress returns the value of Address.
func (s *InstanceConsoleAuth) GetAddress() string {
	return s.Address
}

// SetToken sets the value of Token.
func (s *InstanceConsoleAuth) SetToken(val string) {
	s.Token = val
}

// SetAddress sets the value of Address.
func (s *InstanceConsoleAuth) SetAddress(val string) {
	s.Address = val
}

type InstanceConsoleAuthOK struct {
	Data OptInstanceConsoleAuth `json:"data"`
}

// GetData returns the value of Data.
func (s *InstanceConsoleAuthOK) GetData() OptInstanceConsoleAuth {
	return s.Data
}

// SetData sets the value of Data.
func (s *InstanceConsoleAuthOK) SetData(val OptInstanceConsoleAuth) {
	s.Data = val
}

// Details about the environment network this instance is a member of.
type InstanceEnvironment struct {
	ID            ID                           `json:"id"`
	NetworkSubnet string                       `json:"network_subnet"`
	Subnet        string                       `json:"subnet"`
	Ipv6          IPNet                        `json:"ipv6"`
	Legacy        NilInstanceEnvironmentLegacy `json:"legacy"`
	MACAddr       string                       `json:"mac_addr"`
	VxlanTag      int                          `json:"vxlan_tag"`
}

// GetID returns the value of ID.
func (s *InstanceEnvironment) GetID() ID {
	return s.ID
}

// GetNetworkSubnet returns the value of NetworkSubnet.
func (s *InstanceEnvironment) GetNetworkSubnet() string {
	return s.NetworkSubnet
}

// GetSubnet returns the value of Subnet.
func (s *InstanceEnvironment) GetSubnet() string {
	return s.Subnet
}

// GetIpv6 returns the value of Ipv6.
func (s *InstanceEnvironment) GetIpv6() IPNet {
	return s.Ipv6
}

// GetLegacy returns the value of Legacy.
func (s *InstanceEnvironment) GetLegacy() NilInstanceEnvironmentLegacy {
	return s.Legacy
}

// GetMACAddr returns the value of MACAddr.
func (s *InstanceEnvironment) GetMACAddr() string {
	return s.MACAddr
}

// GetVxlanTag returns the value of VxlanTag.
func (s *InstanceEnvironment) GetVxlanTag() int {
	return s.VxlanTag
}

// SetID sets the value of ID.
func (s *InstanceEnvironment) SetID(val ID) {
	s.ID = val
}

// SetNetworkSubnet sets the value of NetworkSubnet.
func (s *InstanceEnvironment) SetNetworkSubnet(val string) {
	s.NetworkSubnet = val
}

// SetSubnet sets the value of Subnet.
func (s *InstanceEnvironment) SetSubnet(val string) {
	s.Subnet = val
}

// SetIpv6 sets the value of Ipv6.
func (s *InstanceEnvironment) SetIpv6(val IPNet) {
	s.Ipv6 = val
}

// SetLegacy sets the value of Legacy.
func (s *InstanceEnvironment) SetLegacy(val NilInstanceEnvironmentLegacy) {
	s.Legacy = val
}

// SetMACAddr sets the value of MACAddr.
func (s *InstanceEnvironment) SetMACAddr(val string) {
	s.MACAddr = val
}

// SetVxlanTag sets the value of VxlanTag.
func (s *InstanceEnvironment) SetVxlanTag(val int) {
	s.VxlanTag = val
}

type InstanceEnvironmentLegacy struct {
	Host   int   `json:"host"`
	Subnet int   `json:"subnet"`
	Ipv4   IPNet `json:"ipv4"`
}

// GetHost returns the value of Host.
func (s *InstanceEnvironmentLegacy) GetHost() int {
	return s.Host
}

// GetSubnet returns the value of Subnet.
func (s *InstanceEnvironmentLegacy) GetSubnet() int {
	return s.Subnet
}

// GetIpv4 returns the value of Ipv4.
func (s *InstanceEnvironmentLegacy) GetIpv4() IPNet {
	return s.Ipv4
}

// SetHost sets the value of Host.
func (s *InstanceEnvironmentLegacy) SetHost(val int) {
	s.Host = val
}

// SetSubnet sets the value of Subnet.
func (s *InstanceEnvironmentLegacy) SetSubnet(val int) {
	s.Subnet = val
}

// SetIpv4 sets the value of Ipv4.
func (s *InstanceEnvironmentLegacy) SetIpv4(val IPNet) {
	s.Ipv4 = val
}

// A resource associated with an instance.
// Ref: #/components/schemas/InstanceIncludes
type InstanceIncludes struct {
	Creators     OptCreatorInclude   `json:"creators"`
	Servers      ServersIncludes     `json:"servers"`
	Locations    LocationsIncludes   `json:"locations"`
	Providers    ProvidersIncludes   `json:"providers"`
	Containers   ContainersIncludes  `json:"containers"`
	Environments EnvironmentIncludes `json:"environments"`
}

// GetCreators returns the value of Creators.
func (s *InstanceIncludes) GetCreators() OptCreatorInclude {
	return s.Creators
}

// GetServers returns the value of Servers.
func (s *InstanceIncludes) GetServers() ServersIncludes {
	return s.Servers
}

// GetLocations returns the value of Locations.
func (s *InstanceIncludes) GetLocations() LocationsIncludes {
	return s.Locations
}

// GetProviders returns the value of Providers.
func (s *InstanceIncludes) GetProviders() ProvidersIncludes {
	return s.Providers
}

// GetContainers returns the value of Containers.
func (s *InstanceIncludes) GetContainers() ContainersIncludes {
	return s.Containers
}

// GetEnvironments returns the value of Environments.
func (s *InstanceIncludes) GetEnvironments() EnvironmentIncludes {
	return s.Environments
}

// SetCreators sets the value of Creators.
func (s *InstanceIncludes) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

// SetServers sets the value of Servers.
func (s *InstanceIncludes) SetServers(val ServersIncludes) {
	s.Servers = val
}

// SetLocations sets the value of Locations.
func (s *InstanceIncludes) SetLocations(val LocationsIncludes) {
	s.Locations = val
}

// SetProviders sets the value of Providers.
func (s *InstanceIncludes) SetProviders(val ProvidersIncludes) {
	s.Providers = val
}

// SetContainers sets the value of Containers.
func (s *InstanceIncludes) SetContainers(val ContainersIncludes) {
	s.Containers = val
}

// SetEnvironments sets the value of Environments.
func (s *InstanceIncludes) SetEnvironments(val EnvironmentIncludes) {
	s.Environments = val
}

// If this instance is scheduled to be migrated or has been migrated in the past, there will be
// information populating this field with the server that the instance came from or the server that
// the instance was moved to and the instance ID.
type InstanceMigration struct {
	To   OptMigrationInstance `json:"to"`
	From OptMigrationInstance `json:"from"`
	// A timestamp of when the migration was started.
	Started OptDateTime `json:"started"`
	// A timestamp of when the migration was completed.
	Completed OptDateTime `json:"completed"`
	// A key used by the platform to verify the migration.
	Key string `json:"key"`
	// A boolean where true represents the volumes for the instance should be copied to the new server as
	// well.
	CopyVolumes bool `json:"copy_volumes"`
}

// GetTo returns the value of To.
func (s *InstanceMigration) GetTo() OptMigrationInstance {
	return s.To
}

// GetFrom returns the value of From.
func (s *InstanceMigration) GetFrom() OptMigrationInstance {
	return s.From
}

// GetStarted returns the value of Started.
func (s *InstanceMigration) GetStarted() OptDateTime {
	return s.Started
}

// GetCompleted returns the value of Completed.
func (s *InstanceMigration) GetCompleted() OptDateTime {
	return s.Completed
}

// GetKey returns the value of Key.
func (s *InstanceMigration) GetKey() string {
	return s.Key
}

// GetCopyVolumes returns the value of CopyVolumes.
func (s *InstanceMigration) GetCopyVolumes() bool {
	return s.CopyVolumes
}

// SetTo sets the value of To.
func (s *InstanceMigration) SetTo(val OptMigrationInstance) {
	s.To = val
}

// SetFrom sets the value of From.
func (s *InstanceMigration) SetFrom(val OptMigrationInstance) {
	s.From = val
}

// SetStarted sets the value of Started.
func (s *InstanceMigration) SetStarted(val OptDateTime) {
	s.Started = val
}

// SetCompleted sets the value of Completed.
func (s *InstanceMigration) SetCompleted(val OptDateTime) {
	s.Completed = val
}

// SetKey sets the value of Key.
func (s *InstanceMigration) SetKey(val string) {
	s.Key = val
}

// SetCopyVolumes sets the value of CopyVolumes.
func (s *InstanceMigration) SetCopyVolumes(val bool) {
	s.CopyVolumes = val
}

// The state as it relates to the following. * `active` - instance can be started or stopped. *
// `purge` - instance should be deleted. * `hibernate` - instance is active but not allowed to run.
type InstanceReadyState string

const (
	InstanceReadyStateActive    InstanceReadyState = "active"
	InstanceReadyStatePurge     InstanceReadyState = "purge"
	InstanceReadyStateHibernate InstanceReadyState = "hibernate"
)

// MarshalText implements encoding.TextMarshaler.
func (s InstanceReadyState) MarshalText() ([]byte, error) {
	switch s {
	case InstanceReadyStateActive:
		return []byte(s), nil
	case InstanceReadyStatePurge:
		return []byte(s), nil
	case InstanceReadyStateHibernate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InstanceReadyState) UnmarshalText(data []byte) error {
	switch InstanceReadyState(data) {
	case InstanceReadyStateActive:
		*s = InstanceReadyStateActive
		return nil
	case InstanceReadyStatePurge:
		*s = InstanceReadyStatePurge
		return nil
	case InstanceReadyStateHibernate:
		*s = InstanceReadyStateHibernate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// If the instance is an instance of a service container that will be denoted here.
type InstanceService string

const (
	InstanceServiceDiscovery    InstanceService = "discovery"
	InstanceServiceVpn          InstanceService = "vpn"
	InstanceServiceLoadbalancer InstanceService = "loadbalancer"
)

// MarshalText implements encoding.TextMarshaler.
func (s InstanceService) MarshalText() ([]byte, error) {
	switch s {
	case InstanceServiceDiscovery:
		return []byte(s), nil
	case InstanceServiceVpn:
		return []byte(s), nil
	case InstanceServiceLoadbalancer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InstanceService) UnmarshalText(data []byte) error {
	switch InstanceService(data) {
	case InstanceServiceDiscovery:
		*s = InstanceServiceDiscovery
		return nil
	case InstanceServiceVpn:
		*s = InstanceServiceVpn
		return nil
	case InstanceServiceLoadbalancer:
		*s = InstanceServiceLoadbalancer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/InstanceState
type InstanceState struct {
	// The current state of the instance.
	Current InstanceStateCurrent `json:"current"`
	// Information about the health of the instance.
	Health  OptInstanceStateHealth `json:"health"`
	Changed DateTime               `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptInstanceStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *InstanceState) GetCurrent() InstanceStateCurrent {
	return s.Current
}

// GetHealth returns the value of Health.
func (s *InstanceState) GetHealth() OptInstanceStateHealth {
	return s.Health
}

// GetChanged returns the value of Changed.
func (s *InstanceState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *InstanceState) GetError() OptInstanceStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *InstanceState) SetCurrent(val InstanceStateCurrent) {
	s.Current = val
}

// SetHealth sets the value of Health.
func (s *InstanceState) SetHealth(val OptInstanceStateHealth) {
	s.Health = val
}

// SetChanged sets the value of Changed.
func (s *InstanceState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *InstanceState) SetError(val OptInstanceStateError) {
	s.Error = val
}

// The current state of the instance.
type InstanceStateCurrent string

const (
	InstanceStateCurrentNew       InstanceStateCurrent = "new"
	InstanceStateCurrentStarting  InstanceStateCurrent = "starting"
	InstanceStateCurrentReimaging InstanceStateCurrent = "reimaging"
	InstanceStateCurrentMigrating InstanceStateCurrent = "migrating"
	InstanceStateCurrentRunning   InstanceStateCurrent = "running"
	InstanceStateCurrentStopping  InstanceStateCurrent = "stopping"
	InstanceStateCurrentStopped   InstanceStateCurrent = "stopped"
	InstanceStateCurrentFailed    InstanceStateCurrent = "failed"
	InstanceStateCurrentDeleting  InstanceStateCurrent = "deleting"
	InstanceStateCurrentDeleted   InstanceStateCurrent = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s InstanceStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case InstanceStateCurrentNew:
		return []byte(s), nil
	case InstanceStateCurrentStarting:
		return []byte(s), nil
	case InstanceStateCurrentReimaging:
		return []byte(s), nil
	case InstanceStateCurrentMigrating:
		return []byte(s), nil
	case InstanceStateCurrentRunning:
		return []byte(s), nil
	case InstanceStateCurrentStopping:
		return []byte(s), nil
	case InstanceStateCurrentStopped:
		return []byte(s), nil
	case InstanceStateCurrentFailed:
		return []byte(s), nil
	case InstanceStateCurrentDeleting:
		return []byte(s), nil
	case InstanceStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InstanceStateCurrent) UnmarshalText(data []byte) error {
	switch InstanceStateCurrent(data) {
	case InstanceStateCurrentNew:
		*s = InstanceStateCurrentNew
		return nil
	case InstanceStateCurrentStarting:
		*s = InstanceStateCurrentStarting
		return nil
	case InstanceStateCurrentReimaging:
		*s = InstanceStateCurrentReimaging
		return nil
	case InstanceStateCurrentMigrating:
		*s = InstanceStateCurrentMigrating
		return nil
	case InstanceStateCurrentRunning:
		*s = InstanceStateCurrentRunning
		return nil
	case InstanceStateCurrentStopping:
		*s = InstanceStateCurrentStopping
		return nil
	case InstanceStateCurrentStopped:
		*s = InstanceStateCurrentStopped
		return nil
	case InstanceStateCurrentFailed:
		*s = InstanceStateCurrentFailed
		return nil
	case InstanceStateCurrentDeleting:
		*s = InstanceStateCurrentDeleting
		return nil
	case InstanceStateCurrentDeleted:
		*s = InstanceStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type InstanceStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *InstanceStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *InstanceStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *InstanceStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *InstanceStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Information about the health of the instance.
type InstanceStateHealth struct {
	// A boolean where true represents the instance being healthy.
	Healthy bool `json:"healthy"`
	// A timestamp of the last time the instance health was updated.
	Updated DateTime `json:"updated"`
}

// GetHealthy returns the value of Healthy.
func (s *InstanceStateHealth) GetHealthy() bool {
	return s.Healthy
}

// GetUpdated returns the value of Updated.
func (s *InstanceStateHealth) GetUpdated() DateTime {
	return s.Updated
}

// SetHealthy sets the value of Healthy.
func (s *InstanceStateHealth) SetHealthy(val bool) {
	s.Healthy = val
}

// SetUpdated sets the value of Updated.
func (s *InstanceStateHealth) SetUpdated(val DateTime) {
	s.Updated = val
}

// Additional information about the instance relating to its setting as being stateful.
type InstanceStateful struct {
	ID ID `json:"id"`
	// The base hostname for the given instance.
	BaseHostname string `json:"base_hostname"`
}

// GetID returns the value of ID.
func (s *InstanceStateful) GetID() ID {
	return s.ID
}

// GetBaseHostname returns the value of BaseHostname.
func (s *InstanceStateful) GetBaseHostname() string {
	return s.BaseHostname
}

// SetID sets the value of ID.
func (s *InstanceStateful) SetID(val ID) {
	s.ID = val
}

// SetBaseHostname sets the value of BaseHostname.
func (s *InstanceStateful) SetBaseHostname(val string) {
	s.BaseHostname = val
}

// A point-in-time snapshot of a count of instances by state.
// Ref: #/components/schemas/InstanceTelemetryPoint
type InstanceTelemetryPoint struct {
	// A timestamp for when the data was collected.
	Time DateTime `json:"time"`
	// Records for instance state and number of instances in that state.
	Instances InstanceTelemetryPointInstances `json:"instances"`
}

// GetTime returns the value of Time.
func (s *InstanceTelemetryPoint) GetTime() DateTime {
	return s.Time
}

// GetInstances returns the value of Instances.
func (s *InstanceTelemetryPoint) GetInstances() InstanceTelemetryPointInstances {
	return s.Instances
}

// SetTime sets the value of Time.
func (s *InstanceTelemetryPoint) SetTime(val DateTime) {
	s.Time = val
}

// SetInstances sets the value of Instances.
func (s *InstanceTelemetryPoint) SetInstances(val InstanceTelemetryPointInstances) {
	s.Instances = val
}

// Records for instance state and number of instances in that state.
type InstanceTelemetryPointInstances map[string]int

func (s *InstanceTelemetryPointInstances) init() InstanceTelemetryPointInstances {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

// An instance telemetry report.
// Ref: #/components/schemas/InstanceTelemetryReport
type InstanceTelemetryReport struct {
	Request TelemetryReportRequest `json:"request"`
	// An array of telemetry snapshots.
	Snapshots []ResourceSnapshot `json:"snapshots"`
}

// GetRequest returns the value of Request.
func (s *InstanceTelemetryReport) GetRequest() TelemetryReportRequest {
	return s.Request
}

// GetSnapshots returns the value of Snapshots.
func (s *InstanceTelemetryReport) GetSnapshots() []ResourceSnapshot {
	return s.Snapshots
}

// SetRequest sets the value of Request.
func (s *InstanceTelemetryReport) SetRequest(val TelemetryReportRequest) {
	s.Request = val
}

// SetSnapshots sets the value of Snapshots.
func (s *InstanceTelemetryReport) SetSnapshots(val []ResourceSnapshot) {
	s.Snapshots = val
}

// A container instance volume resource.
// Ref: #/components/schemas/InstanceVolume
type InstanceVolume struct {
	ID       ID             `json:"id"`
	Config   Volumes        `json:"config"`
	Deployed DeployedVolume `json:"deployed"`
	Sftp     SFTP           `json:"sftp"`
}

// GetID returns the value of ID.
func (s *InstanceVolume) GetID() ID {
	return s.ID
}

// GetConfig returns the value of Config.
func (s *InstanceVolume) GetConfig() Volumes {
	return s.Config
}

// GetDeployed returns the value of Deployed.
func (s *InstanceVolume) GetDeployed() DeployedVolume {
	return s.Deployed
}

// GetSftp returns the value of Sftp.
func (s *InstanceVolume) GetSftp() SFTP {
	return s.Sftp
}

// SetID sets the value of ID.
func (s *InstanceVolume) SetID(val ID) {
	s.ID = val
}

// SetConfig sets the value of Config.
func (s *InstanceVolume) SetConfig(val Volumes) {
	s.Config = val
}

// SetDeployed sets the value of Deployed.
func (s *InstanceVolume) SetDeployed(val DeployedVolume) {
	s.Deployed = val
}

// SetSftp sets the value of Sftp.
func (s *InstanceVolume) SetSftp(val SFTP) {
	s.Sftp = val
}

// Information about a provider and how it integrates with the platform.
// Ref: #/components/schemas/Integration
type Integration struct {
	Native      OptNativeIntegration      `json:"native"`
	Abstraction OptAbstractionIntegration `json:"abstraction"`
}

// GetNative returns the value of Native.
func (s *Integration) GetNative() OptNativeIntegration {
	return s.Native
}

// GetAbstraction returns the value of Abstraction.
func (s *Integration) GetAbstraction() OptAbstractionIntegration {
	return s.Abstraction
}

// SetNative sets the value of Native.
func (s *Integration) SetNative(val OptNativeIntegration) {
	s.Native = val
}

// SetAbstraction sets the value of Abstraction.
func (s *Integration) SetAbstraction(val OptAbstractionIntegration) {
	s.Abstraction = val
}

// Information about a hub membership invitation.
// Ref: #/components/schemas/Invitation
type Invitation struct {
	// Information about the origin account of the invitation.
	Sender InvitationSender `json:"sender"`
	// The email address for the invitations recipient.
	Recipient string `json:"recipient"`
	// A collection of timestamps for each event in the invitation's lifetime.
	Events InvitationEvents `json:"events"`
}

// GetSender returns the value of Sender.
func (s *Invitation) GetSender() InvitationSender {
	return s.Sender
}

// GetRecipient returns the value of Recipient.
func (s *Invitation) GetRecipient() string {
	return s.Recipient
}

// GetEvents returns the value of Events.
func (s *Invitation) GetEvents() InvitationEvents {
	return s.Events
}

// SetSender sets the value of Sender.
func (s *Invitation) SetSender(val InvitationSender) {
	s.Sender = val
}

// SetRecipient sets the value of Recipient.
func (s *Invitation) SetRecipient(val string) {
	s.Recipient = val
}

// SetEvents sets the value of Events.
func (s *Invitation) SetEvents(val InvitationEvents) {
	s.Events = val
}

// A collection of timestamps for each event in the invitation's lifetime.
type InvitationEvents struct {
	// The timestamp of when the invitation was created.
	Created DateTime `json:"created"`
	// The timestamp of when the invitation was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the invitation was deleted.
	Deleted DateTime `json:"deleted"`
	// The timestamp of when the invitation was accepted.
	Accepted DateTime `json:"accepted"`
	// The timestamp of when the invitation was declined.
	Declined DateTime `json:"declined"`
	// The timestamp of when the invitation was revoked.
	Revoked DateTime `json:"revoked"`
}

// GetCreated returns the value of Created.
func (s *InvitationEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *InvitationEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *InvitationEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetAccepted returns the value of Accepted.
func (s *InvitationEvents) GetAccepted() DateTime {
	return s.Accepted
}

// GetDeclined returns the value of Declined.
func (s *InvitationEvents) GetDeclined() DateTime {
	return s.Declined
}

// GetRevoked returns the value of Revoked.
func (s *InvitationEvents) GetRevoked() DateTime {
	return s.Revoked
}

// SetCreated sets the value of Created.
func (s *InvitationEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *InvitationEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *InvitationEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetAccepted sets the value of Accepted.
func (s *InvitationEvents) SetAccepted(val DateTime) {
	s.Accepted = val
}

// SetDeclined sets the value of Declined.
func (s *InvitationEvents) SetDeclined(val DateTime) {
	s.Declined = val
}

// SetRevoked sets the value of Revoked.
func (s *InvitationEvents) SetRevoked(val DateTime) {
	s.Revoked = val
}

// Information about the origin account of the invitation.
type InvitationSender struct {
	ID ID `json:"id"`
	// The account type.
	Type string `json:"type"`
}

// GetID returns the value of ID.
func (s *InvitationSender) GetID() ID {
	return s.ID
}

// GetType returns the value of Type.
func (s *InvitationSender) GetType() string {
	return s.Type
}

// SetID sets the value of ID.
func (s *InvitationSender) SetID(val ID) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *InvitationSender) SetType(val string) {
	s.Type = val
}

// Information about a billing invoice.
// Ref: #/components/schemas/Invoice
type Invoice struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// A boolean where true represents the invoice is approved for collection.
	Approved bool             `json:"approved"`
	Services []BillingSummary `json:"services"`
	Payments []Payment        `json:"payments"`
	Credits  []InvoiceCredit  `json:"credits"`
	LateFees LateFee          `json:"late_fees"`
	// The amount in charges generated through the licesnse agreement + overages for the billing period
	// covered by the invoice.
	Charges int `json:"charges"`
	// A timestamp of when the invoice is due to be paid.
	Due DateTime `json:"due"`
	// A timestamp of when the invoice is overdue.
	Overdue DateTime `json:"overdue"`
	// A collection of timestamps for each event in the billing order's lifetime.
	Events InvoiceEvents  `json:"events"`
	State  InvoiceState   `json:"state"`
	Meta   OptInvoiceMeta `json:"meta"`
}

// GetID returns the value of ID.
func (s *Invoice) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *Invoice) GetHubID() HubID {
	return s.HubID
}

// GetApproved returns the value of Approved.
func (s *Invoice) GetApproved() bool {
	return s.Approved
}

// GetServices returns the value of Services.
func (s *Invoice) GetServices() []BillingSummary {
	return s.Services
}

// GetPayments returns the value of Payments.
func (s *Invoice) GetPayments() []Payment {
	return s.Payments
}

// GetCredits returns the value of Credits.
func (s *Invoice) GetCredits() []InvoiceCredit {
	return s.Credits
}

// GetLateFees returns the value of LateFees.
func (s *Invoice) GetLateFees() LateFee {
	return s.LateFees
}

// GetCharges returns the value of Charges.
func (s *Invoice) GetCharges() int {
	return s.Charges
}

// GetDue returns the value of Due.
func (s *Invoice) GetDue() DateTime {
	return s.Due
}

// GetOverdue returns the value of Overdue.
func (s *Invoice) GetOverdue() DateTime {
	return s.Overdue
}

// GetEvents returns the value of Events.
func (s *Invoice) GetEvents() InvoiceEvents {
	return s.Events
}

// GetState returns the value of State.
func (s *Invoice) GetState() InvoiceState {
	return s.State
}

// GetMeta returns the value of Meta.
func (s *Invoice) GetMeta() OptInvoiceMeta {
	return s.Meta
}

// SetID sets the value of ID.
func (s *Invoice) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *Invoice) SetHubID(val HubID) {
	s.HubID = val
}

// SetApproved sets the value of Approved.
func (s *Invoice) SetApproved(val bool) {
	s.Approved = val
}

// SetServices sets the value of Services.
func (s *Invoice) SetServices(val []BillingSummary) {
	s.Services = val
}

// SetPayments sets the value of Payments.
func (s *Invoice) SetPayments(val []Payment) {
	s.Payments = val
}

// SetCredits sets the value of Credits.
func (s *Invoice) SetCredits(val []InvoiceCredit) {
	s.Credits = val
}

// SetLateFees sets the value of LateFees.
func (s *Invoice) SetLateFees(val LateFee) {
	s.LateFees = val
}

// SetCharges sets the value of Charges.
func (s *Invoice) SetCharges(val int) {
	s.Charges = val
}

// SetDue sets the value of Due.
func (s *Invoice) SetDue(val DateTime) {
	s.Due = val
}

// SetOverdue sets the value of Overdue.
func (s *Invoice) SetOverdue(val DateTime) {
	s.Overdue = val
}

// SetEvents sets the value of Events.
func (s *Invoice) SetEvents(val InvoiceEvents) {
	s.Events = val
}

// SetState sets the value of State.
func (s *Invoice) SetState(val InvoiceState) {
	s.State = val
}

// SetMeta sets the value of Meta.
func (s *Invoice) SetMeta(val OptInvoiceMeta) {
	s.Meta = val
}

// A billing credit for a specific invoice.
// Ref: #/components/schemas/InvoiceCredit
type InvoiceCredit struct {
	ID ID `json:"id"`
	// Credit associated with an invoice.
	AssociatedCredit InvoiceCreditAssociatedCredit `json:"associated_credit"`
	// A timestamp for when the invoice credit was created.
	Time DateTime `json:"time"`
	// A description of the invoice credit.
	Description string `json:"description"`
	// The amount of credit for the invoice.
	Amount int `json:"amount"`
}

// GetID returns the value of ID.
func (s *InvoiceCredit) GetID() ID {
	return s.ID
}

// GetAssociatedCredit returns the value of AssociatedCredit.
func (s *InvoiceCredit) GetAssociatedCredit() InvoiceCreditAssociatedCredit {
	return s.AssociatedCredit
}

// GetTime returns the value of Time.
func (s *InvoiceCredit) GetTime() DateTime {
	return s.Time
}

// GetDescription returns the value of Description.
func (s *InvoiceCredit) GetDescription() string {
	return s.Description
}

// GetAmount returns the value of Amount.
func (s *InvoiceCredit) GetAmount() int {
	return s.Amount
}

// SetID sets the value of ID.
func (s *InvoiceCredit) SetID(val ID) {
	s.ID = val
}

// SetAssociatedCredit sets the value of AssociatedCredit.
func (s *InvoiceCredit) SetAssociatedCredit(val InvoiceCreditAssociatedCredit) {
	s.AssociatedCredit = val
}

// SetTime sets the value of Time.
func (s *InvoiceCredit) SetTime(val DateTime) {
	s.Time = val
}

// SetDescription sets the value of Description.
func (s *InvoiceCredit) SetDescription(val string) {
	s.Description = val
}

// SetAmount sets the value of Amount.
func (s *InvoiceCredit) SetAmount(val int) {
	s.Amount = val
}

// Credit associated with an invoice.
type InvoiceCreditAssociatedCredit struct {
	ID ID `json:"id"`
	// The amount of the credit.
	Amount int `json:"amount"`
}

// GetID returns the value of ID.
func (s *InvoiceCreditAssociatedCredit) GetID() ID {
	return s.ID
}

// GetAmount returns the value of Amount.
func (s *InvoiceCreditAssociatedCredit) GetAmount() int {
	return s.Amount
}

// SetID sets the value of ID.
func (s *InvoiceCreditAssociatedCredit) SetID(val ID) {
	s.ID = val
}

// SetAmount sets the value of Amount.
func (s *InvoiceCreditAssociatedCredit) SetAmount(val int) {
	s.Amount = val
}

// A collection of timestamps for each event in the billing order's lifetime.
type InvoiceEvents struct {
	// The timestamp of when the billing order was created.
	Created DateTime `json:"created"`
	// The timestamp of when the billing order was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the billing order was deleted.
	Deleted DateTime `json:"deleted"`
	// The timestamp of when the billing order billed.
	Billed DateTime `json:"billed"`
	// The timestamp of when the billing order paid.
	Paid DateTime `json:"paid"`
	// The timestamp of when the billing order payment was attempted.
	PaymentAttempt OptDateTime `json:"payment_attempt"`
	// The timestamp of when the billing order credited.
	Credited DateTime `json:"credited"`
	// The timestamp of when the billing order voided.
	Voided DateTime `json:"voided"`
}

// GetCreated returns the value of Created.
func (s *InvoiceEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *InvoiceEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *InvoiceEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetBilled returns the value of Billed.
func (s *InvoiceEvents) GetBilled() DateTime {
	return s.Billed
}

// GetPaid returns the value of Paid.
func (s *InvoiceEvents) GetPaid() DateTime {
	return s.Paid
}

// GetPaymentAttempt returns the value of PaymentAttempt.
func (s *InvoiceEvents) GetPaymentAttempt() OptDateTime {
	return s.PaymentAttempt
}

// GetCredited returns the value of Credited.
func (s *InvoiceEvents) GetCredited() DateTime {
	return s.Credited
}

// GetVoided returns the value of Voided.
func (s *InvoiceEvents) GetVoided() DateTime {
	return s.Voided
}

// SetCreated sets the value of Created.
func (s *InvoiceEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *InvoiceEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *InvoiceEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetBilled sets the value of Billed.
func (s *InvoiceEvents) SetBilled(val DateTime) {
	s.Billed = val
}

// SetPaid sets the value of Paid.
func (s *InvoiceEvents) SetPaid(val DateTime) {
	s.Paid = val
}

// SetPaymentAttempt sets the value of PaymentAttempt.
func (s *InvoiceEvents) SetPaymentAttempt(val OptDateTime) {
	s.PaymentAttempt = val
}

// SetCredited sets the value of Credited.
func (s *InvoiceEvents) SetCredited(val DateTime) {
	s.Credited = val
}

// SetVoided sets the value of Voided.
func (s *InvoiceEvents) SetVoided(val DateTime) {
	s.Voided = val
}

// A list of meta fields that can be applied to a invoice.
// Ref: #/components/schemas/InvoiceMeta
type InvoiceMeta struct {
	// The amount due for a given invoice.
	Due OptInt `json:"due"`
}

// GetDue returns the value of Due.
func (s *InvoiceMeta) GetDue() OptInt {
	return s.Due
}

// SetDue sets the value of Due.
func (s *InvoiceMeta) SetDue(val OptInt) {
	s.Due = val
}

// Merged schema.
// Ref: #/components/schemas/InvoiceState
type InvoiceState struct {
	// The current state of the container.
	Current InvoiceStateCurrent `json:"current"`
	Changed DateTime            `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptInvoiceStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *InvoiceState) GetCurrent() InvoiceStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *InvoiceState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *InvoiceState) GetError() OptInvoiceStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *InvoiceState) SetCurrent(val InvoiceStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *InvoiceState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *InvoiceState) SetError(val OptInvoiceStateError) {
	s.Error = val
}

// The current state of the container.
type InvoiceStateCurrent string

const (
	InvoiceStateCurrentNew           InvoiceStateCurrent = "new"
	InvoiceStateCurrentBilling       InvoiceStateCurrent = "billing"
	InvoiceStateCurrentBilled        InvoiceStateCurrent = "billed"
	InvoiceStateCurrentProcessing    InvoiceStateCurrent = "processing"
	InvoiceStateCurrentPartiallyPaid InvoiceStateCurrent = "partially-paid"
	InvoiceStateCurrentPaid          InvoiceStateCurrent = "paid"
	InvoiceStateCurrentRefunding     InvoiceStateCurrent = "refunding"
	InvoiceStateCurrentRefunded      InvoiceStateCurrent = "refunded"
	InvoiceStateCurrentCrediting     InvoiceStateCurrent = "crediting"
	InvoiceStateCurrentCredited      InvoiceStateCurrent = "credited"
	InvoiceStateCurrentVoiding       InvoiceStateCurrent = "voiding"
	InvoiceStateCurrentVoided        InvoiceStateCurrent = "voided"
	InvoiceStateCurrentUncollectible InvoiceStateCurrent = "uncollectible"
)

// MarshalText implements encoding.TextMarshaler.
func (s InvoiceStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case InvoiceStateCurrentNew:
		return []byte(s), nil
	case InvoiceStateCurrentBilling:
		return []byte(s), nil
	case InvoiceStateCurrentBilled:
		return []byte(s), nil
	case InvoiceStateCurrentProcessing:
		return []byte(s), nil
	case InvoiceStateCurrentPartiallyPaid:
		return []byte(s), nil
	case InvoiceStateCurrentPaid:
		return []byte(s), nil
	case InvoiceStateCurrentRefunding:
		return []byte(s), nil
	case InvoiceStateCurrentRefunded:
		return []byte(s), nil
	case InvoiceStateCurrentCrediting:
		return []byte(s), nil
	case InvoiceStateCurrentCredited:
		return []byte(s), nil
	case InvoiceStateCurrentVoiding:
		return []byte(s), nil
	case InvoiceStateCurrentVoided:
		return []byte(s), nil
	case InvoiceStateCurrentUncollectible:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InvoiceStateCurrent) UnmarshalText(data []byte) error {
	switch InvoiceStateCurrent(data) {
	case InvoiceStateCurrentNew:
		*s = InvoiceStateCurrentNew
		return nil
	case InvoiceStateCurrentBilling:
		*s = InvoiceStateCurrentBilling
		return nil
	case InvoiceStateCurrentBilled:
		*s = InvoiceStateCurrentBilled
		return nil
	case InvoiceStateCurrentProcessing:
		*s = InvoiceStateCurrentProcessing
		return nil
	case InvoiceStateCurrentPartiallyPaid:
		*s = InvoiceStateCurrentPartiallyPaid
		return nil
	case InvoiceStateCurrentPaid:
		*s = InvoiceStateCurrentPaid
		return nil
	case InvoiceStateCurrentRefunding:
		*s = InvoiceStateCurrentRefunding
		return nil
	case InvoiceStateCurrentRefunded:
		*s = InvoiceStateCurrentRefunded
		return nil
	case InvoiceStateCurrentCrediting:
		*s = InvoiceStateCurrentCrediting
		return nil
	case InvoiceStateCurrentCredited:
		*s = InvoiceStateCurrentCredited
		return nil
	case InvoiceStateCurrentVoiding:
		*s = InvoiceStateCurrentVoiding
		return nil
	case InvoiceStateCurrentVoided:
		*s = InvoiceStateCurrentVoided
		return nil
	case InvoiceStateCurrentUncollectible:
		*s = InvoiceStateCurrentUncollectible
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type InvoiceStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *InvoiceStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *InvoiceStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *InvoiceStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *InvoiceStateError) SetTime(val OptDateTime) {
	s.Time = val
}

type IpState jx.Raw

// A job resource.
// Ref: #/components/schemas/Job
type Job struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// A dash separated string showing the environment_id where the job is taking place.
	Queue string `json:"queue"`
	// A short description of the job.
	Caption string `json:"caption"`
	// A collection of timestamps for each event in the job's lifetime.
	Events JobEvents `json:"events"`
	// A timestamp of when the job was scheduled.
	Schedule DateTime `json:"schedule"`
	// An array of job tasks.
	Tasks []JobTasks `json:"tasks"`
	// A timestamp for when the job expires.
	Expires DateTime `json:"expires"`
	// A combination of the individual task details and job details.
	Hash string `json:"hash"`
	// A boolean where true represents the job is set to prevent duplicates of itself quickly after
	// creation.
	LimitDuplicates bool         `json:"limit_duplicates"`
	Creator         CreatorScope `json:"creator"`
	State           JobState     `json:"state"`
}

// GetID returns the value of ID.
func (s *Job) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *Job) GetHubID() HubID {
	return s.HubID
}

// GetQueue returns the value of Queue.
func (s *Job) GetQueue() string {
	return s.Queue
}

// GetCaption returns the value of Caption.
func (s *Job) GetCaption() string {
	return s.Caption
}

// GetEvents returns the value of Events.
func (s *Job) GetEvents() JobEvents {
	return s.Events
}

// GetSchedule returns the value of Schedule.
func (s *Job) GetSchedule() DateTime {
	return s.Schedule
}

// GetTasks returns the value of Tasks.
func (s *Job) GetTasks() []JobTasks {
	return s.Tasks
}

// GetExpires returns the value of Expires.
func (s *Job) GetExpires() DateTime {
	return s.Expires
}

// GetHash returns the value of Hash.
func (s *Job) GetHash() string {
	return s.Hash
}

// GetLimitDuplicates returns the value of LimitDuplicates.
func (s *Job) GetLimitDuplicates() bool {
	return s.LimitDuplicates
}

// GetCreator returns the value of Creator.
func (s *Job) GetCreator() CreatorScope {
	return s.Creator
}

// GetState returns the value of State.
func (s *Job) GetState() JobState {
	return s.State
}

// SetID sets the value of ID.
func (s *Job) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *Job) SetHubID(val HubID) {
	s.HubID = val
}

// SetQueue sets the value of Queue.
func (s *Job) SetQueue(val string) {
	s.Queue = val
}

// SetCaption sets the value of Caption.
func (s *Job) SetCaption(val string) {
	s.Caption = val
}

// SetEvents sets the value of Events.
func (s *Job) SetEvents(val JobEvents) {
	s.Events = val
}

// SetSchedule sets the value of Schedule.
func (s *Job) SetSchedule(val DateTime) {
	s.Schedule = val
}

// SetTasks sets the value of Tasks.
func (s *Job) SetTasks(val []JobTasks) {
	s.Tasks = val
}

// SetExpires sets the value of Expires.
func (s *Job) SetExpires(val DateTime) {
	s.Expires = val
}

// SetHash sets the value of Hash.
func (s *Job) SetHash(val string) {
	s.Hash = val
}

// SetLimitDuplicates sets the value of LimitDuplicates.
func (s *Job) SetLimitDuplicates(val bool) {
	s.LimitDuplicates = val
}

// SetCreator sets the value of Creator.
func (s *Job) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetState sets the value of State.
func (s *Job) SetState(val JobState) {
	s.State = val
}

// A collection of timestamps for each event in the job's lifetime.
type JobEvents struct {
	// The timestamp of when the job was queued.
	Queued DateTime `json:"queued"`
	// The timestamp of when the job was completed.
	Completed DateTime `json:"completed"`
	// The timestamp of when the job was started.
	Started DateTime `json:"started"`
}

// GetQueued returns the value of Queued.
func (s *JobEvents) GetQueued() DateTime {
	return s.Queued
}

// GetCompleted returns the value of Completed.
func (s *JobEvents) GetCompleted() DateTime {
	return s.Completed
}

// GetStarted returns the value of Started.
func (s *JobEvents) GetStarted() DateTime {
	return s.Started
}

// SetQueued sets the value of Queued.
func (s *JobEvents) SetQueued(val DateTime) {
	s.Queued = val
}

// SetCompleted sets the value of Completed.
func (s *JobEvents) SetCompleted(val DateTime) {
	s.Completed = val
}

// SetStarted sets the value of Started.
func (s *JobEvents) SetStarted(val DateTime) {
	s.Started = val
}

// Ref: #/components/schemas/JobIncludes
type JobIncludes struct {
	Creators OptCreatorInclude `json:"creators"`
}

// GetCreators returns the value of Creators.
func (s *JobIncludes) GetCreators() OptCreatorInclude {
	return s.Creators
}

// SetCreators sets the value of Creators.
func (s *JobIncludes) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

// Merged schema.
// Ref: #/components/schemas/JobState
type JobState struct {
	// The current state of the job.
	Current JobStateCurrent `json:"current"`
	Changed DateTime        `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptJobStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *JobState) GetCurrent() JobStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *JobState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *JobState) GetError() OptJobStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *JobState) SetCurrent(val JobStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *JobState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *JobState) SetError(val OptJobStateError) {
	s.Error = val
}

// The current state of the job.
type JobStateCurrent string

const (
	JobStateCurrentNew       JobStateCurrent = "new"
	JobStateCurrentQueued    JobStateCurrent = "queued"
	JobStateCurrentError     JobStateCurrent = "error"
	JobStateCurrentScheduled JobStateCurrent = "scheduled"
	JobStateCurrentExpired   JobStateCurrent = "expired"
	JobStateCurrentRunning   JobStateCurrent = "running"
	JobStateCurrentCompleted JobStateCurrent = "completed"
)

// MarshalText implements encoding.TextMarshaler.
func (s JobStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case JobStateCurrentNew:
		return []byte(s), nil
	case JobStateCurrentQueued:
		return []byte(s), nil
	case JobStateCurrentError:
		return []byte(s), nil
	case JobStateCurrentScheduled:
		return []byte(s), nil
	case JobStateCurrentExpired:
		return []byte(s), nil
	case JobStateCurrentRunning:
		return []byte(s), nil
	case JobStateCurrentCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *JobStateCurrent) UnmarshalText(data []byte) error {
	switch JobStateCurrent(data) {
	case JobStateCurrentNew:
		*s = JobStateCurrentNew
		return nil
	case JobStateCurrentQueued:
		*s = JobStateCurrentQueued
		return nil
	case JobStateCurrentError:
		*s = JobStateCurrentError
		return nil
	case JobStateCurrentScheduled:
		*s = JobStateCurrentScheduled
		return nil
	case JobStateCurrentExpired:
		*s = JobStateCurrentExpired
		return nil
	case JobStateCurrentRunning:
		*s = JobStateCurrentRunning
		return nil
	case JobStateCurrentCompleted:
		*s = JobStateCurrentCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type JobStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *JobStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *JobStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *JobStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *JobStateError) SetTime(val OptDateTime) {
	s.Time = val
}

type JobTasks jx.Raw

// A late fee, applied to an invoice.
// Ref: #/components/schemas/LateFee
type LateFee struct {
	ID ID `json:"id"`
	// A timestamp of when the late fee was created.
	Time DateTime `json:"time"`
	// A description of the late fee.
	Description string `json:"description"`
	// 1/10th of a cent.
	Amount int `json:"amount"`
}

// GetID returns the value of ID.
func (s *LateFee) GetID() ID {
	return s.ID
}

// GetTime returns the value of Time.
func (s *LateFee) GetTime() DateTime {
	return s.Time
}

// GetDescription returns the value of Description.
func (s *LateFee) GetDescription() string {
	return s.Description
}

// GetAmount returns the value of Amount.
func (s *LateFee) GetAmount() int {
	return s.Amount
}

// SetID sets the value of ID.
func (s *LateFee) SetID(val ID) {
	s.ID = val
}

// SetTime sets the value of Time.
func (s *LateFee) SetTime(val DateTime) {
	s.Time = val
}

// SetDescription sets the value of Description.
func (s *LateFee) SetDescription(val string) {
	s.Description = val
}

// SetAmount sets the value of Amount.
func (s *LateFee) SetAmount(val int) {
	s.Amount = val
}

// Legacy network information for an environment.
// Ref: #/components/schemas/LegacyNetwork
type LegacyNetwork struct {
	// The IPv4 subnet Id.
	Subnet int   `json:"subnet"`
	Ipv4   IPNet `json:"ipv4"`
}

// GetSubnet returns the value of Subnet.
func (s *LegacyNetwork) GetSubnet() int {
	return s.Subnet
}

// GetIpv4 returns the value of Ipv4.
func (s *LegacyNetwork) GetIpv4() IPNet {
	return s.Ipv4
}

// SetSubnet sets the value of Subnet.
func (s *LegacyNetwork) SetSubnet(val int) {
	s.Subnet = val
}

// SetIpv4 sets the value of Ipv4.
func (s *LegacyNetwork) SetIpv4(val IPNet) {
	s.Ipv4 = val
}

// Information about the environments loadbalancer service(s).
// Ref: #/components/schemas/LoadBalancerEnvironmentService
type LoadBalancerEnvironmentService struct {
	// Whether or not the loadbalancer service is enabled.
	Enable bool `json:"enable"`
	// The ID of the loadbalancer service container.
	ContainerID string `json:"container_id"`
	// A boolean representing if this service container is set to high availability mode or not.
	HighAvailability bool `json:"high_availability"`
	// The config object for the loadbalancer service.
	Config NilLoadBalancerEnvironmentServiceConfig `json:"config"`
}

// GetEnable returns the value of Enable.
func (s *LoadBalancerEnvironmentService) GetEnable() bool {
	return s.Enable
}

// GetContainerID returns the value of ContainerID.
func (s *LoadBalancerEnvironmentService) GetContainerID() string {
	return s.ContainerID
}

// GetHighAvailability returns the value of HighAvailability.
func (s *LoadBalancerEnvironmentService) GetHighAvailability() bool {
	return s.HighAvailability
}

// GetConfig returns the value of Config.
func (s *LoadBalancerEnvironmentService) GetConfig() NilLoadBalancerEnvironmentServiceConfig {
	return s.Config
}

// SetEnable sets the value of Enable.
func (s *LoadBalancerEnvironmentService) SetEnable(val bool) {
	s.Enable = val
}

// SetContainerID sets the value of ContainerID.
func (s *LoadBalancerEnvironmentService) SetContainerID(val string) {
	s.ContainerID = val
}

// SetHighAvailability sets the value of HighAvailability.
func (s *LoadBalancerEnvironmentService) SetHighAvailability(val bool) {
	s.HighAvailability = val
}

// SetConfig sets the value of Config.
func (s *LoadBalancerEnvironmentService) SetConfig(val NilLoadBalancerEnvironmentServiceConfig) {
	s.Config = val
}

// The config object for the loadbalancer service.
type LoadBalancerEnvironmentServiceConfig struct {
	// Describes settings that are passed to HAProxy within the load balancer.
	Haproxy NilLoadBalancerEnvironmentServiceConfigHaproxy `json:"haproxy"`
	// Allow / disallow traffic to be routed via IPv4.
	Ipv4 NilBool `json:"ipv4"`
	// Allow / disallow traffic to be routed via IPv6.
	Ipv6 NilBool `json:"ipv6"`
}

// GetHaproxy returns the value of Haproxy.
func (s *LoadBalancerEnvironmentServiceConfig) GetHaproxy() NilLoadBalancerEnvironmentServiceConfigHaproxy {
	return s.Haproxy
}

// GetIpv4 returns the value of Ipv4.
func (s *LoadBalancerEnvironmentServiceConfig) GetIpv4() NilBool {
	return s.Ipv4
}

// GetIpv6 returns the value of Ipv6.
func (s *LoadBalancerEnvironmentServiceConfig) GetIpv6() NilBool {
	return s.Ipv6
}

// SetHaproxy sets the value of Haproxy.
func (s *LoadBalancerEnvironmentServiceConfig) SetHaproxy(val NilLoadBalancerEnvironmentServiceConfigHaproxy) {
	s.Haproxy = val
}

// SetIpv4 sets the value of Ipv4.
func (s *LoadBalancerEnvironmentServiceConfig) SetIpv4(val NilBool) {
	s.Ipv4 = val
}

// SetIpv6 sets the value of Ipv6.
func (s *LoadBalancerEnvironmentServiceConfig) SetIpv6(val NilBool) {
	s.Ipv6 = val
}

// Describes settings that are passed to HAProxy within the load balancer.
type LoadBalancerEnvironmentServiceConfigHaproxy struct {
	Default HAProxyConfig                                    `json:"default"`
	Ports   LoadBalancerEnvironmentServiceConfigHaproxyPorts `json:"ports"`
}

// GetDefault returns the value of Default.
func (s *LoadBalancerEnvironmentServiceConfigHaproxy) GetDefault() HAProxyConfig {
	return s.Default
}

// GetPorts returns the value of Ports.
func (s *LoadBalancerEnvironmentServiceConfigHaproxy) GetPorts() LoadBalancerEnvironmentServiceConfigHaproxyPorts {
	return s.Ports
}

// SetDefault sets the value of Default.
func (s *LoadBalancerEnvironmentServiceConfigHaproxy) SetDefault(val HAProxyConfig) {
	s.Default = val
}

// SetPorts sets the value of Ports.
func (s *LoadBalancerEnvironmentServiceConfigHaproxy) SetPorts(val LoadBalancerEnvironmentServiceConfigHaproxyPorts) {
	s.Ports = val
}

type LoadBalancerEnvironmentServiceConfigHaproxyPorts map[string]HAProxyConfig

func (s *LoadBalancerEnvironmentServiceConfigHaproxyPorts) init() LoadBalancerEnvironmentServiceConfigHaproxyPorts {
	m := *s
	if m == nil {
		m = map[string]HAProxyConfig{}
		*s = m
	}
	return m
}

// Information about an environments load balancer configuration, state, and availability settings.
// Ref: #/components/schemas/LoadBalancerInfoReturn
type LoadBalancerInfoReturn struct {
	// The default configuration of the load balancer.
	DefaultConfig LoadBalancerInfoReturnDefaultConfig `json:"default_config"`
	// Contains information about the status of the load balancer, as well as configuration overrides.
	Service LoadBalancerInfoReturnService `json:"service"`
}

// GetDefaultConfig returns the value of DefaultConfig.
func (s *LoadBalancerInfoReturn) GetDefaultConfig() LoadBalancerInfoReturnDefaultConfig {
	return s.DefaultConfig
}

// GetService returns the value of Service.
func (s *LoadBalancerInfoReturn) GetService() LoadBalancerInfoReturnService {
	return s.Service
}

// SetDefaultConfig sets the value of DefaultConfig.
func (s *LoadBalancerInfoReturn) SetDefaultConfig(val LoadBalancerInfoReturnDefaultConfig) {
	s.DefaultConfig = val
}

// SetService sets the value of Service.
func (s *LoadBalancerInfoReturn) SetService(val LoadBalancerInfoReturnService) {
	s.Service = val
}

// The default configuration of the load balancer.
type LoadBalancerInfoReturnDefaultConfig struct {
	// Describes settings that are passed to HAProxy within the load balancer.
	Haproxy OptNilLoadBalancerInfoReturnDefaultConfigHaproxy `json:"haproxy"`
	// Allow / disallow traffic to be routed via IPv4.
	Ipv4 OptNilBool `json:"ipv4"`
	// Allow / disallow traffic to be routed via IPv6.
	Ipv6 OptNilBool `json:"ipv6"`
}

// GetHaproxy returns the value of Haproxy.
func (s *LoadBalancerInfoReturnDefaultConfig) GetHaproxy() OptNilLoadBalancerInfoReturnDefaultConfigHaproxy {
	return s.Haproxy
}

// GetIpv4 returns the value of Ipv4.
func (s *LoadBalancerInfoReturnDefaultConfig) GetIpv4() OptNilBool {
	return s.Ipv4
}

// GetIpv6 returns the value of Ipv6.
func (s *LoadBalancerInfoReturnDefaultConfig) GetIpv6() OptNilBool {
	return s.Ipv6
}

// SetHaproxy sets the value of Haproxy.
func (s *LoadBalancerInfoReturnDefaultConfig) SetHaproxy(val OptNilLoadBalancerInfoReturnDefaultConfigHaproxy) {
	s.Haproxy = val
}

// SetIpv4 sets the value of Ipv4.
func (s *LoadBalancerInfoReturnDefaultConfig) SetIpv4(val OptNilBool) {
	s.Ipv4 = val
}

// SetIpv6 sets the value of Ipv6.
func (s *LoadBalancerInfoReturnDefaultConfig) SetIpv6(val OptNilBool) {
	s.Ipv6 = val
}

// Describes settings that are passed to HAProxy within the load balancer.
type LoadBalancerInfoReturnDefaultConfigHaproxy struct {
	Default HAProxyConfig `json:"default"`
	Ports   HAProxyConfig `json:"ports"`
}

// GetDefault returns the value of Default.
func (s *LoadBalancerInfoReturnDefaultConfigHaproxy) GetDefault() HAProxyConfig {
	return s.Default
}

// GetPorts returns the value of Ports.
func (s *LoadBalancerInfoReturnDefaultConfigHaproxy) GetPorts() HAProxyConfig {
	return s.Ports
}

// SetDefault sets the value of Default.
func (s *LoadBalancerInfoReturnDefaultConfigHaproxy) SetDefault(val HAProxyConfig) {
	s.Default = val
}

// SetPorts sets the value of Ports.
func (s *LoadBalancerInfoReturnDefaultConfigHaproxy) SetPorts(val HAProxyConfig) {
	s.Ports = val
}

// Contains information about the status of the load balancer, as well as configuration overrides.
type LoadBalancerInfoReturnService struct {
	// Whether or not the loadbalancer service is enabled.
	Enable bool `json:"enable"`
	// The ID of the loadbalancer service container.
	ContainerID string `json:"container_id"`
	// A boolean representing if this service container is set to high availability mode or not.
	HighAvailability bool `json:"high_availability"`
	// Contains custom configuration overrides for the load balancer. If null, the default config will be
	// used.
	Config OptLoadBalancerInfoReturnServiceConfig `json:"config"`
}

// GetEnable returns the value of Enable.
func (s *LoadBalancerInfoReturnService) GetEnable() bool {
	return s.Enable
}

// GetContainerID returns the value of ContainerID.
func (s *LoadBalancerInfoReturnService) GetContainerID() string {
	return s.ContainerID
}

// GetHighAvailability returns the value of HighAvailability.
func (s *LoadBalancerInfoReturnService) GetHighAvailability() bool {
	return s.HighAvailability
}

// GetConfig returns the value of Config.
func (s *LoadBalancerInfoReturnService) GetConfig() OptLoadBalancerInfoReturnServiceConfig {
	return s.Config
}

// SetEnable sets the value of Enable.
func (s *LoadBalancerInfoReturnService) SetEnable(val bool) {
	s.Enable = val
}

// SetContainerID sets the value of ContainerID.
func (s *LoadBalancerInfoReturnService) SetContainerID(val string) {
	s.ContainerID = val
}

// SetHighAvailability sets the value of HighAvailability.
func (s *LoadBalancerInfoReturnService) SetHighAvailability(val bool) {
	s.HighAvailability = val
}

// SetConfig sets the value of Config.
func (s *LoadBalancerInfoReturnService) SetConfig(val OptLoadBalancerInfoReturnServiceConfig) {
	s.Config = val
}

// Contains custom configuration overrides for the load balancer. If null, the default config will be
// used.
type LoadBalancerInfoReturnServiceConfig struct {
	// Describes settings that are passed to HAProxy within the load balancer.
	Haproxy OptNilLoadBalancerInfoReturnServiceConfigHaproxy `json:"haproxy"`
	// Allow / disallow traffic to be routed via IPv4.
	Ipv4 OptNilBool `json:"ipv4"`
	// Allow / disallow traffic to be routed via IPv6.
	Ipv6 OptNilBool `json:"ipv6"`
}

// GetHaproxy returns the value of Haproxy.
func (s *LoadBalancerInfoReturnServiceConfig) GetHaproxy() OptNilLoadBalancerInfoReturnServiceConfigHaproxy {
	return s.Haproxy
}

// GetIpv4 returns the value of Ipv4.
func (s *LoadBalancerInfoReturnServiceConfig) GetIpv4() OptNilBool {
	return s.Ipv4
}

// GetIpv6 returns the value of Ipv6.
func (s *LoadBalancerInfoReturnServiceConfig) GetIpv6() OptNilBool {
	return s.Ipv6
}

// SetHaproxy sets the value of Haproxy.
func (s *LoadBalancerInfoReturnServiceConfig) SetHaproxy(val OptNilLoadBalancerInfoReturnServiceConfigHaproxy) {
	s.Haproxy = val
}

// SetIpv4 sets the value of Ipv4.
func (s *LoadBalancerInfoReturnServiceConfig) SetIpv4(val OptNilBool) {
	s.Ipv4 = val
}

// SetIpv6 sets the value of Ipv6.
func (s *LoadBalancerInfoReturnServiceConfig) SetIpv6(val OptNilBool) {
	s.Ipv6 = val
}

// Describes settings that are passed to HAProxy within the load balancer.
type LoadBalancerInfoReturnServiceConfigHaproxy struct {
	Default HAProxyConfig `json:"default"`
	Ports   HAProxyConfig `json:"ports"`
}

// GetDefault returns the value of Default.
func (s *LoadBalancerInfoReturnServiceConfigHaproxy) GetDefault() HAProxyConfig {
	return s.Default
}

// GetPorts returns the value of Ports.
func (s *LoadBalancerInfoReturnServiceConfigHaproxy) GetPorts() HAProxyConfig {
	return s.Ports
}

// SetDefault sets the value of Default.
func (s *LoadBalancerInfoReturnServiceConfigHaproxy) SetDefault(val HAProxyConfig) {
	s.Default = val
}

// SetPorts sets the value of Ports.
func (s *LoadBalancerInfoReturnServiceConfigHaproxy) SetPorts(val HAProxyConfig) {
	s.Ports = val
}

// Information about the locaiton of the provider.
// Ref: #/components/schemas/LocationProvider
type LocationProvider struct {
	// An identifier for the given provider.
	Identifier string `json:"identifier"`
	// A location name returned from the provider.
	Location string `json:"location"`
	// A location code returned from the provider.
	Code string `json:"code"`
}

// GetIdentifier returns the value of Identifier.
func (s *LocationProvider) GetIdentifier() string {
	return s.Identifier
}

// GetLocation returns the value of Location.
func (s *LocationProvider) GetLocation() string {
	return s.Location
}

// GetCode returns the value of Code.
func (s *LocationProvider) GetCode() string {
	return s.Code
}

// SetIdentifier sets the value of Identifier.
func (s *LocationProvider) SetIdentifier(val string) {
	s.Identifier = val
}

// SetLocation sets the value of Location.
func (s *LocationProvider) SetLocation(val string) {
	s.Location = val
}

// SetCode sets the value of Code.
func (s *LocationProvider) SetCode(val string) {
	s.Code = val
}

// A resource thats associated with a provider location.
// Ref: #/components/schemas/LocationsIncludes
type LocationsIncludes map[string]InfrastructureProviderLocation

func (s *LocationsIncludes) init() LocationsIncludes {
	m := *s
	if m == nil {
		m = map[string]InfrastructureProviderLocation{}
		*s = m
	}
	return m
}

// Backup logs for a given container.
// Ref: #/components/schemas/Logs
type Logs struct {
	ID ID `json:"id"`
	// An identifier for the backup.
	BackupID string `json:"backup_id"`
	HubID    HubID  `json:"hub_id"`
	// The type of the backup log.
	Type LogsType `json:"type"`
	// The log.
	Log string `json:"log"`
	// A collection of timestamps for each event in the backup log's lifetime.
	Events LogsEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *Logs) GetID() ID {
	return s.ID
}

// GetBackupID returns the value of BackupID.
func (s *Logs) GetBackupID() string {
	return s.BackupID
}

// GetHubID returns the value of HubID.
func (s *Logs) GetHubID() HubID {
	return s.HubID
}

// GetType returns the value of Type.
func (s *Logs) GetType() LogsType {
	return s.Type
}

// GetLog returns the value of Log.
func (s *Logs) GetLog() string {
	return s.Log
}

// GetEvents returns the value of Events.
func (s *Logs) GetEvents() LogsEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *Logs) SetID(val ID) {
	s.ID = val
}

// SetBackupID sets the value of BackupID.
func (s *Logs) SetBackupID(val string) {
	s.BackupID = val
}

// SetHubID sets the value of HubID.
func (s *Logs) SetHubID(val HubID) {
	s.HubID = val
}

// SetType sets the value of Type.
func (s *Logs) SetType(val LogsType) {
	s.Type = val
}

// SetLog sets the value of Log.
func (s *Logs) SetLog(val string) {
	s.Log = val
}

// SetEvents sets the value of Events.
func (s *Logs) SetEvents(val LogsEvents) {
	s.Events = val
}

// A collection of timestamps for each event in the backup log's lifetime.
type LogsEvents struct {
	// The timestamp of when the backup log was created.
	Created DateTime `json:"created"`
	// The timestamp of when the backup log was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the backup log was deleted.
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *LogsEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *LogsEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *LogsEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *LogsEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *LogsEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *LogsEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// The type of the backup log.
type LogsType string

const (
	LogsTypeRestore LogsType = "restore"
	LogsTypeBackup  LogsType = "backup"
)

// MarshalText implements encoding.TextMarshaler.
func (s LogsType) MarshalText() ([]byte, error) {
	switch s {
	case LogsTypeRestore:
		return []byte(s), nil
	case LogsTypeBackup:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *LogsType) UnmarshalText(data []byte) error {
	switch LogsType(data) {
	case LogsTypeRestore:
		*s = LogsTypeRestore
		return nil
	case LogsTypeBackup:
		*s = LogsTypeBackup
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type LookupDnsCertificateOK struct {
	Data OptDnsTlsCertificate `json:"data"`
}

// GetData returns the value of Data.
func (s *LookupDnsCertificateOK) GetData() OptDnsTlsCertificate {
	return s.Data
}

// SetData sets the value of Data.
func (s *LookupDnsCertificateOK) SetData(val OptDnsTlsCertificate) {
	s.Data = val
}

// Merged schema.
// Ref: #/components/schemas/MembershipState
type MembershipState struct {
	// The current state of the membership.
	Current MembershipStateCurrent `json:"current"`
	Changed DateTime               `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptMembershipStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *MembershipState) GetCurrent() MembershipStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *MembershipState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *MembershipState) GetError() OptMembershipStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *MembershipState) SetCurrent(val MembershipStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *MembershipState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *MembershipState) SetError(val OptMembershipStateError) {
	s.Error = val
}

// The current state of the membership.
type MembershipStateCurrent string

const (
	MembershipStateCurrentPending  MembershipStateCurrent = "pending"
	MembershipStateCurrentAccepted MembershipStateCurrent = "accepted"
	MembershipStateCurrentDeclined MembershipStateCurrent = "declined"
	MembershipStateCurrentRevoked  MembershipStateCurrent = "revoked"
	MembershipStateCurrentDeleted  MembershipStateCurrent = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s MembershipStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case MembershipStateCurrentPending:
		return []byte(s), nil
	case MembershipStateCurrentAccepted:
		return []byte(s), nil
	case MembershipStateCurrentDeclined:
		return []byte(s), nil
	case MembershipStateCurrentRevoked:
		return []byte(s), nil
	case MembershipStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MembershipStateCurrent) UnmarshalText(data []byte) error {
	switch MembershipStateCurrent(data) {
	case MembershipStateCurrentPending:
		*s = MembershipStateCurrentPending
		return nil
	case MembershipStateCurrentAccepted:
		*s = MembershipStateCurrentAccepted
		return nil
	case MembershipStateCurrentDeclined:
		*s = MembershipStateCurrentDeclined
		return nil
	case MembershipStateCurrentRevoked:
		*s = MembershipStateCurrentRevoked
		return nil
	case MembershipStateCurrentDeleted:
		*s = MembershipStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type MembershipStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *MembershipStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *MembershipStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *MembershipStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *MembershipStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Ref: #/components/schemas/MemoryData
type MemoryData struct {
	// The number in bytes of memory being used by the instance at the time of the snapshot.
	Usage OptFloat64 `json:"usage"`
	// The highest amoun tof memory usage since the last restart.
	MaxUsage OptFloat64 `json:"max_usage"`
	// The number of times the memory liimit was exceeded for the instance.
	FailCount OptFloat64 `json:"fail_count"`
	// The maximum number of bytes of memory this instance has acess to.
	Limit OptFloat64 `json:"limit"`
}

// GetUsage returns the value of Usage.
func (s *MemoryData) GetUsage() OptFloat64 {
	return s.Usage
}

// GetMaxUsage returns the value of MaxUsage.
func (s *MemoryData) GetMaxUsage() OptFloat64 {
	return s.MaxUsage
}

// GetFailCount returns the value of FailCount.
func (s *MemoryData) GetFailCount() OptFloat64 {
	return s.FailCount
}

// GetLimit returns the value of Limit.
func (s *MemoryData) GetLimit() OptFloat64 {
	return s.Limit
}

// SetUsage sets the value of Usage.
func (s *MemoryData) SetUsage(val OptFloat64) {
	s.Usage = val
}

// SetMaxUsage sets the value of MaxUsage.
func (s *MemoryData) SetMaxUsage(val OptFloat64) {
	s.MaxUsage = val
}

// SetFailCount sets the value of FailCount.
func (s *MemoryData) SetFailCount(val OptFloat64) {
	s.FailCount = val
}

// SetLimit sets the value of Limit.
func (s *MemoryData) SetLimit(val OptFloat64) {
	s.Limit = val
}

// A snapshot of memory usage statistics.
// Ref: #/components/schemas/MemorySnapshot
type MemorySnapshot struct {
	// The number of bytes of page cache memory being used by this instance.
	Cache OptFloat64 `json:"cache"`
	// The memory usage data.
	Usage OptMemoryData `json:"usage"`
	// Memory swap usage data.
	SwapUsage OptMemoryData `json:"swap_usage"`
	// Kernal memory usage.
	KernelUsage OptMemoryData `json:"kernel_usage"`
	// Kernel TCP buffer usage.
	KernelTCPUsage OptMemoryData `json:"kernel_tcp_usage"`
}

// GetCache returns the value of Cache.
func (s *MemorySnapshot) GetCache() OptFloat64 {
	return s.Cache
}

// GetUsage returns the value of Usage.
func (s *MemorySnapshot) GetUsage() OptMemoryData {
	return s.Usage
}

// GetSwapUsage returns the value of SwapUsage.
func (s *MemorySnapshot) GetSwapUsage() OptMemoryData {
	return s.SwapUsage
}

// GetKernelUsage returns the value of KernelUsage.
func (s *MemorySnapshot) GetKernelUsage() OptMemoryData {
	return s.KernelUsage
}

// GetKernelTCPUsage returns the value of KernelTCPUsage.
func (s *MemorySnapshot) GetKernelTCPUsage() OptMemoryData {
	return s.KernelTCPUsage
}

// SetCache sets the value of Cache.
func (s *MemorySnapshot) SetCache(val OptFloat64) {
	s.Cache = val
}

// SetUsage sets the value of Usage.
func (s *MemorySnapshot) SetUsage(val OptMemoryData) {
	s.Usage = val
}

// SetSwapUsage sets the value of SwapUsage.
func (s *MemorySnapshot) SetSwapUsage(val OptMemoryData) {
	s.SwapUsage = val
}

// SetKernelUsage sets the value of KernelUsage.
func (s *MemorySnapshot) SetKernelUsage(val OptMemoryData) {
	s.KernelUsage = val
}

// SetKernelTCPUsage sets the value of KernelTCPUsage.
func (s *MemorySnapshot) SetKernelTCPUsage(val OptMemoryData) {
	s.KernelTCPUsage = val
}

// Information about the memory resources of a given server.
// Ref: #/components/schemas/MemorySpec
type MemorySpec struct {
	// A number that represents the memory resources in GB.
	SizeGB int `json:"size_gb"`
	// The type of the memory resources.
	Type string `json:"type"`
	// Extra inforamtion about the memory resources.
	Extra MemorySpecExtra `json:"extra"`
}

// GetSizeGB returns the value of SizeGB.
func (s *MemorySpec) GetSizeGB() int {
	return s.SizeGB
}

// GetType returns the value of Type.
func (s *MemorySpec) GetType() string {
	return s.Type
}

// GetExtra returns the value of Extra.
func (s *MemorySpec) GetExtra() MemorySpecExtra {
	return s.Extra
}

// SetSizeGB sets the value of SizeGB.
func (s *MemorySpec) SetSizeGB(val int) {
	s.SizeGB = val
}

// SetType sets the value of Type.
func (s *MemorySpec) SetType(val string) {
	s.Type = val
}

// SetExtra sets the value of Extra.
func (s *MemorySpec) SetExtra(val MemorySpecExtra) {
	s.Extra = val
}

// Extra inforamtion about the memory resources.
type MemorySpecExtra map[string]string

func (s *MemorySpecExtra) init() MemorySpecExtra {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Information about a billing method, usable to pay invoices.
// Ref: #/components/schemas/Method
type Method struct {
	ID ID `json:"id"`
	// A name for the billing method.
	Name string `json:"name"`
	// A boolean where true represents this billing method is set to primary for a given hub.
	Primary    bool         `json:"primary"`
	Address    Address      `json:"address"`
	Creator    CreatorScope `json:"creator"`
	CreditCard CreditCard   `json:"credit_card"`
	State      MethodState  `json:"state"`
	// A collection of timestamps for each event in the credit card's lifetime.
	Events MethodEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *Method) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *Method) GetName() string {
	return s.Name
}

// GetPrimary returns the value of Primary.
func (s *Method) GetPrimary() bool {
	return s.Primary
}

// GetAddress returns the value of Address.
func (s *Method) GetAddress() Address {
	return s.Address
}

// GetCreator returns the value of Creator.
func (s *Method) GetCreator() CreatorScope {
	return s.Creator
}

// GetCreditCard returns the value of CreditCard.
func (s *Method) GetCreditCard() CreditCard {
	return s.CreditCard
}

// GetState returns the value of State.
func (s *Method) GetState() MethodState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *Method) GetEvents() MethodEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *Method) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Method) SetName(val string) {
	s.Name = val
}

// SetPrimary sets the value of Primary.
func (s *Method) SetPrimary(val bool) {
	s.Primary = val
}

// SetAddress sets the value of Address.
func (s *Method) SetAddress(val Address) {
	s.Address = val
}

// SetCreator sets the value of Creator.
func (s *Method) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetCreditCard sets the value of CreditCard.
func (s *Method) SetCreditCard(val CreditCard) {
	s.CreditCard = val
}

// SetState sets the value of State.
func (s *Method) SetState(val MethodState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *Method) SetEvents(val MethodEvents) {
	s.Events = val
}

// A collection of timestamps for each event in the credit card's lifetime.
type MethodEvents struct {
	// The timestamp of when the credit card was created.
	Created DateTime `json:"created"`
	// The timestamp of when the credit card was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the credit card was deleted.
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *MethodEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *MethodEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *MethodEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *MethodEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *MethodEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *MethodEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// Merged schema.
type MethodState struct {
	// The current state of the method.
	Current MethodStateCurrent `json:"current"`
	Changed DateTime           `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptMethodStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *MethodState) GetCurrent() MethodStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *MethodState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *MethodState) GetError() OptMethodStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *MethodState) SetCurrent(val MethodStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *MethodState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *MethodState) SetError(val OptMethodStateError) {
	s.Error = val
}

// The current state of the method.
type MethodStateCurrent string

const (
	MethodStateCurrentLive     MethodStateCurrent = "live"
	MethodStateCurrentDeleting MethodStateCurrent = "deleting"
	MethodStateCurrentDeleted  MethodStateCurrent = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s MethodStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case MethodStateCurrentLive:
		return []byte(s), nil
	case MethodStateCurrentDeleting:
		return []byte(s), nil
	case MethodStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MethodStateCurrent) UnmarshalText(data []byte) error {
	switch MethodStateCurrent(data) {
	case MethodStateCurrentLive:
		*s = MethodStateCurrentLive
		return nil
	case MethodStateCurrentDeleting:
		*s = MethodStateCurrentDeleting
		return nil
	case MethodStateCurrentDeleted:
		*s = MethodStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type MethodStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *MethodStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *MethodStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *MethodStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *MethodStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Ref: #/components/schemas/Migrate
type Migrate struct {
	// The name of the action to perform.
	Action   MigrateAction   `json:"action"`
	Contents MigrateContents `json:"contents"`
}

// GetAction returns the value of Action.
func (s *Migrate) GetAction() MigrateAction {
	return s.Action
}

// GetContents returns the value of Contents.
func (s *Migrate) GetContents() MigrateContents {
	return s.Contents
}

// SetAction sets the value of Action.
func (s *Migrate) SetAction(val MigrateAction) {
	s.Action = val
}

// SetContents sets the value of Contents.
func (s *Migrate) SetContents(val MigrateContents) {
	s.Contents = val
}

// The name of the action to perform.
type MigrateAction string

const (
	MigrateActionMigrate MigrateAction = "migrate"
)

// MarshalText implements encoding.TextMarshaler.
func (s MigrateAction) MarshalText() ([]byte, error) {
	switch s {
	case MigrateActionMigrate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MigrateAction) UnmarshalText(data []byte) error {
	switch MigrateAction(data) {
	case MigrateActionMigrate:
		*s = MigrateActionMigrate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type MigrateContents struct {
	// The ID of the server being migrated to.
	DestinationServerID string `json:"destination_server_id"`
	// Information about additonal configuration settings used when migrating a stateful instance.
	Stateful OptMigrateContentsStateful `json:"stateful"`
}

// GetDestinationServerID returns the value of DestinationServerID.
func (s *MigrateContents) GetDestinationServerID() string {
	return s.DestinationServerID
}

// GetStateful returns the value of Stateful.
func (s *MigrateContents) GetStateful() OptMigrateContentsStateful {
	return s.Stateful
}

// SetDestinationServerID sets the value of DestinationServerID.
func (s *MigrateContents) SetDestinationServerID(val string) {
	s.DestinationServerID = val
}

// SetStateful sets the value of Stateful.
func (s *MigrateContents) SetStateful(val OptMigrateContentsStateful) {
	s.Stateful = val
}

// Information about additonal configuration settings used when migrating a stateful instance.
type MigrateContentsStateful struct {
	// A boolean where true represents the desire to copy the contents of the volume for a given stateful
	// instance with the migration.
	CopyVolumes bool `json:"copy_volumes"`
}

// GetCopyVolumes returns the value of CopyVolumes.
func (s *MigrateContentsStateful) GetCopyVolumes() bool {
	return s.CopyVolumes
}

// SetCopyVolumes sets the value of CopyVolumes.
func (s *MigrateContentsStateful) SetCopyVolumes(val bool) {
	s.CopyVolumes = val
}

// Information about an instances migration.
// Ref: #/components/schemas/MigrationInstance
type MigrationInstance struct {
	// The ID of the instance.
	InstanceID string `json:"instance_id"`
	// The ID of the server in the context its represented.
	ServerID string `json:"server_id"`
}

// GetInstanceID returns the value of InstanceID.
func (s *MigrationInstance) GetInstanceID() string {
	return s.InstanceID
}

// GetServerID returns the value of ServerID.
func (s *MigrationInstance) GetServerID() string {
	return s.ServerID
}

// SetInstanceID sets the value of InstanceID.
func (s *MigrationInstance) SetInstanceID(val string) {
	s.InstanceID = val
}

// SetServerID sets the value of ServerID.
func (s *MigrationInstance) SetServerID(val string) {
	s.ServerID = val
}

// Information about a natively supported infrastructure provider.
// Ref: #/components/schemas/NativeIntegration
type NativeIntegration struct {
	Identifier NativeProviderIdentifier `json:"identifier"`
	Auth       IALAuth                  `json:"auth"`
}

// GetIdentifier returns the value of Identifier.
func (s *NativeIntegration) GetIdentifier() NativeProviderIdentifier {
	return s.Identifier
}

// GetAuth returns the value of Auth.
func (s *NativeIntegration) GetAuth() IALAuth {
	return s.Auth
}

// SetIdentifier sets the value of Identifier.
func (s *NativeIntegration) SetIdentifier(val NativeProviderIdentifier) {
	s.Identifier = val
}

// SetAuth sets the value of Auth.
func (s *NativeIntegration) SetAuth(val IALAuth) {
	s.Auth = val
}

// All relevant information about a natively supported Cycle provider.
// Ref: #/components/schemas/NativeProvider
type NativeProvider struct {
	// String describing the display name of a native provider.
	Name string `json:"name"`
	// String describing the identifier of a native provider.
	Identifier string `json:"identifier"`
	// String describing the website of a native provider for more info.
	Website OptString `json:"website"`
	// Object with required fields and regex for each field.
	RequiredFields NativeProviderRequiredFields `json:"required_fields"`
	// Record of notices related to native provider.
	Notices  NativeProviderNotices `json:"notices"`
	Features []string              `json:"features"`
}

// GetName returns the value of Name.
func (s *NativeProvider) GetName() string {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *NativeProvider) GetIdentifier() string {
	return s.Identifier
}

// GetWebsite returns the value of Website.
func (s *NativeProvider) GetWebsite() OptString {
	return s.Website
}

// GetRequiredFields returns the value of RequiredFields.
func (s *NativeProvider) GetRequiredFields() NativeProviderRequiredFields {
	return s.RequiredFields
}

// GetNotices returns the value of Notices.
func (s *NativeProvider) GetNotices() NativeProviderNotices {
	return s.Notices
}

// GetFeatures returns the value of Features.
func (s *NativeProvider) GetFeatures() []string {
	return s.Features
}

// SetName sets the value of Name.
func (s *NativeProvider) SetName(val string) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *NativeProvider) SetIdentifier(val string) {
	s.Identifier = val
}

// SetWebsite sets the value of Website.
func (s *NativeProvider) SetWebsite(val OptString) {
	s.Website = val
}

// SetRequiredFields sets the value of RequiredFields.
func (s *NativeProvider) SetRequiredFields(val NativeProviderRequiredFields) {
	s.RequiredFields = val
}

// SetNotices sets the value of Notices.
func (s *NativeProvider) SetNotices(val NativeProviderNotices) {
	s.Notices = val
}

// SetFeatures sets the value of Features.
func (s *NativeProvider) SetFeatures(val []string) {
	s.Features = val
}

// An identifier for the provider.
// Ref: #/components/schemas/NativeProviderIdentifier
type NativeProviderIdentifier string

const (
	NativeProviderIdentifierEquinixMetal NativeProviderIdentifier = "equinix-metal"
	NativeProviderIdentifierCoreweave    NativeProviderIdentifier = "coreweave"
	NativeProviderIdentifierVultr        NativeProviderIdentifier = "vultr"
	NativeProviderIdentifierHivelocity   NativeProviderIdentifier = "hivelocity"
	NativeProviderIdentifierAWS          NativeProviderIdentifier = "aws"
	NativeProviderIdentifierAzure        NativeProviderIdentifier = "azure"
	NativeProviderIdentifierGcp          NativeProviderIdentifier = "gcp"
	NativeProviderIdentifierDigitalocean NativeProviderIdentifier = "digitalocean"
)

// MarshalText implements encoding.TextMarshaler.
func (s NativeProviderIdentifier) MarshalText() ([]byte, error) {
	switch s {
	case NativeProviderIdentifierEquinixMetal:
		return []byte(s), nil
	case NativeProviderIdentifierCoreweave:
		return []byte(s), nil
	case NativeProviderIdentifierVultr:
		return []byte(s), nil
	case NativeProviderIdentifierHivelocity:
		return []byte(s), nil
	case NativeProviderIdentifierAWS:
		return []byte(s), nil
	case NativeProviderIdentifierAzure:
		return []byte(s), nil
	case NativeProviderIdentifierGcp:
		return []byte(s), nil
	case NativeProviderIdentifierDigitalocean:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NativeProviderIdentifier) UnmarshalText(data []byte) error {
	switch NativeProviderIdentifier(data) {
	case NativeProviderIdentifierEquinixMetal:
		*s = NativeProviderIdentifierEquinixMetal
		return nil
	case NativeProviderIdentifierCoreweave:
		*s = NativeProviderIdentifierCoreweave
		return nil
	case NativeProviderIdentifierVultr:
		*s = NativeProviderIdentifierVultr
		return nil
	case NativeProviderIdentifierHivelocity:
		*s = NativeProviderIdentifierHivelocity
		return nil
	case NativeProviderIdentifierAWS:
		*s = NativeProviderIdentifierAWS
		return nil
	case NativeProviderIdentifierAzure:
		*s = NativeProviderIdentifierAzure
		return nil
	case NativeProviderIdentifierGcp:
		*s = NativeProviderIdentifierGcp
		return nil
	case NativeProviderIdentifierDigitalocean:
		*s = NativeProviderIdentifierDigitalocean
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Record of notices related to native provider.
type NativeProviderNotices map[string]string

func (s *NativeProviderNotices) init() NativeProviderNotices {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Object with required fields and regex for each field.
type NativeProviderRequiredFields map[string]NativeProviderRequiredFieldsItem

func (s *NativeProviderRequiredFields) init() NativeProviderRequiredFields {
	m := *s
	if m == nil {
		m = map[string]NativeProviderRequiredFieldsItem{}
		*s = m
	}
	return m
}

// Required fields and validation.
type NativeProviderRequiredFieldsItem struct {
	// Display name of the field.
	Caption string `json:"caption"`
	// Validation regex for the field.
	Regex string `json:"regex"`
}

// GetCaption returns the value of Caption.
func (s *NativeProviderRequiredFieldsItem) GetCaption() string {
	return s.Caption
}

// GetRegex returns the value of Regex.
func (s *NativeProviderRequiredFieldsItem) GetRegex() string {
	return s.Regex
}

// SetCaption sets the value of Caption.
func (s *NativeProviderRequiredFieldsItem) SetCaption(val string) {
	s.Caption = val
}

// SetRegex sets the value of Regex.
func (s *NativeProviderRequiredFieldsItem) SetRegex(val string) {
	s.Regex = val
}

// All includable resource linkable to the given network.
// Ref: #/components/schemas/NetworkIncludes
type NetworkIncludes struct {
	Creators     OptCreatorInclude      `json:"creators"`
	Environments OptEnvironmentIncludes `json:"environments"`
}

// GetCreators returns the value of Creators.
func (s *NetworkIncludes) GetCreators() OptCreatorInclude {
	return s.Creators
}

// GetEnvironments returns the value of Environments.
func (s *NetworkIncludes) GetEnvironments() OptEnvironmentIncludes {
	return s.Environments
}

// SetCreators sets the value of Creators.
func (s *NetworkIncludes) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

// SetEnvironments sets the value of Environments.
func (s *NetworkIncludes) SetEnvironments(val OptEnvironmentIncludes) {
	s.Environments = val
}

// Information about the network resources for a given server.
// Ref: #/components/schemas/NetworkSpec
type NetworkSpec struct {
	// The number of network resources for a given server.
	Count int `json:"count"`
	// The scope of the interfaces.
	Scope NetworkSpecScope `json:"scope"`
	// The network throughput in MB(per second).
	Throughput int `json:"throughput"`
	// The type of the NIC.
	Type string `json:"type"`
}

// GetCount returns the value of Count.
func (s *NetworkSpec) GetCount() int {
	return s.Count
}

// GetScope returns the value of Scope.
func (s *NetworkSpec) GetScope() NetworkSpecScope {
	return s.Scope
}

// GetThroughput returns the value of Throughput.
func (s *NetworkSpec) GetThroughput() int {
	return s.Throughput
}

// GetType returns the value of Type.
func (s *NetworkSpec) GetType() string {
	return s.Type
}

// SetCount sets the value of Count.
func (s *NetworkSpec) SetCount(val int) {
	s.Count = val
}

// SetScope sets the value of Scope.
func (s *NetworkSpec) SetScope(val NetworkSpecScope) {
	s.Scope = val
}

// SetThroughput sets the value of Throughput.
func (s *NetworkSpec) SetThroughput(val int) {
	s.Throughput = val
}

// SetType sets the value of Type.
func (s *NetworkSpec) SetType(val string) {
	s.Type = val
}

// The scope of the interfaces.
type NetworkSpecScope string

const (
	NetworkSpecScopePublic  NetworkSpecScope = "public"
	NetworkSpecScopePrivate NetworkSpecScope = "private"
	NetworkSpecScopeShared  NetworkSpecScope = "shared"
)

// MarshalText implements encoding.TextMarshaler.
func (s NetworkSpecScope) MarshalText() ([]byte, error) {
	switch s {
	case NetworkSpecScopePublic:
		return []byte(s), nil
	case NetworkSpecScopePrivate:
		return []byte(s), nil
	case NetworkSpecScopeShared:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NetworkSpecScope) UnmarshalText(data []byte) error {
	switch NetworkSpecScope(data) {
	case NetworkSpecScopePublic:
		*s = NetworkSpecScopePublic
		return nil
	case NetworkSpecScopePrivate:
		*s = NetworkSpecScopePrivate
		return nil
	case NetworkSpecScopeShared:
		*s = NetworkSpecScopeShared
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/NetworkState
type NetworkState struct {
	// The current state of the network.
	Current NetworkStateCurrent `json:"current"`
	Changed DateTime            `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptNetworkStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *NetworkState) GetCurrent() NetworkStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *NetworkState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *NetworkState) GetError() OptNetworkStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *NetworkState) SetCurrent(val NetworkStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *NetworkState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *NetworkState) SetError(val OptNetworkStateError) {
	s.Error = val
}

// The current state of the network.
type NetworkStateCurrent string

const (
	NetworkStateCurrentLive     NetworkStateCurrent = "live"
	NetworkStateCurrentDeleting NetworkStateCurrent = "deleting"
	NetworkStateCurrentDeleted  NetworkStateCurrent = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s NetworkStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case NetworkStateCurrentLive:
		return []byte(s), nil
	case NetworkStateCurrentDeleting:
		return []byte(s), nil
	case NetworkStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NetworkStateCurrent) UnmarshalText(data []byte) error {
	switch NetworkStateCurrent(data) {
	case NetworkStateCurrentLive:
		*s = NetworkStateCurrentLive
		return nil
	case NetworkStateCurrentDeleting:
		*s = NetworkStateCurrentDeleting
		return nil
	case NetworkStateCurrentDeleted:
		*s = NetworkStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type NetworkStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *NetworkStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *NetworkStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *NetworkStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *NetworkStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// NewNilBool returns new NilBool with value set to v.
func NewNilBool(v bool) NilBool {
	return NilBool{
		Value: v,
	}
}

// NilBool is nullable bool.
type NilBool struct {
	Value bool
	Null  bool
}

// SetTo sets value to v.
func (o *NilBool) SetTo(v bool) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilBool) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilBool) SetToNull() {
	o.Null = true
	var v bool
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilBool) Get() (v bool, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCertificate returns new NilCertificate with value set to v.
func NewNilCertificate(v Certificate) NilCertificate {
	return NilCertificate{
		Value: v,
	}
}

// NilCertificate is nullable Certificate.
type NilCertificate struct {
	Value Certificate
	Null  bool
}

// SetTo sets value to v.
func (o *NilCertificate) SetTo(v Certificate) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCertificate) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCertificate) SetToNull() {
	o.Null = true
	var v Certificate
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCertificate) Get() (v Certificate, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCertificate) Or(d Certificate) Certificate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilContainerAnnotations returns new NilContainerAnnotations with value set to v.
func NewNilContainerAnnotations(v ContainerAnnotations) NilContainerAnnotations {
	return NilContainerAnnotations{
		Value: v,
	}
}

// NilContainerAnnotations is nullable ContainerAnnotations.
type NilContainerAnnotations struct {
	Value ContainerAnnotations
	Null  bool
}

// SetTo sets value to v.
func (o *NilContainerAnnotations) SetTo(v ContainerAnnotations) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilContainerAnnotations) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilContainerAnnotations) SetToNull() {
	o.Null = true
	var v ContainerAnnotations
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilContainerAnnotations) Get() (v ContainerAnnotations, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilContainerAnnotations) Or(d ContainerAnnotations) ContainerAnnotations {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilContainerImageSummaryService returns new NilContainerImageSummaryService with value set to v.
func NewNilContainerImageSummaryService(v ContainerImageSummaryService) NilContainerImageSummaryService {
	return NilContainerImageSummaryService{
		Value: v,
	}
}

// NilContainerImageSummaryService is nullable ContainerImageSummaryService.
type NilContainerImageSummaryService struct {
	Value ContainerImageSummaryService
	Null  bool
}

// SetTo sets value to v.
func (o *NilContainerImageSummaryService) SetTo(v ContainerImageSummaryService) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilContainerImageSummaryService) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilContainerImageSummaryService) SetToNull() {
	o.Null = true
	var v ContainerImageSummaryService
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilContainerImageSummaryService) Get() (v ContainerImageSummaryService, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilContainerImageSummaryService) Or(d ContainerImageSummaryService) ContainerImageSummaryService {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilContainerRuntimeSeccomp returns new NilContainerRuntimeSeccomp with value set to v.
func NewNilContainerRuntimeSeccomp(v ContainerRuntimeSeccomp) NilContainerRuntimeSeccomp {
	return NilContainerRuntimeSeccomp{
		Value: v,
	}
}

// NilContainerRuntimeSeccomp is nullable ContainerRuntimeSeccomp.
type NilContainerRuntimeSeccomp struct {
	Value ContainerRuntimeSeccomp
	Null  bool
}

// SetTo sets value to v.
func (o *NilContainerRuntimeSeccomp) SetTo(v ContainerRuntimeSeccomp) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilContainerRuntimeSeccomp) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilContainerRuntimeSeccomp) SetToNull() {
	o.Null = true
	var v ContainerRuntimeSeccomp
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilContainerRuntimeSeccomp) Get() (v ContainerRuntimeSeccomp, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilContainerRuntimeSeccomp) Or(d ContainerRuntimeSeccomp) ContainerRuntimeSeccomp {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCreateEnvironmentReqStack returns new NilCreateEnvironmentReqStack with value set to v.
func NewNilCreateEnvironmentReqStack(v CreateEnvironmentReqStack) NilCreateEnvironmentReqStack {
	return NilCreateEnvironmentReqStack{
		Value: v,
	}
}

// NilCreateEnvironmentReqStack is nullable CreateEnvironmentReqStack.
type NilCreateEnvironmentReqStack struct {
	Value CreateEnvironmentReqStack
	Null  bool
}

// SetTo sets value to v.
func (o *NilCreateEnvironmentReqStack) SetTo(v CreateEnvironmentReqStack) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCreateEnvironmentReqStack) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCreateEnvironmentReqStack) SetToNull() {
	o.Null = true
	var v CreateEnvironmentReqStack
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCreateEnvironmentReqStack) Get() (v CreateEnvironmentReqStack, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCreateEnvironmentReqStack) Or(d CreateEnvironmentReqStack) CreateEnvironmentReqStack {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCreditExpires returns new NilCreditExpires with value set to v.
func NewNilCreditExpires(v CreditExpires) NilCreditExpires {
	return NilCreditExpires{
		Value: v,
	}
}

// NilCreditExpires is nullable CreditExpires.
type NilCreditExpires struct {
	Value CreditExpires
	Null  bool
}

// SetTo sets value to v.
func (o *NilCreditExpires) SetTo(v CreditExpires) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCreditExpires) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCreditExpires) SetToNull() {
	o.Null = true
	var v CreditExpires
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCreditExpires) Get() (v CreditExpires, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCreditExpires) Or(d CreditExpires) CreditExpires {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilFloat64 returns new NilFloat64 with value set to v.
func NewNilFloat64(v float64) NilFloat64 {
	return NilFloat64{
		Value: v,
	}
}

// NilFloat64 is nullable float64.
type NilFloat64 struct {
	Value float64
	Null  bool
}

// SetTo sets value to v.
func (o *NilFloat64) SetTo(v float64) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilFloat64) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilFloat64) SetToNull() {
	o.Null = true
	var v float64
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilFloat64) Get() (v float64, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilHAProxyConfigBackend returns new NilHAProxyConfigBackend with value set to v.
func NewNilHAProxyConfigBackend(v HAProxyConfigBackend) NilHAProxyConfigBackend {
	return NilHAProxyConfigBackend{
		Value: v,
	}
}

// NilHAProxyConfigBackend is nullable HAProxyConfigBackend.
type NilHAProxyConfigBackend struct {
	Value HAProxyConfigBackend
	Null  bool
}

// SetTo sets value to v.
func (o *NilHAProxyConfigBackend) SetTo(v HAProxyConfigBackend) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilHAProxyConfigBackend) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilHAProxyConfigBackend) SetToNull() {
	o.Null = true
	var v HAProxyConfigBackend
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilHAProxyConfigBackend) Get() (v HAProxyConfigBackend, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilHAProxyConfigBackend) Or(d HAProxyConfigBackend) HAProxyConfigBackend {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilHAProxyConfigBackendTimeouts returns new NilHAProxyConfigBackendTimeouts with value set to v.
func NewNilHAProxyConfigBackendTimeouts(v HAProxyConfigBackendTimeouts) NilHAProxyConfigBackendTimeouts {
	return NilHAProxyConfigBackendTimeouts{
		Value: v,
	}
}

// NilHAProxyConfigBackendTimeouts is nullable HAProxyConfigBackendTimeouts.
type NilHAProxyConfigBackendTimeouts struct {
	Value HAProxyConfigBackendTimeouts
	Null  bool
}

// SetTo sets value to v.
func (o *NilHAProxyConfigBackendTimeouts) SetTo(v HAProxyConfigBackendTimeouts) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilHAProxyConfigBackendTimeouts) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilHAProxyConfigBackendTimeouts) SetToNull() {
	o.Null = true
	var v HAProxyConfigBackendTimeouts
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilHAProxyConfigBackendTimeouts) Get() (v HAProxyConfigBackendTimeouts, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilHAProxyConfigBackendTimeouts) Or(d HAProxyConfigBackendTimeouts) HAProxyConfigBackendTimeouts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilHAProxyConfigFrontend returns new NilHAProxyConfigFrontend with value set to v.
func NewNilHAProxyConfigFrontend(v HAProxyConfigFrontend) NilHAProxyConfigFrontend {
	return NilHAProxyConfigFrontend{
		Value: v,
	}
}

// NilHAProxyConfigFrontend is nullable HAProxyConfigFrontend.
type NilHAProxyConfigFrontend struct {
	Value HAProxyConfigFrontend
	Null  bool
}

// SetTo sets value to v.
func (o *NilHAProxyConfigFrontend) SetTo(v HAProxyConfigFrontend) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilHAProxyConfigFrontend) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilHAProxyConfigFrontend) SetToNull() {
	o.Null = true
	var v HAProxyConfigFrontend
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilHAProxyConfigFrontend) Get() (v HAProxyConfigFrontend, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilHAProxyConfigFrontend) Or(d HAProxyConfigFrontend) HAProxyConfigFrontend {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilHAProxyConfigFrontendTimeouts returns new NilHAProxyConfigFrontendTimeouts with value set to v.
func NewNilHAProxyConfigFrontendTimeouts(v HAProxyConfigFrontendTimeouts) NilHAProxyConfigFrontendTimeouts {
	return NilHAProxyConfigFrontendTimeouts{
		Value: v,
	}
}

// NilHAProxyConfigFrontendTimeouts is nullable HAProxyConfigFrontendTimeouts.
type NilHAProxyConfigFrontendTimeouts struct {
	Value HAProxyConfigFrontendTimeouts
	Null  bool
}

// SetTo sets value to v.
func (o *NilHAProxyConfigFrontendTimeouts) SetTo(v HAProxyConfigFrontendTimeouts) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilHAProxyConfigFrontendTimeouts) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilHAProxyConfigFrontendTimeouts) SetToNull() {
	o.Null = true
	var v HAProxyConfigFrontendTimeouts
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilHAProxyConfigFrontendTimeouts) Get() (v HAProxyConfigFrontendTimeouts, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilHAProxyConfigFrontendTimeouts) Or(d HAProxyConfigFrontendTimeouts) HAProxyConfigFrontendTimeouts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilHubBilling returns new NilHubBilling with value set to v.
func NewNilHubBilling(v HubBilling) NilHubBilling {
	return NilHubBilling{
		Value: v,
	}
}

// NilHubBilling is nullable HubBilling.
type NilHubBilling struct {
	Value HubBilling
	Null  bool
}

// SetTo sets value to v.
func (o *NilHubBilling) SetTo(v HubBilling) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilHubBilling) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilHubBilling) SetToNull() {
	o.Null = true
	var v HubBilling
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilHubBilling) Get() (v HubBilling, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilHubBilling) Or(d HubBilling) HubBilling {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilHubIntegrationsBackblazeB2 returns new NilHubIntegrationsBackblazeB2 with value set to v.
func NewNilHubIntegrationsBackblazeB2(v HubIntegrationsBackblazeB2) NilHubIntegrationsBackblazeB2 {
	return NilHubIntegrationsBackblazeB2{
		Value: v,
	}
}

// NilHubIntegrationsBackblazeB2 is nullable HubIntegrationsBackblazeB2.
type NilHubIntegrationsBackblazeB2 struct {
	Value HubIntegrationsBackblazeB2
	Null  bool
}

// SetTo sets value to v.
func (o *NilHubIntegrationsBackblazeB2) SetTo(v HubIntegrationsBackblazeB2) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilHubIntegrationsBackblazeB2) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilHubIntegrationsBackblazeB2) SetToNull() {
	o.Null = true
	var v HubIntegrationsBackblazeB2
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilHubIntegrationsBackblazeB2) Get() (v HubIntegrationsBackblazeB2, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilHubIntegrationsBackblazeB2) Or(d HubIntegrationsBackblazeB2) HubIntegrationsBackblazeB2 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilHubIntegrationsLetsencrypt returns new NilHubIntegrationsLetsencrypt with value set to v.
func NewNilHubIntegrationsLetsencrypt(v HubIntegrationsLetsencrypt) NilHubIntegrationsLetsencrypt {
	return NilHubIntegrationsLetsencrypt{
		Value: v,
	}
}

// NilHubIntegrationsLetsencrypt is nullable HubIntegrationsLetsencrypt.
type NilHubIntegrationsLetsencrypt struct {
	Value HubIntegrationsLetsencrypt
	Null  bool
}

// SetTo sets value to v.
func (o *NilHubIntegrationsLetsencrypt) SetTo(v HubIntegrationsLetsencrypt) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilHubIntegrationsLetsencrypt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilHubIntegrationsLetsencrypt) SetToNull() {
	o.Null = true
	var v HubIntegrationsLetsencrypt
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilHubIntegrationsLetsencrypt) Get() (v HubIntegrationsLetsencrypt, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilHubIntegrationsLetsencrypt) Or(d HubIntegrationsLetsencrypt) HubIntegrationsLetsencrypt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilInfrastructureProviderLocationGeographic returns new NilInfrastructureProviderLocationGeographic with value set to v.
func NewNilInfrastructureProviderLocationGeographic(v InfrastructureProviderLocationGeographic) NilInfrastructureProviderLocationGeographic {
	return NilInfrastructureProviderLocationGeographic{
		Value: v,
	}
}

// NilInfrastructureProviderLocationGeographic is nullable InfrastructureProviderLocationGeographic.
type NilInfrastructureProviderLocationGeographic struct {
	Value InfrastructureProviderLocationGeographic
	Null  bool
}

// SetTo sets value to v.
func (o *NilInfrastructureProviderLocationGeographic) SetTo(v InfrastructureProviderLocationGeographic) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilInfrastructureProviderLocationGeographic) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilInfrastructureProviderLocationGeographic) SetToNull() {
	o.Null = true
	var v InfrastructureProviderLocationGeographic
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilInfrastructureProviderLocationGeographic) Get() (v InfrastructureProviderLocationGeographic, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilInfrastructureProviderLocationGeographic) Or(d InfrastructureProviderLocationGeographic) InfrastructureProviderLocationGeographic {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilInstanceEnvironmentLegacy returns new NilInstanceEnvironmentLegacy with value set to v.
func NewNilInstanceEnvironmentLegacy(v InstanceEnvironmentLegacy) NilInstanceEnvironmentLegacy {
	return NilInstanceEnvironmentLegacy{
		Value: v,
	}
}

// NilInstanceEnvironmentLegacy is nullable InstanceEnvironmentLegacy.
type NilInstanceEnvironmentLegacy struct {
	Value InstanceEnvironmentLegacy
	Null  bool
}

// SetTo sets value to v.
func (o *NilInstanceEnvironmentLegacy) SetTo(v InstanceEnvironmentLegacy) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilInstanceEnvironmentLegacy) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilInstanceEnvironmentLegacy) SetToNull() {
	o.Null = true
	var v InstanceEnvironmentLegacy
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilInstanceEnvironmentLegacy) Get() (v InstanceEnvironmentLegacy, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilInstanceEnvironmentLegacy) Or(d InstanceEnvironmentLegacy) InstanceEnvironmentLegacy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilInstanceMigration returns new NilInstanceMigration with value set to v.
func NewNilInstanceMigration(v InstanceMigration) NilInstanceMigration {
	return NilInstanceMigration{
		Value: v,
	}
}

// NilInstanceMigration is nullable InstanceMigration.
type NilInstanceMigration struct {
	Value InstanceMigration
	Null  bool
}

// SetTo sets value to v.
func (o *NilInstanceMigration) SetTo(v InstanceMigration) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilInstanceMigration) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilInstanceMigration) SetToNull() {
	o.Null = true
	var v InstanceMigration
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilInstanceMigration) Get() (v InstanceMigration, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilInstanceMigration) Or(d InstanceMigration) InstanceMigration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilInstanceService returns new NilInstanceService with value set to v.
func NewNilInstanceService(v InstanceService) NilInstanceService {
	return NilInstanceService{
		Value: v,
	}
}

// NilInstanceService is nullable InstanceService.
type NilInstanceService struct {
	Value InstanceService
	Null  bool
}

// SetTo sets value to v.
func (o *NilInstanceService) SetTo(v InstanceService) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilInstanceService) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilInstanceService) SetToNull() {
	o.Null = true
	var v InstanceService
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilInstanceService) Get() (v InstanceService, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilInstanceService) Or(d InstanceService) InstanceService {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilInstanceStateful returns new NilInstanceStateful with value set to v.
func NewNilInstanceStateful(v InstanceStateful) NilInstanceStateful {
	return NilInstanceStateful{
		Value: v,
	}
}

// NilInstanceStateful is nullable InstanceStateful.
type NilInstanceStateful struct {
	Value InstanceStateful
	Null  bool
}

// SetTo sets value to v.
func (o *NilInstanceStateful) SetTo(v InstanceStateful) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilInstanceStateful) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilInstanceStateful) SetToNull() {
	o.Null = true
	var v InstanceStateful
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilInstanceStateful) Get() (v InstanceStateful, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilInstanceStateful) Or(d InstanceStateful) InstanceStateful {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilInt returns new NilInt with value set to v.
func NewNilInt(v int) NilInt {
	return NilInt{
		Value: v,
	}
}

// NilInt is nullable int.
type NilInt struct {
	Value int
	Null  bool
}

// SetTo sets value to v.
func (o *NilInt) SetTo(v int) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilInt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilInt) SetToNull() {
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilLegacyNetwork returns new NilLegacyNetwork with value set to v.
func NewNilLegacyNetwork(v LegacyNetwork) NilLegacyNetwork {
	return NilLegacyNetwork{
		Value: v,
	}
}

// NilLegacyNetwork is nullable LegacyNetwork.
type NilLegacyNetwork struct {
	Value LegacyNetwork
	Null  bool
}

// SetTo sets value to v.
func (o *NilLegacyNetwork) SetTo(v LegacyNetwork) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilLegacyNetwork) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilLegacyNetwork) SetToNull() {
	o.Null = true
	var v LegacyNetwork
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilLegacyNetwork) Get() (v LegacyNetwork, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilLegacyNetwork) Or(d LegacyNetwork) LegacyNetwork {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilLoadBalancerEnvironmentService returns new NilLoadBalancerEnvironmentService with value set to v.
func NewNilLoadBalancerEnvironmentService(v LoadBalancerEnvironmentService) NilLoadBalancerEnvironmentService {
	return NilLoadBalancerEnvironmentService{
		Value: v,
	}
}

// NilLoadBalancerEnvironmentService is nullable LoadBalancerEnvironmentService.
type NilLoadBalancerEnvironmentService struct {
	Value LoadBalancerEnvironmentService
	Null  bool
}

// SetTo sets value to v.
func (o *NilLoadBalancerEnvironmentService) SetTo(v LoadBalancerEnvironmentService) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilLoadBalancerEnvironmentService) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilLoadBalancerEnvironmentService) SetToNull() {
	o.Null = true
	var v LoadBalancerEnvironmentService
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilLoadBalancerEnvironmentService) Get() (v LoadBalancerEnvironmentService, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilLoadBalancerEnvironmentService) Or(d LoadBalancerEnvironmentService) LoadBalancerEnvironmentService {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilLoadBalancerEnvironmentServiceConfig returns new NilLoadBalancerEnvironmentServiceConfig with value set to v.
func NewNilLoadBalancerEnvironmentServiceConfig(v LoadBalancerEnvironmentServiceConfig) NilLoadBalancerEnvironmentServiceConfig {
	return NilLoadBalancerEnvironmentServiceConfig{
		Value: v,
	}
}

// NilLoadBalancerEnvironmentServiceConfig is nullable LoadBalancerEnvironmentServiceConfig.
type NilLoadBalancerEnvironmentServiceConfig struct {
	Value LoadBalancerEnvironmentServiceConfig
	Null  bool
}

// SetTo sets value to v.
func (o *NilLoadBalancerEnvironmentServiceConfig) SetTo(v LoadBalancerEnvironmentServiceConfig) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilLoadBalancerEnvironmentServiceConfig) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilLoadBalancerEnvironmentServiceConfig) SetToNull() {
	o.Null = true
	var v LoadBalancerEnvironmentServiceConfig
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilLoadBalancerEnvironmentServiceConfig) Get() (v LoadBalancerEnvironmentServiceConfig, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilLoadBalancerEnvironmentServiceConfig) Or(d LoadBalancerEnvironmentServiceConfig) LoadBalancerEnvironmentServiceConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilLoadBalancerEnvironmentServiceConfigHaproxy returns new NilLoadBalancerEnvironmentServiceConfigHaproxy with value set to v.
func NewNilLoadBalancerEnvironmentServiceConfigHaproxy(v LoadBalancerEnvironmentServiceConfigHaproxy) NilLoadBalancerEnvironmentServiceConfigHaproxy {
	return NilLoadBalancerEnvironmentServiceConfigHaproxy{
		Value: v,
	}
}

// NilLoadBalancerEnvironmentServiceConfigHaproxy is nullable LoadBalancerEnvironmentServiceConfigHaproxy.
type NilLoadBalancerEnvironmentServiceConfigHaproxy struct {
	Value LoadBalancerEnvironmentServiceConfigHaproxy
	Null  bool
}

// SetTo sets value to v.
func (o *NilLoadBalancerEnvironmentServiceConfigHaproxy) SetTo(v LoadBalancerEnvironmentServiceConfigHaproxy) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilLoadBalancerEnvironmentServiceConfigHaproxy) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilLoadBalancerEnvironmentServiceConfigHaproxy) SetToNull() {
	o.Null = true
	var v LoadBalancerEnvironmentServiceConfigHaproxy
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilLoadBalancerEnvironmentServiceConfigHaproxy) Get() (v LoadBalancerEnvironmentServiceConfigHaproxy, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilLoadBalancerEnvironmentServiceConfigHaproxy) Or(d LoadBalancerEnvironmentServiceConfigHaproxy) LoadBalancerEnvironmentServiceConfigHaproxy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPrivateNetwork returns new NilPrivateNetwork with value set to v.
func NewNilPrivateNetwork(v PrivateNetwork) NilPrivateNetwork {
	return NilPrivateNetwork{
		Value: v,
	}
}

// NilPrivateNetwork is nullable PrivateNetwork.
type NilPrivateNetwork struct {
	Value PrivateNetwork
	Null  bool
}

// SetTo sets value to v.
func (o *NilPrivateNetwork) SetTo(v PrivateNetwork) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPrivateNetwork) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPrivateNetwork) SetToNull() {
	o.Null = true
	var v PrivateNetwork
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPrivateNetwork) Get() (v PrivateNetwork, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPrivateNetwork) Or(d PrivateNetwork) PrivateNetwork {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPromoCodeCredit returns new NilPromoCodeCredit with value set to v.
func NewNilPromoCodeCredit(v PromoCodeCredit) NilPromoCodeCredit {
	return NilPromoCodeCredit{
		Value: v,
	}
}

// NilPromoCodeCredit is nullable PromoCodeCredit.
type NilPromoCodeCredit struct {
	Value PromoCodeCredit
	Null  bool
}

// SetTo sets value to v.
func (o *NilPromoCodeCredit) SetTo(v PromoCodeCredit) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPromoCodeCredit) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPromoCodeCredit) SetToNull() {
	o.Null = true
	var v PromoCodeCredit
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPromoCodeCredit) Get() (v PromoCodeCredit, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPromoCodeCredit) Or(d PromoCodeCredit) PromoCodeCredit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilReconfigureLoadBalancerReqContentsConfigHaproxy returns new NilReconfigureLoadBalancerReqContentsConfigHaproxy with value set to v.
func NewNilReconfigureLoadBalancerReqContentsConfigHaproxy(v ReconfigureLoadBalancerReqContentsConfigHaproxy) NilReconfigureLoadBalancerReqContentsConfigHaproxy {
	return NilReconfigureLoadBalancerReqContentsConfigHaproxy{
		Value: v,
	}
}

// NilReconfigureLoadBalancerReqContentsConfigHaproxy is nullable ReconfigureLoadBalancerReqContentsConfigHaproxy.
type NilReconfigureLoadBalancerReqContentsConfigHaproxy struct {
	Value ReconfigureLoadBalancerReqContentsConfigHaproxy
	Null  bool
}

// SetTo sets value to v.
func (o *NilReconfigureLoadBalancerReqContentsConfigHaproxy) SetTo(v ReconfigureLoadBalancerReqContentsConfigHaproxy) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilReconfigureLoadBalancerReqContentsConfigHaproxy) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilReconfigureLoadBalancerReqContentsConfigHaproxy) SetToNull() {
	o.Null = true
	var v ReconfigureLoadBalancerReqContentsConfigHaproxy
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilReconfigureLoadBalancerReqContentsConfigHaproxy) Get() (v ReconfigureLoadBalancerReqContentsConfigHaproxy, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilReconfigureLoadBalancerReqContentsConfigHaproxy) Or(d ReconfigureLoadBalancerReqContentsConfigHaproxy) ReconfigureLoadBalancerReqContentsConfigHaproxy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilRecordFeatures returns new NilRecordFeatures with value set to v.
func NewNilRecordFeatures(v RecordFeatures) NilRecordFeatures {
	return NilRecordFeatures{
		Value: v,
	}
}

// NilRecordFeatures is nullable RecordFeatures.
type NilRecordFeatures struct {
	Value RecordFeatures
	Null  bool
}

// SetTo sets value to v.
func (o *NilRecordFeatures) SetTo(v RecordFeatures) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilRecordFeatures) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilRecordFeatures) SetToNull() {
	o.Null = true
	var v RecordFeatures
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilRecordFeatures) Get() (v RecordFeatures, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilRecordFeatures) Or(d RecordFeatures) RecordFeatures {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilString returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is nullable string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilString) SetToNull() {
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilTermRenew returns new NilTermRenew with value set to v.
func NewNilTermRenew(v TermRenew) NilTermRenew {
	return NilTermRenew{
		Value: v,
	}
}

// NilTermRenew is nullable TermRenew.
type NilTermRenew struct {
	Value TermRenew
	Null  bool
}

// SetTo sets value to v.
func (o *NilTermRenew) SetTo(v TermRenew) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilTermRenew) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilTermRenew) SetToNull() {
	o.Null = true
	var v TermRenew
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilTermRenew) Get() (v TermRenew, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilTermRenew) Or(d TermRenew) TermRenew {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilVolumesRemoteAccessPassword returns new NilVolumesRemoteAccessPassword with value set to v.
func NewNilVolumesRemoteAccessPassword(v VolumesRemoteAccessPassword) NilVolumesRemoteAccessPassword {
	return NilVolumesRemoteAccessPassword{
		Value: v,
	}
}

// NilVolumesRemoteAccessPassword is nullable VolumesRemoteAccessPassword.
type NilVolumesRemoteAccessPassword struct {
	Value VolumesRemoteAccessPassword
	Null  bool
}

// SetTo sets value to v.
func (o *NilVolumesRemoteAccessPassword) SetTo(v VolumesRemoteAccessPassword) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilVolumesRemoteAccessPassword) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilVolumesRemoteAccessPassword) SetToNull() {
	o.Null = true
	var v VolumesRemoteAccessPassword
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilVolumesRemoteAccessPassword) Get() (v VolumesRemoteAccessPassword, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilVolumesRemoteAccessPassword) Or(d VolumesRemoteAccessPassword) VolumesRemoteAccessPassword {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilVpnEnvironmentService returns new NilVpnEnvironmentService with value set to v.
func NewNilVpnEnvironmentService(v VpnEnvironmentService) NilVpnEnvironmentService {
	return NilVpnEnvironmentService{
		Value: v,
	}
}

// NilVpnEnvironmentService is nullable VpnEnvironmentService.
type NilVpnEnvironmentService struct {
	Value VpnEnvironmentService
	Null  bool
}

// SetTo sets value to v.
func (o *NilVpnEnvironmentService) SetTo(v VpnEnvironmentService) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilVpnEnvironmentService) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilVpnEnvironmentService) SetToNull() {
	o.Null = true
	var v VpnEnvironmentService
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilVpnEnvironmentService) Get() (v VpnEnvironmentService, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilVpnEnvironmentService) Or(d VpnEnvironmentService) VpnEnvironmentService {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilVpnEnvironmentServiceConfig returns new NilVpnEnvironmentServiceConfig with value set to v.
func NewNilVpnEnvironmentServiceConfig(v VpnEnvironmentServiceConfig) NilVpnEnvironmentServiceConfig {
	return NilVpnEnvironmentServiceConfig{
		Value: v,
	}
}

// NilVpnEnvironmentServiceConfig is nullable VpnEnvironmentServiceConfig.
type NilVpnEnvironmentServiceConfig struct {
	Value VpnEnvironmentServiceConfig
	Null  bool
}

// SetTo sets value to v.
func (o *NilVpnEnvironmentServiceConfig) SetTo(v VpnEnvironmentServiceConfig) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilVpnEnvironmentServiceConfig) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilVpnEnvironmentServiceConfig) SetToNull() {
	o.Null = true
	var v VpnEnvironmentServiceConfig
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilVpnEnvironmentServiceConfig) Get() (v VpnEnvironmentServiceConfig, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilVpnEnvironmentServiceConfig) Or(d VpnEnvironmentServiceConfig) VpnEnvironmentServiceConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Statistics that pertain to a specific node.
// Ref: #/components/schemas/NodeMetaStats
type NodeMetaStats struct {
	Network  ServerStatsNetwork  `json:"network"`
	Uptime   ServerStatsUptime   `json:"uptime"`
	CPU      ServerStatsCpu      `json:"cpu"`
	Load     ServerStatsLoad     `json:"load"`
	RAM      ServerStatsRam      `json:"ram"`
	Storage  ServerStatsStorage  `json:"storage"`
	Os       ServerStatsOS       `json:"os"`
	Versions ServerStatsVersions `json:"versions"`
}

// GetNetwork returns the value of Network.
func (s *NodeMetaStats) GetNetwork() ServerStatsNetwork {
	return s.Network
}

// GetUptime returns the value of Uptime.
func (s *NodeMetaStats) GetUptime() ServerStatsUptime {
	return s.Uptime
}

// GetCPU returns the value of CPU.
func (s *NodeMetaStats) GetCPU() ServerStatsCpu {
	return s.CPU
}

// GetLoad returns the value of Load.
func (s *NodeMetaStats) GetLoad() ServerStatsLoad {
	return s.Load
}

// GetRAM returns the value of RAM.
func (s *NodeMetaStats) GetRAM() ServerStatsRam {
	return s.RAM
}

// GetStorage returns the value of Storage.
func (s *NodeMetaStats) GetStorage() ServerStatsStorage {
	return s.Storage
}

// GetOs returns the value of Os.
func (s *NodeMetaStats) GetOs() ServerStatsOS {
	return s.Os
}

// GetVersions returns the value of Versions.
func (s *NodeMetaStats) GetVersions() ServerStatsVersions {
	return s.Versions
}

// SetNetwork sets the value of Network.
func (s *NodeMetaStats) SetNetwork(val ServerStatsNetwork) {
	s.Network = val
}

// SetUptime sets the value of Uptime.
func (s *NodeMetaStats) SetUptime(val ServerStatsUptime) {
	s.Uptime = val
}

// SetCPU sets the value of CPU.
func (s *NodeMetaStats) SetCPU(val ServerStatsCpu) {
	s.CPU = val
}

// SetLoad sets the value of Load.
func (s *NodeMetaStats) SetLoad(val ServerStatsLoad) {
	s.Load = val
}

// SetRAM sets the value of RAM.
func (s *NodeMetaStats) SetRAM(val ServerStatsRam) {
	s.RAM = val
}

// SetStorage sets the value of Storage.
func (s *NodeMetaStats) SetStorage(val ServerStatsStorage) {
	s.Storage = val
}

// SetOs sets the value of Os.
func (s *NodeMetaStats) SetOs(val ServerStatsOS) {
	s.Os = val
}

// SetVersions sets the value of Versions.
func (s *NodeMetaStats) SetVersions(val ServerStatsVersions) {
	s.Versions = val
}

// Merged schema.
// Ref: #/components/schemas/NodeState
type NodeState struct {
	// The current state of the node.
	Current NodeStateCurrent `json:"current"`
	Changed DateTime         `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptNodeStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *NodeState) GetCurrent() NodeStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *NodeState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *NodeState) GetError() OptNodeStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *NodeState) SetCurrent(val NodeStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *NodeState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *NodeState) SetError(val OptNodeStateError) {
	s.Error = val
}

// The current state of the node.
type NodeStateCurrent string

const (
	NodeStateCurrentNew            NodeStateCurrent = "new"
	NodeStateCurrentOffline        NodeStateCurrent = "offline"
	NodeStateCurrentAuthorizing    NodeStateCurrent = "authorizing"
	NodeStateCurrentOnline         NodeStateCurrent = "online"
	NodeStateCurrentDecommissioned NodeStateCurrent = "decommissioned"
)

// MarshalText implements encoding.TextMarshaler.
func (s NodeStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case NodeStateCurrentNew:
		return []byte(s), nil
	case NodeStateCurrentOffline:
		return []byte(s), nil
	case NodeStateCurrentAuthorizing:
		return []byte(s), nil
	case NodeStateCurrentOnline:
		return []byte(s), nil
	case NodeStateCurrentDecommissioned:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NodeStateCurrent) UnmarshalText(data []byte) error {
	switch NodeStateCurrent(data) {
	case NodeStateCurrentNew:
		*s = NodeStateCurrentNew
		return nil
	case NodeStateCurrentOffline:
		*s = NodeStateCurrentOffline
		return nil
	case NodeStateCurrentAuthorizing:
		*s = NodeStateCurrentAuthorizing
		return nil
	case NodeStateCurrentOnline:
		*s = NodeStateCurrentOnline
		return nil
	case NodeStateCurrentDecommissioned:
		*s = NodeStateCurrentDecommissioned
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type NodeStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *NodeStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *NodeStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *NodeStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *NodeStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// NewOptAbstractionIntegration returns new OptAbstractionIntegration with value set to v.
func NewOptAbstractionIntegration(v AbstractionIntegration) OptAbstractionIntegration {
	return OptAbstractionIntegration{
		Value: v,
		Set:   true,
	}
}

// OptAbstractionIntegration is optional AbstractionIntegration.
type OptAbstractionIntegration struct {
	Value AbstractionIntegration
	Set   bool
}

// IsSet returns true if OptAbstractionIntegration was set.
func (o OptAbstractionIntegration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAbstractionIntegration) Reset() {
	var v AbstractionIntegration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAbstractionIntegration) SetTo(v AbstractionIntegration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAbstractionIntegration) Get() (v AbstractionIntegration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAbstractionIntegration) Or(d AbstractionIntegration) AbstractionIntegration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccount returns new OptAccount with value set to v.
func NewOptAccount(v Account) OptAccount {
	return OptAccount{
		Value: v,
		Set:   true,
	}
}

// OptAccount is optional Account.
type OptAccount struct {
	Value Account
	Set   bool
}

// IsSet returns true if OptAccount was set.
func (o OptAccount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccount) Reset() {
	var v Account
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccount) SetTo(v Account) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccount) Get() (v Account, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccount) Or(d Account) Account {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccountStateError returns new OptAccountStateError with value set to v.
func NewOptAccountStateError(v AccountStateError) OptAccountStateError {
	return OptAccountStateError{
		Value: v,
		Set:   true,
	}
}

// OptAccountStateError is optional AccountStateError.
type OptAccountStateError struct {
	Value AccountStateError
	Set   bool
}

// IsSet returns true if OptAccountStateError was set.
func (o OptAccountStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountStateError) Reset() {
	var v AccountStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountStateError) SetTo(v AccountStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountStateError) Get() (v AccountStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountStateError) Or(d AccountStateError) AccountStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAddress returns new OptAddress with value set to v.
func NewOptAddress(v Address) OptAddress {
	return OptAddress{
		Value: v,
		Set:   true,
	}
}

// OptAddress is optional Address.
type OptAddress struct {
	Value Address
	Set   bool
}

// IsSet returns true if OptAddress was set.
func (o OptAddress) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAddress) Reset() {
	var v Address
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAddress) SetTo(v Address) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAddress) Get() (v Address, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAddress) Or(d Address) Address {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAnnouncementStateError returns new OptAnnouncementStateError with value set to v.
func NewOptAnnouncementStateError(v AnnouncementStateError) OptAnnouncementStateError {
	return OptAnnouncementStateError{
		Value: v,
		Set:   true,
	}
}

// OptAnnouncementStateError is optional AnnouncementStateError.
type OptAnnouncementStateError struct {
	Value AnnouncementStateError
	Set   bool
}

// IsSet returns true if OptAnnouncementStateError was set.
func (o OptAnnouncementStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnnouncementStateError) Reset() {
	var v AnnouncementStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnnouncementStateError) SetTo(v AnnouncementStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnnouncementStateError) Get() (v AnnouncementStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnnouncementStateError) Or(d AnnouncementStateError) AnnouncementStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptApiKey returns new OptApiKey with value set to v.
func NewOptApiKey(v ApiKey) OptApiKey {
	return OptApiKey{
		Value: v,
		Set:   true,
	}
}

// OptApiKey is optional ApiKey.
type OptApiKey struct {
	Value ApiKey
	Set   bool
}

// IsSet returns true if OptApiKey was set.
func (o OptApiKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptApiKey) Reset() {
	var v ApiKey
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptApiKey) SetTo(v ApiKey) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptApiKey) Get() (v ApiKey, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptApiKey) Or(d ApiKey) ApiKey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptApiKeyCreatorStateError returns new OptApiKeyCreatorStateError with value set to v.
func NewOptApiKeyCreatorStateError(v ApiKeyCreatorStateError) OptApiKeyCreatorStateError {
	return OptApiKeyCreatorStateError{
		Value: v,
		Set:   true,
	}
}

// OptApiKeyCreatorStateError is optional ApiKeyCreatorStateError.
type OptApiKeyCreatorStateError struct {
	Value ApiKeyCreatorStateError
	Set   bool
}

// IsSet returns true if OptApiKeyCreatorStateError was set.
func (o OptApiKeyCreatorStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptApiKeyCreatorStateError) Reset() {
	var v ApiKeyCreatorStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptApiKeyCreatorStateError) SetTo(v ApiKeyCreatorStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptApiKeyCreatorStateError) Get() (v ApiKeyCreatorStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptApiKeyCreatorStateError) Or(d ApiKeyCreatorStateError) ApiKeyCreatorStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptApiKeyStateError returns new OptApiKeyStateError with value set to v.
func NewOptApiKeyStateError(v ApiKeyStateError) OptApiKeyStateError {
	return OptApiKeyStateError{
		Value: v,
		Set:   true,
	}
}

// OptApiKeyStateError is optional ApiKeyStateError.
type OptApiKeyStateError struct {
	Value ApiKeyStateError
	Set   bool
}

// IsSet returns true if OptApiKeyStateError was set.
func (o OptApiKeyStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptApiKeyStateError) Reset() {
	var v ApiKeyStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptApiKeyStateError) SetTo(v ApiKeyStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptApiKeyStateError) Get() (v ApiKeyStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptApiKeyStateError) Or(d ApiKeyStateError) ApiKeyStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBackup returns new OptBackup with value set to v.
func NewOptBackup(v Backup) OptBackup {
	return OptBackup{
		Value: v,
		Set:   true,
	}
}

// OptBackup is optional Backup.
type OptBackup struct {
	Value Backup
	Set   bool
}

// IsSet returns true if OptBackup was set.
func (o OptBackup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBackup) Reset() {
	var v Backup
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBackup) SetTo(v Backup) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBackup) Get() (v Backup, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBackup) Or(d Backup) Backup {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBackupStateError returns new OptBackupStateError with value set to v.
func NewOptBackupStateError(v BackupStateError) OptBackupStateError {
	return OptBackupStateError{
		Value: v,
		Set:   true,
	}
}

// OptBackupStateError is optional BackupStateError.
type OptBackupStateError struct {
	Value BackupStateError
	Set   bool
}

// IsSet returns true if OptBackupStateError was set.
func (o OptBackupStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBackupStateError) Reset() {
	var v BackupStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBackupStateError) SetTo(v BackupStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBackupStateError) Get() (v BackupStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBackupStateError) Or(d BackupStateError) BackupStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBillingAmount returns new OptBillingAmount with value set to v.
func NewOptBillingAmount(v BillingAmount) OptBillingAmount {
	return OptBillingAmount{
		Value: v,
		Set:   true,
	}
}

// OptBillingAmount is optional BillingAmount.
type OptBillingAmount struct {
	Value BillingAmount
	Set   bool
}

// IsSet returns true if OptBillingAmount was set.
func (o OptBillingAmount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBillingAmount) Reset() {
	var v BillingAmount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBillingAmount) SetTo(v BillingAmount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBillingAmount) Get() (v BillingAmount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBillingAmount) Or(d BillingAmount) BillingAmount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBillingOrder returns new OptBillingOrder with value set to v.
func NewOptBillingOrder(v BillingOrder) OptBillingOrder {
	return OptBillingOrder{
		Value: v,
		Set:   true,
	}
}

// OptBillingOrder is optional BillingOrder.
type OptBillingOrder struct {
	Value BillingOrder
	Set   bool
}

// IsSet returns true if OptBillingOrder was set.
func (o OptBillingOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBillingOrder) Reset() {
	var v BillingOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBillingOrder) SetTo(v BillingOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBillingOrder) Get() (v BillingOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBillingOrder) Or(d BillingOrder) BillingOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBillingOrderStateError returns new OptBillingOrderStateError with value set to v.
func NewOptBillingOrderStateError(v BillingOrderStateError) OptBillingOrderStateError {
	return OptBillingOrderStateError{
		Value: v,
		Set:   true,
	}
}

// OptBillingOrderStateError is optional BillingOrderStateError.
type OptBillingOrderStateError struct {
	Value BillingOrderStateError
	Set   bool
}

// IsSet returns true if OptBillingOrderStateError was set.
func (o OptBillingOrderStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBillingOrderStateError) Reset() {
	var v BillingOrderStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBillingOrderStateError) SetTo(v BillingOrderStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBillingOrderStateError) Get() (v BillingOrderStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBillingOrderStateError) Or(d BillingOrderStateError) BillingOrderStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBillingServiceStateError returns new OptBillingServiceStateError with value set to v.
func NewOptBillingServiceStateError(v BillingServiceStateError) OptBillingServiceStateError {
	return OptBillingServiceStateError{
		Value: v,
		Set:   true,
	}
}

// OptBillingServiceStateError is optional BillingServiceStateError.
type OptBillingServiceStateError struct {
	Value BillingServiceStateError
	Set   bool
}

// IsSet returns true if OptBillingServiceStateError was set.
func (o OptBillingServiceStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBillingServiceStateError) Reset() {
	var v BillingServiceStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBillingServiceStateError) SetTo(v BillingServiceStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBillingServiceStateError) Get() (v BillingServiceStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBillingServiceStateError) Or(d BillingServiceStateError) BillingServiceStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBuildLog returns new OptBuildLog with value set to v.
func NewOptBuildLog(v BuildLog) OptBuildLog {
	return OptBuildLog{
		Value: v,
		Set:   true,
	}
}

// OptBuildLog is optional BuildLog.
type OptBuildLog struct {
	Value BuildLog
	Set   bool
}

// IsSet returns true if OptBuildLog was set.
func (o OptBuildLog) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBuildLog) Reset() {
	var v BuildLog
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBuildLog) SetTo(v BuildLog) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBuildLog) Get() (v BuildLog, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBuildLog) Or(d BuildLog) BuildLog {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCPUSpecExtra returns new OptCPUSpecExtra with value set to v.
func NewOptCPUSpecExtra(v CPUSpecExtra) OptCPUSpecExtra {
	return OptCPUSpecExtra{
		Value: v,
		Set:   true,
	}
}

// OptCPUSpecExtra is optional CPUSpecExtra.
type OptCPUSpecExtra struct {
	Value CPUSpecExtra
	Set   bool
}

// IsSet returns true if OptCPUSpecExtra was set.
func (o OptCPUSpecExtra) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCPUSpecExtra) Reset() {
	var v CPUSpecExtra
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCPUSpecExtra) SetTo(v CPUSpecExtra) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCPUSpecExtra) Get() (v CPUSpecExtra, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCPUSpecExtra) Or(d CPUSpecExtra) CPUSpecExtra {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainer returns new OptContainer with value set to v.
func NewOptContainer(v Container) OptContainer {
	return OptContainer{
		Value: v,
		Set:   true,
	}
}

// OptContainer is optional Container.
type OptContainer struct {
	Value Container
	Set   bool
}

// IsSet returns true if OptContainer was set.
func (o OptContainer) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainer) Reset() {
	var v Container
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainer) SetTo(v Container) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainer) Get() (v Container, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainer) Or(d Container) Container {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerDeployConstraints returns new OptContainerDeployConstraints with value set to v.
func NewOptContainerDeployConstraints(v ContainerDeployConstraints) OptContainerDeployConstraints {
	return OptContainerDeployConstraints{
		Value: v,
		Set:   true,
	}
}

// OptContainerDeployConstraints is optional ContainerDeployConstraints.
type OptContainerDeployConstraints struct {
	Value ContainerDeployConstraints
	Set   bool
}

// IsSet returns true if OptContainerDeployConstraints was set.
func (o OptContainerDeployConstraints) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerDeployConstraints) Reset() {
	var v ContainerDeployConstraints
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerDeployConstraints) SetTo(v ContainerDeployConstraints) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerDeployConstraints) Get() (v ContainerDeployConstraints, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerDeployConstraints) Or(d ContainerDeployConstraints) ContainerDeployConstraints {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerDeployConstraintsNode returns new OptContainerDeployConstraintsNode with value set to v.
func NewOptContainerDeployConstraintsNode(v ContainerDeployConstraintsNode) OptContainerDeployConstraintsNode {
	return OptContainerDeployConstraintsNode{
		Value: v,
		Set:   true,
	}
}

// OptContainerDeployConstraintsNode is optional ContainerDeployConstraintsNode.
type OptContainerDeployConstraintsNode struct {
	Value ContainerDeployConstraintsNode
	Set   bool
}

// IsSet returns true if OptContainerDeployConstraintsNode was set.
func (o OptContainerDeployConstraintsNode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerDeployConstraintsNode) Reset() {
	var v ContainerDeployConstraintsNode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerDeployConstraintsNode) SetTo(v ContainerDeployConstraintsNode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerDeployConstraintsNode) Get() (v ContainerDeployConstraintsNode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerDeployConstraintsNode) Or(d ContainerDeployConstraintsNode) ContainerDeployConstraintsNode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerDeployHealthCheck returns new OptContainerDeployHealthCheck with value set to v.
func NewOptContainerDeployHealthCheck(v ContainerDeployHealthCheck) OptContainerDeployHealthCheck {
	return OptContainerDeployHealthCheck{
		Value: v,
		Set:   true,
	}
}

// OptContainerDeployHealthCheck is optional ContainerDeployHealthCheck.
type OptContainerDeployHealthCheck struct {
	Value ContainerDeployHealthCheck
	Set   bool
}

// IsSet returns true if OptContainerDeployHealthCheck was set.
func (o OptContainerDeployHealthCheck) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerDeployHealthCheck) Reset() {
	var v ContainerDeployHealthCheck
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerDeployHealthCheck) SetTo(v ContainerDeployHealthCheck) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerDeployHealthCheck) Get() (v ContainerDeployHealthCheck, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerDeployHealthCheck) Or(d ContainerDeployHealthCheck) ContainerDeployHealthCheck {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerDeployRestart returns new OptContainerDeployRestart with value set to v.
func NewOptContainerDeployRestart(v ContainerDeployRestart) OptContainerDeployRestart {
	return OptContainerDeployRestart{
		Value: v,
		Set:   true,
	}
}

// OptContainerDeployRestart is optional ContainerDeployRestart.
type OptContainerDeployRestart struct {
	Value ContainerDeployRestart
	Set   bool
}

// IsSet returns true if OptContainerDeployRestart was set.
func (o OptContainerDeployRestart) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerDeployRestart) Reset() {
	var v ContainerDeployRestart
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerDeployRestart) SetTo(v ContainerDeployRestart) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerDeployRestart) Get() (v ContainerDeployRestart, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerDeployRestart) Or(d ContainerDeployRestart) ContainerDeployRestart {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerDeployShutdown returns new OptContainerDeployShutdown with value set to v.
func NewOptContainerDeployShutdown(v ContainerDeployShutdown) OptContainerDeployShutdown {
	return OptContainerDeployShutdown{
		Value: v,
		Set:   true,
	}
}

// OptContainerDeployShutdown is optional ContainerDeployShutdown.
type OptContainerDeployShutdown struct {
	Value ContainerDeployShutdown
	Set   bool
}

// IsSet returns true if OptContainerDeployShutdown was set.
func (o OptContainerDeployShutdown) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerDeployShutdown) Reset() {
	var v ContainerDeployShutdown
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerDeployShutdown) SetTo(v ContainerDeployShutdown) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerDeployShutdown) Get() (v ContainerDeployShutdown, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerDeployShutdown) Or(d ContainerDeployShutdown) ContainerDeployShutdown {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerDeployStartup returns new OptContainerDeployStartup with value set to v.
func NewOptContainerDeployStartup(v ContainerDeployStartup) OptContainerDeployStartup {
	return OptContainerDeployStartup{
		Value: v,
		Set:   true,
	}
}

// OptContainerDeployStartup is optional ContainerDeployStartup.
type OptContainerDeployStartup struct {
	Value ContainerDeployStartup
	Set   bool
}

// IsSet returns true if OptContainerDeployStartup was set.
func (o OptContainerDeployStartup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerDeployStartup) Reset() {
	var v ContainerDeployStartup
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerDeployStartup) SetTo(v ContainerDeployStartup) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerDeployStartup) Get() (v ContainerDeployStartup, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerDeployStartup) Or(d ContainerDeployStartup) ContainerDeployStartup {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerDeployStateful returns new OptContainerDeployStateful with value set to v.
func NewOptContainerDeployStateful(v ContainerDeployStateful) OptContainerDeployStateful {
	return OptContainerDeployStateful{
		Value: v,
		Set:   true,
	}
}

// OptContainerDeployStateful is optional ContainerDeployStateful.
type OptContainerDeployStateful struct {
	Value ContainerDeployStateful
	Set   bool
}

// IsSet returns true if OptContainerDeployStateful was set.
func (o OptContainerDeployStateful) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerDeployStateful) Reset() {
	var v ContainerDeployStateful
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerDeployStateful) SetTo(v ContainerDeployStateful) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerDeployStateful) Get() (v ContainerDeployStateful, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerDeployStateful) Or(d ContainerDeployStateful) ContainerDeployStateful {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerDeployTelemetry returns new OptContainerDeployTelemetry with value set to v.
func NewOptContainerDeployTelemetry(v ContainerDeployTelemetry) OptContainerDeployTelemetry {
	return OptContainerDeployTelemetry{
		Value: v,
		Set:   true,
	}
}

// OptContainerDeployTelemetry is optional ContainerDeployTelemetry.
type OptContainerDeployTelemetry struct {
	Value ContainerDeployTelemetry
	Set   bool
}

// IsSet returns true if OptContainerDeployTelemetry was set.
func (o OptContainerDeployTelemetry) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerDeployTelemetry) Reset() {
	var v ContainerDeployTelemetry
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerDeployTelemetry) SetTo(v ContainerDeployTelemetry) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerDeployTelemetry) Get() (v ContainerDeployTelemetry, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerDeployTelemetry) Or(d ContainerDeployTelemetry) ContainerDeployTelemetry {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerDeployUpdate returns new OptContainerDeployUpdate with value set to v.
func NewOptContainerDeployUpdate(v ContainerDeployUpdate) OptContainerDeployUpdate {
	return OptContainerDeployUpdate{
		Value: v,
		Set:   true,
	}
}

// OptContainerDeployUpdate is optional ContainerDeployUpdate.
type OptContainerDeployUpdate struct {
	Value ContainerDeployUpdate
	Set   bool
}

// IsSet returns true if OptContainerDeployUpdate was set.
func (o OptContainerDeployUpdate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerDeployUpdate) Reset() {
	var v ContainerDeployUpdate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerDeployUpdate) SetTo(v ContainerDeployUpdate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerDeployUpdate) Get() (v ContainerDeployUpdate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerDeployUpdate) Or(d ContainerDeployUpdate) ContainerDeployUpdate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerIntegrations returns new OptContainerIntegrations with value set to v.
func NewOptContainerIntegrations(v ContainerIntegrations) OptContainerIntegrations {
	return OptContainerIntegrations{
		Value: v,
		Set:   true,
	}
}

// OptContainerIntegrations is optional ContainerIntegrations.
type OptContainerIntegrations struct {
	Value ContainerIntegrations
	Set   bool
}

// IsSet returns true if OptContainerIntegrations was set.
func (o OptContainerIntegrations) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerIntegrations) Reset() {
	var v ContainerIntegrations
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerIntegrations) SetTo(v ContainerIntegrations) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerIntegrations) Get() (v ContainerIntegrations, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerIntegrations) Or(d ContainerIntegrations) ContainerIntegrations {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerIntegrationsBackups returns new OptContainerIntegrationsBackups with value set to v.
func NewOptContainerIntegrationsBackups(v ContainerIntegrationsBackups) OptContainerIntegrationsBackups {
	return OptContainerIntegrationsBackups{
		Value: v,
		Set:   true,
	}
}

// OptContainerIntegrationsBackups is optional ContainerIntegrationsBackups.
type OptContainerIntegrationsBackups struct {
	Value ContainerIntegrationsBackups
	Set   bool
}

// IsSet returns true if OptContainerIntegrationsBackups was set.
func (o OptContainerIntegrationsBackups) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerIntegrationsBackups) Reset() {
	var v ContainerIntegrationsBackups
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerIntegrationsBackups) SetTo(v ContainerIntegrationsBackups) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerIntegrationsBackups) Get() (v ContainerIntegrationsBackups, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerIntegrationsBackups) Or(d ContainerIntegrationsBackups) ContainerIntegrationsBackups {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerIntegrationsLetsEncrypt returns new OptContainerIntegrationsLetsEncrypt with value set to v.
func NewOptContainerIntegrationsLetsEncrypt(v ContainerIntegrationsLetsEncrypt) OptContainerIntegrationsLetsEncrypt {
	return OptContainerIntegrationsLetsEncrypt{
		Value: v,
		Set:   true,
	}
}

// OptContainerIntegrationsLetsEncrypt is optional ContainerIntegrationsLetsEncrypt.
type OptContainerIntegrationsLetsEncrypt struct {
	Value ContainerIntegrationsLetsEncrypt
	Set   bool
}

// IsSet returns true if OptContainerIntegrationsLetsEncrypt was set.
func (o OptContainerIntegrationsLetsEncrypt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerIntegrationsLetsEncrypt) Reset() {
	var v ContainerIntegrationsLetsEncrypt
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerIntegrationsLetsEncrypt) SetTo(v ContainerIntegrationsLetsEncrypt) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerIntegrationsLetsEncrypt) Get() (v ContainerIntegrationsLetsEncrypt, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerIntegrationsLetsEncrypt) Or(d ContainerIntegrationsLetsEncrypt) ContainerIntegrationsLetsEncrypt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerIntegrationsWebhooks returns new OptContainerIntegrationsWebhooks with value set to v.
func NewOptContainerIntegrationsWebhooks(v ContainerIntegrationsWebhooks) OptContainerIntegrationsWebhooks {
	return OptContainerIntegrationsWebhooks{
		Value: v,
		Set:   true,
	}
}

// OptContainerIntegrationsWebhooks is optional ContainerIntegrationsWebhooks.
type OptContainerIntegrationsWebhooks struct {
	Value ContainerIntegrationsWebhooks
	Set   bool
}

// IsSet returns true if OptContainerIntegrationsWebhooks was set.
func (o OptContainerIntegrationsWebhooks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerIntegrationsWebhooks) Reset() {
	var v ContainerIntegrationsWebhooks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerIntegrationsWebhooks) SetTo(v ContainerIntegrationsWebhooks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerIntegrationsWebhooks) Get() (v ContainerIntegrationsWebhooks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerIntegrationsWebhooks) Or(d ContainerIntegrationsWebhooks) ContainerIntegrationsWebhooks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerIntegrationsWebhooksEvents returns new OptContainerIntegrationsWebhooksEvents with value set to v.
func NewOptContainerIntegrationsWebhooksEvents(v ContainerIntegrationsWebhooksEvents) OptContainerIntegrationsWebhooksEvents {
	return OptContainerIntegrationsWebhooksEvents{
		Value: v,
		Set:   true,
	}
}

// OptContainerIntegrationsWebhooksEvents is optional ContainerIntegrationsWebhooksEvents.
type OptContainerIntegrationsWebhooksEvents struct {
	Value ContainerIntegrationsWebhooksEvents
	Set   bool
}

// IsSet returns true if OptContainerIntegrationsWebhooksEvents was set.
func (o OptContainerIntegrationsWebhooksEvents) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerIntegrationsWebhooksEvents) Reset() {
	var v ContainerIntegrationsWebhooksEvents
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerIntegrationsWebhooksEvents) SetTo(v ContainerIntegrationsWebhooksEvents) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerIntegrationsWebhooksEvents) Get() (v ContainerIntegrationsWebhooksEvents, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerIntegrationsWebhooksEvents) Or(d ContainerIntegrationsWebhooksEvents) ContainerIntegrationsWebhooksEvents {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerResources returns new OptContainerResources with value set to v.
func NewOptContainerResources(v ContainerResources) OptContainerResources {
	return OptContainerResources{
		Value: v,
		Set:   true,
	}
}

// OptContainerResources is optional ContainerResources.
type OptContainerResources struct {
	Value ContainerResources
	Set   bool
}

// IsSet returns true if OptContainerResources was set.
func (o OptContainerResources) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerResources) Reset() {
	var v ContainerResources
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerResources) SetTo(v ContainerResources) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerResources) Get() (v ContainerResources, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerResources) Or(d ContainerResources) ContainerResources {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerResourcesCPUShares returns new OptContainerResourcesCPUShares with value set to v.
func NewOptContainerResourcesCPUShares(v ContainerResourcesCPUShares) OptContainerResourcesCPUShares {
	return OptContainerResourcesCPUShares{
		Value: v,
		Set:   true,
	}
}

// OptContainerResourcesCPUShares is optional ContainerResourcesCPUShares.
type OptContainerResourcesCPUShares struct {
	Value ContainerResourcesCPUShares
	Set   bool
}

// IsSet returns true if OptContainerResourcesCPUShares was set.
func (o OptContainerResourcesCPUShares) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerResourcesCPUShares) Reset() {
	var v ContainerResourcesCPUShares
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerResourcesCPUShares) SetTo(v ContainerResourcesCPUShares) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerResourcesCPUShares) Get() (v ContainerResourcesCPUShares, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerResourcesCPUShares) Or(d ContainerResourcesCPUShares) ContainerResourcesCPUShares {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerRuntime returns new OptContainerRuntime with value set to v.
func NewOptContainerRuntime(v ContainerRuntime) OptContainerRuntime {
	return OptContainerRuntime{
		Value: v,
		Set:   true,
	}
}

// OptContainerRuntime is optional ContainerRuntime.
type OptContainerRuntime struct {
	Value ContainerRuntime
	Set   bool
}

// IsSet returns true if OptContainerRuntime was set.
func (o OptContainerRuntime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerRuntime) Reset() {
	var v ContainerRuntime
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerRuntime) SetTo(v ContainerRuntime) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerRuntime) Get() (v ContainerRuntime, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerRuntime) Or(d ContainerRuntime) ContainerRuntime {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerRuntimeCommand returns new OptContainerRuntimeCommand with value set to v.
func NewOptContainerRuntimeCommand(v ContainerRuntimeCommand) OptContainerRuntimeCommand {
	return OptContainerRuntimeCommand{
		Value: v,
		Set:   true,
	}
}

// OptContainerRuntimeCommand is optional ContainerRuntimeCommand.
type OptContainerRuntimeCommand struct {
	Value ContainerRuntimeCommand
	Set   bool
}

// IsSet returns true if OptContainerRuntimeCommand was set.
func (o OptContainerRuntimeCommand) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerRuntimeCommand) Reset() {
	var v ContainerRuntimeCommand
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerRuntimeCommand) SetTo(v ContainerRuntimeCommand) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerRuntimeCommand) Get() (v ContainerRuntimeCommand, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerRuntimeCommand) Or(d ContainerRuntimeCommand) ContainerRuntimeCommand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerRuntimeEnvironmentVars returns new OptContainerRuntimeEnvironmentVars with value set to v.
func NewOptContainerRuntimeEnvironmentVars(v ContainerRuntimeEnvironmentVars) OptContainerRuntimeEnvironmentVars {
	return OptContainerRuntimeEnvironmentVars{
		Value: v,
		Set:   true,
	}
}

// OptContainerRuntimeEnvironmentVars is optional ContainerRuntimeEnvironmentVars.
type OptContainerRuntimeEnvironmentVars struct {
	Value ContainerRuntimeEnvironmentVars
	Set   bool
}

// IsSet returns true if OptContainerRuntimeEnvironmentVars was set.
func (o OptContainerRuntimeEnvironmentVars) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerRuntimeEnvironmentVars) Reset() {
	var v ContainerRuntimeEnvironmentVars
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerRuntimeEnvironmentVars) SetTo(v ContainerRuntimeEnvironmentVars) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerRuntimeEnvironmentVars) Get() (v ContainerRuntimeEnvironmentVars, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerRuntimeEnvironmentVars) Or(d ContainerRuntimeEnvironmentVars) ContainerRuntimeEnvironmentVars {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerRuntimeRlimits returns new OptContainerRuntimeRlimits with value set to v.
func NewOptContainerRuntimeRlimits(v ContainerRuntimeRlimits) OptContainerRuntimeRlimits {
	return OptContainerRuntimeRlimits{
		Value: v,
		Set:   true,
	}
}

// OptContainerRuntimeRlimits is optional ContainerRuntimeRlimits.
type OptContainerRuntimeRlimits struct {
	Value ContainerRuntimeRlimits
	Set   bool
}

// IsSet returns true if OptContainerRuntimeRlimits was set.
func (o OptContainerRuntimeRlimits) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerRuntimeRlimits) Reset() {
	var v ContainerRuntimeRlimits
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerRuntimeRlimits) SetTo(v ContainerRuntimeRlimits) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerRuntimeRlimits) Get() (v ContainerRuntimeRlimits, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerRuntimeRlimits) Or(d ContainerRuntimeRlimits) ContainerRuntimeRlimits {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerRuntimeRootfs returns new OptContainerRuntimeRootfs with value set to v.
func NewOptContainerRuntimeRootfs(v ContainerRuntimeRootfs) OptContainerRuntimeRootfs {
	return OptContainerRuntimeRootfs{
		Value: v,
		Set:   true,
	}
}

// OptContainerRuntimeRootfs is optional ContainerRuntimeRootfs.
type OptContainerRuntimeRootfs struct {
	Value ContainerRuntimeRootfs
	Set   bool
}

// IsSet returns true if OptContainerRuntimeRootfs was set.
func (o OptContainerRuntimeRootfs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerRuntimeRootfs) Reset() {
	var v ContainerRuntimeRootfs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerRuntimeRootfs) SetTo(v ContainerRuntimeRootfs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerRuntimeRootfs) Get() (v ContainerRuntimeRootfs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerRuntimeRootfs) Or(d ContainerRuntimeRootfs) ContainerRuntimeRootfs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerRuntimeSysctl returns new OptContainerRuntimeSysctl with value set to v.
func NewOptContainerRuntimeSysctl(v ContainerRuntimeSysctl) OptContainerRuntimeSysctl {
	return OptContainerRuntimeSysctl{
		Value: v,
		Set:   true,
	}
}

// OptContainerRuntimeSysctl is optional ContainerRuntimeSysctl.
type OptContainerRuntimeSysctl struct {
	Value ContainerRuntimeSysctl
	Set   bool
}

// IsSet returns true if OptContainerRuntimeSysctl was set.
func (o OptContainerRuntimeSysctl) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerRuntimeSysctl) Reset() {
	var v ContainerRuntimeSysctl
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerRuntimeSysctl) SetTo(v ContainerRuntimeSysctl) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerRuntimeSysctl) Get() (v ContainerRuntimeSysctl, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerRuntimeSysctl) Or(d ContainerRuntimeSysctl) ContainerRuntimeSysctl {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerStateDesired returns new OptContainerStateDesired with value set to v.
func NewOptContainerStateDesired(v ContainerStateDesired) OptContainerStateDesired {
	return OptContainerStateDesired{
		Value: v,
		Set:   true,
	}
}

// OptContainerStateDesired is optional ContainerStateDesired.
type OptContainerStateDesired struct {
	Value ContainerStateDesired
	Set   bool
}

// IsSet returns true if OptContainerStateDesired was set.
func (o OptContainerStateDesired) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerStateDesired) Reset() {
	var v ContainerStateDesired
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerStateDesired) SetTo(v ContainerStateDesired) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerStateDesired) Get() (v ContainerStateDesired, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerStateDesired) Or(d ContainerStateDesired) ContainerStateDesired {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerStateError returns new OptContainerStateError with value set to v.
func NewOptContainerStateError(v ContainerStateError) OptContainerStateError {
	return OptContainerStateError{
		Value: v,
		Set:   true,
	}
}

// OptContainerStateError is optional ContainerStateError.
type OptContainerStateError struct {
	Value ContainerStateError
	Set   bool
}

// IsSet returns true if OptContainerStateError was set.
func (o OptContainerStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerStateError) Reset() {
	var v ContainerStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerStateError) SetTo(v ContainerStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerStateError) Get() (v ContainerStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerStateError) Or(d ContainerStateError) ContainerStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerSummary returns new OptContainerSummary with value set to v.
func NewOptContainerSummary(v ContainerSummary) OptContainerSummary {
	return OptContainerSummary{
		Value: v,
		Set:   true,
	}
}

// OptContainerSummary is optional ContainerSummary.
type OptContainerSummary struct {
	Value ContainerSummary
	Set   bool
}

// IsSet returns true if OptContainerSummary was set.
func (o OptContainerSummary) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerSummary) Reset() {
	var v ContainerSummary
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerSummary) SetTo(v ContainerSummary) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerSummary) Get() (v ContainerSummary, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerSummary) Or(d ContainerSummary) ContainerSummary {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainersIncludes returns new OptContainersIncludes with value set to v.
func NewOptContainersIncludes(v ContainersIncludes) OptContainersIncludes {
	return OptContainersIncludes{
		Value: v,
		Set:   true,
	}
}

// OptContainersIncludes is optional ContainersIncludes.
type OptContainersIncludes struct {
	Value ContainersIncludes
	Set   bool
}

// IsSet returns true if OptContainersIncludes was set.
func (o OptContainersIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainersIncludes) Reset() {
	var v ContainersIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainersIncludes) SetTo(v ContainersIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainersIncludes) Get() (v ContainersIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainersIncludes) Or(d ContainersIncludes) ContainersIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainersListServersPage returns new OptContainersListServersPage with value set to v.
func NewOptContainersListServersPage(v ContainersListServersPage) OptContainersListServersPage {
	return OptContainersListServersPage{
		Value: v,
		Set:   true,
	}
}

// OptContainersListServersPage is optional ContainersListServersPage.
type OptContainersListServersPage struct {
	Value ContainersListServersPage
	Set   bool
}

// IsSet returns true if OptContainersListServersPage was set.
func (o OptContainersListServersPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainersListServersPage) Reset() {
	var v ContainersListServersPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainersListServersPage) SetTo(v ContainersListServersPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainersListServersPage) Get() (v ContainersListServersPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainersListServersPage) Or(d ContainersListServersPage) ContainersListServersPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainersMeta returns new OptContainersMeta with value set to v.
func NewOptContainersMeta(v ContainersMeta) OptContainersMeta {
	return OptContainersMeta{
		Value: v,
		Set:   true,
	}
}

// OptContainersMeta is optional ContainersMeta.
type OptContainersMeta struct {
	Value ContainersMeta
	Set   bool
}

// IsSet returns true if OptContainersMeta was set.
func (o OptContainersMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainersMeta) Reset() {
	var v ContainersMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainersMeta) SetTo(v ContainersMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainersMeta) Get() (v ContainersMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainersMeta) Or(d ContainersMeta) ContainersMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateApiKeyReq returns new OptCreateApiKeyReq with value set to v.
func NewOptCreateApiKeyReq(v CreateApiKeyReq) OptCreateApiKeyReq {
	return OptCreateApiKeyReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateApiKeyReq is optional CreateApiKeyReq.
type OptCreateApiKeyReq struct {
	Value CreateApiKeyReq
	Set   bool
}

// IsSet returns true if OptCreateApiKeyReq was set.
func (o OptCreateApiKeyReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateApiKeyReq) Reset() {
	var v CreateApiKeyReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateApiKeyReq) SetTo(v CreateApiKeyReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateApiKeyReq) Get() (v CreateApiKeyReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateApiKeyReq) Or(d CreateApiKeyReq) CreateApiKeyReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateApiKeyReqCapabilities returns new OptCreateApiKeyReqCapabilities with value set to v.
func NewOptCreateApiKeyReqCapabilities(v CreateApiKeyReqCapabilities) OptCreateApiKeyReqCapabilities {
	return OptCreateApiKeyReqCapabilities{
		Value: v,
		Set:   true,
	}
}

// OptCreateApiKeyReqCapabilities is optional CreateApiKeyReqCapabilities.
type OptCreateApiKeyReqCapabilities struct {
	Value CreateApiKeyReqCapabilities
	Set   bool
}

// IsSet returns true if OptCreateApiKeyReqCapabilities was set.
func (o OptCreateApiKeyReqCapabilities) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateApiKeyReqCapabilities) Reset() {
	var v CreateApiKeyReqCapabilities
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateApiKeyReqCapabilities) SetTo(v CreateApiKeyReqCapabilities) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateApiKeyReqCapabilities) Get() (v CreateApiKeyReqCapabilities, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateApiKeyReqCapabilities) Or(d CreateApiKeyReqCapabilities) CreateApiKeyReqCapabilities {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateBillingMethodReq returns new OptCreateBillingMethodReq with value set to v.
func NewOptCreateBillingMethodReq(v CreateBillingMethodReq) OptCreateBillingMethodReq {
	return OptCreateBillingMethodReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateBillingMethodReq is optional CreateBillingMethodReq.
type OptCreateBillingMethodReq struct {
	Value CreateBillingMethodReq
	Set   bool
}

// IsSet returns true if OptCreateBillingMethodReq was set.
func (o OptCreateBillingMethodReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateBillingMethodReq) Reset() {
	var v CreateBillingMethodReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateBillingMethodReq) SetTo(v CreateBillingMethodReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateBillingMethodReq) Get() (v CreateBillingMethodReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateBillingMethodReq) Or(d CreateBillingMethodReq) CreateBillingMethodReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateContainerInstanceJobReq returns new OptCreateContainerInstanceJobReq with value set to v.
func NewOptCreateContainerInstanceJobReq(v CreateContainerInstanceJobReq) OptCreateContainerInstanceJobReq {
	return OptCreateContainerInstanceJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateContainerInstanceJobReq is optional CreateContainerInstanceJobReq.
type OptCreateContainerInstanceJobReq struct {
	Value CreateContainerInstanceJobReq
	Set   bool
}

// IsSet returns true if OptCreateContainerInstanceJobReq was set.
func (o OptCreateContainerInstanceJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateContainerInstanceJobReq) Reset() {
	var v CreateContainerInstanceJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateContainerInstanceJobReq) SetTo(v CreateContainerInstanceJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateContainerInstanceJobReq) Get() (v CreateContainerInstanceJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateContainerInstanceJobReq) Or(d CreateContainerInstanceJobReq) CreateContainerInstanceJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateContainerReq returns new OptCreateContainerReq with value set to v.
func NewOptCreateContainerReq(v CreateContainerReq) OptCreateContainerReq {
	return OptCreateContainerReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateContainerReq is optional CreateContainerReq.
type OptCreateContainerReq struct {
	Value CreateContainerReq
	Set   bool
}

// IsSet returns true if OptCreateContainerReq was set.
func (o OptCreateContainerReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateContainerReq) Reset() {
	var v CreateContainerReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateContainerReq) SetTo(v CreateContainerReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateContainerReq) Get() (v CreateContainerReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateContainerReq) Or(d CreateContainerReq) CreateContainerReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateContainerReqAnnotations returns new OptCreateContainerReqAnnotations with value set to v.
func NewOptCreateContainerReqAnnotations(v CreateContainerReqAnnotations) OptCreateContainerReqAnnotations {
	return OptCreateContainerReqAnnotations{
		Value: v,
		Set:   true,
	}
}

// OptCreateContainerReqAnnotations is optional CreateContainerReqAnnotations.
type OptCreateContainerReqAnnotations struct {
	Value CreateContainerReqAnnotations
	Set   bool
}

// IsSet returns true if OptCreateContainerReqAnnotations was set.
func (o OptCreateContainerReqAnnotations) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateContainerReqAnnotations) Reset() {
	var v CreateContainerReqAnnotations
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateContainerReqAnnotations) SetTo(v CreateContainerReqAnnotations) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateContainerReqAnnotations) Get() (v CreateContainerReqAnnotations, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateContainerReqAnnotations) Or(d CreateContainerReqAnnotations) CreateContainerReqAnnotations {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateDNSRecordReq returns new OptCreateDNSRecordReq with value set to v.
func NewOptCreateDNSRecordReq(v CreateDNSRecordReq) OptCreateDNSRecordReq {
	return OptCreateDNSRecordReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateDNSRecordReq is optional CreateDNSRecordReq.
type OptCreateDNSRecordReq struct {
	Value CreateDNSRecordReq
	Set   bool
}

// IsSet returns true if OptCreateDNSRecordReq was set.
func (o OptCreateDNSRecordReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateDNSRecordReq) Reset() {
	var v CreateDNSRecordReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateDNSRecordReq) SetTo(v CreateDNSRecordReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateDNSRecordReq) Get() (v CreateDNSRecordReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateDNSRecordReq) Or(d CreateDNSRecordReq) CreateDNSRecordReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateDNSZoneReq returns new OptCreateDNSZoneReq with value set to v.
func NewOptCreateDNSZoneReq(v CreateDNSZoneReq) OptCreateDNSZoneReq {
	return OptCreateDNSZoneReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateDNSZoneReq is optional CreateDNSZoneReq.
type OptCreateDNSZoneReq struct {
	Value CreateDNSZoneReq
	Set   bool
}

// IsSet returns true if OptCreateDNSZoneReq was set.
func (o OptCreateDNSZoneReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateDNSZoneReq) Reset() {
	var v CreateDNSZoneReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateDNSZoneReq) SetTo(v CreateDNSZoneReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateDNSZoneReq) Get() (v CreateDNSZoneReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateDNSZoneReq) Or(d CreateDNSZoneReq) CreateDNSZoneReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateEnvironmentJobReq returns new OptCreateEnvironmentJobReq with value set to v.
func NewOptCreateEnvironmentJobReq(v CreateEnvironmentJobReq) OptCreateEnvironmentJobReq {
	return OptCreateEnvironmentJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateEnvironmentJobReq is optional CreateEnvironmentJobReq.
type OptCreateEnvironmentJobReq struct {
	Value CreateEnvironmentJobReq
	Set   bool
}

// IsSet returns true if OptCreateEnvironmentJobReq was set.
func (o OptCreateEnvironmentJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateEnvironmentJobReq) Reset() {
	var v CreateEnvironmentJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateEnvironmentJobReq) SetTo(v CreateEnvironmentJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateEnvironmentJobReq) Get() (v CreateEnvironmentJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateEnvironmentJobReq) Or(d CreateEnvironmentJobReq) CreateEnvironmentJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateEnvironmentReq returns new OptCreateEnvironmentReq with value set to v.
func NewOptCreateEnvironmentReq(v CreateEnvironmentReq) OptCreateEnvironmentReq {
	return OptCreateEnvironmentReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateEnvironmentReq is optional CreateEnvironmentReq.
type OptCreateEnvironmentReq struct {
	Value CreateEnvironmentReq
	Set   bool
}

// IsSet returns true if OptCreateEnvironmentReq was set.
func (o OptCreateEnvironmentReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateEnvironmentReq) Reset() {
	var v CreateEnvironmentReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateEnvironmentReq) SetTo(v CreateEnvironmentReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateEnvironmentReq) Get() (v CreateEnvironmentReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateEnvironmentReq) Or(d CreateEnvironmentReq) CreateEnvironmentReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateHubInviteReq returns new OptCreateHubInviteReq with value set to v.
func NewOptCreateHubInviteReq(v CreateHubInviteReq) OptCreateHubInviteReq {
	return OptCreateHubInviteReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateHubInviteReq is optional CreateHubInviteReq.
type OptCreateHubInviteReq struct {
	Value CreateHubInviteReq
	Set   bool
}

// IsSet returns true if OptCreateHubInviteReq was set.
func (o OptCreateHubInviteReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateHubInviteReq) Reset() {
	var v CreateHubInviteReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateHubInviteReq) SetTo(v CreateHubInviteReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateHubInviteReq) Get() (v CreateHubInviteReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateHubInviteReq) Or(d CreateHubInviteReq) CreateHubInviteReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateHubInviteReqPermissions returns new OptCreateHubInviteReqPermissions with value set to v.
func NewOptCreateHubInviteReqPermissions(v CreateHubInviteReqPermissions) OptCreateHubInviteReqPermissions {
	return OptCreateHubInviteReqPermissions{
		Value: v,
		Set:   true,
	}
}

// OptCreateHubInviteReqPermissions is optional CreateHubInviteReqPermissions.
type OptCreateHubInviteReqPermissions struct {
	Value CreateHubInviteReqPermissions
	Set   bool
}

// IsSet returns true if OptCreateHubInviteReqPermissions was set.
func (o OptCreateHubInviteReqPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateHubInviteReqPermissions) Reset() {
	var v CreateHubInviteReqPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateHubInviteReqPermissions) SetTo(v CreateHubInviteReqPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateHubInviteReqPermissions) Get() (v CreateHubInviteReqPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateHubInviteReqPermissions) Or(d CreateHubInviteReqPermissions) CreateHubInviteReqPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateHubInviteReqRole returns new OptCreateHubInviteReqRole with value set to v.
func NewOptCreateHubInviteReqRole(v CreateHubInviteReqRole) OptCreateHubInviteReqRole {
	return OptCreateHubInviteReqRole{
		Value: v,
		Set:   true,
	}
}

// OptCreateHubInviteReqRole is optional CreateHubInviteReqRole.
type OptCreateHubInviteReqRole struct {
	Value CreateHubInviteReqRole
	Set   bool
}

// IsSet returns true if OptCreateHubInviteReqRole was set.
func (o OptCreateHubInviteReqRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateHubInviteReqRole) Reset() {
	var v CreateHubInviteReqRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateHubInviteReqRole) SetTo(v CreateHubInviteReqRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateHubInviteReqRole) Get() (v CreateHubInviteReqRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateHubInviteReqRole) Or(d CreateHubInviteReqRole) CreateHubInviteReqRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateHubReq returns new OptCreateHubReq with value set to v.
func NewOptCreateHubReq(v CreateHubReq) OptCreateHubReq {
	return OptCreateHubReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateHubReq is optional CreateHubReq.
type OptCreateHubReq struct {
	Value CreateHubReq
	Set   bool
}

// IsSet returns true if OptCreateHubReq was set.
func (o OptCreateHubReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateHubReq) Reset() {
	var v CreateHubReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateHubReq) SetTo(v CreateHubReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateHubReq) Get() (v CreateHubReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateHubReq) Or(d CreateHubReq) CreateHubReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateHubReqWebhooks returns new OptCreateHubReqWebhooks with value set to v.
func NewOptCreateHubReqWebhooks(v CreateHubReqWebhooks) OptCreateHubReqWebhooks {
	return OptCreateHubReqWebhooks{
		Value: v,
		Set:   true,
	}
}

// OptCreateHubReqWebhooks is optional CreateHubReqWebhooks.
type OptCreateHubReqWebhooks struct {
	Value CreateHubReqWebhooks
	Set   bool
}

// IsSet returns true if OptCreateHubReqWebhooks was set.
func (o OptCreateHubReqWebhooks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateHubReqWebhooks) Reset() {
	var v CreateHubReqWebhooks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateHubReqWebhooks) SetTo(v CreateHubReqWebhooks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateHubReqWebhooks) Get() (v CreateHubReqWebhooks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateHubReqWebhooks) Or(d CreateHubReqWebhooks) CreateHubReqWebhooks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateImageCollectionJobReq returns new OptCreateImageCollectionJobReq with value set to v.
func NewOptCreateImageCollectionJobReq(v CreateImageCollectionJobReq) OptCreateImageCollectionJobReq {
	return OptCreateImageCollectionJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateImageCollectionJobReq is optional CreateImageCollectionJobReq.
type OptCreateImageCollectionJobReq struct {
	Value CreateImageCollectionJobReq
	Set   bool
}

// IsSet returns true if OptCreateImageCollectionJobReq was set.
func (o OptCreateImageCollectionJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateImageCollectionJobReq) Reset() {
	var v CreateImageCollectionJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateImageCollectionJobReq) SetTo(v CreateImageCollectionJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateImageCollectionJobReq) Get() (v CreateImageCollectionJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateImageCollectionJobReq) Or(d CreateImageCollectionJobReq) CreateImageCollectionJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateImageJobReq returns new OptCreateImageJobReq with value set to v.
func NewOptCreateImageJobReq(v CreateImageJobReq) OptCreateImageJobReq {
	return OptCreateImageJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateImageJobReq is optional CreateImageJobReq.
type OptCreateImageJobReq struct {
	Value CreateImageJobReq
	Set   bool
}

// IsSet returns true if OptCreateImageJobReq was set.
func (o OptCreateImageJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateImageJobReq) Reset() {
	var v CreateImageJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateImageJobReq) SetTo(v CreateImageJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateImageJobReq) Get() (v CreateImageJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateImageJobReq) Or(d CreateImageJobReq) CreateImageJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateInvoiceJobReq returns new OptCreateInvoiceJobReq with value set to v.
func NewOptCreateInvoiceJobReq(v CreateInvoiceJobReq) OptCreateInvoiceJobReq {
	return OptCreateInvoiceJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateInvoiceJobReq is optional CreateInvoiceJobReq.
type OptCreateInvoiceJobReq struct {
	Value CreateInvoiceJobReq
	Set   bool
}

// IsSet returns true if OptCreateInvoiceJobReq was set.
func (o OptCreateInvoiceJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateInvoiceJobReq) Reset() {
	var v CreateInvoiceJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateInvoiceJobReq) SetTo(v CreateInvoiceJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateInvoiceJobReq) Get() (v CreateInvoiceJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateInvoiceJobReq) Or(d CreateInvoiceJobReq) CreateInvoiceJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateNetworkJobReq returns new OptCreateNetworkJobReq with value set to v.
func NewOptCreateNetworkJobReq(v CreateNetworkJobReq) OptCreateNetworkJobReq {
	return OptCreateNetworkJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateNetworkJobReq is optional CreateNetworkJobReq.
type OptCreateNetworkJobReq struct {
	Value CreateNetworkJobReq
	Set   bool
}

// IsSet returns true if OptCreateNetworkJobReq was set.
func (o OptCreateNetworkJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateNetworkJobReq) Reset() {
	var v CreateNetworkJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateNetworkJobReq) SetTo(v CreateNetworkJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateNetworkJobReq) Get() (v CreateNetworkJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateNetworkJobReq) Or(d CreateNetworkJobReq) CreateNetworkJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateOrderJobReq returns new OptCreateOrderJobReq with value set to v.
func NewOptCreateOrderJobReq(v CreateOrderJobReq) OptCreateOrderJobReq {
	return OptCreateOrderJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateOrderJobReq is optional CreateOrderJobReq.
type OptCreateOrderJobReq struct {
	Value CreateOrderJobReq
	Set   bool
}

// IsSet returns true if OptCreateOrderJobReq was set.
func (o OptCreateOrderJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateOrderJobReq) Reset() {
	var v CreateOrderJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateOrderJobReq) SetTo(v CreateOrderJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateOrderJobReq) Get() (v CreateOrderJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateOrderJobReq) Or(d CreateOrderJobReq) CreateOrderJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateOrderReq returns new OptCreateOrderReq with value set to v.
func NewOptCreateOrderReq(v CreateOrderReq) OptCreateOrderReq {
	return OptCreateOrderReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateOrderReq is optional CreateOrderReq.
type OptCreateOrderReq struct {
	Value CreateOrderReq
	Set   bool
}

// IsSet returns true if OptCreateOrderReq was set.
func (o OptCreateOrderReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateOrderReq) Reset() {
	var v CreateOrderReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateOrderReq) SetTo(v CreateOrderReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateOrderReq) Get() (v CreateOrderReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateOrderReq) Or(d CreateOrderReq) CreateOrderReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateOrderReqTermLength returns new OptCreateOrderReqTermLength with value set to v.
func NewOptCreateOrderReqTermLength(v CreateOrderReqTermLength) OptCreateOrderReqTermLength {
	return OptCreateOrderReqTermLength{
		Value: v,
		Set:   true,
	}
}

// OptCreateOrderReqTermLength is optional CreateOrderReqTermLength.
type OptCreateOrderReqTermLength struct {
	Value CreateOrderReqTermLength
	Set   bool
}

// IsSet returns true if OptCreateOrderReqTermLength was set.
func (o OptCreateOrderReqTermLength) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateOrderReqTermLength) Reset() {
	var v CreateOrderReqTermLength
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateOrderReqTermLength) SetTo(v CreateOrderReqTermLength) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateOrderReqTermLength) Get() (v CreateOrderReqTermLength, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateOrderReqTermLength) Or(d CreateOrderReqTermLength) CreateOrderReqTermLength {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePipelineJobReq returns new OptCreatePipelineJobReq with value set to v.
func NewOptCreatePipelineJobReq(v CreatePipelineJobReq) OptCreatePipelineJobReq {
	return OptCreatePipelineJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreatePipelineJobReq is optional CreatePipelineJobReq.
type OptCreatePipelineJobReq struct {
	Value CreatePipelineJobReq
	Set   bool
}

// IsSet returns true if OptCreatePipelineJobReq was set.
func (o OptCreatePipelineJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePipelineJobReq) Reset() {
	var v CreatePipelineJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePipelineJobReq) SetTo(v CreatePipelineJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePipelineJobReq) Get() (v CreatePipelineJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePipelineJobReq) Or(d CreatePipelineJobReq) CreatePipelineJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePipelineTriggerKeyReq returns new OptCreatePipelineTriggerKeyReq with value set to v.
func NewOptCreatePipelineTriggerKeyReq(v CreatePipelineTriggerKeyReq) OptCreatePipelineTriggerKeyReq {
	return OptCreatePipelineTriggerKeyReq{
		Value: v,
		Set:   true,
	}
}

// OptCreatePipelineTriggerKeyReq is optional CreatePipelineTriggerKeyReq.
type OptCreatePipelineTriggerKeyReq struct {
	Value CreatePipelineTriggerKeyReq
	Set   bool
}

// IsSet returns true if OptCreatePipelineTriggerKeyReq was set.
func (o OptCreatePipelineTriggerKeyReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePipelineTriggerKeyReq) Reset() {
	var v CreatePipelineTriggerKeyReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePipelineTriggerKeyReq) SetTo(v CreatePipelineTriggerKeyReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePipelineTriggerKeyReq) Get() (v CreatePipelineTriggerKeyReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePipelineTriggerKeyReq) Or(d CreatePipelineTriggerKeyReq) CreatePipelineTriggerKeyReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateProviderJobReq returns new OptCreateProviderJobReq with value set to v.
func NewOptCreateProviderJobReq(v CreateProviderJobReq) OptCreateProviderJobReq {
	return OptCreateProviderJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateProviderJobReq is optional CreateProviderJobReq.
type OptCreateProviderJobReq struct {
	Value CreateProviderJobReq
	Set   bool
}

// IsSet returns true if OptCreateProviderJobReq was set.
func (o OptCreateProviderJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateProviderJobReq) Reset() {
	var v CreateProviderJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateProviderJobReq) SetTo(v CreateProviderJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateProviderJobReq) Get() (v CreateProviderJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateProviderJobReq) Or(d CreateProviderJobReq) CreateProviderJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateProviderReq returns new OptCreateProviderReq with value set to v.
func NewOptCreateProviderReq(v CreateProviderReq) OptCreateProviderReq {
	return OptCreateProviderReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateProviderReq is optional CreateProviderReq.
type OptCreateProviderReq struct {
	Value CreateProviderReq
	Set   bool
}

// IsSet returns true if OptCreateProviderReq was set.
func (o OptCreateProviderReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateProviderReq) Reset() {
	var v CreateProviderReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateProviderReq) SetTo(v CreateProviderReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateProviderReq) Get() (v CreateProviderReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateProviderReq) Or(d CreateProviderReq) CreateProviderReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateProviderReqIntegrationAbstraction returns new OptCreateProviderReqIntegrationAbstraction with value set to v.
func NewOptCreateProviderReqIntegrationAbstraction(v CreateProviderReqIntegrationAbstraction) OptCreateProviderReqIntegrationAbstraction {
	return OptCreateProviderReqIntegrationAbstraction{
		Value: v,
		Set:   true,
	}
}

// OptCreateProviderReqIntegrationAbstraction is optional CreateProviderReqIntegrationAbstraction.
type OptCreateProviderReqIntegrationAbstraction struct {
	Value CreateProviderReqIntegrationAbstraction
	Set   bool
}

// IsSet returns true if OptCreateProviderReqIntegrationAbstraction was set.
func (o OptCreateProviderReqIntegrationAbstraction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateProviderReqIntegrationAbstraction) Reset() {
	var v CreateProviderReqIntegrationAbstraction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateProviderReqIntegrationAbstraction) SetTo(v CreateProviderReqIntegrationAbstraction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateProviderReqIntegrationAbstraction) Get() (v CreateProviderReqIntegrationAbstraction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateProviderReqIntegrationAbstraction) Or(d CreateProviderReqIntegrationAbstraction) CreateProviderReqIntegrationAbstraction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateProviderReqIntegrationNative returns new OptCreateProviderReqIntegrationNative with value set to v.
func NewOptCreateProviderReqIntegrationNative(v CreateProviderReqIntegrationNative) OptCreateProviderReqIntegrationNative {
	return OptCreateProviderReqIntegrationNative{
		Value: v,
		Set:   true,
	}
}

// OptCreateProviderReqIntegrationNative is optional CreateProviderReqIntegrationNative.
type OptCreateProviderReqIntegrationNative struct {
	Value CreateProviderReqIntegrationNative
	Set   bool
}

// IsSet returns true if OptCreateProviderReqIntegrationNative was set.
func (o OptCreateProviderReqIntegrationNative) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateProviderReqIntegrationNative) Reset() {
	var v CreateProviderReqIntegrationNative
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateProviderReqIntegrationNative) SetTo(v CreateProviderReqIntegrationNative) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateProviderReqIntegrationNative) Get() (v CreateProviderReqIntegrationNative, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateProviderReqIntegrationNative) Or(d CreateProviderReqIntegrationNative) CreateProviderReqIntegrationNative {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateSDNNetworkReq returns new OptCreateSDNNetworkReq with value set to v.
func NewOptCreateSDNNetworkReq(v CreateSDNNetworkReq) OptCreateSDNNetworkReq {
	return OptCreateSDNNetworkReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateSDNNetworkReq is optional CreateSDNNetworkReq.
type OptCreateSDNNetworkReq struct {
	Value CreateSDNNetworkReq
	Set   bool
}

// IsSet returns true if OptCreateSDNNetworkReq was set.
func (o OptCreateSDNNetworkReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateSDNNetworkReq) Reset() {
	var v CreateSDNNetworkReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateSDNNetworkReq) SetTo(v CreateSDNNetworkReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateSDNNetworkReq) Get() (v CreateSDNNetworkReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateSDNNetworkReq) Or(d CreateSDNNetworkReq) CreateSDNNetworkReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateServerReq returns new OptCreateServerReq with value set to v.
func NewOptCreateServerReq(v CreateServerReq) OptCreateServerReq {
	return OptCreateServerReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateServerReq is optional CreateServerReq.
type OptCreateServerReq struct {
	Value CreateServerReq
	Set   bool
}

// IsSet returns true if OptCreateServerReq was set.
func (o OptCreateServerReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateServerReq) Reset() {
	var v CreateServerReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateServerReq) SetTo(v CreateServerReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateServerReq) Get() (v CreateServerReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateServerReq) Or(d CreateServerReq) CreateServerReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateServerReqServersItemAdvancedItemProvisionOptions returns new OptCreateServerReqServersItemAdvancedItemProvisionOptions with value set to v.
func NewOptCreateServerReqServersItemAdvancedItemProvisionOptions(v CreateServerReqServersItemAdvancedItemProvisionOptions) OptCreateServerReqServersItemAdvancedItemProvisionOptions {
	return OptCreateServerReqServersItemAdvancedItemProvisionOptions{
		Value: v,
		Set:   true,
	}
}

// OptCreateServerReqServersItemAdvancedItemProvisionOptions is optional CreateServerReqServersItemAdvancedItemProvisionOptions.
type OptCreateServerReqServersItemAdvancedItemProvisionOptions struct {
	Value CreateServerReqServersItemAdvancedItemProvisionOptions
	Set   bool
}

// IsSet returns true if OptCreateServerReqServersItemAdvancedItemProvisionOptions was set.
func (o OptCreateServerReqServersItemAdvancedItemProvisionOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateServerReqServersItemAdvancedItemProvisionOptions) Reset() {
	var v CreateServerReqServersItemAdvancedItemProvisionOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateServerReqServersItemAdvancedItemProvisionOptions) SetTo(v CreateServerReqServersItemAdvancedItemProvisionOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateServerReqServersItemAdvancedItemProvisionOptions) Get() (v CreateServerReqServersItemAdvancedItemProvisionOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateServerReqServersItemAdvancedItemProvisionOptions) Or(d CreateServerReqServersItemAdvancedItemProvisionOptions) CreateServerReqServersItemAdvancedItemProvisionOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateStackBuildJobReq returns new OptCreateStackBuildJobReq with value set to v.
func NewOptCreateStackBuildJobReq(v CreateStackBuildJobReq) OptCreateStackBuildJobReq {
	return OptCreateStackBuildJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateStackBuildJobReq is optional CreateStackBuildJobReq.
type OptCreateStackBuildJobReq struct {
	Value CreateStackBuildJobReq
	Set   bool
}

// IsSet returns true if OptCreateStackBuildJobReq was set.
func (o OptCreateStackBuildJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateStackBuildJobReq) Reset() {
	var v CreateStackBuildJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateStackBuildJobReq) SetTo(v CreateStackBuildJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateStackBuildJobReq) Get() (v CreateStackBuildJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateStackBuildJobReq) Or(d CreateStackBuildJobReq) CreateStackBuildJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateStackJobReq returns new OptCreateStackJobReq with value set to v.
func NewOptCreateStackJobReq(v CreateStackJobReq) OptCreateStackJobReq {
	return OptCreateStackJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateStackJobReq is optional CreateStackJobReq.
type OptCreateStackJobReq struct {
	Value CreateStackJobReq
	Set   bool
}

// IsSet returns true if OptCreateStackJobReq was set.
func (o OptCreateStackJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateStackJobReq) Reset() {
	var v CreateStackJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateStackJobReq) SetTo(v CreateStackJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateStackJobReq) Get() (v CreateStackJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateStackJobReq) Or(d CreateStackJobReq) CreateStackJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateVPNUserReq returns new OptCreateVPNUserReq with value set to v.
func NewOptCreateVPNUserReq(v CreateVPNUserReq) OptCreateVPNUserReq {
	return OptCreateVPNUserReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateVPNUserReq is optional CreateVPNUserReq.
type OptCreateVPNUserReq struct {
	Value CreateVPNUserReq
	Set   bool
}

// IsSet returns true if OptCreateVPNUserReq was set.
func (o OptCreateVPNUserReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateVPNUserReq) Reset() {
	var v CreateVPNUserReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateVPNUserReq) SetTo(v CreateVPNUserReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateVPNUserReq) Get() (v CreateVPNUserReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateVPNUserReq) Or(d CreateVPNUserReq) CreateVPNUserReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatorInclude returns new OptCreatorInclude with value set to v.
func NewOptCreatorInclude(v CreatorInclude) OptCreatorInclude {
	return OptCreatorInclude{
		Value: v,
		Set:   true,
	}
}

// OptCreatorInclude is optional CreatorInclude.
type OptCreatorInclude struct {
	Value CreatorInclude
	Set   bool
}

// IsSet returns true if OptCreatorInclude was set.
func (o OptCreatorInclude) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatorInclude) Reset() {
	var v CreatorInclude
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatorInclude) SetTo(v CreatorInclude) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatorInclude) Get() (v CreatorInclude, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatorInclude) Or(d CreatorInclude) CreatorInclude {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatorIncludeAPIKeys returns new OptCreatorIncludeAPIKeys with value set to v.
func NewOptCreatorIncludeAPIKeys(v CreatorIncludeAPIKeys) OptCreatorIncludeAPIKeys {
	return OptCreatorIncludeAPIKeys{
		Value: v,
		Set:   true,
	}
}

// OptCreatorIncludeAPIKeys is optional CreatorIncludeAPIKeys.
type OptCreatorIncludeAPIKeys struct {
	Value CreatorIncludeAPIKeys
	Set   bool
}

// IsSet returns true if OptCreatorIncludeAPIKeys was set.
func (o OptCreatorIncludeAPIKeys) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatorIncludeAPIKeys) Reset() {
	var v CreatorIncludeAPIKeys
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatorIncludeAPIKeys) SetTo(v CreatorIncludeAPIKeys) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatorIncludeAPIKeys) Get() (v CreatorIncludeAPIKeys, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatorIncludeAPIKeys) Or(d CreatorIncludeAPIKeys) CreatorIncludeAPIKeys {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatorIncludeAccounts returns new OptCreatorIncludeAccounts with value set to v.
func NewOptCreatorIncludeAccounts(v CreatorIncludeAccounts) OptCreatorIncludeAccounts {
	return OptCreatorIncludeAccounts{
		Value: v,
		Set:   true,
	}
}

// OptCreatorIncludeAccounts is optional CreatorIncludeAccounts.
type OptCreatorIncludeAccounts struct {
	Value CreatorIncludeAccounts
	Set   bool
}

// IsSet returns true if OptCreatorIncludeAccounts was set.
func (o OptCreatorIncludeAccounts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatorIncludeAccounts) Reset() {
	var v CreatorIncludeAccounts
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatorIncludeAccounts) SetTo(v CreatorIncludeAccounts) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatorIncludeAccounts) Get() (v CreatorIncludeAccounts, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatorIncludeAccounts) Or(d CreatorIncludeAccounts) CreatorIncludeAccounts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatorIncludeEmployees returns new OptCreatorIncludeEmployees with value set to v.
func NewOptCreatorIncludeEmployees(v CreatorIncludeEmployees) OptCreatorIncludeEmployees {
	return OptCreatorIncludeEmployees{
		Value: v,
		Set:   true,
	}
}

// OptCreatorIncludeEmployees is optional CreatorIncludeEmployees.
type OptCreatorIncludeEmployees struct {
	Value CreatorIncludeEmployees
	Set   bool
}

// IsSet returns true if OptCreatorIncludeEmployees was set.
func (o OptCreatorIncludeEmployees) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatorIncludeEmployees) Reset() {
	var v CreatorIncludeEmployees
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatorIncludeEmployees) SetTo(v CreatorIncludeEmployees) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatorIncludeEmployees) Get() (v CreatorIncludeEmployees, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatorIncludeEmployees) Or(d CreatorIncludeEmployees) CreatorIncludeEmployees {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatorIncludeEnvironments returns new OptCreatorIncludeEnvironments with value set to v.
func NewOptCreatorIncludeEnvironments(v CreatorIncludeEnvironments) OptCreatorIncludeEnvironments {
	return OptCreatorIncludeEnvironments{
		Value: v,
		Set:   true,
	}
}

// OptCreatorIncludeEnvironments is optional CreatorIncludeEnvironments.
type OptCreatorIncludeEnvironments struct {
	Value CreatorIncludeEnvironments
	Set   bool
}

// IsSet returns true if OptCreatorIncludeEnvironments was set.
func (o OptCreatorIncludeEnvironments) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatorIncludeEnvironments) Reset() {
	var v CreatorIncludeEnvironments
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatorIncludeEnvironments) SetTo(v CreatorIncludeEnvironments) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatorIncludeEnvironments) Get() (v CreatorIncludeEnvironments, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatorIncludeEnvironments) Or(d CreatorIncludeEnvironments) CreatorIncludeEnvironments {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatorIncludeVisitors returns new OptCreatorIncludeVisitors with value set to v.
func NewOptCreatorIncludeVisitors(v CreatorIncludeVisitors) OptCreatorIncludeVisitors {
	return OptCreatorIncludeVisitors{
		Value: v,
		Set:   true,
	}
}

// OptCreatorIncludeVisitors is optional CreatorIncludeVisitors.
type OptCreatorIncludeVisitors struct {
	Value CreatorIncludeVisitors
	Set   bool
}

// IsSet returns true if OptCreatorIncludeVisitors was set.
func (o OptCreatorIncludeVisitors) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatorIncludeVisitors) Reset() {
	var v CreatorIncludeVisitors
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatorIncludeVisitors) SetTo(v CreatorIncludeVisitors) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatorIncludeVisitors) Get() (v CreatorIncludeVisitors, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatorIncludeVisitors) Or(d CreatorIncludeVisitors) CreatorIncludeVisitors {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCredit returns new OptCredit with value set to v.
func NewOptCredit(v Credit) OptCredit {
	return OptCredit{
		Value: v,
		Set:   true,
	}
}

// OptCredit is optional Credit.
type OptCredit struct {
	Value Credit
	Set   bool
}

// IsSet returns true if OptCredit was set.
func (o OptCredit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCredit) Reset() {
	var v Credit
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCredit) SetTo(v Credit) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCredit) Get() (v Credit, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCredit) Or(d Credit) Credit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreditStateError returns new OptCreditStateError with value set to v.
func NewOptCreditStateError(v CreditStateError) OptCreditStateError {
	return OptCreditStateError{
		Value: v,
		Set:   true,
	}
}

// OptCreditStateError is optional CreditStateError.
type OptCreditStateError struct {
	Value CreditStateError
	Set   bool
}

// IsSet returns true if OptCreditStateError was set.
func (o OptCreditStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreditStateError) Reset() {
	var v CreditStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreditStateError) SetTo(v CreditStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreditStateError) Get() (v CreditStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreditStateError) Or(d CreditStateError) CreditStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDNSRecordTaskReq returns new OptDNSRecordTaskReq with value set to v.
func NewOptDNSRecordTaskReq(v DNSRecordTaskReq) OptDNSRecordTaskReq {
	return OptDNSRecordTaskReq{
		Value: v,
		Set:   true,
	}
}

// OptDNSRecordTaskReq is optional DNSRecordTaskReq.
type OptDNSRecordTaskReq struct {
	Value DNSRecordTaskReq
	Set   bool
}

// IsSet returns true if OptDNSRecordTaskReq was set.
func (o OptDNSRecordTaskReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDNSRecordTaskReq) Reset() {
	var v DNSRecordTaskReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDNSRecordTaskReq) SetTo(v DNSRecordTaskReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDNSRecordTaskReq) Get() (v DNSRecordTaskReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDNSRecordTaskReq) Or(d DNSRecordTaskReq) DNSRecordTaskReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDNSTLSAttemptsFilter returns new OptDNSTLSAttemptsFilter with value set to v.
func NewOptDNSTLSAttemptsFilter(v DNSTLSAttemptsFilter) OptDNSTLSAttemptsFilter {
	return OptDNSTLSAttemptsFilter{
		Value: v,
		Set:   true,
	}
}

// OptDNSTLSAttemptsFilter is optional DNSTLSAttemptsFilter.
type OptDNSTLSAttemptsFilter struct {
	Value DNSTLSAttemptsFilter
	Set   bool
}

// IsSet returns true if OptDNSTLSAttemptsFilter was set.
func (o OptDNSTLSAttemptsFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDNSTLSAttemptsFilter) Reset() {
	var v DNSTLSAttemptsFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDNSTLSAttemptsFilter) SetTo(v DNSTLSAttemptsFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDNSTLSAttemptsFilter) Get() (v DNSTLSAttemptsFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDNSTLSAttemptsFilter) Or(d DNSTLSAttemptsFilter) DNSTLSAttemptsFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDNSTLSAttemptsPage returns new OptDNSTLSAttemptsPage with value set to v.
func NewOptDNSTLSAttemptsPage(v DNSTLSAttemptsPage) OptDNSTLSAttemptsPage {
	return OptDNSTLSAttemptsPage{
		Value: v,
		Set:   true,
	}
}

// OptDNSTLSAttemptsPage is optional DNSTLSAttemptsPage.
type OptDNSTLSAttemptsPage struct {
	Value DNSTLSAttemptsPage
	Set   bool
}

// IsSet returns true if OptDNSTLSAttemptsPage was set.
func (o OptDNSTLSAttemptsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDNSTLSAttemptsPage) Reset() {
	var v DNSTLSAttemptsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDNSTLSAttemptsPage) SetTo(v DNSTLSAttemptsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDNSTLSAttemptsPage) Get() (v DNSTLSAttemptsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDNSTLSAttemptsPage) Or(d DNSTLSAttemptsPage) DNSTLSAttemptsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDNSZoneTaskReq returns new OptDNSZoneTaskReq with value set to v.
func NewOptDNSZoneTaskReq(v DNSZoneTaskReq) OptDNSZoneTaskReq {
	return OptDNSZoneTaskReq{
		Value: v,
		Set:   true,
	}
}

// OptDNSZoneTaskReq is optional DNSZoneTaskReq.
type OptDNSZoneTaskReq struct {
	Value DNSZoneTaskReq
	Set   bool
}

// IsSet returns true if OptDNSZoneTaskReq was set.
func (o OptDNSZoneTaskReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDNSZoneTaskReq) Reset() {
	var v DNSZoneTaskReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDNSZoneTaskReq) SetTo(v DNSZoneTaskReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDNSZoneTaskReq) Get() (v DNSZoneTaskReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDNSZoneTaskReq) Or(d DNSZoneTaskReq) DNSZoneTaskReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v DateTime) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional DateTime.
type OptDateTime struct {
	Value DateTime
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v DateTime
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v DateTime) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v DateTime, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d DateTime) DateTime {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDeploymentStrategy returns new OptDeploymentStrategy with value set to v.
func NewOptDeploymentStrategy(v DeploymentStrategy) OptDeploymentStrategy {
	return OptDeploymentStrategy{
		Value: v,
		Set:   true,
	}
}

// OptDeploymentStrategy is optional DeploymentStrategy.
type OptDeploymentStrategy struct {
	Value DeploymentStrategy
	Set   bool
}

// IsSet returns true if OptDeploymentStrategy was set.
func (o OptDeploymentStrategy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDeploymentStrategy) Reset() {
	var v DeploymentStrategy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDeploymentStrategy) SetTo(v DeploymentStrategy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDeploymentStrategy) Get() (v DeploymentStrategy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDeploymentStrategy) Or(d DeploymentStrategy) DeploymentStrategy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDeploymentStrategyName returns new OptDeploymentStrategyName with value set to v.
func NewOptDeploymentStrategyName(v DeploymentStrategyName) OptDeploymentStrategyName {
	return OptDeploymentStrategyName{
		Value: v,
		Set:   true,
	}
}

// OptDeploymentStrategyName is optional DeploymentStrategyName.
type OptDeploymentStrategyName struct {
	Value DeploymentStrategyName
	Set   bool
}

// IsSet returns true if OptDeploymentStrategyName was set.
func (o OptDeploymentStrategyName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDeploymentStrategyName) Reset() {
	var v DeploymentStrategyName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDeploymentStrategyName) SetTo(v DeploymentStrategyName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDeploymentStrategyName) Get() (v DeploymentStrategyName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDeploymentStrategyName) Or(d DeploymentStrategyName) DeploymentStrategyName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDisableTwoFaReq returns new OptDisableTwoFaReq with value set to v.
func NewOptDisableTwoFaReq(v DisableTwoFaReq) OptDisableTwoFaReq {
	return OptDisableTwoFaReq{
		Value: v,
		Set:   true,
	}
}

// OptDisableTwoFaReq is optional DisableTwoFaReq.
type OptDisableTwoFaReq struct {
	Value DisableTwoFaReq
	Set   bool
}

// IsSet returns true if OptDisableTwoFaReq was set.
func (o OptDisableTwoFaReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDisableTwoFaReq) Reset() {
	var v DisableTwoFaReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDisableTwoFaReq) SetTo(v DisableTwoFaReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDisableTwoFaReq) Get() (v DisableTwoFaReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDisableTwoFaReq) Or(d DisableTwoFaReq) DisableTwoFaReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDnsTlsCertificate returns new OptDnsTlsCertificate with value set to v.
func NewOptDnsTlsCertificate(v DnsTlsCertificate) OptDnsTlsCertificate {
	return OptDnsTlsCertificate{
		Value: v,
		Set:   true,
	}
}

// OptDnsTlsCertificate is optional DnsTlsCertificate.
type OptDnsTlsCertificate struct {
	Value DnsTlsCertificate
	Set   bool
}

// IsSet returns true if OptDnsTlsCertificate was set.
func (o OptDnsTlsCertificate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDnsTlsCertificate) Reset() {
	var v DnsTlsCertificate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDnsTlsCertificate) SetTo(v DnsTlsCertificate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDnsTlsCertificate) Get() (v DnsTlsCertificate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDnsTlsCertificate) Or(d DnsTlsCertificate) DnsTlsCertificate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnvironment returns new OptEnvironment with value set to v.
func NewOptEnvironment(v Environment) OptEnvironment {
	return OptEnvironment{
		Value: v,
		Set:   true,
	}
}

// OptEnvironment is optional Environment.
type OptEnvironment struct {
	Value Environment
	Set   bool
}

// IsSet returns true if OptEnvironment was set.
func (o OptEnvironment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnvironment) Reset() {
	var v Environment
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnvironment) SetTo(v Environment) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnvironment) Get() (v Environment, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnvironment) Or(d Environment) Environment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnvironmentAbout returns new OptEnvironmentAbout with value set to v.
func NewOptEnvironmentAbout(v EnvironmentAbout) OptEnvironmentAbout {
	return OptEnvironmentAbout{
		Value: v,
		Set:   true,
	}
}

// OptEnvironmentAbout is optional EnvironmentAbout.
type OptEnvironmentAbout struct {
	Value EnvironmentAbout
	Set   bool
}

// IsSet returns true if OptEnvironmentAbout was set.
func (o OptEnvironmentAbout) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnvironmentAbout) Reset() {
	var v EnvironmentAbout
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnvironmentAbout) SetTo(v EnvironmentAbout) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnvironmentAbout) Get() (v EnvironmentAbout, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnvironmentAbout) Or(d EnvironmentAbout) EnvironmentAbout {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnvironmentIncludes returns new OptEnvironmentIncludes with value set to v.
func NewOptEnvironmentIncludes(v EnvironmentIncludes) OptEnvironmentIncludes {
	return OptEnvironmentIncludes{
		Value: v,
		Set:   true,
	}
}

// OptEnvironmentIncludes is optional EnvironmentIncludes.
type OptEnvironmentIncludes struct {
	Value EnvironmentIncludes
	Set   bool
}

// IsSet returns true if OptEnvironmentIncludes was set.
func (o OptEnvironmentIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnvironmentIncludes) Reset() {
	var v EnvironmentIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnvironmentIncludes) SetTo(v EnvironmentIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnvironmentIncludes) Get() (v EnvironmentIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnvironmentIncludes) Or(d EnvironmentIncludes) EnvironmentIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnvironmentMeta returns new OptEnvironmentMeta with value set to v.
func NewOptEnvironmentMeta(v EnvironmentMeta) OptEnvironmentMeta {
	return OptEnvironmentMeta{
		Value: v,
		Set:   true,
	}
}

// OptEnvironmentMeta is optional EnvironmentMeta.
type OptEnvironmentMeta struct {
	Value EnvironmentMeta
	Set   bool
}

// IsSet returns true if OptEnvironmentMeta was set.
func (o OptEnvironmentMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnvironmentMeta) Reset() {
	var v EnvironmentMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnvironmentMeta) SetTo(v EnvironmentMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnvironmentMeta) Get() (v EnvironmentMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnvironmentMeta) Or(d EnvironmentMeta) EnvironmentMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnvironmentStateError returns new OptEnvironmentStateError with value set to v.
func NewOptEnvironmentStateError(v EnvironmentStateError) OptEnvironmentStateError {
	return OptEnvironmentStateError{
		Value: v,
		Set:   true,
	}
}

// OptEnvironmentStateError is optional EnvironmentStateError.
type OptEnvironmentStateError struct {
	Value EnvironmentStateError
	Set   bool
}

// IsSet returns true if OptEnvironmentStateError was set.
func (o OptEnvironmentStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnvironmentStateError) Reset() {
	var v EnvironmentStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnvironmentStateError) SetTo(v EnvironmentStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnvironmentStateError) Get() (v EnvironmentStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnvironmentStateError) Or(d EnvironmentStateError) EnvironmentStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnvironmentSummary returns new OptEnvironmentSummary with value set to v.
func NewOptEnvironmentSummary(v EnvironmentSummary) OptEnvironmentSummary {
	return OptEnvironmentSummary{
		Value: v,
		Set:   true,
	}
}

// OptEnvironmentSummary is optional EnvironmentSummary.
type OptEnvironmentSummary struct {
	Value EnvironmentSummary
	Set   bool
}

// IsSet returns true if OptEnvironmentSummary was set.
func (o OptEnvironmentSummary) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnvironmentSummary) Reset() {
	var v EnvironmentSummary
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnvironmentSummary) SetTo(v EnvironmentSummary) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnvironmentSummary) Get() (v EnvironmentSummary, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnvironmentSummary) Or(d EnvironmentSummary) EnvironmentSummary {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptErrorCode returns new OptErrorCode with value set to v.
func NewOptErrorCode(v ErrorCode) OptErrorCode {
	return OptErrorCode{
		Value: v,
		Set:   true,
	}
}

// OptErrorCode is optional ErrorCode.
type OptErrorCode struct {
	Value ErrorCode
	Set   bool
}

// IsSet returns true if OptErrorCode was set.
func (o OptErrorCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorCode) Reset() {
	var v ErrorCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorCode) SetTo(v ErrorCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorCode) Get() (v ErrorCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorCode) Or(d ErrorCode) ErrorCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptErrorStatus returns new OptErrorStatus with value set to v.
func NewOptErrorStatus(v ErrorStatus) OptErrorStatus {
	return OptErrorStatus{
		Value: v,
		Set:   true,
	}
}

// OptErrorStatus is optional ErrorStatus.
type OptErrorStatus struct {
	Value ErrorStatus
	Set   bool
}

// IsSet returns true if OptErrorStatus was set.
func (o OptErrorStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorStatus) Reset() {
	var v ErrorStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorStatus) SetTo(v ErrorStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorStatus) Get() (v ErrorStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorStatus) Or(d ErrorStatus) ErrorStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExpireInstanceSSHTokensOKData returns new OptExpireInstanceSSHTokensOKData with value set to v.
func NewOptExpireInstanceSSHTokensOKData(v ExpireInstanceSSHTokensOKData) OptExpireInstanceSSHTokensOKData {
	return OptExpireInstanceSSHTokensOKData{
		Value: v,
		Set:   true,
	}
}

// OptExpireInstanceSSHTokensOKData is optional ExpireInstanceSSHTokensOKData.
type OptExpireInstanceSSHTokensOKData struct {
	Value ExpireInstanceSSHTokensOKData
	Set   bool
}

// IsSet returns true if OptExpireInstanceSSHTokensOKData was set.
func (o OptExpireInstanceSSHTokensOKData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExpireInstanceSSHTokensOKData) Reset() {
	var v ExpireInstanceSSHTokensOKData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExpireInstanceSSHTokensOKData) SetTo(v ExpireInstanceSSHTokensOKData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExpireInstanceSSHTokensOKData) Get() (v ExpireInstanceSSHTokensOKData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExpireInstanceSSHTokensOKData) Or(d ExpireInstanceSSHTokensOKData) ExpireInstanceSSHTokensOKData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFeaturesSpecAWS returns new OptFeaturesSpecAWS with value set to v.
func NewOptFeaturesSpecAWS(v FeaturesSpecAWS) OptFeaturesSpecAWS {
	return OptFeaturesSpecAWS{
		Value: v,
		Set:   true,
	}
}

// OptFeaturesSpecAWS is optional FeaturesSpecAWS.
type OptFeaturesSpecAWS struct {
	Value FeaturesSpecAWS
	Set   bool
}

// IsSet returns true if OptFeaturesSpecAWS was set.
func (o OptFeaturesSpecAWS) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFeaturesSpecAWS) Reset() {
	var v FeaturesSpecAWS
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFeaturesSpecAWS) SetTo(v FeaturesSpecAWS) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFeaturesSpecAWS) Get() (v FeaturesSpecAWS, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFeaturesSpecAWS) Or(d FeaturesSpecAWS) FeaturesSpecAWS {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGPUSpecExtra returns new OptGPUSpecExtra with value set to v.
func NewOptGPUSpecExtra(v GPUSpecExtra) OptGPUSpecExtra {
	return OptGPUSpecExtra{
		Value: v,
		Set:   true,
	}
}

// OptGPUSpecExtra is optional GPUSpecExtra.
type OptGPUSpecExtra struct {
	Value GPUSpecExtra
	Set   bool
}

// IsSet returns true if OptGPUSpecExtra was set.
func (o OptGPUSpecExtra) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGPUSpecExtra) Reset() {
	var v GPUSpecExtra
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGPUSpecExtra) SetTo(v GPUSpecExtra) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGPUSpecExtra) Get() (v GPUSpecExtra, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGPUSpecExtra) Or(d GPUSpecExtra) GPUSpecExtra {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAccountInvitesFilter returns new OptGetAccountInvitesFilter with value set to v.
func NewOptGetAccountInvitesFilter(v GetAccountInvitesFilter) OptGetAccountInvitesFilter {
	return OptGetAccountInvitesFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetAccountInvitesFilter is optional GetAccountInvitesFilter.
type OptGetAccountInvitesFilter struct {
	Value GetAccountInvitesFilter
	Set   bool
}

// IsSet returns true if OptGetAccountInvitesFilter was set.
func (o OptGetAccountInvitesFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAccountInvitesFilter) Reset() {
	var v GetAccountInvitesFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAccountInvitesFilter) SetTo(v GetAccountInvitesFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAccountInvitesFilter) Get() (v GetAccountInvitesFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAccountInvitesFilter) Or(d GetAccountInvitesFilter) GetAccountInvitesFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAccountInvitesPage returns new OptGetAccountInvitesPage with value set to v.
func NewOptGetAccountInvitesPage(v GetAccountInvitesPage) OptGetAccountInvitesPage {
	return OptGetAccountInvitesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetAccountInvitesPage is optional GetAccountInvitesPage.
type OptGetAccountInvitesPage struct {
	Value GetAccountInvitesPage
	Set   bool
}

// IsSet returns true if OptGetAccountInvitesPage was set.
func (o OptGetAccountInvitesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAccountInvitesPage) Reset() {
	var v GetAccountInvitesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAccountInvitesPage) SetTo(v GetAccountInvitesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAccountInvitesPage) Get() (v GetAccountInvitesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAccountInvitesPage) Or(d GetAccountInvitesPage) GetAccountInvitesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAccountLoginsFilter returns new OptGetAccountLoginsFilter with value set to v.
func NewOptGetAccountLoginsFilter(v GetAccountLoginsFilter) OptGetAccountLoginsFilter {
	return OptGetAccountLoginsFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetAccountLoginsFilter is optional GetAccountLoginsFilter.
type OptGetAccountLoginsFilter struct {
	Value GetAccountLoginsFilter
	Set   bool
}

// IsSet returns true if OptGetAccountLoginsFilter was set.
func (o OptGetAccountLoginsFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAccountLoginsFilter) Reset() {
	var v GetAccountLoginsFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAccountLoginsFilter) SetTo(v GetAccountLoginsFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAccountLoginsFilter) Get() (v GetAccountLoginsFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAccountLoginsFilter) Or(d GetAccountLoginsFilter) GetAccountLoginsFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAccountLoginsPage returns new OptGetAccountLoginsPage with value set to v.
func NewOptGetAccountLoginsPage(v GetAccountLoginsPage) OptGetAccountLoginsPage {
	return OptGetAccountLoginsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetAccountLoginsPage is optional GetAccountLoginsPage.
type OptGetAccountLoginsPage struct {
	Value GetAccountLoginsPage
	Set   bool
}

// IsSet returns true if OptGetAccountLoginsPage was set.
func (o OptGetAccountLoginsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAccountLoginsPage) Reset() {
	var v GetAccountLoginsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAccountLoginsPage) SetTo(v GetAccountLoginsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAccountLoginsPage) Get() (v GetAccountLoginsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAccountLoginsPage) Or(d GetAccountLoginsPage) GetAccountLoginsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAnnouncementsListFilter returns new OptGetAnnouncementsListFilter with value set to v.
func NewOptGetAnnouncementsListFilter(v GetAnnouncementsListFilter) OptGetAnnouncementsListFilter {
	return OptGetAnnouncementsListFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetAnnouncementsListFilter is optional GetAnnouncementsListFilter.
type OptGetAnnouncementsListFilter struct {
	Value GetAnnouncementsListFilter
	Set   bool
}

// IsSet returns true if OptGetAnnouncementsListFilter was set.
func (o OptGetAnnouncementsListFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAnnouncementsListFilter) Reset() {
	var v GetAnnouncementsListFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAnnouncementsListFilter) SetTo(v GetAnnouncementsListFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAnnouncementsListFilter) Get() (v GetAnnouncementsListFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAnnouncementsListFilter) Or(d GetAnnouncementsListFilter) GetAnnouncementsListFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAnnouncementsListPage returns new OptGetAnnouncementsListPage with value set to v.
func NewOptGetAnnouncementsListPage(v GetAnnouncementsListPage) OptGetAnnouncementsListPage {
	return OptGetAnnouncementsListPage{
		Value: v,
		Set:   true,
	}
}

// OptGetAnnouncementsListPage is optional GetAnnouncementsListPage.
type OptGetAnnouncementsListPage struct {
	Value GetAnnouncementsListPage
	Set   bool
}

// IsSet returns true if OptGetAnnouncementsListPage was set.
func (o OptGetAnnouncementsListPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAnnouncementsListPage) Reset() {
	var v GetAnnouncementsListPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAnnouncementsListPage) SetTo(v GetAnnouncementsListPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAnnouncementsListPage) Get() (v GetAnnouncementsListPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAnnouncementsListPage) Or(d GetAnnouncementsListPage) GetAnnouncementsListPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetApiKeysFilter returns new OptGetApiKeysFilter with value set to v.
func NewOptGetApiKeysFilter(v GetApiKeysFilter) OptGetApiKeysFilter {
	return OptGetApiKeysFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetApiKeysFilter is optional GetApiKeysFilter.
type OptGetApiKeysFilter struct {
	Value GetApiKeysFilter
	Set   bool
}

// IsSet returns true if OptGetApiKeysFilter was set.
func (o OptGetApiKeysFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetApiKeysFilter) Reset() {
	var v GetApiKeysFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetApiKeysFilter) SetTo(v GetApiKeysFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetApiKeysFilter) Get() (v GetApiKeysFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetApiKeysFilter) Or(d GetApiKeysFilter) GetApiKeysFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetApiKeysPage returns new OptGetApiKeysPage with value set to v.
func NewOptGetApiKeysPage(v GetApiKeysPage) OptGetApiKeysPage {
	return OptGetApiKeysPage{
		Value: v,
		Set:   true,
	}
}

// OptGetApiKeysPage is optional GetApiKeysPage.
type OptGetApiKeysPage struct {
	Value GetApiKeysPage
	Set   bool
}

// IsSet returns true if OptGetApiKeysPage was set.
func (o OptGetApiKeysPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetApiKeysPage) Reset() {
	var v GetApiKeysPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetApiKeysPage) SetTo(v GetApiKeysPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetApiKeysPage) Get() (v GetApiKeysPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetApiKeysPage) Or(d GetApiKeysPage) GetApiKeysPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetBackupsCollectionPage returns new OptGetBackupsCollectionPage with value set to v.
func NewOptGetBackupsCollectionPage(v GetBackupsCollectionPage) OptGetBackupsCollectionPage {
	return OptGetBackupsCollectionPage{
		Value: v,
		Set:   true,
	}
}

// OptGetBackupsCollectionPage is optional GetBackupsCollectionPage.
type OptGetBackupsCollectionPage struct {
	Value GetBackupsCollectionPage
	Set   bool
}

// IsSet returns true if OptGetBackupsCollectionPage was set.
func (o OptGetBackupsCollectionPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetBackupsCollectionPage) Reset() {
	var v GetBackupsCollectionPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetBackupsCollectionPage) SetTo(v GetBackupsCollectionPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetBackupsCollectionPage) Get() (v GetBackupsCollectionPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetBackupsCollectionPage) Or(d GetBackupsCollectionPage) GetBackupsCollectionPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetBillingMethodsFilter returns new OptGetBillingMethodsFilter with value set to v.
func NewOptGetBillingMethodsFilter(v GetBillingMethodsFilter) OptGetBillingMethodsFilter {
	return OptGetBillingMethodsFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetBillingMethodsFilter is optional GetBillingMethodsFilter.
type OptGetBillingMethodsFilter struct {
	Value GetBillingMethodsFilter
	Set   bool
}

// IsSet returns true if OptGetBillingMethodsFilter was set.
func (o OptGetBillingMethodsFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetBillingMethodsFilter) Reset() {
	var v GetBillingMethodsFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetBillingMethodsFilter) SetTo(v GetBillingMethodsFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetBillingMethodsFilter) Get() (v GetBillingMethodsFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetBillingMethodsFilter) Or(d GetBillingMethodsFilter) GetBillingMethodsFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetBillingMethodsPage returns new OptGetBillingMethodsPage with value set to v.
func NewOptGetBillingMethodsPage(v GetBillingMethodsPage) OptGetBillingMethodsPage {
	return OptGetBillingMethodsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetBillingMethodsPage is optional GetBillingMethodsPage.
type OptGetBillingMethodsPage struct {
	Value GetBillingMethodsPage
	Set   bool
}

// IsSet returns true if OptGetBillingMethodsPage was set.
func (o OptGetBillingMethodsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetBillingMethodsPage) Reset() {
	var v GetBillingMethodsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetBillingMethodsPage) SetTo(v GetBillingMethodsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetBillingMethodsPage) Get() (v GetBillingMethodsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetBillingMethodsPage) Or(d GetBillingMethodsPage) GetBillingMethodsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetBillingOveragesFilter returns new OptGetBillingOveragesFilter with value set to v.
func NewOptGetBillingOveragesFilter(v GetBillingOveragesFilter) OptGetBillingOveragesFilter {
	return OptGetBillingOveragesFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetBillingOveragesFilter is optional GetBillingOveragesFilter.
type OptGetBillingOveragesFilter struct {
	Value GetBillingOveragesFilter
	Set   bool
}

// IsSet returns true if OptGetBillingOveragesFilter was set.
func (o OptGetBillingOveragesFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetBillingOveragesFilter) Reset() {
	var v GetBillingOveragesFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetBillingOveragesFilter) SetTo(v GetBillingOveragesFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetBillingOveragesFilter) Get() (v GetBillingOveragesFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetBillingOveragesFilter) Or(d GetBillingOveragesFilter) GetBillingOveragesFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetBillingOveragesPage returns new OptGetBillingOveragesPage with value set to v.
func NewOptGetBillingOveragesPage(v GetBillingOveragesPage) OptGetBillingOveragesPage {
	return OptGetBillingOveragesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetBillingOveragesPage is optional GetBillingOveragesPage.
type OptGetBillingOveragesPage struct {
	Value GetBillingOveragesPage
	Set   bool
}

// IsSet returns true if OptGetBillingOveragesPage was set.
func (o OptGetBillingOveragesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetBillingOveragesPage) Reset() {
	var v GetBillingOveragesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetBillingOveragesPage) SetTo(v GetBillingOveragesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetBillingOveragesPage) Get() (v GetBillingOveragesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetBillingOveragesPage) Or(d GetBillingOveragesPage) GetBillingOveragesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetBillingServicesFilter returns new OptGetBillingServicesFilter with value set to v.
func NewOptGetBillingServicesFilter(v GetBillingServicesFilter) OptGetBillingServicesFilter {
	return OptGetBillingServicesFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetBillingServicesFilter is optional GetBillingServicesFilter.
type OptGetBillingServicesFilter struct {
	Value GetBillingServicesFilter
	Set   bool
}

// IsSet returns true if OptGetBillingServicesFilter was set.
func (o OptGetBillingServicesFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetBillingServicesFilter) Reset() {
	var v GetBillingServicesFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetBillingServicesFilter) SetTo(v GetBillingServicesFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetBillingServicesFilter) Get() (v GetBillingServicesFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetBillingServicesFilter) Or(d GetBillingServicesFilter) GetBillingServicesFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetBillingServicesPage returns new OptGetBillingServicesPage with value set to v.
func NewOptGetBillingServicesPage(v GetBillingServicesPage) OptGetBillingServicesPage {
	return OptGetBillingServicesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetBillingServicesPage is optional GetBillingServicesPage.
type OptGetBillingServicesPage struct {
	Value GetBillingServicesPage
	Set   bool
}

// IsSet returns true if OptGetBillingServicesPage was set.
func (o OptGetBillingServicesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetBillingServicesPage) Reset() {
	var v GetBillingServicesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetBillingServicesPage) SetTo(v GetBillingServicesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetBillingServicesPage) Get() (v GetBillingServicesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetBillingServicesPage) Or(d GetBillingServicesPage) GetBillingServicesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetBillingSupportPlansFilter returns new OptGetBillingSupportPlansFilter with value set to v.
func NewOptGetBillingSupportPlansFilter(v GetBillingSupportPlansFilter) OptGetBillingSupportPlansFilter {
	return OptGetBillingSupportPlansFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetBillingSupportPlansFilter is optional GetBillingSupportPlansFilter.
type OptGetBillingSupportPlansFilter struct {
	Value GetBillingSupportPlansFilter
	Set   bool
}

// IsSet returns true if OptGetBillingSupportPlansFilter was set.
func (o OptGetBillingSupportPlansFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetBillingSupportPlansFilter) Reset() {
	var v GetBillingSupportPlansFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetBillingSupportPlansFilter) SetTo(v GetBillingSupportPlansFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetBillingSupportPlansFilter) Get() (v GetBillingSupportPlansFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetBillingSupportPlansFilter) Or(d GetBillingSupportPlansFilter) GetBillingSupportPlansFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetBillingSupportPlansPage returns new OptGetBillingSupportPlansPage with value set to v.
func NewOptGetBillingSupportPlansPage(v GetBillingSupportPlansPage) OptGetBillingSupportPlansPage {
	return OptGetBillingSupportPlansPage{
		Value: v,
		Set:   true,
	}
}

// OptGetBillingSupportPlansPage is optional GetBillingSupportPlansPage.
type OptGetBillingSupportPlansPage struct {
	Value GetBillingSupportPlansPage
	Set   bool
}

// IsSet returns true if OptGetBillingSupportPlansPage was set.
func (o OptGetBillingSupportPlansPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetBillingSupportPlansPage) Reset() {
	var v GetBillingSupportPlansPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetBillingSupportPlansPage) SetTo(v GetBillingSupportPlansPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetBillingSupportPlansPage) Get() (v GetBillingSupportPlansPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetBillingSupportPlansPage) Or(d GetBillingSupportPlansPage) GetBillingSupportPlansPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetContainerInstanceVolumesPage returns new OptGetContainerInstanceVolumesPage with value set to v.
func NewOptGetContainerInstanceVolumesPage(v GetContainerInstanceVolumesPage) OptGetContainerInstanceVolumesPage {
	return OptGetContainerInstanceVolumesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetContainerInstanceVolumesPage is optional GetContainerInstanceVolumesPage.
type OptGetContainerInstanceVolumesPage struct {
	Value GetContainerInstanceVolumesPage
	Set   bool
}

// IsSet returns true if OptGetContainerInstanceVolumesPage was set.
func (o OptGetContainerInstanceVolumesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetContainerInstanceVolumesPage) Reset() {
	var v GetContainerInstanceVolumesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetContainerInstanceVolumesPage) SetTo(v GetContainerInstanceVolumesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetContainerInstanceVolumesPage) Get() (v GetContainerInstanceVolumesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetContainerInstanceVolumesPage) Or(d GetContainerInstanceVolumesPage) GetContainerInstanceVolumesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetContainerInstancesTelemetryFilter returns new OptGetContainerInstancesTelemetryFilter with value set to v.
func NewOptGetContainerInstancesTelemetryFilter(v GetContainerInstancesTelemetryFilter) OptGetContainerInstancesTelemetryFilter {
	return OptGetContainerInstancesTelemetryFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetContainerInstancesTelemetryFilter is optional GetContainerInstancesTelemetryFilter.
type OptGetContainerInstancesTelemetryFilter struct {
	Value GetContainerInstancesTelemetryFilter
	Set   bool
}

// IsSet returns true if OptGetContainerInstancesTelemetryFilter was set.
func (o OptGetContainerInstancesTelemetryFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetContainerInstancesTelemetryFilter) Reset() {
	var v GetContainerInstancesTelemetryFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetContainerInstancesTelemetryFilter) SetTo(v GetContainerInstancesTelemetryFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetContainerInstancesTelemetryFilter) Get() (v GetContainerInstancesTelemetryFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetContainerInstancesTelemetryFilter) Or(d GetContainerInstancesTelemetryFilter) GetContainerInstancesTelemetryFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetCreditsFilter returns new OptGetCreditsFilter with value set to v.
func NewOptGetCreditsFilter(v GetCreditsFilter) OptGetCreditsFilter {
	return OptGetCreditsFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetCreditsFilter is optional GetCreditsFilter.
type OptGetCreditsFilter struct {
	Value GetCreditsFilter
	Set   bool
}

// IsSet returns true if OptGetCreditsFilter was set.
func (o OptGetCreditsFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetCreditsFilter) Reset() {
	var v GetCreditsFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetCreditsFilter) SetTo(v GetCreditsFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetCreditsFilter) Get() (v GetCreditsFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetCreditsFilter) Or(d GetCreditsFilter) GetCreditsFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetCreditsPage returns new OptGetCreditsPage with value set to v.
func NewOptGetCreditsPage(v GetCreditsPage) OptGetCreditsPage {
	return OptGetCreditsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetCreditsPage is optional GetCreditsPage.
type OptGetCreditsPage struct {
	Value GetCreditsPage
	Set   bool
}

// IsSet returns true if OptGetCreditsPage was set.
func (o OptGetCreditsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetCreditsPage) Reset() {
	var v GetCreditsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetCreditsPage) SetTo(v GetCreditsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetCreditsPage) Get() (v GetCreditsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetCreditsPage) Or(d GetCreditsPage) GetCreditsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetDeploymentStrategiesOKData returns new OptGetDeploymentStrategiesOKData with value set to v.
func NewOptGetDeploymentStrategiesOKData(v GetDeploymentStrategiesOKData) OptGetDeploymentStrategiesOKData {
	return OptGetDeploymentStrategiesOKData{
		Value: v,
		Set:   true,
	}
}

// OptGetDeploymentStrategiesOKData is optional GetDeploymentStrategiesOKData.
type OptGetDeploymentStrategiesOKData struct {
	Value GetDeploymentStrategiesOKData
	Set   bool
}

// IsSet returns true if OptGetDeploymentStrategiesOKData was set.
func (o OptGetDeploymentStrategiesOKData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetDeploymentStrategiesOKData) Reset() {
	var v GetDeploymentStrategiesOKData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetDeploymentStrategiesOKData) SetTo(v GetDeploymentStrategiesOKData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetDeploymentStrategiesOKData) Get() (v GetDeploymentStrategiesOKData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetDeploymentStrategiesOKData) Or(d GetDeploymentStrategiesOKData) GetDeploymentStrategiesOKData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetEnvironmentByIdOKIncludes returns new OptGetEnvironmentByIdOKIncludes with value set to v.
func NewOptGetEnvironmentByIdOKIncludes(v GetEnvironmentByIdOKIncludes) OptGetEnvironmentByIdOKIncludes {
	return OptGetEnvironmentByIdOKIncludes{
		Value: v,
		Set:   true,
	}
}

// OptGetEnvironmentByIdOKIncludes is optional GetEnvironmentByIdOKIncludes.
type OptGetEnvironmentByIdOKIncludes struct {
	Value GetEnvironmentByIdOKIncludes
	Set   bool
}

// IsSet returns true if OptGetEnvironmentByIdOKIncludes was set.
func (o OptGetEnvironmentByIdOKIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetEnvironmentByIdOKIncludes) Reset() {
	var v GetEnvironmentByIdOKIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetEnvironmentByIdOKIncludes) SetTo(v GetEnvironmentByIdOKIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetEnvironmentByIdOKIncludes) Get() (v GetEnvironmentByIdOKIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetEnvironmentByIdOKIncludes) Or(d GetEnvironmentByIdOKIncludes) GetEnvironmentByIdOKIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetEnvironmentInstancesTelemetryFilter returns new OptGetEnvironmentInstancesTelemetryFilter with value set to v.
func NewOptGetEnvironmentInstancesTelemetryFilter(v GetEnvironmentInstancesTelemetryFilter) OptGetEnvironmentInstancesTelemetryFilter {
	return OptGetEnvironmentInstancesTelemetryFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetEnvironmentInstancesTelemetryFilter is optional GetEnvironmentInstancesTelemetryFilter.
type OptGetEnvironmentInstancesTelemetryFilter struct {
	Value GetEnvironmentInstancesTelemetryFilter
	Set   bool
}

// IsSet returns true if OptGetEnvironmentInstancesTelemetryFilter was set.
func (o OptGetEnvironmentInstancesTelemetryFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetEnvironmentInstancesTelemetryFilter) Reset() {
	var v GetEnvironmentInstancesTelemetryFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetEnvironmentInstancesTelemetryFilter) SetTo(v GetEnvironmentInstancesTelemetryFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetEnvironmentInstancesTelemetryFilter) Get() (v GetEnvironmentInstancesTelemetryFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetEnvironmentInstancesTelemetryFilter) Or(d GetEnvironmentInstancesTelemetryFilter) GetEnvironmentInstancesTelemetryFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetEnvironmentsFilter returns new OptGetEnvironmentsFilter with value set to v.
func NewOptGetEnvironmentsFilter(v GetEnvironmentsFilter) OptGetEnvironmentsFilter {
	return OptGetEnvironmentsFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetEnvironmentsFilter is optional GetEnvironmentsFilter.
type OptGetEnvironmentsFilter struct {
	Value GetEnvironmentsFilter
	Set   bool
}

// IsSet returns true if OptGetEnvironmentsFilter was set.
func (o OptGetEnvironmentsFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetEnvironmentsFilter) Reset() {
	var v GetEnvironmentsFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetEnvironmentsFilter) SetTo(v GetEnvironmentsFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetEnvironmentsFilter) Get() (v GetEnvironmentsFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetEnvironmentsFilter) Or(d GetEnvironmentsFilter) GetEnvironmentsFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetEnvironmentsOKIncludes returns new OptGetEnvironmentsOKIncludes with value set to v.
func NewOptGetEnvironmentsOKIncludes(v GetEnvironmentsOKIncludes) OptGetEnvironmentsOKIncludes {
	return OptGetEnvironmentsOKIncludes{
		Value: v,
		Set:   true,
	}
}

// OptGetEnvironmentsOKIncludes is optional GetEnvironmentsOKIncludes.
type OptGetEnvironmentsOKIncludes struct {
	Value GetEnvironmentsOKIncludes
	Set   bool
}

// IsSet returns true if OptGetEnvironmentsOKIncludes was set.
func (o OptGetEnvironmentsOKIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetEnvironmentsOKIncludes) Reset() {
	var v GetEnvironmentsOKIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetEnvironmentsOKIncludes) SetTo(v GetEnvironmentsOKIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetEnvironmentsOKIncludes) Get() (v GetEnvironmentsOKIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetEnvironmentsOKIncludes) Or(d GetEnvironmentsOKIncludes) GetEnvironmentsOKIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetEnvironmentsPage returns new OptGetEnvironmentsPage with value set to v.
func NewOptGetEnvironmentsPage(v GetEnvironmentsPage) OptGetEnvironmentsPage {
	return OptGetEnvironmentsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetEnvironmentsPage is optional GetEnvironmentsPage.
type OptGetEnvironmentsPage struct {
	Value GetEnvironmentsPage
	Set   bool
}

// IsSet returns true if OptGetEnvironmentsPage was set.
func (o OptGetEnvironmentsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetEnvironmentsPage) Reset() {
	var v GetEnvironmentsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetEnvironmentsPage) SetTo(v GetEnvironmentsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetEnvironmentsPage) Get() (v GetEnvironmentsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetEnvironmentsPage) Or(d GetEnvironmentsPage) GetEnvironmentsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetHubInvitesFilter returns new OptGetHubInvitesFilter with value set to v.
func NewOptGetHubInvitesFilter(v GetHubInvitesFilter) OptGetHubInvitesFilter {
	return OptGetHubInvitesFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetHubInvitesFilter is optional GetHubInvitesFilter.
type OptGetHubInvitesFilter struct {
	Value GetHubInvitesFilter
	Set   bool
}

// IsSet returns true if OptGetHubInvitesFilter was set.
func (o OptGetHubInvitesFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetHubInvitesFilter) Reset() {
	var v GetHubInvitesFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetHubInvitesFilter) SetTo(v GetHubInvitesFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetHubInvitesFilter) Get() (v GetHubInvitesFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetHubInvitesFilter) Or(d GetHubInvitesFilter) GetHubInvitesFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetHubInvitesPage returns new OptGetHubInvitesPage with value set to v.
func NewOptGetHubInvitesPage(v GetHubInvitesPage) OptGetHubInvitesPage {
	return OptGetHubInvitesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetHubInvitesPage is optional GetHubInvitesPage.
type OptGetHubInvitesPage struct {
	Value GetHubInvitesPage
	Set   bool
}

// IsSet returns true if OptGetHubInvitesPage was set.
func (o OptGetHubInvitesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetHubInvitesPage) Reset() {
	var v GetHubInvitesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetHubInvitesPage) SetTo(v GetHubInvitesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetHubInvitesPage) Get() (v GetHubInvitesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetHubInvitesPage) Or(d GetHubInvitesPage) GetHubInvitesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetHubMembersFilter returns new OptGetHubMembersFilter with value set to v.
func NewOptGetHubMembersFilter(v GetHubMembersFilter) OptGetHubMembersFilter {
	return OptGetHubMembersFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetHubMembersFilter is optional GetHubMembersFilter.
type OptGetHubMembersFilter struct {
	Value GetHubMembersFilter
	Set   bool
}

// IsSet returns true if OptGetHubMembersFilter was set.
func (o OptGetHubMembersFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetHubMembersFilter) Reset() {
	var v GetHubMembersFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetHubMembersFilter) SetTo(v GetHubMembersFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetHubMembersFilter) Get() (v GetHubMembersFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetHubMembersFilter) Or(d GetHubMembersFilter) GetHubMembersFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetHubMembersPage returns new OptGetHubMembersPage with value set to v.
func NewOptGetHubMembersPage(v GetHubMembersPage) OptGetHubMembersPage {
	return OptGetHubMembersPage{
		Value: v,
		Set:   true,
	}
}

// OptGetHubMembersPage is optional GetHubMembersPage.
type OptGetHubMembersPage struct {
	Value GetHubMembersPage
	Set   bool
}

// IsSet returns true if OptGetHubMembersPage was set.
func (o OptGetHubMembersPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetHubMembersPage) Reset() {
	var v GetHubMembersPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetHubMembersPage) SetTo(v GetHubMembersPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetHubMembersPage) Get() (v GetHubMembersPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetHubMembersPage) Or(d GetHubMembersPage) GetHubMembersPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetHubUsageFilter returns new OptGetHubUsageFilter with value set to v.
func NewOptGetHubUsageFilter(v GetHubUsageFilter) OptGetHubUsageFilter {
	return OptGetHubUsageFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetHubUsageFilter is optional GetHubUsageFilter.
type OptGetHubUsageFilter struct {
	Value GetHubUsageFilter
	Set   bool
}

// IsSet returns true if OptGetHubUsageFilter was set.
func (o OptGetHubUsageFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetHubUsageFilter) Reset() {
	var v GetHubUsageFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetHubUsageFilter) SetTo(v GetHubUsageFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetHubUsageFilter) Get() (v GetHubUsageFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetHubUsageFilter) Or(d GetHubUsageFilter) GetHubUsageFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetInfrastructureIPPoolsPage returns new OptGetInfrastructureIPPoolsPage with value set to v.
func NewOptGetInfrastructureIPPoolsPage(v GetInfrastructureIPPoolsPage) OptGetInfrastructureIPPoolsPage {
	return OptGetInfrastructureIPPoolsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetInfrastructureIPPoolsPage is optional GetInfrastructureIPPoolsPage.
type OptGetInfrastructureIPPoolsPage struct {
	Value GetInfrastructureIPPoolsPage
	Set   bool
}

// IsSet returns true if OptGetInfrastructureIPPoolsPage was set.
func (o OptGetInfrastructureIPPoolsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetInfrastructureIPPoolsPage) Reset() {
	var v GetInfrastructureIPPoolsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetInfrastructureIPPoolsPage) SetTo(v GetInfrastructureIPPoolsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetInfrastructureIPPoolsPage) Get() (v GetInfrastructureIPPoolsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetInfrastructureIPPoolsPage) Or(d GetInfrastructureIPPoolsPage) GetInfrastructureIPPoolsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetInfrastructureSummaryFilter returns new OptGetInfrastructureSummaryFilter with value set to v.
func NewOptGetInfrastructureSummaryFilter(v GetInfrastructureSummaryFilter) OptGetInfrastructureSummaryFilter {
	return OptGetInfrastructureSummaryFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetInfrastructureSummaryFilter is optional GetInfrastructureSummaryFilter.
type OptGetInfrastructureSummaryFilter struct {
	Value GetInfrastructureSummaryFilter
	Set   bool
}

// IsSet returns true if OptGetInfrastructureSummaryFilter was set.
func (o OptGetInfrastructureSummaryFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetInfrastructureSummaryFilter) Reset() {
	var v GetInfrastructureSummaryFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetInfrastructureSummaryFilter) SetTo(v GetInfrastructureSummaryFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetInfrastructureSummaryFilter) Get() (v GetInfrastructureSummaryFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetInfrastructureSummaryFilter) Or(d GetInfrastructureSummaryFilter) GetInfrastructureSummaryFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetInstanceResourcesTelemetryReportFilter returns new OptGetInstanceResourcesTelemetryReportFilter with value set to v.
func NewOptGetInstanceResourcesTelemetryReportFilter(v GetInstanceResourcesTelemetryReportFilter) OptGetInstanceResourcesTelemetryReportFilter {
	return OptGetInstanceResourcesTelemetryReportFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetInstanceResourcesTelemetryReportFilter is optional GetInstanceResourcesTelemetryReportFilter.
type OptGetInstanceResourcesTelemetryReportFilter struct {
	Value GetInstanceResourcesTelemetryReportFilter
	Set   bool
}

// IsSet returns true if OptGetInstanceResourcesTelemetryReportFilter was set.
func (o OptGetInstanceResourcesTelemetryReportFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetInstanceResourcesTelemetryReportFilter) Reset() {
	var v GetInstanceResourcesTelemetryReportFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetInstanceResourcesTelemetryReportFilter) SetTo(v GetInstanceResourcesTelemetryReportFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetInstanceResourcesTelemetryReportFilter) Get() (v GetInstanceResourcesTelemetryReportFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetInstanceResourcesTelemetryReportFilter) Or(d GetInstanceResourcesTelemetryReportFilter) GetInstanceResourcesTelemetryReportFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetInstanceResourcesTelemetryStreamOKData returns new OptGetInstanceResourcesTelemetryStreamOKData with value set to v.
func NewOptGetInstanceResourcesTelemetryStreamOKData(v GetInstanceResourcesTelemetryStreamOKData) OptGetInstanceResourcesTelemetryStreamOKData {
	return OptGetInstanceResourcesTelemetryStreamOKData{
		Value: v,
		Set:   true,
	}
}

// OptGetInstanceResourcesTelemetryStreamOKData is optional GetInstanceResourcesTelemetryStreamOKData.
type OptGetInstanceResourcesTelemetryStreamOKData struct {
	Value GetInstanceResourcesTelemetryStreamOKData
	Set   bool
}

// IsSet returns true if OptGetInstanceResourcesTelemetryStreamOKData was set.
func (o OptGetInstanceResourcesTelemetryStreamOKData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetInstanceResourcesTelemetryStreamOKData) Reset() {
	var v GetInstanceResourcesTelemetryStreamOKData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetInstanceResourcesTelemetryStreamOKData) SetTo(v GetInstanceResourcesTelemetryStreamOKData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetInstanceResourcesTelemetryStreamOKData) Get() (v GetInstanceResourcesTelemetryStreamOKData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetInstanceResourcesTelemetryStreamOKData) Or(d GetInstanceResourcesTelemetryStreamOKData) GetInstanceResourcesTelemetryStreamOKData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetInstancesFilter returns new OptGetInstancesFilter with value set to v.
func NewOptGetInstancesFilter(v GetInstancesFilter) OptGetInstancesFilter {
	return OptGetInstancesFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetInstancesFilter is optional GetInstancesFilter.
type OptGetInstancesFilter struct {
	Value GetInstancesFilter
	Set   bool
}

// IsSet returns true if OptGetInstancesFilter was set.
func (o OptGetInstancesFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetInstancesFilter) Reset() {
	var v GetInstancesFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetInstancesFilter) SetTo(v GetInstancesFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetInstancesFilter) Get() (v GetInstancesFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetInstancesFilter) Or(d GetInstancesFilter) GetInstancesFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetInstancesPage returns new OptGetInstancesPage with value set to v.
func NewOptGetInstancesPage(v GetInstancesPage) OptGetInstancesPage {
	return OptGetInstancesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetInstancesPage is optional GetInstancesPage.
type OptGetInstancesPage struct {
	Value GetInstancesPage
	Set   bool
}

// IsSet returns true if OptGetInstancesPage was set.
func (o OptGetInstancesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetInstancesPage) Reset() {
	var v GetInstancesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetInstancesPage) SetTo(v GetInstancesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetInstancesPage) Get() (v GetInstancesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetInstancesPage) Or(d GetInstancesPage) GetInstancesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetInvoicesFilter returns new OptGetInvoicesFilter with value set to v.
func NewOptGetInvoicesFilter(v GetInvoicesFilter) OptGetInvoicesFilter {
	return OptGetInvoicesFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetInvoicesFilter is optional GetInvoicesFilter.
type OptGetInvoicesFilter struct {
	Value GetInvoicesFilter
	Set   bool
}

// IsSet returns true if OptGetInvoicesFilter was set.
func (o OptGetInvoicesFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetInvoicesFilter) Reset() {
	var v GetInvoicesFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetInvoicesFilter) SetTo(v GetInvoicesFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetInvoicesFilter) Get() (v GetInvoicesFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetInvoicesFilter) Or(d GetInvoicesFilter) GetInvoicesFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetInvoicesPage returns new OptGetInvoicesPage with value set to v.
func NewOptGetInvoicesPage(v GetInvoicesPage) OptGetInvoicesPage {
	return OptGetInvoicesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetInvoicesPage is optional GetInvoicesPage.
type OptGetInvoicesPage struct {
	Value GetInvoicesPage
	Set   bool
}

// IsSet returns true if OptGetInvoicesPage was set.
func (o OptGetInvoicesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetInvoicesPage) Reset() {
	var v GetInvoicesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetInvoicesPage) SetTo(v GetInvoicesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetInvoicesPage) Get() (v GetInvoicesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetInvoicesPage) Or(d GetInvoicesPage) GetInvoicesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetJobsFilter returns new OptGetJobsFilter with value set to v.
func NewOptGetJobsFilter(v GetJobsFilter) OptGetJobsFilter {
	return OptGetJobsFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetJobsFilter is optional GetJobsFilter.
type OptGetJobsFilter struct {
	Value GetJobsFilter
	Set   bool
}

// IsSet returns true if OptGetJobsFilter was set.
func (o OptGetJobsFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetJobsFilter) Reset() {
	var v GetJobsFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetJobsFilter) SetTo(v GetJobsFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetJobsFilter) Get() (v GetJobsFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetJobsFilter) Or(d GetJobsFilter) GetJobsFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetJobsPage returns new OptGetJobsPage with value set to v.
func NewOptGetJobsPage(v GetJobsPage) OptGetJobsPage {
	return OptGetJobsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetJobsPage is optional GetJobsPage.
type OptGetJobsPage struct {
	Value GetJobsPage
	Set   bool
}

// IsSet returns true if OptGetJobsPage was set.
func (o OptGetJobsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetJobsPage) Reset() {
	var v GetJobsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetJobsPage) SetTo(v GetJobsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetJobsPage) Get() (v GetJobsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetJobsPage) Or(d GetJobsPage) GetJobsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNativeProvidersFilter returns new OptGetNativeProvidersFilter with value set to v.
func NewOptGetNativeProvidersFilter(v GetNativeProvidersFilter) OptGetNativeProvidersFilter {
	return OptGetNativeProvidersFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetNativeProvidersFilter is optional GetNativeProvidersFilter.
type OptGetNativeProvidersFilter struct {
	Value GetNativeProvidersFilter
	Set   bool
}

// IsSet returns true if OptGetNativeProvidersFilter was set.
func (o OptGetNativeProvidersFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNativeProvidersFilter) Reset() {
	var v GetNativeProvidersFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNativeProvidersFilter) SetTo(v GetNativeProvidersFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNativeProvidersFilter) Get() (v GetNativeProvidersFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNativeProvidersFilter) Or(d GetNativeProvidersFilter) GetNativeProvidersFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNativeProvidersPage returns new OptGetNativeProvidersPage with value set to v.
func NewOptGetNativeProvidersPage(v GetNativeProvidersPage) OptGetNativeProvidersPage {
	return OptGetNativeProvidersPage{
		Value: v,
		Set:   true,
	}
}

// OptGetNativeProvidersPage is optional GetNativeProvidersPage.
type OptGetNativeProvidersPage struct {
	Value GetNativeProvidersPage
	Set   bool
}

// IsSet returns true if OptGetNativeProvidersPage was set.
func (o OptGetNativeProvidersPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNativeProvidersPage) Reset() {
	var v GetNativeProvidersPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNativeProvidersPage) SetTo(v GetNativeProvidersPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNativeProvidersPage) Get() (v GetNativeProvidersPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNativeProvidersPage) Or(d GetNativeProvidersPage) GetNativeProvidersPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNetworksFilter returns new OptGetNetworksFilter with value set to v.
func NewOptGetNetworksFilter(v GetNetworksFilter) OptGetNetworksFilter {
	return OptGetNetworksFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetNetworksFilter is optional GetNetworksFilter.
type OptGetNetworksFilter struct {
	Value GetNetworksFilter
	Set   bool
}

// IsSet returns true if OptGetNetworksFilter was set.
func (o OptGetNetworksFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNetworksFilter) Reset() {
	var v GetNetworksFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNetworksFilter) SetTo(v GetNetworksFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNetworksFilter) Get() (v GetNetworksFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNetworksFilter) Or(d GetNetworksFilter) GetNetworksFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNetworksPage returns new OptGetNetworksPage with value set to v.
func NewOptGetNetworksPage(v GetNetworksPage) OptGetNetworksPage {
	return OptGetNetworksPage{
		Value: v,
		Set:   true,
	}
}

// OptGetNetworksPage is optional GetNetworksPage.
type OptGetNetworksPage struct {
	Value GetNetworksPage
	Set   bool
}

// IsSet returns true if OptGetNetworksPage was set.
func (o OptGetNetworksPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNetworksPage) Reset() {
	var v GetNetworksPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNetworksPage) SetTo(v GetNetworksPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNetworksPage) Get() (v GetNetworksPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNetworksPage) Or(d GetNetworksPage) GetNetworksPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetOrdersFilter returns new OptGetOrdersFilter with value set to v.
func NewOptGetOrdersFilter(v GetOrdersFilter) OptGetOrdersFilter {
	return OptGetOrdersFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetOrdersFilter is optional GetOrdersFilter.
type OptGetOrdersFilter struct {
	Value GetOrdersFilter
	Set   bool
}

// IsSet returns true if OptGetOrdersFilter was set.
func (o OptGetOrdersFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetOrdersFilter) Reset() {
	var v GetOrdersFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetOrdersFilter) SetTo(v GetOrdersFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetOrdersFilter) Get() (v GetOrdersFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetOrdersFilter) Or(d GetOrdersFilter) GetOrdersFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetOrdersPage returns new OptGetOrdersPage with value set to v.
func NewOptGetOrdersPage(v GetOrdersPage) OptGetOrdersPage {
	return OptGetOrdersPage{
		Value: v,
		Set:   true,
	}
}

// OptGetOrdersPage is optional GetOrdersPage.
type OptGetOrdersPage struct {
	Value GetOrdersPage
	Set   bool
}

// IsSet returns true if OptGetOrdersPage was set.
func (o OptGetOrdersPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetOrdersPage) Reset() {
	var v GetOrdersPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetOrdersPage) SetTo(v GetOrdersPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetOrdersPage) Get() (v GetOrdersPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetOrdersPage) Or(d GetOrdersPage) GetOrdersPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetPipelineRunsOKIncludes returns new OptGetPipelineRunsOKIncludes with value set to v.
func NewOptGetPipelineRunsOKIncludes(v GetPipelineRunsOKIncludes) OptGetPipelineRunsOKIncludes {
	return OptGetPipelineRunsOKIncludes{
		Value: v,
		Set:   true,
	}
}

// OptGetPipelineRunsOKIncludes is optional GetPipelineRunsOKIncludes.
type OptGetPipelineRunsOKIncludes struct {
	Value GetPipelineRunsOKIncludes
	Set   bool
}

// IsSet returns true if OptGetPipelineRunsOKIncludes was set.
func (o OptGetPipelineRunsOKIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetPipelineRunsOKIncludes) Reset() {
	var v GetPipelineRunsOKIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetPipelineRunsOKIncludes) SetTo(v GetPipelineRunsOKIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetPipelineRunsOKIncludes) Get() (v GetPipelineRunsOKIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetPipelineRunsOKIncludes) Or(d GetPipelineRunsOKIncludes) GetPipelineRunsOKIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetPipelineTriggerKeysFilter returns new OptGetPipelineTriggerKeysFilter with value set to v.
func NewOptGetPipelineTriggerKeysFilter(v GetPipelineTriggerKeysFilter) OptGetPipelineTriggerKeysFilter {
	return OptGetPipelineTriggerKeysFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetPipelineTriggerKeysFilter is optional GetPipelineTriggerKeysFilter.
type OptGetPipelineTriggerKeysFilter struct {
	Value GetPipelineTriggerKeysFilter
	Set   bool
}

// IsSet returns true if OptGetPipelineTriggerKeysFilter was set.
func (o OptGetPipelineTriggerKeysFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetPipelineTriggerKeysFilter) Reset() {
	var v GetPipelineTriggerKeysFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetPipelineTriggerKeysFilter) SetTo(v GetPipelineTriggerKeysFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetPipelineTriggerKeysFilter) Get() (v GetPipelineTriggerKeysFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetPipelineTriggerKeysFilter) Or(d GetPipelineTriggerKeysFilter) GetPipelineTriggerKeysFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetPipelineTriggerKeysPage returns new OptGetPipelineTriggerKeysPage with value set to v.
func NewOptGetPipelineTriggerKeysPage(v GetPipelineTriggerKeysPage) OptGetPipelineTriggerKeysPage {
	return OptGetPipelineTriggerKeysPage{
		Value: v,
		Set:   true,
	}
}

// OptGetPipelineTriggerKeysPage is optional GetPipelineTriggerKeysPage.
type OptGetPipelineTriggerKeysPage struct {
	Value GetPipelineTriggerKeysPage
	Set   bool
}

// IsSet returns true if OptGetPipelineTriggerKeysPage was set.
func (o OptGetPipelineTriggerKeysPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetPipelineTriggerKeysPage) Reset() {
	var v GetPipelineTriggerKeysPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetPipelineTriggerKeysPage) SetTo(v GetPipelineTriggerKeysPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetPipelineTriggerKeysPage) Get() (v GetPipelineTriggerKeysPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetPipelineTriggerKeysPage) Or(d GetPipelineTriggerKeysPage) GetPipelineTriggerKeysPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetProviderLocationsPage returns new OptGetProviderLocationsPage with value set to v.
func NewOptGetProviderLocationsPage(v GetProviderLocationsPage) OptGetProviderLocationsPage {
	return OptGetProviderLocationsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetProviderLocationsPage is optional GetProviderLocationsPage.
type OptGetProviderLocationsPage struct {
	Value GetProviderLocationsPage
	Set   bool
}

// IsSet returns true if OptGetProviderLocationsPage was set.
func (o OptGetProviderLocationsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetProviderLocationsPage) Reset() {
	var v GetProviderLocationsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetProviderLocationsPage) SetTo(v GetProviderLocationsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetProviderLocationsPage) Get() (v GetProviderLocationsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetProviderLocationsPage) Or(d GetProviderLocationsPage) GetProviderLocationsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetProviderServersPage returns new OptGetProviderServersPage with value set to v.
func NewOptGetProviderServersPage(v GetProviderServersPage) OptGetProviderServersPage {
	return OptGetProviderServersPage{
		Value: v,
		Set:   true,
	}
}

// OptGetProviderServersPage is optional GetProviderServersPage.
type OptGetProviderServersPage struct {
	Value GetProviderServersPage
	Set   bool
}

// IsSet returns true if OptGetProviderServersPage was set.
func (o OptGetProviderServersPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetProviderServersPage) Reset() {
	var v GetProviderServersPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetProviderServersPage) SetTo(v GetProviderServersPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetProviderServersPage) Get() (v GetProviderServersPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetProviderServersPage) Or(d GetProviderServersPage) GetProviderServersPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetProvidersFilter returns new OptGetProvidersFilter with value set to v.
func NewOptGetProvidersFilter(v GetProvidersFilter) OptGetProvidersFilter {
	return OptGetProvidersFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetProvidersFilter is optional GetProvidersFilter.
type OptGetProvidersFilter struct {
	Value GetProvidersFilter
	Set   bool
}

// IsSet returns true if OptGetProvidersFilter was set.
func (o OptGetProvidersFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetProvidersFilter) Reset() {
	var v GetProvidersFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetProvidersFilter) SetTo(v GetProvidersFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetProvidersFilter) Get() (v GetProvidersFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetProvidersFilter) Or(d GetProvidersFilter) GetProvidersFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetProvidersPage returns new OptGetProvidersPage with value set to v.
func NewOptGetProvidersPage(v GetProvidersPage) OptGetProvidersPage {
	return OptGetProvidersPage{
		Value: v,
		Set:   true,
	}
}

// OptGetProvidersPage is optional GetProvidersPage.
type OptGetProvidersPage struct {
	Value GetProvidersPage
	Set   bool
}

// IsSet returns true if OptGetProvidersPage was set.
func (o OptGetProvidersPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetProvidersPage) Reset() {
	var v GetProvidersPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetProvidersPage) SetTo(v GetProvidersPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetProvidersPage) Get() (v GetProvidersPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetProvidersPage) Or(d GetProvidersPage) GetProvidersPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetRecordsCollectionFilter returns new OptGetRecordsCollectionFilter with value set to v.
func NewOptGetRecordsCollectionFilter(v GetRecordsCollectionFilter) OptGetRecordsCollectionFilter {
	return OptGetRecordsCollectionFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetRecordsCollectionFilter is optional GetRecordsCollectionFilter.
type OptGetRecordsCollectionFilter struct {
	Value GetRecordsCollectionFilter
	Set   bool
}

// IsSet returns true if OptGetRecordsCollectionFilter was set.
func (o OptGetRecordsCollectionFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetRecordsCollectionFilter) Reset() {
	var v GetRecordsCollectionFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetRecordsCollectionFilter) SetTo(v GetRecordsCollectionFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetRecordsCollectionFilter) Get() (v GetRecordsCollectionFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetRecordsCollectionFilter) Or(d GetRecordsCollectionFilter) GetRecordsCollectionFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetRecordsCollectionPage returns new OptGetRecordsCollectionPage with value set to v.
func NewOptGetRecordsCollectionPage(v GetRecordsCollectionPage) OptGetRecordsCollectionPage {
	return OptGetRecordsCollectionPage{
		Value: v,
		Set:   true,
	}
}

// OptGetRecordsCollectionPage is optional GetRecordsCollectionPage.
type OptGetRecordsCollectionPage struct {
	Value GetRecordsCollectionPage
	Set   bool
}

// IsSet returns true if OptGetRecordsCollectionPage was set.
func (o OptGetRecordsCollectionPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetRecordsCollectionPage) Reset() {
	var v GetRecordsCollectionPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetRecordsCollectionPage) SetTo(v GetRecordsCollectionPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetRecordsCollectionPage) Get() (v GetRecordsCollectionPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetRecordsCollectionPage) Or(d GetRecordsCollectionPage) GetRecordsCollectionPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetSecurityReportFilter returns new OptGetSecurityReportFilter with value set to v.
func NewOptGetSecurityReportFilter(v GetSecurityReportFilter) OptGetSecurityReportFilter {
	return OptGetSecurityReportFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetSecurityReportFilter is optional GetSecurityReportFilter.
type OptGetSecurityReportFilter struct {
	Value GetSecurityReportFilter
	Set   bool
}

// IsSet returns true if OptGetSecurityReportFilter was set.
func (o OptGetSecurityReportFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetSecurityReportFilter) Reset() {
	var v GetSecurityReportFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetSecurityReportFilter) SetTo(v GetSecurityReportFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetSecurityReportFilter) Get() (v GetSecurityReportFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetSecurityReportFilter) Or(d GetSecurityReportFilter) GetSecurityReportFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetServerInstancesPage returns new OptGetServerInstancesPage with value set to v.
func NewOptGetServerInstancesPage(v GetServerInstancesPage) OptGetServerInstancesPage {
	return OptGetServerInstancesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetServerInstancesPage is optional GetServerInstancesPage.
type OptGetServerInstancesPage struct {
	Value GetServerInstancesPage
	Set   bool
}

// IsSet returns true if OptGetServerInstancesPage was set.
func (o OptGetServerInstancesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetServerInstancesPage) Reset() {
	var v GetServerInstancesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetServerInstancesPage) SetTo(v GetServerInstancesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetServerInstancesPage) Get() (v GetServerInstancesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetServerInstancesPage) Or(d GetServerInstancesPage) GetServerInstancesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetServerTagsFilter returns new OptGetServerTagsFilter with value set to v.
func NewOptGetServerTagsFilter(v GetServerTagsFilter) OptGetServerTagsFilter {
	return OptGetServerTagsFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetServerTagsFilter is optional GetServerTagsFilter.
type OptGetServerTagsFilter struct {
	Value GetServerTagsFilter
	Set   bool
}

// IsSet returns true if OptGetServerTagsFilter was set.
func (o OptGetServerTagsFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetServerTagsFilter) Reset() {
	var v GetServerTagsFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetServerTagsFilter) SetTo(v GetServerTagsFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetServerTagsFilter) Get() (v GetServerTagsFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetServerTagsFilter) Or(d GetServerTagsFilter) GetServerTagsFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetServerTelemeteryFilter returns new OptGetServerTelemeteryFilter with value set to v.
func NewOptGetServerTelemeteryFilter(v GetServerTelemeteryFilter) OptGetServerTelemeteryFilter {
	return OptGetServerTelemeteryFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetServerTelemeteryFilter is optional GetServerTelemeteryFilter.
type OptGetServerTelemeteryFilter struct {
	Value GetServerTelemeteryFilter
	Set   bool
}

// IsSet returns true if OptGetServerTelemeteryFilter was set.
func (o OptGetServerTelemeteryFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetServerTelemeteryFilter) Reset() {
	var v GetServerTelemeteryFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetServerTelemeteryFilter) SetTo(v GetServerTelemeteryFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetServerTelemeteryFilter) Get() (v GetServerTelemeteryFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetServerTelemeteryFilter) Or(d GetServerTelemeteryFilter) GetServerTelemeteryFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetServerTelemeteryPage returns new OptGetServerTelemeteryPage with value set to v.
func NewOptGetServerTelemeteryPage(v GetServerTelemeteryPage) OptGetServerTelemeteryPage {
	return OptGetServerTelemeteryPage{
		Value: v,
		Set:   true,
	}
}

// OptGetServerTelemeteryPage is optional GetServerTelemeteryPage.
type OptGetServerTelemeteryPage struct {
	Value GetServerTelemeteryPage
	Set   bool
}

// IsSet returns true if OptGetServerTelemeteryPage was set.
func (o OptGetServerTelemeteryPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetServerTelemeteryPage) Reset() {
	var v GetServerTelemeteryPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetServerTelemeteryPage) SetTo(v GetServerTelemeteryPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetServerTelemeteryPage) Get() (v GetServerTelemeteryPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetServerTelemeteryPage) Or(d GetServerTelemeteryPage) GetServerTelemeteryPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetServersCollectionFilter returns new OptGetServersCollectionFilter with value set to v.
func NewOptGetServersCollectionFilter(v GetServersCollectionFilter) OptGetServersCollectionFilter {
	return OptGetServersCollectionFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetServersCollectionFilter is optional GetServersCollectionFilter.
type OptGetServersCollectionFilter struct {
	Value GetServersCollectionFilter
	Set   bool
}

// IsSet returns true if OptGetServersCollectionFilter was set.
func (o OptGetServersCollectionFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetServersCollectionFilter) Reset() {
	var v GetServersCollectionFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetServersCollectionFilter) SetTo(v GetServersCollectionFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetServersCollectionFilter) Get() (v GetServersCollectionFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetServersCollectionFilter) Or(d GetServersCollectionFilter) GetServersCollectionFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetServersCollectionPage returns new OptGetServersCollectionPage with value set to v.
func NewOptGetServersCollectionPage(v GetServersCollectionPage) OptGetServersCollectionPage {
	return OptGetServersCollectionPage{
		Value: v,
		Set:   true,
	}
}

// OptGetServersCollectionPage is optional GetServersCollectionPage.
type OptGetServersCollectionPage struct {
	Value GetServersCollectionPage
	Set   bool
}

// IsSet returns true if OptGetServersCollectionPage was set.
func (o OptGetServersCollectionPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetServersCollectionPage) Reset() {
	var v GetServersCollectionPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetServersCollectionPage) SetTo(v GetServersCollectionPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetServersCollectionPage) Get() (v GetServersCollectionPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetServersCollectionPage) Or(d GetServersCollectionPage) GetServersCollectionPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetUsableServersPage returns new OptGetUsableServersPage with value set to v.
func NewOptGetUsableServersPage(v GetUsableServersPage) OptGetUsableServersPage {
	return OptGetUsableServersPage{
		Value: v,
		Set:   true,
	}
}

// OptGetUsableServersPage is optional GetUsableServersPage.
type OptGetUsableServersPage struct {
	Value GetUsableServersPage
	Set   bool
}

// IsSet returns true if OptGetUsableServersPage was set.
func (o OptGetUsableServersPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetUsableServersPage) Reset() {
	var v GetUsableServersPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetUsableServersPage) SetTo(v GetUsableServersPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetUsableServersPage) Get() (v GetUsableServersPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetUsableServersPage) Or(d GetUsableServersPage) GetUsableServersPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetZonesCollectionFilter returns new OptGetZonesCollectionFilter with value set to v.
func NewOptGetZonesCollectionFilter(v GetZonesCollectionFilter) OptGetZonesCollectionFilter {
	return OptGetZonesCollectionFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetZonesCollectionFilter is optional GetZonesCollectionFilter.
type OptGetZonesCollectionFilter struct {
	Value GetZonesCollectionFilter
	Set   bool
}

// IsSet returns true if OptGetZonesCollectionFilter was set.
func (o OptGetZonesCollectionFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetZonesCollectionFilter) Reset() {
	var v GetZonesCollectionFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetZonesCollectionFilter) SetTo(v GetZonesCollectionFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetZonesCollectionFilter) Get() (v GetZonesCollectionFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetZonesCollectionFilter) Or(d GetZonesCollectionFilter) GetZonesCollectionFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetZonesCollectionPage returns new OptGetZonesCollectionPage with value set to v.
func NewOptGetZonesCollectionPage(v GetZonesCollectionPage) OptGetZonesCollectionPage {
	return OptGetZonesCollectionPage{
		Value: v,
		Set:   true,
	}
}

// OptGetZonesCollectionPage is optional GetZonesCollectionPage.
type OptGetZonesCollectionPage struct {
	Value GetZonesCollectionPage
	Set   bool
}

// IsSet returns true if OptGetZonesCollectionPage was set.
func (o OptGetZonesCollectionPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetZonesCollectionPage) Reset() {
	var v GetZonesCollectionPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetZonesCollectionPage) SetTo(v GetZonesCollectionPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetZonesCollectionPage) Get() (v GetZonesCollectionPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetZonesCollectionPage) Or(d GetZonesCollectionPage) GetZonesCollectionPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHub returns new OptHub with value set to v.
func NewOptHub(v Hub) OptHub {
	return OptHub{
		Value: v,
		Set:   true,
	}
}

// OptHub is optional Hub.
type OptHub struct {
	Value Hub
	Set   bool
}

// IsSet returns true if OptHub was set.
func (o OptHub) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHub) Reset() {
	var v Hub
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHub) SetTo(v Hub) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHub) Get() (v Hub, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHub) Or(d Hub) Hub {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubID returns new OptHubID with value set to v.
func NewOptHubID(v HubID) OptHubID {
	return OptHubID{
		Value: v,
		Set:   true,
	}
}

// OptHubID is optional HubID.
type OptHubID struct {
	Value HubID
	Set   bool
}

// IsSet returns true if OptHubID was set.
func (o OptHubID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubID) Reset() {
	var v HubID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubID) SetTo(v HubID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubID) Get() (v HubID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubID) Or(d HubID) HubID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubIntegrations returns new OptHubIntegrations with value set to v.
func NewOptHubIntegrations(v HubIntegrations) OptHubIntegrations {
	return OptHubIntegrations{
		Value: v,
		Set:   true,
	}
}

// OptHubIntegrations is optional HubIntegrations.
type OptHubIntegrations struct {
	Value HubIntegrations
	Set   bool
}

// IsSet returns true if OptHubIntegrations was set.
func (o OptHubIntegrations) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubIntegrations) Reset() {
	var v HubIntegrations
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubIntegrations) SetTo(v HubIntegrations) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubIntegrations) Get() (v HubIntegrations, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubIntegrations) Or(d HubIntegrations) HubIntegrations {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembership returns new OptHubMembership with value set to v.
func NewOptHubMembership(v HubMembership) OptHubMembership {
	return OptHubMembership{
		Value: v,
		Set:   true,
	}
}

// OptHubMembership is optional HubMembership.
type OptHubMembership struct {
	Value HubMembership
	Set   bool
}

// IsSet returns true if OptHubMembership was set.
func (o OptHubMembership) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembership) Reset() {
	var v HubMembership
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembership) SetTo(v HubMembership) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembership) Get() (v HubMembership, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembership) Or(d HubMembership) HubMembership {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembershipCycle returns new OptHubMembershipCycle with value set to v.
func NewOptHubMembershipCycle(v HubMembershipCycle) OptHubMembershipCycle {
	return OptHubMembershipCycle{
		Value: v,
		Set:   true,
	}
}

// OptHubMembershipCycle is optional HubMembershipCycle.
type OptHubMembershipCycle struct {
	Value HubMembershipCycle
	Set   bool
}

// IsSet returns true if OptHubMembershipCycle was set.
func (o OptHubMembershipCycle) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembershipCycle) Reset() {
	var v HubMembershipCycle
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembershipCycle) SetTo(v HubMembershipCycle) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembershipCycle) Get() (v HubMembershipCycle, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembershipCycle) Or(d HubMembershipCycle) HubMembershipCycle {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembershipIncludes returns new OptHubMembershipIncludes with value set to v.
func NewOptHubMembershipIncludes(v HubMembershipIncludes) OptHubMembershipIncludes {
	return OptHubMembershipIncludes{
		Value: v,
		Set:   true,
	}
}

// OptHubMembershipIncludes is optional HubMembershipIncludes.
type OptHubMembershipIncludes struct {
	Value HubMembershipIncludes
	Set   bool
}

// IsSet returns true if OptHubMembershipIncludes was set.
func (o OptHubMembershipIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembershipIncludes) Reset() {
	var v HubMembershipIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembershipIncludes) SetTo(v HubMembershipIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembershipIncludes) Get() (v HubMembershipIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembershipIncludes) Or(d HubMembershipIncludes) HubMembershipIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembershipIncludesAccounts returns new OptHubMembershipIncludesAccounts with value set to v.
func NewOptHubMembershipIncludesAccounts(v HubMembershipIncludesAccounts) OptHubMembershipIncludesAccounts {
	return OptHubMembershipIncludesAccounts{
		Value: v,
		Set:   true,
	}
}

// OptHubMembershipIncludesAccounts is optional HubMembershipIncludesAccounts.
type OptHubMembershipIncludesAccounts struct {
	Value HubMembershipIncludesAccounts
	Set   bool
}

// IsSet returns true if OptHubMembershipIncludesAccounts was set.
func (o OptHubMembershipIncludesAccounts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembershipIncludesAccounts) Reset() {
	var v HubMembershipIncludesAccounts
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembershipIncludesAccounts) SetTo(v HubMembershipIncludesAccounts) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembershipIncludesAccounts) Get() (v HubMembershipIncludesAccounts, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembershipIncludesAccounts) Or(d HubMembershipIncludesAccounts) HubMembershipIncludesAccounts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembershipIncludesHubs returns new OptHubMembershipIncludesHubs with value set to v.
func NewOptHubMembershipIncludesHubs(v HubMembershipIncludesHubs) OptHubMembershipIncludesHubs {
	return OptHubMembershipIncludesHubs{
		Value: v,
		Set:   true,
	}
}

// OptHubMembershipIncludesHubs is optional HubMembershipIncludesHubs.
type OptHubMembershipIncludesHubs struct {
	Value HubMembershipIncludesHubs
	Set   bool
}

// IsSet returns true if OptHubMembershipIncludesHubs was set.
func (o OptHubMembershipIncludesHubs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembershipIncludesHubs) Reset() {
	var v HubMembershipIncludesHubs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembershipIncludesHubs) SetTo(v HubMembershipIncludesHubs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembershipIncludesHubs) Get() (v HubMembershipIncludesHubs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembershipIncludesHubs) Or(d HubMembershipIncludesHubs) HubMembershipIncludesHubs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembershipIncludesSenders returns new OptHubMembershipIncludesSenders with value set to v.
func NewOptHubMembershipIncludesSenders(v HubMembershipIncludesSenders) OptHubMembershipIncludesSenders {
	return OptHubMembershipIncludesSenders{
		Value: v,
		Set:   true,
	}
}

// OptHubMembershipIncludesSenders is optional HubMembershipIncludesSenders.
type OptHubMembershipIncludesSenders struct {
	Value HubMembershipIncludesSenders
	Set   bool
}

// IsSet returns true if OptHubMembershipIncludesSenders was set.
func (o OptHubMembershipIncludesSenders) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembershipIncludesSenders) Reset() {
	var v HubMembershipIncludesSenders
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembershipIncludesSenders) SetTo(v HubMembershipIncludesSenders) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembershipIncludesSenders) Get() (v HubMembershipIncludesSenders, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembershipIncludesSenders) Or(d HubMembershipIncludesSenders) HubMembershipIncludesSenders {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembershipIncludesSendersAccounts returns new OptHubMembershipIncludesSendersAccounts with value set to v.
func NewOptHubMembershipIncludesSendersAccounts(v HubMembershipIncludesSendersAccounts) OptHubMembershipIncludesSendersAccounts {
	return OptHubMembershipIncludesSendersAccounts{
		Value: v,
		Set:   true,
	}
}

// OptHubMembershipIncludesSendersAccounts is optional HubMembershipIncludesSendersAccounts.
type OptHubMembershipIncludesSendersAccounts struct {
	Value HubMembershipIncludesSendersAccounts
	Set   bool
}

// IsSet returns true if OptHubMembershipIncludesSendersAccounts was set.
func (o OptHubMembershipIncludesSendersAccounts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembershipIncludesSendersAccounts) Reset() {
	var v HubMembershipIncludesSendersAccounts
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembershipIncludesSendersAccounts) SetTo(v HubMembershipIncludesSendersAccounts) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembershipIncludesSendersAccounts) Get() (v HubMembershipIncludesSendersAccounts, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembershipIncludesSendersAccounts) Or(d HubMembershipIncludesSendersAccounts) HubMembershipIncludesSendersAccounts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembershipMeta returns new OptHubMembershipMeta with value set to v.
func NewOptHubMembershipMeta(v HubMembershipMeta) OptHubMembershipMeta {
	return OptHubMembershipMeta{
		Value: v,
		Set:   true,
	}
}

// OptHubMembershipMeta is optional HubMembershipMeta.
type OptHubMembershipMeta struct {
	Value HubMembershipMeta
	Set   bool
}

// IsSet returns true if OptHubMembershipMeta was set.
func (o OptHubMembershipMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembershipMeta) Reset() {
	var v HubMembershipMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembershipMeta) SetTo(v HubMembershipMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembershipMeta) Get() (v HubMembershipMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembershipMeta) Or(d HubMembershipMeta) HubMembershipMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembershipPreferenecesEmailNotificaitons returns new OptHubMembershipPreferenecesEmailNotificaitons with value set to v.
func NewOptHubMembershipPreferenecesEmailNotificaitons(v HubMembershipPreferenecesEmailNotificaitons) OptHubMembershipPreferenecesEmailNotificaitons {
	return OptHubMembershipPreferenecesEmailNotificaitons{
		Value: v,
		Set:   true,
	}
}

// OptHubMembershipPreferenecesEmailNotificaitons is optional HubMembershipPreferenecesEmailNotificaitons.
type OptHubMembershipPreferenecesEmailNotificaitons struct {
	Value HubMembershipPreferenecesEmailNotificaitons
	Set   bool
}

// IsSet returns true if OptHubMembershipPreferenecesEmailNotificaitons was set.
func (o OptHubMembershipPreferenecesEmailNotificaitons) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembershipPreferenecesEmailNotificaitons) Reset() {
	var v HubMembershipPreferenecesEmailNotificaitons
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembershipPreferenecesEmailNotificaitons) SetTo(v HubMembershipPreferenecesEmailNotificaitons) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembershipPreferenecesEmailNotificaitons) Get() (v HubMembershipPreferenecesEmailNotificaitons, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembershipPreferenecesEmailNotificaitons) Or(d HubMembershipPreferenecesEmailNotificaitons) HubMembershipPreferenecesEmailNotificaitons {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMeta returns new OptHubMeta with value set to v.
func NewOptHubMeta(v HubMeta) OptHubMeta {
	return OptHubMeta{
		Value: v,
		Set:   true,
	}
}

// OptHubMeta is optional HubMeta.
type OptHubMeta struct {
	Value HubMeta
	Set   bool
}

// IsSet returns true if OptHubMeta was set.
func (o OptHubMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMeta) Reset() {
	var v HubMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMeta) SetTo(v HubMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMeta) Get() (v HubMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMeta) Or(d HubMeta) HubMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubNotificationToken returns new OptHubNotificationToken with value set to v.
func NewOptHubNotificationToken(v HubNotificationToken) OptHubNotificationToken {
	return OptHubNotificationToken{
		Value: v,
		Set:   true,
	}
}

// OptHubNotificationToken is optional HubNotificationToken.
type OptHubNotificationToken struct {
	Value HubNotificationToken
	Set   bool
}

// IsSet returns true if OptHubNotificationToken was set.
func (o OptHubNotificationToken) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubNotificationToken) Reset() {
	var v HubNotificationToken
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubNotificationToken) SetTo(v HubNotificationToken) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubNotificationToken) Get() (v HubNotificationToken, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubNotificationToken) Or(d HubNotificationToken) HubNotificationToken {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubStateError returns new OptHubStateError with value set to v.
func NewOptHubStateError(v HubStateError) OptHubStateError {
	return OptHubStateError{
		Value: v,
		Set:   true,
	}
}

// OptHubStateError is optional HubStateError.
type OptHubStateError struct {
	Value HubStateError
	Set   bool
}

// IsSet returns true if OptHubStateError was set.
func (o OptHubStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubStateError) Reset() {
	var v HubStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubStateError) SetTo(v HubStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubStateError) Get() (v HubStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubStateError) Or(d HubStateError) HubStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHugeTLB returns new OptHugeTLB with value set to v.
func NewOptHugeTLB(v HugeTLB) OptHugeTLB {
	return OptHugeTLB{
		Value: v,
		Set:   true,
	}
}

// OptHugeTLB is optional HugeTLB.
type OptHugeTLB struct {
	Value HugeTLB
	Set   bool
}

// IsSet returns true if OptHugeTLB was set.
func (o OptHugeTLB) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHugeTLB) Reset() {
	var v HugeTLB
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHugeTLB) SetTo(v HugeTLB) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHugeTLB) Get() (v HugeTLB, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHugeTLB) Or(d HugeTLB) HugeTLB {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIALAuth returns new OptIALAuth with value set to v.
func NewOptIALAuth(v IALAuth) OptIALAuth {
	return OptIALAuth{
		Value: v,
		Set:   true,
	}
}

// OptIALAuth is optional IALAuth.
type OptIALAuth struct {
	Value IALAuth
	Set   bool
}

// IsSet returns true if OptIALAuth was set.
func (o OptIALAuth) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIALAuth) Reset() {
	var v IALAuth
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIALAuth) SetTo(v IALAuth) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIALAuth) Get() (v IALAuth, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIALAuth) Or(d IALAuth) IALAuth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIALAuthCycle returns new OptIALAuthCycle with value set to v.
func NewOptIALAuthCycle(v IALAuthCycle) OptIALAuthCycle {
	return OptIALAuthCycle{
		Value: v,
		Set:   true,
	}
}

// OptIALAuthCycle is optional IALAuthCycle.
type OptIALAuthCycle struct {
	Value IALAuthCycle
	Set   bool
}

// IsSet returns true if OptIALAuthCycle was set.
func (o OptIALAuthCycle) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIALAuthCycle) Reset() {
	var v IALAuthCycle
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIALAuthCycle) SetTo(v IALAuthCycle) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIALAuthCycle) Get() (v IALAuthCycle, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIALAuthCycle) Or(d IALAuthCycle) IALAuthCycle {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptID returns new OptID with value set to v.
func NewOptID(v ID) OptID {
	return OptID{
		Value: v,
		Set:   true,
	}
}

// OptID is optional ID.
type OptID struct {
	Value ID
	Set   bool
}

// IsSet returns true if OptID was set.
func (o OptID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptID) Reset() {
	var v ID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptID) SetTo(v ID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptID) Get() (v ID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptID) Or(d ID) ID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIndex returns new OptIndex with value set to v.
func NewOptIndex(v Index) OptIndex {
	return OptIndex{
		Value: v,
		Set:   true,
	}
}

// OptIndex is optional Index.
type OptIndex struct {
	Value Index
	Set   bool
}

// IsSet returns true if OptIndex was set.
func (o OptIndex) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIndex) Reset() {
	var v Index
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIndex) SetTo(v Index) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIndex) Get() (v Index, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIndex) Or(d Index) Index {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInfraServer returns new OptInfraServer with value set to v.
func NewOptInfraServer(v InfraServer) OptInfraServer {
	return OptInfraServer{
		Value: v,
		Set:   true,
	}
}

// OptInfraServer is optional InfraServer.
type OptInfraServer struct {
	Value InfraServer
	Set   bool
}

// IsSet returns true if OptInfraServer was set.
func (o OptInfraServer) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInfraServer) Reset() {
	var v InfraServer
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInfraServer) SetTo(v InfraServer) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInfraServer) Get() (v InfraServer, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInfraServer) Or(d InfraServer) InfraServer {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInfrastructureSummary returns new OptInfrastructureSummary with value set to v.
func NewOptInfrastructureSummary(v InfrastructureSummary) OptInfrastructureSummary {
	return OptInfrastructureSummary{
		Value: v,
		Set:   true,
	}
}

// OptInfrastructureSummary is optional InfrastructureSummary.
type OptInfrastructureSummary struct {
	Value InfrastructureSummary
	Set   bool
}

// IsSet returns true if OptInfrastructureSummary was set.
func (o OptInfrastructureSummary) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInfrastructureSummary) Reset() {
	var v InfrastructureSummary
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInfrastructureSummary) SetTo(v InfrastructureSummary) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInfrastructureSummary) Get() (v InfrastructureSummary, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInfrastructureSummary) Or(d InfrastructureSummary) InfrastructureSummary {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInstance returns new OptInstance with value set to v.
func NewOptInstance(v Instance) OptInstance {
	return OptInstance{
		Value: v,
		Set:   true,
	}
}

// OptInstance is optional Instance.
type OptInstance struct {
	Value Instance
	Set   bool
}

// IsSet returns true if OptInstance was set.
func (o OptInstance) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInstance) Reset() {
	var v Instance
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInstance) SetTo(v Instance) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInstance) Get() (v Instance, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInstance) Or(d Instance) Instance {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInstanceConsoleAuth returns new OptInstanceConsoleAuth with value set to v.
func NewOptInstanceConsoleAuth(v InstanceConsoleAuth) OptInstanceConsoleAuth {
	return OptInstanceConsoleAuth{
		Value: v,
		Set:   true,
	}
}

// OptInstanceConsoleAuth is optional InstanceConsoleAuth.
type OptInstanceConsoleAuth struct {
	Value InstanceConsoleAuth
	Set   bool
}

// IsSet returns true if OptInstanceConsoleAuth was set.
func (o OptInstanceConsoleAuth) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInstanceConsoleAuth) Reset() {
	var v InstanceConsoleAuth
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInstanceConsoleAuth) SetTo(v InstanceConsoleAuth) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInstanceConsoleAuth) Get() (v InstanceConsoleAuth, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInstanceConsoleAuth) Or(d InstanceConsoleAuth) InstanceConsoleAuth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInstanceIncludes returns new OptInstanceIncludes with value set to v.
func NewOptInstanceIncludes(v InstanceIncludes) OptInstanceIncludes {
	return OptInstanceIncludes{
		Value: v,
		Set:   true,
	}
}

// OptInstanceIncludes is optional InstanceIncludes.
type OptInstanceIncludes struct {
	Value InstanceIncludes
	Set   bool
}

// IsSet returns true if OptInstanceIncludes was set.
func (o OptInstanceIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInstanceIncludes) Reset() {
	var v InstanceIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInstanceIncludes) SetTo(v InstanceIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInstanceIncludes) Get() (v InstanceIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInstanceIncludes) Or(d InstanceIncludes) InstanceIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInstanceStateError returns new OptInstanceStateError with value set to v.
func NewOptInstanceStateError(v InstanceStateError) OptInstanceStateError {
	return OptInstanceStateError{
		Value: v,
		Set:   true,
	}
}

// OptInstanceStateError is optional InstanceStateError.
type OptInstanceStateError struct {
	Value InstanceStateError
	Set   bool
}

// IsSet returns true if OptInstanceStateError was set.
func (o OptInstanceStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInstanceStateError) Reset() {
	var v InstanceStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInstanceStateError) SetTo(v InstanceStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInstanceStateError) Get() (v InstanceStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInstanceStateError) Or(d InstanceStateError) InstanceStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInstanceStateHealth returns new OptInstanceStateHealth with value set to v.
func NewOptInstanceStateHealth(v InstanceStateHealth) OptInstanceStateHealth {
	return OptInstanceStateHealth{
		Value: v,
		Set:   true,
	}
}

// OptInstanceStateHealth is optional InstanceStateHealth.
type OptInstanceStateHealth struct {
	Value InstanceStateHealth
	Set   bool
}

// IsSet returns true if OptInstanceStateHealth was set.
func (o OptInstanceStateHealth) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInstanceStateHealth) Reset() {
	var v InstanceStateHealth
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInstanceStateHealth) SetTo(v InstanceStateHealth) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInstanceStateHealth) Get() (v InstanceStateHealth, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInstanceStateHealth) Or(d InstanceStateHealth) InstanceStateHealth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInstanceTelemetryReport returns new OptInstanceTelemetryReport with value set to v.
func NewOptInstanceTelemetryReport(v InstanceTelemetryReport) OptInstanceTelemetryReport {
	return OptInstanceTelemetryReport{
		Value: v,
		Set:   true,
	}
}

// OptInstanceTelemetryReport is optional InstanceTelemetryReport.
type OptInstanceTelemetryReport struct {
	Value InstanceTelemetryReport
	Set   bool
}

// IsSet returns true if OptInstanceTelemetryReport was set.
func (o OptInstanceTelemetryReport) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInstanceTelemetryReport) Reset() {
	var v InstanceTelemetryReport
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInstanceTelemetryReport) SetTo(v InstanceTelemetryReport) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInstanceTelemetryReport) Get() (v InstanceTelemetryReport, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInstanceTelemetryReport) Or(d InstanceTelemetryReport) InstanceTelemetryReport {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInvoice returns new OptInvoice with value set to v.
func NewOptInvoice(v Invoice) OptInvoice {
	return OptInvoice{
		Value: v,
		Set:   true,
	}
}

// OptInvoice is optional Invoice.
type OptInvoice struct {
	Value Invoice
	Set   bool
}

// IsSet returns true if OptInvoice was set.
func (o OptInvoice) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInvoice) Reset() {
	var v Invoice
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInvoice) SetTo(v Invoice) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInvoice) Get() (v Invoice, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInvoice) Or(d Invoice) Invoice {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInvoiceMeta returns new OptInvoiceMeta with value set to v.
func NewOptInvoiceMeta(v InvoiceMeta) OptInvoiceMeta {
	return OptInvoiceMeta{
		Value: v,
		Set:   true,
	}
}

// OptInvoiceMeta is optional InvoiceMeta.
type OptInvoiceMeta struct {
	Value InvoiceMeta
	Set   bool
}

// IsSet returns true if OptInvoiceMeta was set.
func (o OptInvoiceMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInvoiceMeta) Reset() {
	var v InvoiceMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInvoiceMeta) SetTo(v InvoiceMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInvoiceMeta) Get() (v InvoiceMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInvoiceMeta) Or(d InvoiceMeta) InvoiceMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInvoiceStateError returns new OptInvoiceStateError with value set to v.
func NewOptInvoiceStateError(v InvoiceStateError) OptInvoiceStateError {
	return OptInvoiceStateError{
		Value: v,
		Set:   true,
	}
}

// OptInvoiceStateError is optional InvoiceStateError.
type OptInvoiceStateError struct {
	Value InvoiceStateError
	Set   bool
}

// IsSet returns true if OptInvoiceStateError was set.
func (o OptInvoiceStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInvoiceStateError) Reset() {
	var v InvoiceStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInvoiceStateError) SetTo(v InvoiceStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInvoiceStateError) Get() (v InvoiceStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInvoiceStateError) Or(d InvoiceStateError) InvoiceStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJob returns new OptJob with value set to v.
func NewOptJob(v Job) OptJob {
	return OptJob{
		Value: v,
		Set:   true,
	}
}

// OptJob is optional Job.
type OptJob struct {
	Value Job
	Set   bool
}

// IsSet returns true if OptJob was set.
func (o OptJob) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJob) Reset() {
	var v Job
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJob) SetTo(v Job) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJob) Get() (v Job, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJob) Or(d Job) Job {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJobIncludes returns new OptJobIncludes with value set to v.
func NewOptJobIncludes(v JobIncludes) OptJobIncludes {
	return OptJobIncludes{
		Value: v,
		Set:   true,
	}
}

// OptJobIncludes is optional JobIncludes.
type OptJobIncludes struct {
	Value JobIncludes
	Set   bool
}

// IsSet returns true if OptJobIncludes was set.
func (o OptJobIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJobIncludes) Reset() {
	var v JobIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJobIncludes) SetTo(v JobIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJobIncludes) Get() (v JobIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJobIncludes) Or(d JobIncludes) JobIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJobStateError returns new OptJobStateError with value set to v.
func NewOptJobStateError(v JobStateError) OptJobStateError {
	return OptJobStateError{
		Value: v,
		Set:   true,
	}
}

// OptJobStateError is optional JobStateError.
type OptJobStateError struct {
	Value JobStateError
	Set   bool
}

// IsSet returns true if OptJobStateError was set.
func (o OptJobStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJobStateError) Reset() {
	var v JobStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJobStateError) SetTo(v JobStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJobStateError) Get() (v JobStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJobStateError) Or(d JobStateError) JobStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoadBalancerInfoReturn returns new OptLoadBalancerInfoReturn with value set to v.
func NewOptLoadBalancerInfoReturn(v LoadBalancerInfoReturn) OptLoadBalancerInfoReturn {
	return OptLoadBalancerInfoReturn{
		Value: v,
		Set:   true,
	}
}

// OptLoadBalancerInfoReturn is optional LoadBalancerInfoReturn.
type OptLoadBalancerInfoReturn struct {
	Value LoadBalancerInfoReturn
	Set   bool
}

// IsSet returns true if OptLoadBalancerInfoReturn was set.
func (o OptLoadBalancerInfoReturn) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLoadBalancerInfoReturn) Reset() {
	var v LoadBalancerInfoReturn
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoadBalancerInfoReturn) SetTo(v LoadBalancerInfoReturn) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoadBalancerInfoReturn) Get() (v LoadBalancerInfoReturn, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoadBalancerInfoReturn) Or(d LoadBalancerInfoReturn) LoadBalancerInfoReturn {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoadBalancerInfoReturnServiceConfig returns new OptLoadBalancerInfoReturnServiceConfig with value set to v.
func NewOptLoadBalancerInfoReturnServiceConfig(v LoadBalancerInfoReturnServiceConfig) OptLoadBalancerInfoReturnServiceConfig {
	return OptLoadBalancerInfoReturnServiceConfig{
		Value: v,
		Set:   true,
	}
}

// OptLoadBalancerInfoReturnServiceConfig is optional LoadBalancerInfoReturnServiceConfig.
type OptLoadBalancerInfoReturnServiceConfig struct {
	Value LoadBalancerInfoReturnServiceConfig
	Set   bool
}

// IsSet returns true if OptLoadBalancerInfoReturnServiceConfig was set.
func (o OptLoadBalancerInfoReturnServiceConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLoadBalancerInfoReturnServiceConfig) Reset() {
	var v LoadBalancerInfoReturnServiceConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoadBalancerInfoReturnServiceConfig) SetTo(v LoadBalancerInfoReturnServiceConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoadBalancerInfoReturnServiceConfig) Get() (v LoadBalancerInfoReturnServiceConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoadBalancerInfoReturnServiceConfig) Or(d LoadBalancerInfoReturnServiceConfig) LoadBalancerInfoReturnServiceConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMembershipStateError returns new OptMembershipStateError with value set to v.
func NewOptMembershipStateError(v MembershipStateError) OptMembershipStateError {
	return OptMembershipStateError{
		Value: v,
		Set:   true,
	}
}

// OptMembershipStateError is optional MembershipStateError.
type OptMembershipStateError struct {
	Value MembershipStateError
	Set   bool
}

// IsSet returns true if OptMembershipStateError was set.
func (o OptMembershipStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMembershipStateError) Reset() {
	var v MembershipStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMembershipStateError) SetTo(v MembershipStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMembershipStateError) Get() (v MembershipStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMembershipStateError) Or(d MembershipStateError) MembershipStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMemoryData returns new OptMemoryData with value set to v.
func NewOptMemoryData(v MemoryData) OptMemoryData {
	return OptMemoryData{
		Value: v,
		Set:   true,
	}
}

// OptMemoryData is optional MemoryData.
type OptMemoryData struct {
	Value MemoryData
	Set   bool
}

// IsSet returns true if OptMemoryData was set.
func (o OptMemoryData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMemoryData) Reset() {
	var v MemoryData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMemoryData) SetTo(v MemoryData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMemoryData) Get() (v MemoryData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMemoryData) Or(d MemoryData) MemoryData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMethod returns new OptMethod with value set to v.
func NewOptMethod(v Method) OptMethod {
	return OptMethod{
		Value: v,
		Set:   true,
	}
}

// OptMethod is optional Method.
type OptMethod struct {
	Value Method
	Set   bool
}

// IsSet returns true if OptMethod was set.
func (o OptMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMethod) Reset() {
	var v Method
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMethod) SetTo(v Method) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMethod) Get() (v Method, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMethod) Or(d Method) Method {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMethodStateError returns new OptMethodStateError with value set to v.
func NewOptMethodStateError(v MethodStateError) OptMethodStateError {
	return OptMethodStateError{
		Value: v,
		Set:   true,
	}
}

// OptMethodStateError is optional MethodStateError.
type OptMethodStateError struct {
	Value MethodStateError
	Set   bool
}

// IsSet returns true if OptMethodStateError was set.
func (o OptMethodStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMethodStateError) Reset() {
	var v MethodStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMethodStateError) SetTo(v MethodStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMethodStateError) Get() (v MethodStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMethodStateError) Or(d MethodStateError) MethodStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMigrateContentsStateful returns new OptMigrateContentsStateful with value set to v.
func NewOptMigrateContentsStateful(v MigrateContentsStateful) OptMigrateContentsStateful {
	return OptMigrateContentsStateful{
		Value: v,
		Set:   true,
	}
}

// OptMigrateContentsStateful is optional MigrateContentsStateful.
type OptMigrateContentsStateful struct {
	Value MigrateContentsStateful
	Set   bool
}

// IsSet returns true if OptMigrateContentsStateful was set.
func (o OptMigrateContentsStateful) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMigrateContentsStateful) Reset() {
	var v MigrateContentsStateful
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMigrateContentsStateful) SetTo(v MigrateContentsStateful) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMigrateContentsStateful) Get() (v MigrateContentsStateful, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMigrateContentsStateful) Or(d MigrateContentsStateful) MigrateContentsStateful {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMigrationInstance returns new OptMigrationInstance with value set to v.
func NewOptMigrationInstance(v MigrationInstance) OptMigrationInstance {
	return OptMigrationInstance{
		Value: v,
		Set:   true,
	}
}

// OptMigrationInstance is optional MigrationInstance.
type OptMigrationInstance struct {
	Value MigrationInstance
	Set   bool
}

// IsSet returns true if OptMigrationInstance was set.
func (o OptMigrationInstance) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMigrationInstance) Reset() {
	var v MigrationInstance
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMigrationInstance) SetTo(v MigrationInstance) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMigrationInstance) Get() (v MigrationInstance, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMigrationInstance) Or(d MigrationInstance) MigrationInstance {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNativeIntegration returns new OptNativeIntegration with value set to v.
func NewOptNativeIntegration(v NativeIntegration) OptNativeIntegration {
	return OptNativeIntegration{
		Value: v,
		Set:   true,
	}
}

// OptNativeIntegration is optional NativeIntegration.
type OptNativeIntegration struct {
	Value NativeIntegration
	Set   bool
}

// IsSet returns true if OptNativeIntegration was set.
func (o OptNativeIntegration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNativeIntegration) Reset() {
	var v NativeIntegration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNativeIntegration) SetTo(v NativeIntegration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNativeIntegration) Get() (v NativeIntegration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNativeIntegration) Or(d NativeIntegration) NativeIntegration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNetworkIncludes returns new OptNetworkIncludes with value set to v.
func NewOptNetworkIncludes(v NetworkIncludes) OptNetworkIncludes {
	return OptNetworkIncludes{
		Value: v,
		Set:   true,
	}
}

// OptNetworkIncludes is optional NetworkIncludes.
type OptNetworkIncludes struct {
	Value NetworkIncludes
	Set   bool
}

// IsSet returns true if OptNetworkIncludes was set.
func (o OptNetworkIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNetworkIncludes) Reset() {
	var v NetworkIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNetworkIncludes) SetTo(v NetworkIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNetworkIncludes) Get() (v NetworkIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNetworkIncludes) Or(d NetworkIncludes) NetworkIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNetworkStateError returns new OptNetworkStateError with value set to v.
func NewOptNetworkStateError(v NetworkStateError) OptNetworkStateError {
	return OptNetworkStateError{
		Value: v,
		Set:   true,
	}
}

// OptNetworkStateError is optional NetworkStateError.
type OptNetworkStateError struct {
	Value NetworkStateError
	Set   bool
}

// IsSet returns true if OptNetworkStateError was set.
func (o OptNetworkStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNetworkStateError) Reset() {
	var v NetworkStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNetworkStateError) SetTo(v NetworkStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNetworkStateError) Get() (v NetworkStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNetworkStateError) Or(d NetworkStateError) NetworkStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilAccountTwoFactorAuth returns new OptNilAccountTwoFactorAuth with value set to v.
func NewOptNilAccountTwoFactorAuth(v AccountTwoFactorAuth) OptNilAccountTwoFactorAuth {
	return OptNilAccountTwoFactorAuth{
		Value: v,
		Set:   true,
	}
}

// OptNilAccountTwoFactorAuth is optional nullable AccountTwoFactorAuth.
type OptNilAccountTwoFactorAuth struct {
	Value AccountTwoFactorAuth
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilAccountTwoFactorAuth was set.
func (o OptNilAccountTwoFactorAuth) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilAccountTwoFactorAuth) Reset() {
	var v AccountTwoFactorAuth
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilAccountTwoFactorAuth) SetTo(v AccountTwoFactorAuth) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilAccountTwoFactorAuth) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilAccountTwoFactorAuth) SetToNull() {
	o.Set = true
	o.Null = true
	var v AccountTwoFactorAuth
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilAccountTwoFactorAuth) Get() (v AccountTwoFactorAuth, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilAccountTwoFactorAuth) Or(d AccountTwoFactorAuth) AccountTwoFactorAuth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilBool returns new OptNilBool with value set to v.
func NewOptNilBool(v bool) OptNilBool {
	return OptNilBool{
		Value: v,
		Set:   true,
	}
}

// OptNilBool is optional nullable bool.
type OptNilBool struct {
	Value bool
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilBool was set.
func (o OptNilBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilBool) SetTo(v bool) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilBool) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilBool) SetToNull() {
	o.Set = true
	o.Null = true
	var v bool
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilBool) Get() (v bool, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilContainerDeployStatefulOptions returns new OptNilContainerDeployStatefulOptions with value set to v.
func NewOptNilContainerDeployStatefulOptions(v ContainerDeployStatefulOptions) OptNilContainerDeployStatefulOptions {
	return OptNilContainerDeployStatefulOptions{
		Value: v,
		Set:   true,
	}
}

// OptNilContainerDeployStatefulOptions is optional nullable ContainerDeployStatefulOptions.
type OptNilContainerDeployStatefulOptions struct {
	Value ContainerDeployStatefulOptions
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilContainerDeployStatefulOptions was set.
func (o OptNilContainerDeployStatefulOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilContainerDeployStatefulOptions) Reset() {
	var v ContainerDeployStatefulOptions
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilContainerDeployStatefulOptions) SetTo(v ContainerDeployStatefulOptions) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilContainerDeployStatefulOptions) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilContainerDeployStatefulOptions) SetToNull() {
	o.Set = true
	o.Null = true
	var v ContainerDeployStatefulOptions
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilContainerDeployStatefulOptions) Get() (v ContainerDeployStatefulOptions, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilContainerDeployStatefulOptions) Or(d ContainerDeployStatefulOptions) ContainerDeployStatefulOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilContainerRole returns new OptNilContainerRole with value set to v.
func NewOptNilContainerRole(v ContainerRole) OptNilContainerRole {
	return OptNilContainerRole{
		Value: v,
		Set:   true,
	}
}

// OptNilContainerRole is optional nullable ContainerRole.
type OptNilContainerRole struct {
	Value ContainerRole
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilContainerRole was set.
func (o OptNilContainerRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilContainerRole) Reset() {
	var v ContainerRole
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilContainerRole) SetTo(v ContainerRole) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilContainerRole) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilContainerRole) SetToNull() {
	o.Set = true
	o.Null = true
	var v ContainerRole
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilContainerRole) Get() (v ContainerRole, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilContainerRole) Or(d ContainerRole) ContainerRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDiscoveryEnvironmentService returns new OptNilDiscoveryEnvironmentService with value set to v.
func NewOptNilDiscoveryEnvironmentService(v DiscoveryEnvironmentService) OptNilDiscoveryEnvironmentService {
	return OptNilDiscoveryEnvironmentService{
		Value: v,
		Set:   true,
	}
}

// OptNilDiscoveryEnvironmentService is optional nullable DiscoveryEnvironmentService.
type OptNilDiscoveryEnvironmentService struct {
	Value DiscoveryEnvironmentService
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDiscoveryEnvironmentService was set.
func (o OptNilDiscoveryEnvironmentService) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDiscoveryEnvironmentService) Reset() {
	var v DiscoveryEnvironmentService
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDiscoveryEnvironmentService) SetTo(v DiscoveryEnvironmentService) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDiscoveryEnvironmentService) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDiscoveryEnvironmentService) SetToNull() {
	o.Set = true
	o.Null = true
	var v DiscoveryEnvironmentService
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDiscoveryEnvironmentService) Get() (v DiscoveryEnvironmentService, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDiscoveryEnvironmentService) Or(d DiscoveryEnvironmentService) DiscoveryEnvironmentService {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEmployeeLoginTwoFactorAuth returns new OptNilEmployeeLoginTwoFactorAuth with value set to v.
func NewOptNilEmployeeLoginTwoFactorAuth(v EmployeeLoginTwoFactorAuth) OptNilEmployeeLoginTwoFactorAuth {
	return OptNilEmployeeLoginTwoFactorAuth{
		Value: v,
		Set:   true,
	}
}

// OptNilEmployeeLoginTwoFactorAuth is optional nullable EmployeeLoginTwoFactorAuth.
type OptNilEmployeeLoginTwoFactorAuth struct {
	Value EmployeeLoginTwoFactorAuth
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEmployeeLoginTwoFactorAuth was set.
func (o OptNilEmployeeLoginTwoFactorAuth) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEmployeeLoginTwoFactorAuth) Reset() {
	var v EmployeeLoginTwoFactorAuth
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEmployeeLoginTwoFactorAuth) SetTo(v EmployeeLoginTwoFactorAuth) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEmployeeLoginTwoFactorAuth) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEmployeeLoginTwoFactorAuth) SetToNull() {
	o.Set = true
	o.Null = true
	var v EmployeeLoginTwoFactorAuth
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEmployeeLoginTwoFactorAuth) Get() (v EmployeeLoginTwoFactorAuth, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEmployeeLoginTwoFactorAuth) Or(d EmployeeLoginTwoFactorAuth) EmployeeLoginTwoFactorAuth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIPAssignment returns new OptNilIPAssignment with value set to v.
func NewOptNilIPAssignment(v IPAssignment) OptNilIPAssignment {
	return OptNilIPAssignment{
		Value: v,
		Set:   true,
	}
}

// OptNilIPAssignment is optional nullable IPAssignment.
type OptNilIPAssignment struct {
	Value IPAssignment
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIPAssignment was set.
func (o OptNilIPAssignment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIPAssignment) Reset() {
	var v IPAssignment
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIPAssignment) SetTo(v IPAssignment) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIPAssignment) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilIPAssignment) SetToNull() {
	o.Set = true
	o.Null = true
	var v IPAssignment
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIPAssignment) Get() (v IPAssignment, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIPAssignment) Or(d IPAssignment) IPAssignment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilImageSummaryService returns new OptNilImageSummaryService with value set to v.
func NewOptNilImageSummaryService(v ImageSummaryService) OptNilImageSummaryService {
	return OptNilImageSummaryService{
		Value: v,
		Set:   true,
	}
}

// OptNilImageSummaryService is optional nullable ImageSummaryService.
type OptNilImageSummaryService struct {
	Value ImageSummaryService
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilImageSummaryService was set.
func (o OptNilImageSummaryService) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilImageSummaryService) Reset() {
	var v ImageSummaryService
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilImageSummaryService) SetTo(v ImageSummaryService) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilImageSummaryService) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilImageSummaryService) SetToNull() {
	o.Set = true
	o.Null = true
	var v ImageSummaryService
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilImageSummaryService) Get() (v ImageSummaryService, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilImageSummaryService) Or(d ImageSummaryService) ImageSummaryService {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt returns new OptNilInt with value set to v.
func NewOptNilInt(v int) OptNilInt {
	return OptNilInt{
		Value: v,
		Set:   true,
	}
}

// OptNilInt is optional nullable int.
type OptNilInt struct {
	Value int
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt was set.
func (o OptNilInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt) SetTo(v int) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInt) SetToNull() {
	o.Set = true
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilLoadBalancerInfoReturnDefaultConfigHaproxy returns new OptNilLoadBalancerInfoReturnDefaultConfigHaproxy with value set to v.
func NewOptNilLoadBalancerInfoReturnDefaultConfigHaproxy(v LoadBalancerInfoReturnDefaultConfigHaproxy) OptNilLoadBalancerInfoReturnDefaultConfigHaproxy {
	return OptNilLoadBalancerInfoReturnDefaultConfigHaproxy{
		Value: v,
		Set:   true,
	}
}

// OptNilLoadBalancerInfoReturnDefaultConfigHaproxy is optional nullable LoadBalancerInfoReturnDefaultConfigHaproxy.
type OptNilLoadBalancerInfoReturnDefaultConfigHaproxy struct {
	Value LoadBalancerInfoReturnDefaultConfigHaproxy
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilLoadBalancerInfoReturnDefaultConfigHaproxy was set.
func (o OptNilLoadBalancerInfoReturnDefaultConfigHaproxy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilLoadBalancerInfoReturnDefaultConfigHaproxy) Reset() {
	var v LoadBalancerInfoReturnDefaultConfigHaproxy
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilLoadBalancerInfoReturnDefaultConfigHaproxy) SetTo(v LoadBalancerInfoReturnDefaultConfigHaproxy) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilLoadBalancerInfoReturnDefaultConfigHaproxy) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilLoadBalancerInfoReturnDefaultConfigHaproxy) SetToNull() {
	o.Set = true
	o.Null = true
	var v LoadBalancerInfoReturnDefaultConfigHaproxy
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilLoadBalancerInfoReturnDefaultConfigHaproxy) Get() (v LoadBalancerInfoReturnDefaultConfigHaproxy, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilLoadBalancerInfoReturnDefaultConfigHaproxy) Or(d LoadBalancerInfoReturnDefaultConfigHaproxy) LoadBalancerInfoReturnDefaultConfigHaproxy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilLoadBalancerInfoReturnServiceConfigHaproxy returns new OptNilLoadBalancerInfoReturnServiceConfigHaproxy with value set to v.
func NewOptNilLoadBalancerInfoReturnServiceConfigHaproxy(v LoadBalancerInfoReturnServiceConfigHaproxy) OptNilLoadBalancerInfoReturnServiceConfigHaproxy {
	return OptNilLoadBalancerInfoReturnServiceConfigHaproxy{
		Value: v,
		Set:   true,
	}
}

// OptNilLoadBalancerInfoReturnServiceConfigHaproxy is optional nullable LoadBalancerInfoReturnServiceConfigHaproxy.
type OptNilLoadBalancerInfoReturnServiceConfigHaproxy struct {
	Value LoadBalancerInfoReturnServiceConfigHaproxy
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilLoadBalancerInfoReturnServiceConfigHaproxy was set.
func (o OptNilLoadBalancerInfoReturnServiceConfigHaproxy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilLoadBalancerInfoReturnServiceConfigHaproxy) Reset() {
	var v LoadBalancerInfoReturnServiceConfigHaproxy
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilLoadBalancerInfoReturnServiceConfigHaproxy) SetTo(v LoadBalancerInfoReturnServiceConfigHaproxy) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilLoadBalancerInfoReturnServiceConfigHaproxy) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilLoadBalancerInfoReturnServiceConfigHaproxy) SetToNull() {
	o.Set = true
	o.Null = true
	var v LoadBalancerInfoReturnServiceConfigHaproxy
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilLoadBalancerInfoReturnServiceConfigHaproxy) Get() (v LoadBalancerInfoReturnServiceConfigHaproxy, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilLoadBalancerInfoReturnServiceConfigHaproxy) Or(d LoadBalancerInfoReturnServiceConfigHaproxy) LoadBalancerInfoReturnServiceConfigHaproxy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilReconfigureLoadBalancerReqContentsConfig returns new OptNilReconfigureLoadBalancerReqContentsConfig with value set to v.
func NewOptNilReconfigureLoadBalancerReqContentsConfig(v ReconfigureLoadBalancerReqContentsConfig) OptNilReconfigureLoadBalancerReqContentsConfig {
	return OptNilReconfigureLoadBalancerReqContentsConfig{
		Value: v,
		Set:   true,
	}
}

// OptNilReconfigureLoadBalancerReqContentsConfig is optional nullable ReconfigureLoadBalancerReqContentsConfig.
type OptNilReconfigureLoadBalancerReqContentsConfig struct {
	Value ReconfigureLoadBalancerReqContentsConfig
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilReconfigureLoadBalancerReqContentsConfig was set.
func (o OptNilReconfigureLoadBalancerReqContentsConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilReconfigureLoadBalancerReqContentsConfig) Reset() {
	var v ReconfigureLoadBalancerReqContentsConfig
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilReconfigureLoadBalancerReqContentsConfig) SetTo(v ReconfigureLoadBalancerReqContentsConfig) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilReconfigureLoadBalancerReqContentsConfig) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilReconfigureLoadBalancerReqContentsConfig) SetToNull() {
	o.Set = true
	o.Null = true
	var v ReconfigureLoadBalancerReqContentsConfig
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilReconfigureLoadBalancerReqContentsConfig) Get() (v ReconfigureLoadBalancerReqContentsConfig, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilReconfigureLoadBalancerReqContentsConfig) Or(d ReconfigureLoadBalancerReqContentsConfig) ReconfigureLoadBalancerReqContentsConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilReconfigureVPNReqContentsConfig returns new OptNilReconfigureVPNReqContentsConfig with value set to v.
func NewOptNilReconfigureVPNReqContentsConfig(v ReconfigureVPNReqContentsConfig) OptNilReconfigureVPNReqContentsConfig {
	return OptNilReconfigureVPNReqContentsConfig{
		Value: v,
		Set:   true,
	}
}

// OptNilReconfigureVPNReqContentsConfig is optional nullable ReconfigureVPNReqContentsConfig.
type OptNilReconfigureVPNReqContentsConfig struct {
	Value ReconfigureVPNReqContentsConfig
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilReconfigureVPNReqContentsConfig was set.
func (o OptNilReconfigureVPNReqContentsConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilReconfigureVPNReqContentsConfig) Reset() {
	var v ReconfigureVPNReqContentsConfig
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilReconfigureVPNReqContentsConfig) SetTo(v ReconfigureVPNReqContentsConfig) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilReconfigureVPNReqContentsConfig) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilReconfigureVPNReqContentsConfig) SetToNull() {
	o.Set = true
	o.Null = true
	var v ReconfigureVPNReqContentsConfig
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilReconfigureVPNReqContentsConfig) Get() (v ReconfigureVPNReqContentsConfig, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilReconfigureVPNReqContentsConfig) Or(d ReconfigureVPNReqContentsConfig) ReconfigureVPNReqContentsConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStringArray returns new OptNilStringArray with value set to v.
func NewOptNilStringArray(v []string) OptNilStringArray {
	return OptNilStringArray{
		Value: v,
		Set:   true,
	}
}

// OptNilStringArray is optional nullable []string.
type OptNilStringArray struct {
	Value []string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStringArray was set.
func (o OptNilStringArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStringArray) Reset() {
	var v []string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStringArray) SetTo(v []string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStringArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStringArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStringArray) Get() (v []string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStringArray) Or(d []string) []string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilVpnEnvironmentService returns new OptNilVpnEnvironmentService with value set to v.
func NewOptNilVpnEnvironmentService(v VpnEnvironmentService) OptNilVpnEnvironmentService {
	return OptNilVpnEnvironmentService{
		Value: v,
		Set:   true,
	}
}

// OptNilVpnEnvironmentService is optional nullable VpnEnvironmentService.
type OptNilVpnEnvironmentService struct {
	Value VpnEnvironmentService
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilVpnEnvironmentService was set.
func (o OptNilVpnEnvironmentService) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilVpnEnvironmentService) Reset() {
	var v VpnEnvironmentService
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilVpnEnvironmentService) SetTo(v VpnEnvironmentService) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilVpnEnvironmentService) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilVpnEnvironmentService) SetToNull() {
	o.Set = true
	o.Null = true
	var v VpnEnvironmentService
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilVpnEnvironmentService) Get() (v VpnEnvironmentService, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilVpnEnvironmentService) Or(d VpnEnvironmentService) VpnEnvironmentService {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNodeStateError returns new OptNodeStateError with value set to v.
func NewOptNodeStateError(v NodeStateError) OptNodeStateError {
	return OptNodeStateError{
		Value: v,
		Set:   true,
	}
}

// OptNodeStateError is optional NodeStateError.
type OptNodeStateError struct {
	Value NodeStateError
	Set   bool
}

// IsSet returns true if OptNodeStateError was set.
func (o OptNodeStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNodeStateError) Reset() {
	var v NodeStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNodeStateError) SetTo(v NodeStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNodeStateError) Get() (v NodeStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNodeStateError) Or(d NodeStateError) NodeStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrder returns new OptOrder with value set to v.
func NewOptOrder(v Order) OptOrder {
	return OptOrder{
		Value: v,
		Set:   true,
	}
}

// OptOrder is optional Order.
type OptOrder struct {
	Value Order
	Set   bool
}

// IsSet returns true if OptOrder was set.
func (o OptOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrder) Reset() {
	var v Order
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrder) SetTo(v Order) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrder) Get() (v Order, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrder) Or(d Order) Order {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrderIncludes returns new OptOrderIncludes with value set to v.
func NewOptOrderIncludes(v OrderIncludes) OptOrderIncludes {
	return OptOrderIncludes{
		Value: v,
		Set:   true,
	}
}

// OptOrderIncludes is optional OrderIncludes.
type OptOrderIncludes struct {
	Value OrderIncludes
	Set   bool
}

// IsSet returns true if OptOrderIncludes was set.
func (o OptOrderIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrderIncludes) Reset() {
	var v OrderIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrderIncludes) SetTo(v OrderIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrderIncludes) Get() (v OrderIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrderIncludes) Or(d OrderIncludes) OrderIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrderItemDiscount returns new OptOrderItemDiscount with value set to v.
func NewOptOrderItemDiscount(v OrderItemDiscount) OptOrderItemDiscount {
	return OptOrderItemDiscount{
		Value: v,
		Set:   true,
	}
}

// OptOrderItemDiscount is optional OrderItemDiscount.
type OptOrderItemDiscount struct {
	Value OrderItemDiscount
	Set   bool
}

// IsSet returns true if OptOrderItemDiscount was set.
func (o OptOrderItemDiscount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrderItemDiscount) Reset() {
	var v OrderItemDiscount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrderItemDiscount) SetTo(v OrderItemDiscount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrderItemDiscount) Get() (v OrderItemDiscount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrderItemDiscount) Or(d OrderItemDiscount) OrderItemDiscount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrderStateError returns new OptOrderStateError with value set to v.
func NewOptOrderStateError(v OrderStateError) OptOrderStateError {
	return OptOrderStateError{
		Value: v,
		Set:   true,
	}
}

// OptOrderStateError is optional OrderStateError.
type OptOrderStateError struct {
	Value OrderStateError
	Set   bool
}

// IsSet returns true if OptOrderStateError was set.
func (o OptOrderStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrderStateError) Reset() {
	var v OrderStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrderStateError) SetTo(v OrderStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrderStateError) Get() (v OrderStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrderStateError) Or(d OrderStateError) OrderStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPermissions returns new OptPermissions with value set to v.
func NewOptPermissions(v Permissions) OptPermissions {
	return OptPermissions{
		Value: v,
		Set:   true,
	}
}

// OptPermissions is optional Permissions.
type OptPermissions struct {
	Value Permissions
	Set   bool
}

// IsSet returns true if OptPermissions was set.
func (o OptPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPermissions) Reset() {
	var v Permissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPermissions) SetTo(v Permissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPermissions) Get() (v Permissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPermissions) Or(d Permissions) Permissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPool returns new OptPool with value set to v.
func NewOptPool(v Pool) OptPool {
	return OptPool{
		Value: v,
		Set:   true,
	}
}

// OptPool is optional Pool.
type OptPool struct {
	Value Pool
	Set   bool
}

// IsSet returns true if OptPool was set.
func (o OptPool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPool) Reset() {
	var v Pool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPool) SetTo(v Pool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPool) Get() (v Pool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPool) Or(d Pool) Pool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolIncludes returns new OptPoolIncludes with value set to v.
func NewOptPoolIncludes(v PoolIncludes) OptPoolIncludes {
	return OptPoolIncludes{
		Value: v,
		Set:   true,
	}
}

// OptPoolIncludes is optional PoolIncludes.
type OptPoolIncludes struct {
	Value PoolIncludes
	Set   bool
}

// IsSet returns true if OptPoolIncludes was set.
func (o OptPoolIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolIncludes) Reset() {
	var v PoolIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolIncludes) SetTo(v PoolIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolIncludes) Get() (v PoolIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolIncludes) Or(d PoolIncludes) PoolIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolStateError returns new OptPoolStateError with value set to v.
func NewOptPoolStateError(v PoolStateError) OptPoolStateError {
	return OptPoolStateError{
		Value: v,
		Set:   true,
	}
}

// OptPoolStateError is optional PoolStateError.
type OptPoolStateError struct {
	Value PoolStateError
	Set   bool
}

// IsSet returns true if OptPoolStateError was set.
func (o OptPoolStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolStateError) Reset() {
	var v PoolStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolStateError) SetTo(v PoolStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolStateError) Get() (v PoolStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolStateError) Or(d PoolStateError) PoolStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPromoCodeInclude returns new OptPromoCodeInclude with value set to v.
func NewOptPromoCodeInclude(v PromoCodeInclude) OptPromoCodeInclude {
	return OptPromoCodeInclude{
		Value: v,
		Set:   true,
	}
}

// OptPromoCodeInclude is optional PromoCodeInclude.
type OptPromoCodeInclude struct {
	Value PromoCodeInclude
	Set   bool
}

// IsSet returns true if OptPromoCodeInclude was set.
func (o OptPromoCodeInclude) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPromoCodeInclude) Reset() {
	var v PromoCodeInclude
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPromoCodeInclude) SetTo(v PromoCodeInclude) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPromoCodeInclude) Get() (v PromoCodeInclude, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPromoCodeInclude) Or(d PromoCodeInclude) PromoCodeInclude {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPromoCodeStateError returns new OptPromoCodeStateError with value set to v.
func NewOptPromoCodeStateError(v PromoCodeStateError) OptPromoCodeStateError {
	return OptPromoCodeStateError{
		Value: v,
		Set:   true,
	}
}

// OptPromoCodeStateError is optional PromoCodeStateError.
type OptPromoCodeStateError struct {
	Value PromoCodeStateError
	Set   bool
}

// IsSet returns true if OptPromoCodeStateError was set.
func (o OptPromoCodeStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPromoCodeStateError) Reset() {
	var v PromoCodeStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPromoCodeStateError) SetTo(v PromoCodeStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPromoCodeStateError) Get() (v PromoCodeStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPromoCodeStateError) Or(d PromoCodeStateError) PromoCodeStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProvider returns new OptProvider with value set to v.
func NewOptProvider(v Provider) OptProvider {
	return OptProvider{
		Value: v,
		Set:   true,
	}
}

// OptProvider is optional Provider.
type OptProvider struct {
	Value Provider
	Set   bool
}

// IsSet returns true if OptProvider was set.
func (o OptProvider) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProvider) Reset() {
	var v Provider
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProvider) SetTo(v Provider) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProvider) Get() (v Provider, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProvider) Or(d Provider) Provider {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProviderMeta returns new OptProviderMeta with value set to v.
func NewOptProviderMeta(v ProviderMeta) OptProviderMeta {
	return OptProviderMeta{
		Value: v,
		Set:   true,
	}
}

// OptProviderMeta is optional ProviderMeta.
type OptProviderMeta struct {
	Value ProviderMeta
	Set   bool
}

// IsSet returns true if OptProviderMeta was set.
func (o OptProviderMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProviderMeta) Reset() {
	var v ProviderMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProviderMeta) SetTo(v ProviderMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProviderMeta) Get() (v ProviderMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProviderMeta) Or(d ProviderMeta) ProviderMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProviderServerSpecAvailabilityZones returns new OptProviderServerSpecAvailabilityZones with value set to v.
func NewOptProviderServerSpecAvailabilityZones(v ProviderServerSpecAvailabilityZones) OptProviderServerSpecAvailabilityZones {
	return OptProviderServerSpecAvailabilityZones{
		Value: v,
		Set:   true,
	}
}

// OptProviderServerSpecAvailabilityZones is optional ProviderServerSpecAvailabilityZones.
type OptProviderServerSpecAvailabilityZones struct {
	Value ProviderServerSpecAvailabilityZones
	Set   bool
}

// IsSet returns true if OptProviderServerSpecAvailabilityZones was set.
func (o OptProviderServerSpecAvailabilityZones) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProviderServerSpecAvailabilityZones) Reset() {
	var v ProviderServerSpecAvailabilityZones
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProviderServerSpecAvailabilityZones) SetTo(v ProviderServerSpecAvailabilityZones) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProviderServerSpecAvailabilityZones) Get() (v ProviderServerSpecAvailabilityZones, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProviderServerSpecAvailabilityZones) Or(d ProviderServerSpecAvailabilityZones) ProviderServerSpecAvailabilityZones {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProviderStateError returns new OptProviderStateError with value set to v.
func NewOptProviderStateError(v ProviderStateError) OptProviderStateError {
	return OptProviderStateError{
		Value: v,
		Set:   true,
	}
}

// OptProviderStateError is optional ProviderStateError.
type OptProviderStateError struct {
	Value ProviderStateError
	Set   bool
}

// IsSet returns true if OptProviderStateError was set.
func (o OptProviderStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProviderStateError) Reset() {
	var v ProviderStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProviderStateError) SetTo(v ProviderStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProviderStateError) Get() (v ProviderStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProviderStateError) Or(d ProviderStateError) ProviderStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPublicAccountEvents returns new OptPublicAccountEvents with value set to v.
func NewOptPublicAccountEvents(v PublicAccountEvents) OptPublicAccountEvents {
	return OptPublicAccountEvents{
		Value: v,
		Set:   true,
	}
}

// OptPublicAccountEvents is optional PublicAccountEvents.
type OptPublicAccountEvents struct {
	Value PublicAccountEvents
	Set   bool
}

// IsSet returns true if OptPublicAccountEvents was set.
func (o OptPublicAccountEvents) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPublicAccountEvents) Reset() {
	var v PublicAccountEvents
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPublicAccountEvents) SetTo(v PublicAccountEvents) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPublicAccountEvents) Get() (v PublicAccountEvents, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPublicAccountEvents) Or(d PublicAccountEvents) PublicAccountEvents {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReconfigureDiscoveryReq returns new OptReconfigureDiscoveryReq with value set to v.
func NewOptReconfigureDiscoveryReq(v ReconfigureDiscoveryReq) OptReconfigureDiscoveryReq {
	return OptReconfigureDiscoveryReq{
		Value: v,
		Set:   true,
	}
}

// OptReconfigureDiscoveryReq is optional ReconfigureDiscoveryReq.
type OptReconfigureDiscoveryReq struct {
	Value ReconfigureDiscoveryReq
	Set   bool
}

// IsSet returns true if OptReconfigureDiscoveryReq was set.
func (o OptReconfigureDiscoveryReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReconfigureDiscoveryReq) Reset() {
	var v ReconfigureDiscoveryReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReconfigureDiscoveryReq) SetTo(v ReconfigureDiscoveryReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReconfigureDiscoveryReq) Get() (v ReconfigureDiscoveryReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReconfigureDiscoveryReq) Or(d ReconfigureDiscoveryReq) ReconfigureDiscoveryReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReconfigureLoadBalancerReq returns new OptReconfigureLoadBalancerReq with value set to v.
func NewOptReconfigureLoadBalancerReq(v ReconfigureLoadBalancerReq) OptReconfigureLoadBalancerReq {
	return OptReconfigureLoadBalancerReq{
		Value: v,
		Set:   true,
	}
}

// OptReconfigureLoadBalancerReq is optional ReconfigureLoadBalancerReq.
type OptReconfigureLoadBalancerReq struct {
	Value ReconfigureLoadBalancerReq
	Set   bool
}

// IsSet returns true if OptReconfigureLoadBalancerReq was set.
func (o OptReconfigureLoadBalancerReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReconfigureLoadBalancerReq) Reset() {
	var v ReconfigureLoadBalancerReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReconfigureLoadBalancerReq) SetTo(v ReconfigureLoadBalancerReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReconfigureLoadBalancerReq) Get() (v ReconfigureLoadBalancerReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReconfigureLoadBalancerReq) Or(d ReconfigureLoadBalancerReq) ReconfigureLoadBalancerReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReconfigureVPNReq returns new OptReconfigureVPNReq with value set to v.
func NewOptReconfigureVPNReq(v ReconfigureVPNReq) OptReconfigureVPNReq {
	return OptReconfigureVPNReq{
		Value: v,
		Set:   true,
	}
}

// OptReconfigureVPNReq is optional ReconfigureVPNReq.
type OptReconfigureVPNReq struct {
	Value ReconfigureVPNReq
	Set   bool
}

// IsSet returns true if OptReconfigureVPNReq was set.
func (o OptReconfigureVPNReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReconfigureVPNReq) Reset() {
	var v ReconfigureVPNReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReconfigureVPNReq) SetTo(v ReconfigureVPNReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReconfigureVPNReq) Get() (v ReconfigureVPNReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReconfigureVPNReq) Or(d ReconfigureVPNReq) ReconfigureVPNReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReconfigureVPNReqContentsConfigAuth returns new OptReconfigureVPNReqContentsConfigAuth with value set to v.
func NewOptReconfigureVPNReqContentsConfigAuth(v ReconfigureVPNReqContentsConfigAuth) OptReconfigureVPNReqContentsConfigAuth {
	return OptReconfigureVPNReqContentsConfigAuth{
		Value: v,
		Set:   true,
	}
}

// OptReconfigureVPNReqContentsConfigAuth is optional ReconfigureVPNReqContentsConfigAuth.
type OptReconfigureVPNReqContentsConfigAuth struct {
	Value ReconfigureVPNReqContentsConfigAuth
	Set   bool
}

// IsSet returns true if OptReconfigureVPNReqContentsConfigAuth was set.
func (o OptReconfigureVPNReqContentsConfigAuth) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReconfigureVPNReqContentsConfigAuth) Reset() {
	var v ReconfigureVPNReqContentsConfigAuth
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReconfigureVPNReqContentsConfigAuth) SetTo(v ReconfigureVPNReqContentsConfigAuth) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReconfigureVPNReqContentsConfigAuth) Get() (v ReconfigureVPNReqContentsConfigAuth, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReconfigureVPNReqContentsConfigAuth) Or(d ReconfigureVPNReqContentsConfigAuth) ReconfigureVPNReqContentsConfigAuth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecord returns new OptRecord with value set to v.
func NewOptRecord(v Record) OptRecord {
	return OptRecord{
		Value: v,
		Set:   true,
	}
}

// OptRecord is optional Record.
type OptRecord struct {
	Value Record
	Set   bool
}

// IsSet returns true if OptRecord was set.
func (o OptRecord) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecord) Reset() {
	var v Record
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecord) SetTo(v Record) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecord) Get() (v Record, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecord) Or(d Record) Record {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordIncludes returns new OptRecordIncludes with value set to v.
func NewOptRecordIncludes(v RecordIncludes) OptRecordIncludes {
	return OptRecordIncludes{
		Value: v,
		Set:   true,
	}
}

// OptRecordIncludes is optional RecordIncludes.
type OptRecordIncludes struct {
	Value RecordIncludes
	Set   bool
}

// IsSet returns true if OptRecordIncludes was set.
func (o OptRecordIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordIncludes) Reset() {
	var v RecordIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordIncludes) SetTo(v RecordIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordIncludes) Get() (v RecordIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordIncludes) Or(d RecordIncludes) RecordIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordStateError returns new OptRecordStateError with value set to v.
func NewOptRecordStateError(v RecordStateError) OptRecordStateError {
	return OptRecordStateError{
		Value: v,
		Set:   true,
	}
}

// OptRecordStateError is optional RecordStateError.
type OptRecordStateError struct {
	Value RecordStateError
	Set   bool
}

// IsSet returns true if OptRecordStateError was set.
func (o OptRecordStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordStateError) Reset() {
	var v RecordStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordStateError) SetTo(v RecordStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordStateError) Get() (v RecordStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordStateError) Or(d RecordStateError) RecordStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordTypesA returns new OptRecordTypesA with value set to v.
func NewOptRecordTypesA(v RecordTypesA) OptRecordTypesA {
	return OptRecordTypesA{
		Value: v,
		Set:   true,
	}
}

// OptRecordTypesA is optional RecordTypesA.
type OptRecordTypesA struct {
	Value RecordTypesA
	Set   bool
}

// IsSet returns true if OptRecordTypesA was set.
func (o OptRecordTypesA) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordTypesA) Reset() {
	var v RecordTypesA
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordTypesA) SetTo(v RecordTypesA) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordTypesA) Get() (v RecordTypesA, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordTypesA) Or(d RecordTypesA) RecordTypesA {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordTypesAaaa returns new OptRecordTypesAaaa with value set to v.
func NewOptRecordTypesAaaa(v RecordTypesAaaa) OptRecordTypesAaaa {
	return OptRecordTypesAaaa{
		Value: v,
		Set:   true,
	}
}

// OptRecordTypesAaaa is optional RecordTypesAaaa.
type OptRecordTypesAaaa struct {
	Value RecordTypesAaaa
	Set   bool
}

// IsSet returns true if OptRecordTypesAaaa was set.
func (o OptRecordTypesAaaa) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordTypesAaaa) Reset() {
	var v RecordTypesAaaa
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordTypesAaaa) SetTo(v RecordTypesAaaa) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordTypesAaaa) Get() (v RecordTypesAaaa, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordTypesAaaa) Or(d RecordTypesAaaa) RecordTypesAaaa {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordTypesAlias returns new OptRecordTypesAlias with value set to v.
func NewOptRecordTypesAlias(v RecordTypesAlias) OptRecordTypesAlias {
	return OptRecordTypesAlias{
		Value: v,
		Set:   true,
	}
}

// OptRecordTypesAlias is optional RecordTypesAlias.
type OptRecordTypesAlias struct {
	Value RecordTypesAlias
	Set   bool
}

// IsSet returns true if OptRecordTypesAlias was set.
func (o OptRecordTypesAlias) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordTypesAlias) Reset() {
	var v RecordTypesAlias
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordTypesAlias) SetTo(v RecordTypesAlias) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordTypesAlias) Get() (v RecordTypesAlias, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordTypesAlias) Or(d RecordTypesAlias) RecordTypesAlias {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordTypesCaa returns new OptRecordTypesCaa with value set to v.
func NewOptRecordTypesCaa(v RecordTypesCaa) OptRecordTypesCaa {
	return OptRecordTypesCaa{
		Value: v,
		Set:   true,
	}
}

// OptRecordTypesCaa is optional RecordTypesCaa.
type OptRecordTypesCaa struct {
	Value RecordTypesCaa
	Set   bool
}

// IsSet returns true if OptRecordTypesCaa was set.
func (o OptRecordTypesCaa) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordTypesCaa) Reset() {
	var v RecordTypesCaa
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordTypesCaa) SetTo(v RecordTypesCaa) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordTypesCaa) Get() (v RecordTypesCaa, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordTypesCaa) Or(d RecordTypesCaa) RecordTypesCaa {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordTypesCname returns new OptRecordTypesCname with value set to v.
func NewOptRecordTypesCname(v RecordTypesCname) OptRecordTypesCname {
	return OptRecordTypesCname{
		Value: v,
		Set:   true,
	}
}

// OptRecordTypesCname is optional RecordTypesCname.
type OptRecordTypesCname struct {
	Value RecordTypesCname
	Set   bool
}

// IsSet returns true if OptRecordTypesCname was set.
func (o OptRecordTypesCname) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordTypesCname) Reset() {
	var v RecordTypesCname
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordTypesCname) SetTo(v RecordTypesCname) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordTypesCname) Get() (v RecordTypesCname, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordTypesCname) Or(d RecordTypesCname) RecordTypesCname {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordTypesLinked returns new OptRecordTypesLinked with value set to v.
func NewOptRecordTypesLinked(v RecordTypesLinked) OptRecordTypesLinked {
	return OptRecordTypesLinked{
		Value: v,
		Set:   true,
	}
}

// OptRecordTypesLinked is optional RecordTypesLinked.
type OptRecordTypesLinked struct {
	Value RecordTypesLinked
	Set   bool
}

// IsSet returns true if OptRecordTypesLinked was set.
func (o OptRecordTypesLinked) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordTypesLinked) Reset() {
	var v RecordTypesLinked
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordTypesLinked) SetTo(v RecordTypesLinked) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordTypesLinked) Get() (v RecordTypesLinked, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordTypesLinked) Or(d RecordTypesLinked) RecordTypesLinked {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordTypesMx returns new OptRecordTypesMx with value set to v.
func NewOptRecordTypesMx(v RecordTypesMx) OptRecordTypesMx {
	return OptRecordTypesMx{
		Value: v,
		Set:   true,
	}
}

// OptRecordTypesMx is optional RecordTypesMx.
type OptRecordTypesMx struct {
	Value RecordTypesMx
	Set   bool
}

// IsSet returns true if OptRecordTypesMx was set.
func (o OptRecordTypesMx) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordTypesMx) Reset() {
	var v RecordTypesMx
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordTypesMx) SetTo(v RecordTypesMx) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordTypesMx) Get() (v RecordTypesMx, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordTypesMx) Or(d RecordTypesMx) RecordTypesMx {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordTypesNs returns new OptRecordTypesNs with value set to v.
func NewOptRecordTypesNs(v RecordTypesNs) OptRecordTypesNs {
	return OptRecordTypesNs{
		Value: v,
		Set:   true,
	}
}

// OptRecordTypesNs is optional RecordTypesNs.
type OptRecordTypesNs struct {
	Value RecordTypesNs
	Set   bool
}

// IsSet returns true if OptRecordTypesNs was set.
func (o OptRecordTypesNs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordTypesNs) Reset() {
	var v RecordTypesNs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordTypesNs) SetTo(v RecordTypesNs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordTypesNs) Get() (v RecordTypesNs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordTypesNs) Or(d RecordTypesNs) RecordTypesNs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordTypesSrv returns new OptRecordTypesSrv with value set to v.
func NewOptRecordTypesSrv(v RecordTypesSrv) OptRecordTypesSrv {
	return OptRecordTypesSrv{
		Value: v,
		Set:   true,
	}
}

// OptRecordTypesSrv is optional RecordTypesSrv.
type OptRecordTypesSrv struct {
	Value RecordTypesSrv
	Set   bool
}

// IsSet returns true if OptRecordTypesSrv was set.
func (o OptRecordTypesSrv) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordTypesSrv) Reset() {
	var v RecordTypesSrv
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordTypesSrv) SetTo(v RecordTypesSrv) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordTypesSrv) Get() (v RecordTypesSrv, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordTypesSrv) Or(d RecordTypesSrv) RecordTypesSrv {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordTypesTxt returns new OptRecordTypesTxt with value set to v.
func NewOptRecordTypesTxt(v RecordTypesTxt) OptRecordTypesTxt {
	return OptRecordTypesTxt{
		Value: v,
		Set:   true,
	}
}

// OptRecordTypesTxt is optional RecordTypesTxt.
type OptRecordTypesTxt struct {
	Value RecordTypesTxt
	Set   bool
}

// IsSet returns true if OptRecordTypesTxt was set.
func (o OptRecordTypesTxt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordTypesTxt) Reset() {
	var v RecordTypesTxt
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordTypesTxt) SetTo(v RecordTypesTxt) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordTypesTxt) Get() (v RecordTypesTxt, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordTypesTxt) Or(d RecordTypesTxt) RecordTypesTxt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRemoveServerOptions returns new OptRemoveServerOptions with value set to v.
func NewOptRemoveServerOptions(v RemoveServerOptions) OptRemoveServerOptions {
	return OptRemoveServerOptions{
		Value: v,
		Set:   true,
	}
}

// OptRemoveServerOptions is optional RemoveServerOptions.
type OptRemoveServerOptions struct {
	Value RemoveServerOptions
	Set   bool
}

// IsSet returns true if OptRemoveServerOptions was set.
func (o OptRemoveServerOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRemoveServerOptions) Reset() {
	var v RemoveServerOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRemoveServerOptions) SetTo(v RemoveServerOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRemoveServerOptions) Get() (v RemoveServerOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRemoveServerOptions) Or(d RemoveServerOptions) RemoveServerOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResetPasswordReq returns new OptResetPasswordReq with value set to v.
func NewOptResetPasswordReq(v ResetPasswordReq) OptResetPasswordReq {
	return OptResetPasswordReq{
		Value: v,
		Set:   true,
	}
}

// OptResetPasswordReq is optional ResetPasswordReq.
type OptResetPasswordReq struct {
	Value ResetPasswordReq
	Set   bool
}

// IsSet returns true if OptResetPasswordReq was set.
func (o OptResetPasswordReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResetPasswordReq) Reset() {
	var v ResetPasswordReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResetPasswordReq) SetTo(v ResetPasswordReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResetPasswordReq) Get() (v ResetPasswordReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResetPasswordReq) Or(d ResetPasswordReq) ResetPasswordReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRestoreBackupJobReq returns new OptRestoreBackupJobReq with value set to v.
func NewOptRestoreBackupJobReq(v RestoreBackupJobReq) OptRestoreBackupJobReq {
	return OptRestoreBackupJobReq{
		Value: v,
		Set:   true,
	}
}

// OptRestoreBackupJobReq is optional RestoreBackupJobReq.
type OptRestoreBackupJobReq struct {
	Value RestoreBackupJobReq
	Set   bool
}

// IsSet returns true if OptRestoreBackupJobReq was set.
func (o OptRestoreBackupJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRestoreBackupJobReq) Reset() {
	var v RestoreBackupJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRestoreBackupJobReq) SetTo(v RestoreBackupJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRestoreBackupJobReq) Get() (v RestoreBackupJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRestoreBackupJobReq) Or(d RestoreBackupJobReq) RestoreBackupJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRunStateError returns new OptRunStateError with value set to v.
func NewOptRunStateError(v RunStateError) OptRunStateError {
	return OptRunStateError{
		Value: v,
		Set:   true,
	}
}

// OptRunStateError is optional RunStateError.
type OptRunStateError struct {
	Value RunStateError
	Set   bool
}

// IsSet returns true if OptRunStateError was set.
func (o OptRunStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRunStateError) Reset() {
	var v RunStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRunStateError) SetTo(v RunStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRunStateError) Get() (v RunStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRunStateError) Or(d RunStateError) RunStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSDNNetwork returns new OptSDNNetwork with value set to v.
func NewOptSDNNetwork(v SDNNetwork) OptSDNNetwork {
	return OptSDNNetwork{
		Value: v,
		Set:   true,
	}
}

// OptSDNNetwork is optional SDNNetwork.
type OptSDNNetwork struct {
	Value SDNNetwork
	Set   bool
}

// IsSet returns true if OptSDNNetwork was set.
func (o OptSDNNetwork) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSDNNetwork) Reset() {
	var v SDNNetwork
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSDNNetwork) SetTo(v SDNNetwork) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSDNNetwork) Get() (v SDNNetwork, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSDNNetwork) Or(d SDNNetwork) SDNNetwork {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSSHResponse returns new OptSSHResponse with value set to v.
func NewOptSSHResponse(v SSHResponse) OptSSHResponse {
	return OptSSHResponse{
		Value: v,
		Set:   true,
	}
}

// OptSSHResponse is optional SSHResponse.
type OptSSHResponse struct {
	Value SSHResponse
	Set   bool
}

// IsSet returns true if OptSSHResponse was set.
func (o OptSSHResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSSHResponse) Reset() {
	var v SSHResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSSHResponse) SetTo(v SSHResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSSHResponse) Get() (v SSHResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSSHResponse) Or(d SSHResponse) SSHResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSeccompRuleCapabilities returns new OptSeccompRuleCapabilities with value set to v.
func NewOptSeccompRuleCapabilities(v SeccompRuleCapabilities) OptSeccompRuleCapabilities {
	return OptSeccompRuleCapabilities{
		Value: v,
		Set:   true,
	}
}

// OptSeccompRuleCapabilities is optional SeccompRuleCapabilities.
type OptSeccompRuleCapabilities struct {
	Value SeccompRuleCapabilities
	Set   bool
}

// IsSet returns true if OptSeccompRuleCapabilities was set.
func (o OptSeccompRuleCapabilities) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSeccompRuleCapabilities) Reset() {
	var v SeccompRuleCapabilities
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSeccompRuleCapabilities) SetTo(v SeccompRuleCapabilities) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSeccompRuleCapabilities) Get() (v SeccompRuleCapabilities, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSeccompRuleCapabilities) Or(d SeccompRuleCapabilities) SeccompRuleCapabilities {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSeccompRuleSyscall returns new OptSeccompRuleSyscall with value set to v.
func NewOptSeccompRuleSyscall(v SeccompRuleSyscall) OptSeccompRuleSyscall {
	return OptSeccompRuleSyscall{
		Value: v,
		Set:   true,
	}
}

// OptSeccompRuleSyscall is optional SeccompRuleSyscall.
type OptSeccompRuleSyscall struct {
	Value SeccompRuleSyscall
	Set   bool
}

// IsSet returns true if OptSeccompRuleSyscall was set.
func (o OptSeccompRuleSyscall) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSeccompRuleSyscall) Reset() {
	var v SeccompRuleSyscall
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSeccompRuleSyscall) SetTo(v SeccompRuleSyscall) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSeccompRuleSyscall) Get() (v SeccompRuleSyscall, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSeccompRuleSyscall) Or(d SeccompRuleSyscall) SeccompRuleSyscall {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSecurityReport returns new OptSecurityReport with value set to v.
func NewOptSecurityReport(v SecurityReport) OptSecurityReport {
	return OptSecurityReport{
		Value: v,
		Set:   true,
	}
}

// OptSecurityReport is optional SecurityReport.
type OptSecurityReport struct {
	Value SecurityReport
	Set   bool
}

// IsSet returns true if OptSecurityReport was set.
func (o OptSecurityReport) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSecurityReport) Reset() {
	var v SecurityReport
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSecurityReport) SetTo(v SecurityReport) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSecurityReport) Get() (v SecurityReport, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSecurityReport) Or(d SecurityReport) SecurityReport {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSecuritySnapshotIncidentBreakdown returns new OptSecuritySnapshotIncidentBreakdown with value set to v.
func NewOptSecuritySnapshotIncidentBreakdown(v SecuritySnapshotIncidentBreakdown) OptSecuritySnapshotIncidentBreakdown {
	return OptSecuritySnapshotIncidentBreakdown{
		Value: v,
		Set:   true,
	}
}

// OptSecuritySnapshotIncidentBreakdown is optional SecuritySnapshotIncidentBreakdown.
type OptSecuritySnapshotIncidentBreakdown struct {
	Value SecuritySnapshotIncidentBreakdown
	Set   bool
}

// IsSet returns true if OptSecuritySnapshotIncidentBreakdown was set.
func (o OptSecuritySnapshotIncidentBreakdown) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSecuritySnapshotIncidentBreakdown) Reset() {
	var v SecuritySnapshotIncidentBreakdown
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSecuritySnapshotIncidentBreakdown) SetTo(v SecuritySnapshotIncidentBreakdown) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSecuritySnapshotIncidentBreakdown) Get() (v SecuritySnapshotIncidentBreakdown, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSecuritySnapshotIncidentBreakdown) Or(d SecuritySnapshotIncidentBreakdown) SecuritySnapshotIncidentBreakdown {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServerIncludes returns new OptServerIncludes with value set to v.
func NewOptServerIncludes(v ServerIncludes) OptServerIncludes {
	return OptServerIncludes{
		Value: v,
		Set:   true,
	}
}

// OptServerIncludes is optional ServerIncludes.
type OptServerIncludes struct {
	Value ServerIncludes
	Set   bool
}

// IsSet returns true if OptServerIncludes was set.
func (o OptServerIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServerIncludes) Reset() {
	var v ServerIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServerIncludes) SetTo(v ServerIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServerIncludes) Get() (v ServerIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServerIncludes) Or(d ServerIncludes) ServerIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServerMeta returns new OptServerMeta with value set to v.
func NewOptServerMeta(v ServerMeta) OptServerMeta {
	return OptServerMeta{
		Value: v,
		Set:   true,
	}
}

// OptServerMeta is optional ServerMeta.
type OptServerMeta struct {
	Value ServerMeta
	Set   bool
}

// IsSet returns true if OptServerMeta was set.
func (o OptServerMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServerMeta) Reset() {
	var v ServerMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServerMeta) SetTo(v ServerMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServerMeta) Get() (v ServerMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServerMeta) Or(d ServerMeta) ServerMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServerMetaNode returns new OptServerMetaNode with value set to v.
func NewOptServerMetaNode(v ServerMetaNode) OptServerMetaNode {
	return OptServerMetaNode{
		Value: v,
		Set:   true,
	}
}

// OptServerMetaNode is optional ServerMetaNode.
type OptServerMetaNode struct {
	Value ServerMetaNode
	Set   bool
}

// IsSet returns true if OptServerMetaNode was set.
func (o OptServerMetaNode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServerMetaNode) Reset() {
	var v ServerMetaNode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServerMetaNode) SetTo(v ServerMetaNode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServerMetaNode) Get() (v ServerMetaNode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServerMetaNode) Or(d ServerMetaNode) ServerMetaNode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServerProviderExtra returns new OptServerProviderExtra with value set to v.
func NewOptServerProviderExtra(v ServerProviderExtra) OptServerProviderExtra {
	return OptServerProviderExtra{
		Value: v,
		Set:   true,
	}
}

// OptServerProviderExtra is optional ServerProviderExtra.
type OptServerProviderExtra struct {
	Value ServerProviderExtra
	Set   bool
}

// IsSet returns true if OptServerProviderExtra was set.
func (o OptServerProviderExtra) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServerProviderExtra) Reset() {
	var v ServerProviderExtra
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServerProviderExtra) SetTo(v ServerProviderExtra) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServerProviderExtra) Get() (v ServerProviderExtra, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServerProviderExtra) Or(d ServerProviderExtra) ServerProviderExtra {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServerProviderProvisionOptions returns new OptServerProviderProvisionOptions with value set to v.
func NewOptServerProviderProvisionOptions(v ServerProviderProvisionOptions) OptServerProviderProvisionOptions {
	return OptServerProviderProvisionOptions{
		Value: v,
		Set:   true,
	}
}

// OptServerProviderProvisionOptions is optional ServerProviderProvisionOptions.
type OptServerProviderProvisionOptions struct {
	Value ServerProviderProvisionOptions
	Set   bool
}

// IsSet returns true if OptServerProviderProvisionOptions was set.
func (o OptServerProviderProvisionOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServerProviderProvisionOptions) Reset() {
	var v ServerProviderProvisionOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServerProviderProvisionOptions) SetTo(v ServerProviderProvisionOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServerProviderProvisionOptions) Get() (v ServerProviderProvisionOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServerProviderProvisionOptions) Or(d ServerProviderProvisionOptions) ServerProviderProvisionOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServerStateError returns new OptServerStateError with value set to v.
func NewOptServerStateError(v ServerStateError) OptServerStateError {
	return OptServerStateError{
		Value: v,
		Set:   true,
	}
}

// OptServerStateError is optional ServerStateError.
type OptServerStateError struct {
	Value ServerStateError
	Set   bool
}

// IsSet returns true if OptServerStateError was set.
func (o OptServerStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServerStateError) Reset() {
	var v ServerStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServerStateError) SetTo(v ServerStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServerStateError) Get() (v ServerStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServerStateError) Or(d ServerStateError) ServerStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServerStatsNetworkInterfaces returns new OptServerStatsNetworkInterfaces with value set to v.
func NewOptServerStatsNetworkInterfaces(v ServerStatsNetworkInterfaces) OptServerStatsNetworkInterfaces {
	return OptServerStatsNetworkInterfaces{
		Value: v,
		Set:   true,
	}
}

// OptServerStatsNetworkInterfaces is optional ServerStatsNetworkInterfaces.
type OptServerStatsNetworkInterfaces struct {
	Value ServerStatsNetworkInterfaces
	Set   bool
}

// IsSet returns true if OptServerStatsNetworkInterfaces was set.
func (o OptServerStatsNetworkInterfaces) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServerStatsNetworkInterfaces) Reset() {
	var v ServerStatsNetworkInterfaces
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServerStatsNetworkInterfaces) SetTo(v ServerStatsNetworkInterfaces) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServerStatsNetworkInterfaces) Get() (v ServerStatsNetworkInterfaces, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServerStatsNetworkInterfaces) Or(d ServerStatsNetworkInterfaces) ServerStatsNetworkInterfaces {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServersList returns new OptServersList with value set to v.
func NewOptServersList(v ServersList) OptServersList {
	return OptServersList{
		Value: v,
		Set:   true,
	}
}

// OptServersList is optional ServersList.
type OptServersList struct {
	Value ServersList
	Set   bool
}

// IsSet returns true if OptServersList was set.
func (o OptServersList) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServersList) Reset() {
	var v ServersList
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServersList) SetTo(v ServersList) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServersList) Get() (v ServersList, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServersList) Or(d ServersList) ServersList {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptService returns new OptService with value set to v.
func NewOptService(v Service) OptService {
	return OptService{
		Value: v,
		Set:   true,
	}
}

// OptService is optional Service.
type OptService struct {
	Value Service
	Set   bool
}

// IsSet returns true if OptService was set.
func (o OptService) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptService) Reset() {
	var v Service
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptService) SetTo(v Service) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptService) Get() (v Service, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptService) Or(d Service) Service {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServiceItemSupport returns new OptServiceItemSupport with value set to v.
func NewOptServiceItemSupport(v ServiceItemSupport) OptServiceItemSupport {
	return OptServiceItemSupport{
		Value: v,
		Set:   true,
	}
}

// OptServiceItemSupport is optional ServiceItemSupport.
type OptServiceItemSupport struct {
	Value ServiceItemSupport
	Set   bool
}

// IsSet returns true if OptServiceItemSupport was set.
func (o OptServiceItemSupport) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServiceItemSupport) Reset() {
	var v ServiceItemSupport
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServiceItemSupport) SetTo(v ServiceItemSupport) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServiceItemSupport) Get() (v ServiceItemSupport, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServiceItemSupport) Or(d ServiceItemSupport) ServiceItemSupport {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServiceItemTier returns new OptServiceItemTier with value set to v.
func NewOptServiceItemTier(v ServiceItemTier) OptServiceItemTier {
	return OptServiceItemTier{
		Value: v,
		Set:   true,
	}
}

// OptServiceItemTier is optional ServiceItemTier.
type OptServiceItemTier struct {
	Value ServiceItemTier
	Set   bool
}

// IsSet returns true if OptServiceItemTier was set.
func (o OptServiceItemTier) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServiceItemTier) Reset() {
	var v ServiceItemTier
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServiceItemTier) SetTo(v ServiceItemTier) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServiceItemTier) Get() (v ServiceItemTier, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServiceItemTier) Or(d ServiceItemTier) ServiceItemTier {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSetupTwoFaReq returns new OptSetupTwoFaReq with value set to v.
func NewOptSetupTwoFaReq(v SetupTwoFaReq) OptSetupTwoFaReq {
	return OptSetupTwoFaReq{
		Value: v,
		Set:   true,
	}
}

// OptSetupTwoFaReq is optional SetupTwoFaReq.
type OptSetupTwoFaReq struct {
	Value SetupTwoFaReq
	Set   bool
}

// IsSet returns true if OptSetupTwoFaReq was set.
func (o OptSetupTwoFaReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSetupTwoFaReq) Reset() {
	var v SetupTwoFaReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSetupTwoFaReq) SetTo(v SetupTwoFaReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSetupTwoFaReq) Get() (v SetupTwoFaReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSetupTwoFaReq) Or(d SetupTwoFaReq) SetupTwoFaReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackBuildContainerUpdate returns new OptStackBuildContainerUpdate with value set to v.
func NewOptStackBuildContainerUpdate(v StackBuildContainerUpdate) OptStackBuildContainerUpdate {
	return OptStackBuildContainerUpdate{
		Value: v,
		Set:   true,
	}
}

// OptStackBuildContainerUpdate is optional StackBuildContainerUpdate.
type OptStackBuildContainerUpdate struct {
	Value StackBuildContainerUpdate
	Set   bool
}

// IsSet returns true if OptStackBuildContainerUpdate was set.
func (o OptStackBuildContainerUpdate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackBuildContainerUpdate) Reset() {
	var v StackBuildContainerUpdate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackBuildContainerUpdate) SetTo(v StackBuildContainerUpdate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackBuildContainerUpdate) Get() (v StackBuildContainerUpdate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackBuildContainerUpdate) Or(d StackBuildContainerUpdate) StackBuildContainerUpdate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackSummary returns new OptStackSummary with value set to v.
func NewOptStackSummary(v StackSummary) OptStackSummary {
	return OptStackSummary{
		Value: v,
		Set:   true,
	}
}

// OptStackSummary is optional StackSummary.
type OptStackSummary struct {
	Value StackSummary
	Set   bool
}

// IsSet returns true if OptStackSummary was set.
func (o OptStackSummary) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackSummary) Reset() {
	var v StackSummary
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackSummary) SetTo(v StackSummary) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackSummary) Get() (v StackSummary, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackSummary) Or(d StackSummary) StackSummary {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackSummaryImage returns new OptStackSummaryImage with value set to v.
func NewOptStackSummaryImage(v StackSummaryImage) OptStackSummaryImage {
	return OptStackSummaryImage{
		Value: v,
		Set:   true,
	}
}

// OptStackSummaryImage is optional StackSummaryImage.
type OptStackSummaryImage struct {
	Value StackSummaryImage
	Set   bool
}

// IsSet returns true if OptStackSummaryImage was set.
func (o OptStackSummaryImage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackSummaryImage) Reset() {
	var v StackSummaryImage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackSummaryImage) SetTo(v StackSummaryImage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackSummaryImage) Get() (v StackSummaryImage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackSummaryImage) Or(d StackSummaryImage) StackSummaryImage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStateCountSummary returns new OptStateCountSummary with value set to v.
func NewOptStateCountSummary(v StateCountSummary) OptStateCountSummary {
	return OptStateCountSummary{
		Value: v,
		Set:   true,
	}
}

// OptStateCountSummary is optional StateCountSummary.
type OptStateCountSummary struct {
	Value StateCountSummary
	Set   bool
}

// IsSet returns true if OptStateCountSummary was set.
func (o OptStateCountSummary) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStateCountSummary) Reset() {
	var v StateCountSummary
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStateCountSummary) SetTo(v StateCountSummary) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStateCountSummary) Get() (v StateCountSummary, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStateCountSummary) Or(d StateCountSummary) StateCountSummary {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTaskDescriptor returns new OptTaskDescriptor with value set to v.
func NewOptTaskDescriptor(v TaskDescriptor) OptTaskDescriptor {
	return OptTaskDescriptor{
		Value: v,
		Set:   true,
	}
}

// OptTaskDescriptor is optional TaskDescriptor.
type OptTaskDescriptor struct {
	Value TaskDescriptor
	Set   bool
}

// IsSet returns true if OptTaskDescriptor was set.
func (o OptTaskDescriptor) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTaskDescriptor) Reset() {
	var v TaskDescriptor
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTaskDescriptor) SetTo(v TaskDescriptor) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTaskDescriptor) Get() (v TaskDescriptor, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTaskDescriptor) Or(d TaskDescriptor) TaskDescriptor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTaskDescriptorJob returns new OptTaskDescriptorJob with value set to v.
func NewOptTaskDescriptorJob(v TaskDescriptorJob) OptTaskDescriptorJob {
	return OptTaskDescriptorJob{
		Value: v,
		Set:   true,
	}
}

// OptTaskDescriptorJob is optional TaskDescriptorJob.
type OptTaskDescriptorJob struct {
	Value TaskDescriptorJob
	Set   bool
}

// IsSet returns true if OptTaskDescriptorJob was set.
func (o OptTaskDescriptorJob) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTaskDescriptorJob) Reset() {
	var v TaskDescriptorJob
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTaskDescriptorJob) SetTo(v TaskDescriptorJob) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTaskDescriptorJob) Get() (v TaskDescriptorJob, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTaskDescriptorJob) Or(d TaskDescriptorJob) TaskDescriptorJob {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTriggerKey returns new OptTriggerKey with value set to v.
func NewOptTriggerKey(v TriggerKey) OptTriggerKey {
	return OptTriggerKey{
		Value: v,
		Set:   true,
	}
}

// OptTriggerKey is optional TriggerKey.
type OptTriggerKey struct {
	Value TriggerKey
	Set   bool
}

// IsSet returns true if OptTriggerKey was set.
func (o OptTriggerKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTriggerKey) Reset() {
	var v TriggerKey
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTriggerKey) SetTo(v TriggerKey) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTriggerKey) Get() (v TriggerKey, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTriggerKey) Or(d TriggerKey) TriggerKey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTriggerKeyStateError returns new OptTriggerKeyStateError with value set to v.
func NewOptTriggerKeyStateError(v TriggerKeyStateError) OptTriggerKeyStateError {
	return OptTriggerKeyStateError{
		Value: v,
		Set:   true,
	}
}

// OptTriggerKeyStateError is optional TriggerKeyStateError.
type OptTriggerKeyStateError struct {
	Value TriggerKeyStateError
	Set   bool
}

// IsSet returns true if OptTriggerKeyStateError was set.
func (o OptTriggerKeyStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTriggerKeyStateError) Reset() {
	var v TriggerKeyStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTriggerKeyStateError) SetTo(v TriggerKeyStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTriggerKeyStateError) Get() (v TriggerKeyStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTriggerKeyStateError) Or(d TriggerKeyStateError) TriggerKeyStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTwoFaDisableResponse returns new OptTwoFaDisableResponse with value set to v.
func NewOptTwoFaDisableResponse(v TwoFaDisableResponse) OptTwoFaDisableResponse {
	return OptTwoFaDisableResponse{
		Value: v,
		Set:   true,
	}
}

// OptTwoFaDisableResponse is optional TwoFaDisableResponse.
type OptTwoFaDisableResponse struct {
	Value TwoFaDisableResponse
	Set   bool
}

// IsSet returns true if OptTwoFaDisableResponse was set.
func (o OptTwoFaDisableResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTwoFaDisableResponse) Reset() {
	var v TwoFaDisableResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTwoFaDisableResponse) SetTo(v TwoFaDisableResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTwoFaDisableResponse) Get() (v TwoFaDisableResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTwoFaDisableResponse) Or(d TwoFaDisableResponse) TwoFaDisableResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTwoFaSetupResponse returns new OptTwoFaSetupResponse with value set to v.
func NewOptTwoFaSetupResponse(v TwoFaSetupResponse) OptTwoFaSetupResponse {
	return OptTwoFaSetupResponse{
		Value: v,
		Set:   true,
	}
}

// OptTwoFaSetupResponse is optional TwoFaSetupResponse.
type OptTwoFaSetupResponse struct {
	Value TwoFaSetupResponse
	Set   bool
}

// IsSet returns true if OptTwoFaSetupResponse was set.
func (o OptTwoFaSetupResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTwoFaSetupResponse) Reset() {
	var v TwoFaSetupResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTwoFaSetupResponse) SetTo(v TwoFaSetupResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTwoFaSetupResponse) Get() (v TwoFaSetupResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTwoFaSetupResponse) Or(d TwoFaSetupResponse) TwoFaSetupResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateAccountInviteReq returns new OptUpdateAccountInviteReq with value set to v.
func NewOptUpdateAccountInviteReq(v UpdateAccountInviteReq) OptUpdateAccountInviteReq {
	return OptUpdateAccountInviteReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateAccountInviteReq is optional UpdateAccountInviteReq.
type OptUpdateAccountInviteReq struct {
	Value UpdateAccountInviteReq
	Set   bool
}

// IsSet returns true if OptUpdateAccountInviteReq was set.
func (o OptUpdateAccountInviteReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateAccountInviteReq) Reset() {
	var v UpdateAccountInviteReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateAccountInviteReq) SetTo(v UpdateAccountInviteReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateAccountInviteReq) Get() (v UpdateAccountInviteReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateAccountInviteReq) Or(d UpdateAccountInviteReq) UpdateAccountInviteReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateAccountReq returns new OptUpdateAccountReq with value set to v.
func NewOptUpdateAccountReq(v UpdateAccountReq) OptUpdateAccountReq {
	return OptUpdateAccountReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateAccountReq is optional UpdateAccountReq.
type OptUpdateAccountReq struct {
	Value UpdateAccountReq
	Set   bool
}

// IsSet returns true if OptUpdateAccountReq was set.
func (o OptUpdateAccountReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateAccountReq) Reset() {
	var v UpdateAccountReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateAccountReq) SetTo(v UpdateAccountReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateAccountReq) Get() (v UpdateAccountReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateAccountReq) Or(d UpdateAccountReq) UpdateAccountReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateAccountReqName returns new OptUpdateAccountReqName with value set to v.
func NewOptUpdateAccountReqName(v UpdateAccountReqName) OptUpdateAccountReqName {
	return OptUpdateAccountReqName{
		Value: v,
		Set:   true,
	}
}

// OptUpdateAccountReqName is optional UpdateAccountReqName.
type OptUpdateAccountReqName struct {
	Value UpdateAccountReqName
	Set   bool
}

// IsSet returns true if OptUpdateAccountReqName was set.
func (o OptUpdateAccountReqName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateAccountReqName) Reset() {
	var v UpdateAccountReqName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateAccountReqName) SetTo(v UpdateAccountReqName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateAccountReqName) Get() (v UpdateAccountReqName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateAccountReqName) Or(d UpdateAccountReqName) UpdateAccountReqName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateApiKeyReq returns new OptUpdateApiKeyReq with value set to v.
func NewOptUpdateApiKeyReq(v UpdateApiKeyReq) OptUpdateApiKeyReq {
	return OptUpdateApiKeyReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateApiKeyReq is optional UpdateApiKeyReq.
type OptUpdateApiKeyReq struct {
	Value UpdateApiKeyReq
	Set   bool
}

// IsSet returns true if OptUpdateApiKeyReq was set.
func (o OptUpdateApiKeyReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateApiKeyReq) Reset() {
	var v UpdateApiKeyReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateApiKeyReq) SetTo(v UpdateApiKeyReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateApiKeyReq) Get() (v UpdateApiKeyReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateApiKeyReq) Or(d UpdateApiKeyReq) UpdateApiKeyReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateBillingMethodReq returns new OptUpdateBillingMethodReq with value set to v.
func NewOptUpdateBillingMethodReq(v UpdateBillingMethodReq) OptUpdateBillingMethodReq {
	return OptUpdateBillingMethodReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateBillingMethodReq is optional UpdateBillingMethodReq.
type OptUpdateBillingMethodReq struct {
	Value UpdateBillingMethodReq
	Set   bool
}

// IsSet returns true if OptUpdateBillingMethodReq was set.
func (o OptUpdateBillingMethodReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateBillingMethodReq) Reset() {
	var v UpdateBillingMethodReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateBillingMethodReq) SetTo(v UpdateBillingMethodReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateBillingMethodReq) Get() (v UpdateBillingMethodReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateBillingMethodReq) Or(d UpdateBillingMethodReq) UpdateBillingMethodReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateBillingOrderReq returns new OptUpdateBillingOrderReq with value set to v.
func NewOptUpdateBillingOrderReq(v UpdateBillingOrderReq) OptUpdateBillingOrderReq {
	return OptUpdateBillingOrderReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateBillingOrderReq is optional UpdateBillingOrderReq.
type OptUpdateBillingOrderReq struct {
	Value UpdateBillingOrderReq
	Set   bool
}

// IsSet returns true if OptUpdateBillingOrderReq was set.
func (o OptUpdateBillingOrderReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateBillingOrderReq) Reset() {
	var v UpdateBillingOrderReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateBillingOrderReq) SetTo(v UpdateBillingOrderReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateBillingOrderReq) Get() (v UpdateBillingOrderReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateBillingOrderReq) Or(d UpdateBillingOrderReq) UpdateBillingOrderReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateBillingOrderReqTermLength returns new OptUpdateBillingOrderReqTermLength with value set to v.
func NewOptUpdateBillingOrderReqTermLength(v UpdateBillingOrderReqTermLength) OptUpdateBillingOrderReqTermLength {
	return OptUpdateBillingOrderReqTermLength{
		Value: v,
		Set:   true,
	}
}

// OptUpdateBillingOrderReqTermLength is optional UpdateBillingOrderReqTermLength.
type OptUpdateBillingOrderReqTermLength struct {
	Value UpdateBillingOrderReqTermLength
	Set   bool
}

// IsSet returns true if OptUpdateBillingOrderReqTermLength was set.
func (o OptUpdateBillingOrderReqTermLength) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateBillingOrderReqTermLength) Reset() {
	var v UpdateBillingOrderReqTermLength
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateBillingOrderReqTermLength) SetTo(v UpdateBillingOrderReqTermLength) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateBillingOrderReqTermLength) Get() (v UpdateBillingOrderReqTermLength, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateBillingOrderReqTermLength) Or(d UpdateBillingOrderReqTermLength) UpdateBillingOrderReqTermLength {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateContainerReq returns new OptUpdateContainerReq with value set to v.
func NewOptUpdateContainerReq(v UpdateContainerReq) OptUpdateContainerReq {
	return OptUpdateContainerReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateContainerReq is optional UpdateContainerReq.
type OptUpdateContainerReq struct {
	Value UpdateContainerReq
	Set   bool
}

// IsSet returns true if OptUpdateContainerReq was set.
func (o OptUpdateContainerReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateContainerReq) Reset() {
	var v UpdateContainerReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateContainerReq) SetTo(v UpdateContainerReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateContainerReq) Get() (v UpdateContainerReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateContainerReq) Or(d UpdateContainerReq) UpdateContainerReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateContainerReqAnnotation returns new OptUpdateContainerReqAnnotation with value set to v.
func NewOptUpdateContainerReqAnnotation(v UpdateContainerReqAnnotation) OptUpdateContainerReqAnnotation {
	return OptUpdateContainerReqAnnotation{
		Value: v,
		Set:   true,
	}
}

// OptUpdateContainerReqAnnotation is optional UpdateContainerReqAnnotation.
type OptUpdateContainerReqAnnotation struct {
	Value UpdateContainerReqAnnotation
	Set   bool
}

// IsSet returns true if OptUpdateContainerReqAnnotation was set.
func (o OptUpdateContainerReqAnnotation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateContainerReqAnnotation) Reset() {
	var v UpdateContainerReqAnnotation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateContainerReqAnnotation) SetTo(v UpdateContainerReqAnnotation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateContainerReqAnnotation) Get() (v UpdateContainerReqAnnotation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateContainerReqAnnotation) Or(d UpdateContainerReqAnnotation) UpdateContainerReqAnnotation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateDNSRecordReq returns new OptUpdateDNSRecordReq with value set to v.
func NewOptUpdateDNSRecordReq(v UpdateDNSRecordReq) OptUpdateDNSRecordReq {
	return OptUpdateDNSRecordReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateDNSRecordReq is optional UpdateDNSRecordReq.
type OptUpdateDNSRecordReq struct {
	Value UpdateDNSRecordReq
	Set   bool
}

// IsSet returns true if OptUpdateDNSRecordReq was set.
func (o OptUpdateDNSRecordReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateDNSRecordReq) Reset() {
	var v UpdateDNSRecordReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateDNSRecordReq) SetTo(v UpdateDNSRecordReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateDNSRecordReq) Get() (v UpdateDNSRecordReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateDNSRecordReq) Or(d UpdateDNSRecordReq) UpdateDNSRecordReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateDNSZoneReq returns new OptUpdateDNSZoneReq with value set to v.
func NewOptUpdateDNSZoneReq(v UpdateDNSZoneReq) OptUpdateDNSZoneReq {
	return OptUpdateDNSZoneReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateDNSZoneReq is optional UpdateDNSZoneReq.
type OptUpdateDNSZoneReq struct {
	Value UpdateDNSZoneReq
	Set   bool
}

// IsSet returns true if OptUpdateDNSZoneReq was set.
func (o OptUpdateDNSZoneReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateDNSZoneReq) Reset() {
	var v UpdateDNSZoneReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateDNSZoneReq) SetTo(v UpdateDNSZoneReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateDNSZoneReq) Get() (v UpdateDNSZoneReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateDNSZoneReq) Or(d UpdateDNSZoneReq) UpdateDNSZoneReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateEnvironmentReq returns new OptUpdateEnvironmentReq with value set to v.
func NewOptUpdateEnvironmentReq(v UpdateEnvironmentReq) OptUpdateEnvironmentReq {
	return OptUpdateEnvironmentReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateEnvironmentReq is optional UpdateEnvironmentReq.
type OptUpdateEnvironmentReq struct {
	Value UpdateEnvironmentReq
	Set   bool
}

// IsSet returns true if OptUpdateEnvironmentReq was set.
func (o OptUpdateEnvironmentReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateEnvironmentReq) Reset() {
	var v UpdateEnvironmentReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateEnvironmentReq) SetTo(v UpdateEnvironmentReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateEnvironmentReq) Get() (v UpdateEnvironmentReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateEnvironmentReq) Or(d UpdateEnvironmentReq) UpdateEnvironmentReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateHubMemberReq returns new OptUpdateHubMemberReq with value set to v.
func NewOptUpdateHubMemberReq(v UpdateHubMemberReq) OptUpdateHubMemberReq {
	return OptUpdateHubMemberReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateHubMemberReq is optional UpdateHubMemberReq.
type OptUpdateHubMemberReq struct {
	Value UpdateHubMemberReq
	Set   bool
}

// IsSet returns true if OptUpdateHubMemberReq was set.
func (o OptUpdateHubMemberReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateHubMemberReq) Reset() {
	var v UpdateHubMemberReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateHubMemberReq) SetTo(v UpdateHubMemberReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateHubMemberReq) Get() (v UpdateHubMemberReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateHubMemberReq) Or(d UpdateHubMemberReq) UpdateHubMemberReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateHubMemberReqRole returns new OptUpdateHubMemberReqRole with value set to v.
func NewOptUpdateHubMemberReqRole(v UpdateHubMemberReqRole) OptUpdateHubMemberReqRole {
	return OptUpdateHubMemberReqRole{
		Value: v,
		Set:   true,
	}
}

// OptUpdateHubMemberReqRole is optional UpdateHubMemberReqRole.
type OptUpdateHubMemberReqRole struct {
	Value UpdateHubMemberReqRole
	Set   bool
}

// IsSet returns true if OptUpdateHubMemberReqRole was set.
func (o OptUpdateHubMemberReqRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateHubMemberReqRole) Reset() {
	var v UpdateHubMemberReqRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateHubMemberReqRole) SetTo(v UpdateHubMemberReqRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateHubMemberReqRole) Get() (v UpdateHubMemberReqRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateHubMemberReqRole) Or(d UpdateHubMemberReqRole) UpdateHubMemberReqRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateHubReq returns new OptUpdateHubReq with value set to v.
func NewOptUpdateHubReq(v UpdateHubReq) OptUpdateHubReq {
	return OptUpdateHubReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateHubReq is optional UpdateHubReq.
type OptUpdateHubReq struct {
	Value UpdateHubReq
	Set   bool
}

// IsSet returns true if OptUpdateHubReq was set.
func (o OptUpdateHubReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateHubReq) Reset() {
	var v UpdateHubReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateHubReq) SetTo(v UpdateHubReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateHubReq) Get() (v UpdateHubReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateHubReq) Or(d UpdateHubReq) UpdateHubReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateHubReqWebhooks returns new OptUpdateHubReqWebhooks with value set to v.
func NewOptUpdateHubReqWebhooks(v UpdateHubReqWebhooks) OptUpdateHubReqWebhooks {
	return OptUpdateHubReqWebhooks{
		Value: v,
		Set:   true,
	}
}

// OptUpdateHubReqWebhooks is optional UpdateHubReqWebhooks.
type OptUpdateHubReqWebhooks struct {
	Value UpdateHubReqWebhooks
	Set   bool
}

// IsSet returns true if OptUpdateHubReqWebhooks was set.
func (o OptUpdateHubReqWebhooks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateHubReqWebhooks) Reset() {
	var v UpdateHubReqWebhooks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateHubReqWebhooks) SetTo(v UpdateHubReqWebhooks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateHubReqWebhooks) Get() (v UpdateHubReqWebhooks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateHubReqWebhooks) Or(d UpdateHubReqWebhooks) UpdateHubReqWebhooks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdatePipelineTriggerKeyReq returns new OptUpdatePipelineTriggerKeyReq with value set to v.
func NewOptUpdatePipelineTriggerKeyReq(v UpdatePipelineTriggerKeyReq) OptUpdatePipelineTriggerKeyReq {
	return OptUpdatePipelineTriggerKeyReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdatePipelineTriggerKeyReq is optional UpdatePipelineTriggerKeyReq.
type OptUpdatePipelineTriggerKeyReq struct {
	Value UpdatePipelineTriggerKeyReq
	Set   bool
}

// IsSet returns true if OptUpdatePipelineTriggerKeyReq was set.
func (o OptUpdatePipelineTriggerKeyReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdatePipelineTriggerKeyReq) Reset() {
	var v UpdatePipelineTriggerKeyReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdatePipelineTriggerKeyReq) SetTo(v UpdatePipelineTriggerKeyReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdatePipelineTriggerKeyReq) Get() (v UpdatePipelineTriggerKeyReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdatePipelineTriggerKeyReq) Or(d UpdatePipelineTriggerKeyReq) UpdatePipelineTriggerKeyReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateProviderReq returns new OptUpdateProviderReq with value set to v.
func NewOptUpdateProviderReq(v UpdateProviderReq) OptUpdateProviderReq {
	return OptUpdateProviderReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateProviderReq is optional UpdateProviderReq.
type OptUpdateProviderReq struct {
	Value UpdateProviderReq
	Set   bool
}

// IsSet returns true if OptUpdateProviderReq was set.
func (o OptUpdateProviderReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateProviderReq) Reset() {
	var v UpdateProviderReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateProviderReq) SetTo(v UpdateProviderReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateProviderReq) Get() (v UpdateProviderReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateProviderReq) Or(d UpdateProviderReq) UpdateProviderReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateProviderReqIntegrationAbstraction returns new OptUpdateProviderReqIntegrationAbstraction with value set to v.
func NewOptUpdateProviderReqIntegrationAbstraction(v UpdateProviderReqIntegrationAbstraction) OptUpdateProviderReqIntegrationAbstraction {
	return OptUpdateProviderReqIntegrationAbstraction{
		Value: v,
		Set:   true,
	}
}

// OptUpdateProviderReqIntegrationAbstraction is optional UpdateProviderReqIntegrationAbstraction.
type OptUpdateProviderReqIntegrationAbstraction struct {
	Value UpdateProviderReqIntegrationAbstraction
	Set   bool
}

// IsSet returns true if OptUpdateProviderReqIntegrationAbstraction was set.
func (o OptUpdateProviderReqIntegrationAbstraction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateProviderReqIntegrationAbstraction) Reset() {
	var v UpdateProviderReqIntegrationAbstraction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateProviderReqIntegrationAbstraction) SetTo(v UpdateProviderReqIntegrationAbstraction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateProviderReqIntegrationAbstraction) Get() (v UpdateProviderReqIntegrationAbstraction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateProviderReqIntegrationAbstraction) Or(d UpdateProviderReqIntegrationAbstraction) UpdateProviderReqIntegrationAbstraction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateProviderReqIntegrationNative returns new OptUpdateProviderReqIntegrationNative with value set to v.
func NewOptUpdateProviderReqIntegrationNative(v UpdateProviderReqIntegrationNative) OptUpdateProviderReqIntegrationNative {
	return OptUpdateProviderReqIntegrationNative{
		Value: v,
		Set:   true,
	}
}

// OptUpdateProviderReqIntegrationNative is optional UpdateProviderReqIntegrationNative.
type OptUpdateProviderReqIntegrationNative struct {
	Value UpdateProviderReqIntegrationNative
	Set   bool
}

// IsSet returns true if OptUpdateProviderReqIntegrationNative was set.
func (o OptUpdateProviderReqIntegrationNative) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateProviderReqIntegrationNative) Reset() {
	var v UpdateProviderReqIntegrationNative
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateProviderReqIntegrationNative) SetTo(v UpdateProviderReqIntegrationNative) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateProviderReqIntegrationNative) Get() (v UpdateProviderReqIntegrationNative, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateProviderReqIntegrationNative) Or(d UpdateProviderReqIntegrationNative) UpdateProviderReqIntegrationNative {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateSDNNetworkReq returns new OptUpdateSDNNetworkReq with value set to v.
func NewOptUpdateSDNNetworkReq(v UpdateSDNNetworkReq) OptUpdateSDNNetworkReq {
	return OptUpdateSDNNetworkReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateSDNNetworkReq is optional UpdateSDNNetworkReq.
type OptUpdateSDNNetworkReq struct {
	Value UpdateSDNNetworkReq
	Set   bool
}

// IsSet returns true if OptUpdateSDNNetworkReq was set.
func (o OptUpdateSDNNetworkReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateSDNNetworkReq) Reset() {
	var v UpdateSDNNetworkReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateSDNNetworkReq) SetTo(v UpdateSDNNetworkReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateSDNNetworkReq) Get() (v UpdateSDNNetworkReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateSDNNetworkReq) Or(d UpdateSDNNetworkReq) UpdateSDNNetworkReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateServerReq returns new OptUpdateServerReq with value set to v.
func NewOptUpdateServerReq(v UpdateServerReq) OptUpdateServerReq {
	return OptUpdateServerReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateServerReq is optional UpdateServerReq.
type OptUpdateServerReq struct {
	Value UpdateServerReq
	Set   bool
}

// IsSet returns true if OptUpdateServerReq was set.
func (o OptUpdateServerReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateServerReq) Reset() {
	var v UpdateServerReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateServerReq) SetTo(v UpdateServerReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateServerReq) Get() (v UpdateServerReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateServerReq) Or(d UpdateServerReq) UpdateServerReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateServerReqConstraintsAllow returns new OptUpdateServerReqConstraintsAllow with value set to v.
func NewOptUpdateServerReqConstraintsAllow(v UpdateServerReqConstraintsAllow) OptUpdateServerReqConstraintsAllow {
	return OptUpdateServerReqConstraintsAllow{
		Value: v,
		Set:   true,
	}
}

// OptUpdateServerReqConstraintsAllow is optional UpdateServerReqConstraintsAllow.
type OptUpdateServerReqConstraintsAllow struct {
	Value UpdateServerReqConstraintsAllow
	Set   bool
}

// IsSet returns true if OptUpdateServerReqConstraintsAllow was set.
func (o OptUpdateServerReqConstraintsAllow) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateServerReqConstraintsAllow) Reset() {
	var v UpdateServerReqConstraintsAllow
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateServerReqConstraintsAllow) SetTo(v UpdateServerReqConstraintsAllow) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateServerReqConstraintsAllow) Get() (v UpdateServerReqConstraintsAllow, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateServerReqConstraintsAllow) Or(d UpdateServerReqConstraintsAllow) UpdateServerReqConstraintsAllow {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUsageDatum returns new OptUsageDatum with value set to v.
func NewOptUsageDatum(v UsageDatum) OptUsageDatum {
	return OptUsageDatum{
		Value: v,
		Set:   true,
	}
}

// OptUsageDatum is optional UsageDatum.
type OptUsageDatum struct {
	Value UsageDatum
	Set   bool
}

// IsSet returns true if OptUsageDatum was set.
func (o OptUsageDatum) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUsageDatum) Reset() {
	var v UsageDatum
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUsageDatum) SetTo(v UsageDatum) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUsageDatum) Get() (v UsageDatum, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUsageDatum) Or(d UsageDatum) UsageDatum {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVPNInfoReturn returns new OptVPNInfoReturn with value set to v.
func NewOptVPNInfoReturn(v VPNInfoReturn) OptVPNInfoReturn {
	return OptVPNInfoReturn{
		Value: v,
		Set:   true,
	}
}

// OptVPNInfoReturn is optional VPNInfoReturn.
type OptVPNInfoReturn struct {
	Value VPNInfoReturn
	Set   bool
}

// IsSet returns true if OptVPNInfoReturn was set.
func (o OptVPNInfoReturn) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVPNInfoReturn) Reset() {
	var v VPNInfoReturn
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVPNInfoReturn) SetTo(v VPNInfoReturn) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVPNInfoReturn) Get() (v VPNInfoReturn, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVPNInfoReturn) Or(d VPNInfoReturn) VPNInfoReturn {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVPNUsers returns new OptVPNUsers with value set to v.
func NewOptVPNUsers(v VPNUsers) OptVPNUsers {
	return OptVPNUsers{
		Value: v,
		Set:   true,
	}
}

// OptVPNUsers is optional VPNUsers.
type OptVPNUsers struct {
	Value VPNUsers
	Set   bool
}

// IsSet returns true if OptVPNUsers was set.
func (o OptVPNUsers) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVPNUsers) Reset() {
	var v VPNUsers
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVPNUsers) SetTo(v VPNUsers) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVPNUsers) Get() (v VPNUsers, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVPNUsers) Or(d VPNUsers) VPNUsers {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVolumesLocal returns new OptVolumesLocal with value set to v.
func NewOptVolumesLocal(v VolumesLocal) OptVolumesLocal {
	return OptVolumesLocal{
		Value: v,
		Set:   true,
	}
}

// OptVolumesLocal is optional VolumesLocal.
type OptVolumesLocal struct {
	Value VolumesLocal
	Set   bool
}

// IsSet returns true if OptVolumesLocal was set.
func (o OptVolumesLocal) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVolumesLocal) Reset() {
	var v VolumesLocal
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVolumesLocal) SetTo(v VolumesLocal) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVolumesLocal) Get() (v VolumesLocal, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVolumesLocal) Or(d VolumesLocal) VolumesLocal {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVolumesRemoteAccess returns new OptVolumesRemoteAccess with value set to v.
func NewOptVolumesRemoteAccess(v VolumesRemoteAccess) OptVolumesRemoteAccess {
	return OptVolumesRemoteAccess{
		Value: v,
		Set:   true,
	}
}

// OptVolumesRemoteAccess is optional VolumesRemoteAccess.
type OptVolumesRemoteAccess struct {
	Value VolumesRemoteAccess
	Set   bool
}

// IsSet returns true if OptVolumesRemoteAccess was set.
func (o OptVolumesRemoteAccess) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVolumesRemoteAccess) Reset() {
	var v VolumesRemoteAccess
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVolumesRemoteAccess) SetTo(v VolumesRemoteAccess) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVolumesRemoteAccess) Get() (v VolumesRemoteAccess, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVolumesRemoteAccess) Or(d VolumesRemoteAccess) VolumesRemoteAccess {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptZone returns new OptZone with value set to v.
func NewOptZone(v Zone) OptZone {
	return OptZone{
		Value: v,
		Set:   true,
	}
}

// OptZone is optional Zone.
type OptZone struct {
	Value Zone
	Set   bool
}

// IsSet returns true if OptZone was set.
func (o OptZone) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptZone) Reset() {
	var v Zone
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptZone) SetTo(v Zone) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptZone) Get() (v Zone, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptZone) Or(d Zone) Zone {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptZoneIncludes returns new OptZoneIncludes with value set to v.
func NewOptZoneIncludes(v ZoneIncludes) OptZoneIncludes {
	return OptZoneIncludes{
		Value: v,
		Set:   true,
	}
}

// OptZoneIncludes is optional ZoneIncludes.
type OptZoneIncludes struct {
	Value ZoneIncludes
	Set   bool
}

// IsSet returns true if OptZoneIncludes was set.
func (o OptZoneIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptZoneIncludes) Reset() {
	var v ZoneIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptZoneIncludes) SetTo(v ZoneIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptZoneIncludes) Get() (v ZoneIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptZoneIncludes) Or(d ZoneIncludes) ZoneIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptZoneStateError returns new OptZoneStateError with value set to v.
func NewOptZoneStateError(v ZoneStateError) OptZoneStateError {
	return OptZoneStateError{
		Value: v,
		Set:   true,
	}
}

// OptZoneStateError is optional ZoneStateError.
type OptZoneStateError struct {
	Value ZoneStateError
	Set   bool
}

// IsSet returns true if OptZoneStateError was set.
func (o OptZoneStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptZoneStateError) Reset() {
	var v ZoneStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptZoneStateError) SetTo(v ZoneStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptZoneStateError) Get() (v ZoneStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptZoneStateError) Or(d ZoneStateError) ZoneStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// An order is a resource that describes a billing order.
// Ref: #/components/schemas/Order
type Order struct {
	HubID       string      `json:"hub_id"`
	Creator     UserScope   `json:"creator"`
	PromoCodeID NilString   `json:"promo_code_id"`
	Term        Term        `json:"term"`
	Approved    bool        `json:"approved"`
	Items       []OrderItem `json:"items"`
	TotalPrice  float64     `json:"total_price"`
	// A collection of timestamps for each event in the orders lifetime.
	Events OrderEvents `json:"events"`
	State  OrderState  `json:"state"`
}

// GetHubID returns the value of HubID.
func (s *Order) GetHubID() string {
	return s.HubID
}

// GetCreator returns the value of Creator.
func (s *Order) GetCreator() UserScope {
	return s.Creator
}

// GetPromoCodeID returns the value of PromoCodeID.
func (s *Order) GetPromoCodeID() NilString {
	return s.PromoCodeID
}

// GetTerm returns the value of Term.
func (s *Order) GetTerm() Term {
	return s.Term
}

// GetApproved returns the value of Approved.
func (s *Order) GetApproved() bool {
	return s.Approved
}

// GetItems returns the value of Items.
func (s *Order) GetItems() []OrderItem {
	return s.Items
}

// GetTotalPrice returns the value of TotalPrice.
func (s *Order) GetTotalPrice() float64 {
	return s.TotalPrice
}

// GetEvents returns the value of Events.
func (s *Order) GetEvents() OrderEvents {
	return s.Events
}

// GetState returns the value of State.
func (s *Order) GetState() OrderState {
	return s.State
}

// SetHubID sets the value of HubID.
func (s *Order) SetHubID(val string) {
	s.HubID = val
}

// SetCreator sets the value of Creator.
func (s *Order) SetCreator(val UserScope) {
	s.Creator = val
}

// SetPromoCodeID sets the value of PromoCodeID.
func (s *Order) SetPromoCodeID(val NilString) {
	s.PromoCodeID = val
}

// SetTerm sets the value of Term.
func (s *Order) SetTerm(val Term) {
	s.Term = val
}

// SetApproved sets the value of Approved.
func (s *Order) SetApproved(val bool) {
	s.Approved = val
}

// SetItems sets the value of Items.
func (s *Order) SetItems(val []OrderItem) {
	s.Items = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *Order) SetTotalPrice(val float64) {
	s.TotalPrice = val
}

// SetEvents sets the value of Events.
func (s *Order) SetEvents(val OrderEvents) {
	s.Events = val
}

// SetState sets the value of State.
func (s *Order) SetState(val OrderState) {
	s.State = val
}

// A collection of timestamps for each event in the orders lifetime.
type OrderEvents struct {
	// The timestamp of when the order expires.
	Expires DateTime `json:"expires"`
}

// GetExpires returns the value of Expires.
func (s *OrderEvents) GetExpires() DateTime {
	return s.Expires
}

// SetExpires sets the value of Expires.
func (s *OrderEvents) SetExpires(val DateTime) {
	s.Expires = val
}

// All includeable resources linkable to the given billing order.
// Ref: #/components/schemas/OrderIncludes
type OrderIncludes struct {
	PromoCodes OptPromoCodeInclude `json:"promo_codes"`
}

// GetPromoCodes returns the value of PromoCodes.
func (s *OrderIncludes) GetPromoCodes() OptPromoCodeInclude {
	return s.PromoCodes
}

// SetPromoCodes sets the value of PromoCodes.
func (s *OrderIncludes) SetPromoCodes(val OptPromoCodeInclude) {
	s.PromoCodes = val
}

// Describes a billing item.
// Ref: #/components/schemas/OrderItem
type OrderItem struct {
	ID          string               `json:"id"`
	Service     ServiceItem          `json:"service"`
	Description string               `json:"description"`
	Price       BillingAmount        `json:"price"`
	Discount    OptOrderItemDiscount `json:"discount"`
	NetPrice    float64              `json:"net_price"`
}

// GetID returns the value of ID.
func (s *OrderItem) GetID() string {
	return s.ID
}

// GetService returns the value of Service.
func (s *OrderItem) GetService() ServiceItem {
	return s.Service
}

// GetDescription returns the value of Description.
func (s *OrderItem) GetDescription() string {
	return s.Description
}

// GetPrice returns the value of Price.
func (s *OrderItem) GetPrice() BillingAmount {
	return s.Price
}

// GetDiscount returns the value of Discount.
func (s *OrderItem) GetDiscount() OptOrderItemDiscount {
	return s.Discount
}

// GetNetPrice returns the value of NetPrice.
func (s *OrderItem) GetNetPrice() float64 {
	return s.NetPrice
}

// SetID sets the value of ID.
func (s *OrderItem) SetID(val string) {
	s.ID = val
}

// SetService sets the value of Service.
func (s *OrderItem) SetService(val ServiceItem) {
	s.Service = val
}

// SetDescription sets the value of Description.
func (s *OrderItem) SetDescription(val string) {
	s.Description = val
}

// SetPrice sets the value of Price.
func (s *OrderItem) SetPrice(val BillingAmount) {
	s.Price = val
}

// SetDiscount sets the value of Discount.
func (s *OrderItem) SetDiscount(val OptOrderItemDiscount) {
	s.Discount = val
}

// SetNetPrice sets the value of NetPrice.
func (s *OrderItem) SetNetPrice(val float64) {
	s.NetPrice = val
}

type OrderItemDiscount struct {
	ID      string        `json:"id"`
	Amount  BillingAmount `json:"amount"`
	Expires DateTime      `json:"expires"`
}

// GetID returns the value of ID.
func (s *OrderItemDiscount) GetID() string {
	return s.ID
}

// GetAmount returns the value of Amount.
func (s *OrderItemDiscount) GetAmount() BillingAmount {
	return s.Amount
}

// GetExpires returns the value of Expires.
func (s *OrderItemDiscount) GetExpires() DateTime {
	return s.Expires
}

// SetID sets the value of ID.
func (s *OrderItemDiscount) SetID(val string) {
	s.ID = val
}

// SetAmount sets the value of Amount.
func (s *OrderItemDiscount) SetAmount(val BillingAmount) {
	s.Amount = val
}

// SetExpires sets the value of Expires.
func (s *OrderItemDiscount) SetExpires(val DateTime) {
	s.Expires = val
}

// Merged schema.
// Ref: #/components/schemas/OrderState
type OrderState struct {
	// The current state of the zone.
	Current OrderStateCurrent `json:"current"`
	Changed DateTime          `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptOrderStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *OrderState) GetCurrent() OrderStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *OrderState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *OrderState) GetError() OptOrderStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *OrderState) SetCurrent(val OrderStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *OrderState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *OrderState) SetError(val OptOrderStateError) {
	s.Error = val
}

// The current state of the zone.
type OrderStateCurrent string

const (
	OrderStateCurrentNew       OrderStateCurrent = "new"
	OrderStateCurrentProcessed OrderStateCurrent = "processed"
	OrderStateCurrentDeleting  OrderStateCurrent = "deleting"
	OrderStateCurrentDeleted   OrderStateCurrent = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrderStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case OrderStateCurrentNew:
		return []byte(s), nil
	case OrderStateCurrentProcessed:
		return []byte(s), nil
	case OrderStateCurrentDeleting:
		return []byte(s), nil
	case OrderStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderStateCurrent) UnmarshalText(data []byte) error {
	switch OrderStateCurrent(data) {
	case OrderStateCurrentNew:
		*s = OrderStateCurrentNew
		return nil
	case OrderStateCurrentProcessed:
		*s = OrderStateCurrentProcessed
		return nil
	case OrderStateCurrentDeleting:
		*s = OrderStateCurrentDeleting
		return nil
	case OrderStateCurrentDeleted:
		*s = OrderStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type OrderStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *OrderStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *OrderStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *OrderStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *OrderStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Information about billing overage.
// Ref: #/components/schemas/Overage
type Overage struct {
	Term Term `json:"term"`
	// Used for gen 1 pricing.
	RAM OverageRAM `json:"ram"`
}

// GetTerm returns the value of Term.
func (s *Overage) GetTerm() Term {
	return s.Term
}

// GetRAM returns the value of RAM.
func (s *Overage) GetRAM() OverageRAM {
	return s.RAM
}

// SetTerm sets the value of Term.
func (s *Overage) SetTerm(val Term) {
	s.Term = val
}

// SetRAM sets the value of RAM.
func (s *Overage) SetRAM(val OverageRAM) {
	s.RAM = val
}

// Used for gen 1 pricing.
type OverageRAM struct {
	// The number of hours of overage.
	GBHours int `json:"gb_hours"`
	// The cost of the overage.
	Cost int `json:"cost"`
}

// GetGBHours returns the value of GBHours.
func (s *OverageRAM) GetGBHours() int {
	return s.GBHours
}

// GetCost returns the value of Cost.
func (s *OverageRAM) GetCost() int {
	return s.Cost
}

// SetGBHours sets the value of GBHours.
func (s *OverageRAM) SetGBHours(val int) {
	s.GBHours = val
}

// SetCost sets the value of Cost.
func (s *OverageRAM) SetCost(val int) {
	s.Cost = val
}

// A login event where the account password was the authentication type.
// Ref: #/components/schemas/PasswordLogin
type PasswordLogin struct {
	ID      ID          `json:"id"`
	Account AccountInfo `json:"account"`
	// A timestamp of the time the login occurred.
	Time DateTime `json:"time"`
	// The type of login mechanism used.
	Type PasswordLoginType `json:"type"`
	// A boolean where true reflects that the login was successful.
	Success bool `json:"success"`
}

// GetID returns the value of ID.
func (s *PasswordLogin) GetID() ID {
	return s.ID
}

// GetAccount returns the value of Account.
func (s *PasswordLogin) GetAccount() AccountInfo {
	return s.Account
}

// GetTime returns the value of Time.
func (s *PasswordLogin) GetTime() DateTime {
	return s.Time
}

// GetType returns the value of Type.
func (s *PasswordLogin) GetType() PasswordLoginType {
	return s.Type
}

// GetSuccess returns the value of Success.
func (s *PasswordLogin) GetSuccess() bool {
	return s.Success
}

// SetID sets the value of ID.
func (s *PasswordLogin) SetID(val ID) {
	s.ID = val
}

// SetAccount sets the value of Account.
func (s *PasswordLogin) SetAccount(val AccountInfo) {
	s.Account = val
}

// SetTime sets the value of Time.
func (s *PasswordLogin) SetTime(val DateTime) {
	s.Time = val
}

// SetType sets the value of Type.
func (s *PasswordLogin) SetType(val PasswordLoginType) {
	s.Type = val
}

// SetSuccess sets the value of Success.
func (s *PasswordLogin) SetSuccess(val bool) {
	s.Success = val
}

// The type of login mechanism used.
type PasswordLoginType string

const (
	PasswordLoginTypePassword PasswordLoginType = "password"
)

// MarshalText implements encoding.TextMarshaler.
func (s PasswordLoginType) MarshalText() ([]byte, error) {
	switch s {
	case PasswordLoginTypePassword:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PasswordLoginType) UnmarshalText(data []byte) error {
	switch PasswordLoginType(data) {
	case PasswordLoginTypePassword:
		*s = PasswordLoginTypePassword
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A billing payment.
// Ref: #/components/schemas/Payment
type Payment struct {
	ID ID `json:"id"`
	// A timestamp for the payment.
	Time DateTime `json:"time"`
	// Some information about the payment.
	Description string `json:"description"`
	// 1/10th of a cent.
	Amount int `json:"amount"`
	// 1/10th of a cent.
	AmountRefunded int      `json:"amount_refunded"`
	Refunds        []Refund `json:"refunds"`
	// The ID associated with the billing method used.
	MethodID string         `json:"method_id"`
	Result   PaymentResult  `json:"result"`
	Gateway  PaymentGateway `json:"gateway"`
}

// GetID returns the value of ID.
func (s *Payment) GetID() ID {
	return s.ID
}

// GetTime returns the value of Time.
func (s *Payment) GetTime() DateTime {
	return s.Time
}

// GetDescription returns the value of Description.
func (s *Payment) GetDescription() string {
	return s.Description
}

// GetAmount returns the value of Amount.
func (s *Payment) GetAmount() int {
	return s.Amount
}

// GetAmountRefunded returns the value of AmountRefunded.
func (s *Payment) GetAmountRefunded() int {
	return s.AmountRefunded
}

// GetRefunds returns the value of Refunds.
func (s *Payment) GetRefunds() []Refund {
	return s.Refunds
}

// GetMethodID returns the value of MethodID.
func (s *Payment) GetMethodID() string {
	return s.MethodID
}

// GetResult returns the value of Result.
func (s *Payment) GetResult() PaymentResult {
	return s.Result
}

// GetGateway returns the value of Gateway.
func (s *Payment) GetGateway() PaymentGateway {
	return s.Gateway
}

// SetID sets the value of ID.
func (s *Payment) SetID(val ID) {
	s.ID = val
}

// SetTime sets the value of Time.
func (s *Payment) SetTime(val DateTime) {
	s.Time = val
}

// SetDescription sets the value of Description.
func (s *Payment) SetDescription(val string) {
	s.Description = val
}

// SetAmount sets the value of Amount.
func (s *Payment) SetAmount(val int) {
	s.Amount = val
}

// SetAmountRefunded sets the value of AmountRefunded.
func (s *Payment) SetAmountRefunded(val int) {
	s.AmountRefunded = val
}

// SetRefunds sets the value of Refunds.
func (s *Payment) SetRefunds(val []Refund) {
	s.Refunds = val
}

// SetMethodID sets the value of MethodID.
func (s *Payment) SetMethodID(val string) {
	s.MethodID = val
}

// SetResult sets the value of Result.
func (s *Payment) SetResult(val PaymentResult) {
	s.Result = val
}

// SetGateway sets the value of Gateway.
func (s *Payment) SetGateway(val PaymentGateway) {
	s.Gateway = val
}

// The type of payment gateway used.
// Ref: #/components/schemas/PaymentGateway
type PaymentGateway string

const (
	PaymentGatewayStripe PaymentGateway = "stripe"
)

// MarshalText implements encoding.TextMarshaler.
func (s PaymentGateway) MarshalText() ([]byte, error) {
	switch s {
	case PaymentGatewayStripe:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentGateway) UnmarshalText(data []byte) error {
	switch PaymentGateway(data) {
	case PaymentGatewayStripe:
		*s = PaymentGatewayStripe
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A billing payment result.
// Ref: #/components/schemas/PaymentResult
type PaymentResult struct {
	// A boolean where true represents the success of the payment.
	Success bool `json:"success"`
	// A description of the error that took place.
	Error string `json:"error"`
}

// GetSuccess returns the value of Success.
func (s *PaymentResult) GetSuccess() bool {
	return s.Success
}

// GetError returns the value of Error.
func (s *PaymentResult) GetError() string {
	return s.Error
}

// SetSuccess sets the value of Success.
func (s *PaymentResult) SetSuccess(val bool) {
	s.Success = val
}

// SetError sets the value of Error.
func (s *PaymentResult) SetError(val string) {
	s.Error = val
}

// Permissions information for an API Key.
// Ref: #/components/schemas/Permissions
type Permissions struct {
	// A boolean, where true represents this API key is authorized to make requests that involve all of a
	// hubs environments.
	AllEnvironments bool `json:"all_environments"`
	// An environment ID and a boolean representing management configuration for an API key.
	Environments []PermissionsEnvironmentsItem `json:"environments"`
}

// GetAllEnvironments returns the value of AllEnvironments.
func (s *Permissions) GetAllEnvironments() bool {
	return s.AllEnvironments
}

// GetEnvironments returns the value of Environments.
func (s *Permissions) GetEnvironments() []PermissionsEnvironmentsItem {
	return s.Environments
}

// SetAllEnvironments sets the value of AllEnvironments.
func (s *Permissions) SetAllEnvironments(val bool) {
	s.AllEnvironments = val
}

// SetEnvironments sets the value of Environments.
func (s *Permissions) SetEnvironments(val []PermissionsEnvironmentsItem) {
	s.Environments = val
}

type PermissionsEnvironmentsItem struct {
	ID ID `json:"id"`
	// A boolean, where true represents the API keys ability to make changes to the environment components.
	Manage bool `json:"manage"`
}

// GetID returns the value of ID.
func (s *PermissionsEnvironmentsItem) GetID() ID {
	return s.ID
}

// GetManage returns the value of Manage.
func (s *PermissionsEnvironmentsItem) GetManage() bool {
	return s.Manage
}

// SetID sets the value of ID.
func (s *PermissionsEnvironmentsItem) SetID(val ID) {
	s.ID = val
}

// SetManage sets the value of Manage.
func (s *PermissionsEnvironmentsItem) SetManage(val bool) {
	s.Manage = val
}

type PipelineAuthOK struct {
	Data OptHubNotificationToken `json:"data"`
}

// GetData returns the value of Data.
func (s *PipelineAuthOK) GetData() OptHubNotificationToken {
	return s.Data
}

// SetData sets the value of Data.
func (s *PipelineAuthOK) SetData(val OptHubNotificationToken) {
	s.Data = val
}

// A collection of timestamps for each event in the pipeline run's lifetime.
// Ref: #/components/schemas/PipelineRunEvents
type PipelineRunEvents struct {
	// The timestamp of when the pipeline run was started.
	Started DateTime `json:"started"`
	// The timestamp of when the pipeline run was queued.
	Queued DateTime `json:"queued"`
	// The timestamp of when the pipeline run was finished.
	Finished DateTime `json:"finished"`
}

// GetStarted returns the value of Started.
func (s *PipelineRunEvents) GetStarted() DateTime {
	return s.Started
}

// GetQueued returns the value of Queued.
func (s *PipelineRunEvents) GetQueued() DateTime {
	return s.Queued
}

// GetFinished returns the value of Finished.
func (s *PipelineRunEvents) GetFinished() DateTime {
	return s.Finished
}

// SetStarted sets the value of Started.
func (s *PipelineRunEvents) SetStarted(val DateTime) {
	s.Started = val
}

// SetQueued sets the value of Queued.
func (s *PipelineRunEvents) SetQueued(val DateTime) {
	s.Queued = val
}

// SetFinished sets the value of Finished.
func (s *PipelineRunEvents) SetFinished(val DateTime) {
	s.Finished = val
}

// An IP Pool resource.
// Ref: #/components/schemas/Pool
type Pool struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// An ID associated with a server resource.
	ServerID string `json:"server_id"`
	// An ID associated with a location resource.
	LocationID string `json:"location_id"`
	// The type of IP pool.
	Kind     PoolKind     `json:"kind"`
	Provider PoolProvider `json:"provider"`
	// A boolean where true represents the pool as a floating IP pool.
	Floating bool `json:"floating"`
	// Data about IPs in the pool.
	Ips PoolIps `json:"ips"`
	// Network information about the pool.
	Block PoolBlock `json:"block"`
	State PoolState `json:"state"`
}

// GetID returns the value of ID.
func (s *Pool) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *Pool) GetHubID() HubID {
	return s.HubID
}

// GetServerID returns the value of ServerID.
func (s *Pool) GetServerID() string {
	return s.ServerID
}

// GetLocationID returns the value of LocationID.
func (s *Pool) GetLocationID() string {
	return s.LocationID
}

// GetKind returns the value of Kind.
func (s *Pool) GetKind() PoolKind {
	return s.Kind
}

// GetProvider returns the value of Provider.
func (s *Pool) GetProvider() PoolProvider {
	return s.Provider
}

// GetFloating returns the value of Floating.
func (s *Pool) GetFloating() bool {
	return s.Floating
}

// GetIps returns the value of Ips.
func (s *Pool) GetIps() PoolIps {
	return s.Ips
}

// GetBlock returns the value of Block.
func (s *Pool) GetBlock() PoolBlock {
	return s.Block
}

// GetState returns the value of State.
func (s *Pool) GetState() PoolState {
	return s.State
}

// SetID sets the value of ID.
func (s *Pool) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *Pool) SetHubID(val HubID) {
	s.HubID = val
}

// SetServerID sets the value of ServerID.
func (s *Pool) SetServerID(val string) {
	s.ServerID = val
}

// SetLocationID sets the value of LocationID.
func (s *Pool) SetLocationID(val string) {
	s.LocationID = val
}

// SetKind sets the value of Kind.
func (s *Pool) SetKind(val PoolKind) {
	s.Kind = val
}

// SetProvider sets the value of Provider.
func (s *Pool) SetProvider(val PoolProvider) {
	s.Provider = val
}

// SetFloating sets the value of Floating.
func (s *Pool) SetFloating(val bool) {
	s.Floating = val
}

// SetIps sets the value of Ips.
func (s *Pool) SetIps(val PoolIps) {
	s.Ips = val
}

// SetBlock sets the value of Block.
func (s *Pool) SetBlock(val PoolBlock) {
	s.Block = val
}

// SetState sets the value of State.
func (s *Pool) SetState(val PoolState) {
	s.State = val
}

// Network information about the pool.
type PoolBlock struct {
	// A cidr for the pool.
	Cidr string `json:"cidr"`
	// A gateway for the pool.
	Gateway string `json:"gateway"`
	// A netmask for the pool.
	Netmask string `json:"netmask"`
	// A network for the pool.
	Network string `json:"network"`
}

// GetCidr returns the value of Cidr.
func (s *PoolBlock) GetCidr() string {
	return s.Cidr
}

// GetGateway returns the value of Gateway.
func (s *PoolBlock) GetGateway() string {
	return s.Gateway
}

// GetNetmask returns the value of Netmask.
func (s *PoolBlock) GetNetmask() string {
	return s.Netmask
}

// GetNetwork returns the value of Network.
func (s *PoolBlock) GetNetwork() string {
	return s.Network
}

// SetCidr sets the value of Cidr.
func (s *PoolBlock) SetCidr(val string) {
	s.Cidr = val
}

// SetGateway sets the value of Gateway.
func (s *PoolBlock) SetGateway(val string) {
	s.Gateway = val
}

// SetNetmask sets the value of Netmask.
func (s *PoolBlock) SetNetmask(val string) {
	s.Netmask = val
}

// SetNetwork sets the value of Network.
func (s *PoolBlock) SetNetwork(val string) {
	s.Network = val
}

// Resources associated with an IP Pool.
// Ref: #/components/schemas/PoolIncludes
type PoolIncludes struct {
	Creators  CreatorInclude    `json:"creators"`
	Servers   ServersIncludes   `json:"servers"`
	Providers ProvidersIncludes `json:"providers"`
	Locations LocationsIncludes `json:"locations"`
}

// GetCreators returns the value of Creators.
func (s *PoolIncludes) GetCreators() CreatorInclude {
	return s.Creators
}

// GetServers returns the value of Servers.
func (s *PoolIncludes) GetServers() ServersIncludes {
	return s.Servers
}

// GetProviders returns the value of Providers.
func (s *PoolIncludes) GetProviders() ProvidersIncludes {
	return s.Providers
}

// GetLocations returns the value of Locations.
func (s *PoolIncludes) GetLocations() LocationsIncludes {
	return s.Locations
}

// SetCreators sets the value of Creators.
func (s *PoolIncludes) SetCreators(val CreatorInclude) {
	s.Creators = val
}

// SetServers sets the value of Servers.
func (s *PoolIncludes) SetServers(val ServersIncludes) {
	s.Servers = val
}

// SetProviders sets the value of Providers.
func (s *PoolIncludes) SetProviders(val ProvidersIncludes) {
	s.Providers = val
}

// SetLocations sets the value of Locations.
func (s *PoolIncludes) SetLocations(val LocationsIncludes) {
	s.Locations = val
}

// Data about IPs in the pool.
type PoolIps struct {
	// The total number of IPs in the pool.
	Total int `json:"total"`
	// Of the total number of IP's how many are available to be assigned.
	Available int `json:"available"`
}

// GetTotal returns the value of Total.
func (s *PoolIps) GetTotal() int {
	return s.Total
}

// GetAvailable returns the value of Available.
func (s *PoolIps) GetAvailable() int {
	return s.Available
}

// SetTotal sets the value of Total.
func (s *PoolIps) SetTotal(val int) {
	s.Total = val
}

// SetAvailable sets the value of Available.
func (s *PoolIps) SetAvailable(val int) {
	s.Available = val
}

// The type of IP pool.
type PoolKind string

const (
	PoolKindIpv4 PoolKind = "ipv4"
	PoolKindIpv6 PoolKind = "ipv6"
)

// MarshalText implements encoding.TextMarshaler.
func (s PoolKind) MarshalText() ([]byte, error) {
	switch s {
	case PoolKindIpv4:
		return []byte(s), nil
	case PoolKindIpv6:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PoolKind) UnmarshalText(data []byte) error {
	switch PoolKind(data) {
	case PoolKindIpv4:
		*s = PoolKindIpv4
		return nil
	case PoolKindIpv6:
		*s = PoolKindIpv6
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A IP Pool provider.
// Ref: #/components/schemas/PoolProvider
type PoolProvider struct {
	// An identifier for a native provider.
	Identifier PoolProviderIdentifier `json:"identifier"`
	// Information about the location of the provider this pool is associated with.
	Location string `json:"location"`
	// A reservation identifier associated with the pool reservation.
	Reservation string `json:"reservation"`
	// A server identifier associated with the pool.
	Server string `json:"server"`
	// An identifier linked to the server assingment of the IP pool.
	ServerAssignment string `json:"server_assignment"`
}

// GetIdentifier returns the value of Identifier.
func (s *PoolProvider) GetIdentifier() PoolProviderIdentifier {
	return s.Identifier
}

// GetLocation returns the value of Location.
func (s *PoolProvider) GetLocation() string {
	return s.Location
}

// GetReservation returns the value of Reservation.
func (s *PoolProvider) GetReservation() string {
	return s.Reservation
}

// GetServer returns the value of Server.
func (s *PoolProvider) GetServer() string {
	return s.Server
}

// GetServerAssignment returns the value of ServerAssignment.
func (s *PoolProvider) GetServerAssignment() string {
	return s.ServerAssignment
}

// SetIdentifier sets the value of Identifier.
func (s *PoolProvider) SetIdentifier(val PoolProviderIdentifier) {
	s.Identifier = val
}

// SetLocation sets the value of Location.
func (s *PoolProvider) SetLocation(val string) {
	s.Location = val
}

// SetReservation sets the value of Reservation.
func (s *PoolProvider) SetReservation(val string) {
	s.Reservation = val
}

// SetServer sets the value of Server.
func (s *PoolProvider) SetServer(val string) {
	s.Server = val
}

// SetServerAssignment sets the value of ServerAssignment.
func (s *PoolProvider) SetServerAssignment(val string) {
	s.ServerAssignment = val
}

// An identifier for a native provider.
type PoolProviderIdentifier string

const (
	PoolProviderIdentifierEquinixMetal PoolProviderIdentifier = "equinix-metal"
	PoolProviderIdentifierVultr        PoolProviderIdentifier = "vultr"
	PoolProviderIdentifierAWS          PoolProviderIdentifier = "aws"
)

// MarshalText implements encoding.TextMarshaler.
func (s PoolProviderIdentifier) MarshalText() ([]byte, error) {
	switch s {
	case PoolProviderIdentifierEquinixMetal:
		return []byte(s), nil
	case PoolProviderIdentifierVultr:
		return []byte(s), nil
	case PoolProviderIdentifierAWS:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PoolProviderIdentifier) UnmarshalText(data []byte) error {
	switch PoolProviderIdentifier(data) {
	case PoolProviderIdentifierEquinixMetal:
		*s = PoolProviderIdentifierEquinixMetal
		return nil
	case PoolProviderIdentifierVultr:
		*s = PoolProviderIdentifierVultr
		return nil
	case PoolProviderIdentifierAWS:
		*s = PoolProviderIdentifierAWS
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/PoolState
type PoolState struct {
	// The current state of the pool.
	Current PoolStateCurrent `json:"current"`
	Changed DateTime         `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptPoolStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *PoolState) GetCurrent() PoolStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *PoolState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *PoolState) GetError() OptPoolStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *PoolState) SetCurrent(val PoolStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *PoolState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *PoolState) SetError(val OptPoolStateError) {
	s.Error = val
}

// The current state of the pool.
type PoolStateCurrent string

const (
	PoolStateCurrentLive      PoolStateCurrent = "live"
	PoolStateCurrentReleasing PoolStateCurrent = "releasing"
	PoolStateCurrentReleased  PoolStateCurrent = "released"
)

// MarshalText implements encoding.TextMarshaler.
func (s PoolStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case PoolStateCurrentLive:
		return []byte(s), nil
	case PoolStateCurrentReleasing:
		return []byte(s), nil
	case PoolStateCurrentReleased:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PoolStateCurrent) UnmarshalText(data []byte) error {
	switch PoolStateCurrent(data) {
	case PoolStateCurrentLive:
		*s = PoolStateCurrentLive
		return nil
	case PoolStateCurrentReleasing:
		*s = PoolStateCurrentReleasing
		return nil
	case PoolStateCurrentReleased:
		*s = PoolStateCurrentReleased
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type PoolStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *PoolStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *PoolStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *PoolStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *PoolStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Ref: #/components/schemas/PrivateNetwork
type PrivateNetwork struct {
	// The vxlan tag added to each packet to help identify the network.
	VxlanTag int `json:"vxlan_tag"`
	// The subnet ID.
	Subnet string           `json:"subnet"`
	Ipv6   IPNet            `json:"ipv6"`
	Legacy NilLegacyNetwork `json:"legacy"`
}

// GetVxlanTag returns the value of VxlanTag.
func (s *PrivateNetwork) GetVxlanTag() int {
	return s.VxlanTag
}

// GetSubnet returns the value of Subnet.
func (s *PrivateNetwork) GetSubnet() string {
	return s.Subnet
}

// GetIpv6 returns the value of Ipv6.
func (s *PrivateNetwork) GetIpv6() IPNet {
	return s.Ipv6
}

// GetLegacy returns the value of Legacy.
func (s *PrivateNetwork) GetLegacy() NilLegacyNetwork {
	return s.Legacy
}

// SetVxlanTag sets the value of VxlanTag.
func (s *PrivateNetwork) SetVxlanTag(val int) {
	s.VxlanTag = val
}

// SetSubnet sets the value of Subnet.
func (s *PrivateNetwork) SetSubnet(val string) {
	s.Subnet = val
}

// SetIpv6 sets the value of Ipv6.
func (s *PrivateNetwork) SetIpv6(val IPNet) {
	s.Ipv6 = val
}

// SetLegacy sets the value of Legacy.
func (s *PrivateNetwork) SetLegacy(val NilLegacyNetwork) {
	s.Legacy = val
}

// Process information for a given snapshot.
// Ref: #/components/schemas/ProcessesSnapshot
type ProcessesSnapshot struct {
	// The current number of running processes in the instance.
	Current OptFloat64 `json:"current"`
	// The maximum number of running processes for the instance.
	Limit OptFloat64 `json:"limit"`
}

// GetCurrent returns the value of Current.
func (s *ProcessesSnapshot) GetCurrent() OptFloat64 {
	return s.Current
}

// GetLimit returns the value of Limit.
func (s *ProcessesSnapshot) GetLimit() OptFloat64 {
	return s.Limit
}

// SetCurrent sets the value of Current.
func (s *ProcessesSnapshot) SetCurrent(val OptFloat64) {
	s.Current = val
}

// SetLimit sets the value of Limit.
func (s *ProcessesSnapshot) SetLimit(val OptFloat64) {
	s.Limit = val
}

// A billing promo code.
// Ref: #/components/schemas/PromoCode
type PromoCode struct {
	// The promo "code".
	Code string `json:"code"`
	// The amount of credit the promo code offers.
	Credit NilPromoCodeCredit `json:"credit"`
	State  PromoCodeState     `json:"state"`
}

// GetCode returns the value of Code.
func (s *PromoCode) GetCode() string {
	return s.Code
}

// GetCredit returns the value of Credit.
func (s *PromoCode) GetCredit() NilPromoCodeCredit {
	return s.Credit
}

// GetState returns the value of State.
func (s *PromoCode) GetState() PromoCodeState {
	return s.State
}

// SetCode sets the value of Code.
func (s *PromoCode) SetCode(val string) {
	s.Code = val
}

// SetCredit sets the value of Credit.
func (s *PromoCode) SetCredit(val NilPromoCodeCredit) {
	s.Credit = val
}

// SetState sets the value of State.
func (s *PromoCode) SetState(val PromoCodeState) {
	s.State = val
}

// The amount of credit the promo code offers.
type PromoCodeCredit map[string]PromoCodeCreditItem

func (s *PromoCodeCredit) init() PromoCodeCredit {
	m := *s
	if m == nil {
		m = map[string]PromoCodeCreditItem{}
		*s = m
	}
	return m
}

type PromoCodeCreditItem struct {
	Amount  OptBillingAmount `json:"amount"`
	Expires OptDateTime      `json:"expires"`
}

// GetAmount returns the value of Amount.
func (s *PromoCodeCreditItem) GetAmount() OptBillingAmount {
	return s.Amount
}

// GetExpires returns the value of Expires.
func (s *PromoCodeCreditItem) GetExpires() OptDateTime {
	return s.Expires
}

// SetAmount sets the value of Amount.
func (s *PromoCodeCreditItem) SetAmount(val OptBillingAmount) {
	s.Amount = val
}

// SetExpires sets the value of Expires.
func (s *PromoCodeCreditItem) SetExpires(val OptDateTime) {
	s.Expires = val
}

// A resource thats associated with a promo code.
// Ref: #/components/schemas/PromoCodeInclude
type PromoCodeInclude map[string]PromoCode

func (s *PromoCodeInclude) init() PromoCodeInclude {
	m := *s
	if m == nil {
		m = map[string]PromoCode{}
		*s = m
	}
	return m
}

// Merged schema.
type PromoCodeState struct {
	// The current state of the promo code.
	Current PromoCodeStateCurrent `json:"current"`
	Changed DateTime              `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptPromoCodeStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *PromoCodeState) GetCurrent() PromoCodeStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *PromoCodeState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *PromoCodeState) GetError() OptPromoCodeStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *PromoCodeState) SetCurrent(val PromoCodeStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *PromoCodeState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *PromoCodeState) SetError(val OptPromoCodeStateError) {
	s.Error = val
}

// The current state of the promo code.
type PromoCodeStateCurrent string

const (
	PromoCodeStateCurrentLive    PromoCodeStateCurrent = "live"
	PromoCodeStateCurrentDeleted PromoCodeStateCurrent = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s PromoCodeStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case PromoCodeStateCurrentLive:
		return []byte(s), nil
	case PromoCodeStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PromoCodeStateCurrent) UnmarshalText(data []byte) error {
	switch PromoCodeStateCurrent(data) {
	case PromoCodeStateCurrentLive:
		*s = PromoCodeStateCurrentLive
		return nil
	case PromoCodeStateCurrentDeleted:
		*s = PromoCodeStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type PromoCodeStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *PromoCodeStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *PromoCodeStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *PromoCodeStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *PromoCodeStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// A provider resource.
// Ref: #/components/schemas/Provider
type Provider struct {
	ID          ID          `json:"id"`
	HubID       HubID       `json:"hub_id"`
	Integration Integration `json:"integration"`
	// A string describing the name of a provider.
	Name OptString `json:"name"`
	// A collection of timestamps for each event in the provider's lifetime.
	Events  ProviderEvents  `json:"events"`
	Creator CreatorScope    `json:"creator"`
	State   ProviderState   `json:"state"`
	Meta    OptProviderMeta `json:"meta"`
}

// GetID returns the value of ID.
func (s *Provider) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *Provider) GetHubID() HubID {
	return s.HubID
}

// GetIntegration returns the value of Integration.
func (s *Provider) GetIntegration() Integration {
	return s.Integration
}

// GetName returns the value of Name.
func (s *Provider) GetName() OptString {
	return s.Name
}

// GetEvents returns the value of Events.
func (s *Provider) GetEvents() ProviderEvents {
	return s.Events
}

// GetCreator returns the value of Creator.
func (s *Provider) GetCreator() CreatorScope {
	return s.Creator
}

// GetState returns the value of State.
func (s *Provider) GetState() ProviderState {
	return s.State
}

// GetMeta returns the value of Meta.
func (s *Provider) GetMeta() OptProviderMeta {
	return s.Meta
}

// SetID sets the value of ID.
func (s *Provider) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *Provider) SetHubID(val HubID) {
	s.HubID = val
}

// SetIntegration sets the value of Integration.
func (s *Provider) SetIntegration(val Integration) {
	s.Integration = val
}

// SetName sets the value of Name.
func (s *Provider) SetName(val OptString) {
	s.Name = val
}

// SetEvents sets the value of Events.
func (s *Provider) SetEvents(val ProviderEvents) {
	s.Events = val
}

// SetCreator sets the value of Creator.
func (s *Provider) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetState sets the value of State.
func (s *Provider) SetState(val ProviderState) {
	s.State = val
}

// SetMeta sets the value of Meta.
func (s *Provider) SetMeta(val OptProviderMeta) {
	s.Meta = val
}

// A collection of timestamps for each event in the provider's lifetime.
type ProviderEvents struct {
	// The timestamp of when the provider was created.
	Created DateTime `json:"created"`
	// The timestamp of when the provider was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the provider was deleted.
	Deleted DateTime `json:"deleted"`
	// The timestamp of when the provider was last used to provision a server.
	LastProvision DateTime `json:"last_provision"`
}

// GetCreated returns the value of Created.
func (s *ProviderEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ProviderEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *ProviderEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetLastProvision returns the value of LastProvision.
func (s *ProviderEvents) GetLastProvision() DateTime {
	return s.LastProvision
}

// SetCreated sets the value of Created.
func (s *ProviderEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ProviderEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *ProviderEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetLastProvision sets the value of LastProvision.
func (s *ProviderEvents) SetLastProvision(val DateTime) {
	s.LastProvision = val
}

// A list of meta fields that can be applied to a provider.
// Ref: #/components/schemas/ProviderMeta
type ProviderMeta struct {
	Locations []InfrastructureProviderLocation `json:"locations"`
}

// GetLocations returns the value of Locations.
func (s *ProviderMeta) GetLocations() []InfrastructureProviderLocation {
	return s.Locations
}

// SetLocations sets the value of Locations.
func (s *ProviderMeta) SetLocations(val []InfrastructureProviderLocation) {
	s.Locations = val
}

// A server from a provider.
// Ref: #/components/schemas/ProviderServer
type ProviderServer struct {
	ID ID `json:"id"`
	// A name for the server.
	Name string `json:"name"`
	// A description of the server.
	Description string             `json:"description"`
	Specs       ServerSpecs        `json:"specs"`
	Provider    ProviderServerSpec `json:"provider"`
	Price       BillingAmount      `json:"price"`
	// A boolean where true signifies this server is compatible with the platform.
	Compatible bool `json:"compatible"`
	// A boolean where true signifies the server has a limited amount of resources and should only be
	// used for very lightweight workloads.
	LowResource bool `json:"low_resource"`
	// An array of location IDs where this server type is available.
	LocationIds []string `json:"location_ids"`
}

// GetID returns the value of ID.
func (s *ProviderServer) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *ProviderServer) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ProviderServer) GetDescription() string {
	return s.Description
}

// GetSpecs returns the value of Specs.
func (s *ProviderServer) GetSpecs() ServerSpecs {
	return s.Specs
}

// GetProvider returns the value of Provider.
func (s *ProviderServer) GetProvider() ProviderServerSpec {
	return s.Provider
}

// GetPrice returns the value of Price.
func (s *ProviderServer) GetPrice() BillingAmount {
	return s.Price
}

// GetCompatible returns the value of Compatible.
func (s *ProviderServer) GetCompatible() bool {
	return s.Compatible
}

// GetLowResource returns the value of LowResource.
func (s *ProviderServer) GetLowResource() bool {
	return s.LowResource
}

// GetLocationIds returns the value of LocationIds.
func (s *ProviderServer) GetLocationIds() []string {
	return s.LocationIds
}

// SetID sets the value of ID.
func (s *ProviderServer) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ProviderServer) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ProviderServer) SetDescription(val string) {
	s.Description = val
}

// SetSpecs sets the value of Specs.
func (s *ProviderServer) SetSpecs(val ServerSpecs) {
	s.Specs = val
}

// SetProvider sets the value of Provider.
func (s *ProviderServer) SetProvider(val ProviderServerSpec) {
	s.Provider = val
}

// SetPrice sets the value of Price.
func (s *ProviderServer) SetPrice(val BillingAmount) {
	s.Price = val
}

// SetCompatible sets the value of Compatible.
func (s *ProviderServer) SetCompatible(val bool) {
	s.Compatible = val
}

// SetLowResource sets the value of LowResource.
func (s *ProviderServer) SetLowResource(val bool) {
	s.LowResource = val
}

// SetLocationIds sets the value of LocationIds.
func (s *ProviderServer) SetLocationIds(val []string) {
	s.LocationIds = val
}

// Higher level information about a providers server.
// Ref: #/components/schemas/ProviderServerSpec
type ProviderServerSpec struct {
	// A provider identifier.
	Identifier string `json:"identifier"`
	// A category for the server.
	Category string `json:"category"`
	// A class for the server.
	Class OptString `json:"class"`
	// The model of the server.
	Model string `json:"model"`
	// A plan identifier, if there is one.
	PlanIdentifier OptString `json:"plan_identifier"`
	// A list of location ID's this server is available.
	Locations         []string                               `json:"locations"`
	AvailabilityZones OptProviderServerSpecAvailabilityZones `json:"availability_zones"`
}

// GetIdentifier returns the value of Identifier.
func (s *ProviderServerSpec) GetIdentifier() string {
	return s.Identifier
}

// GetCategory returns the value of Category.
func (s *ProviderServerSpec) GetCategory() string {
	return s.Category
}

// GetClass returns the value of Class.
func (s *ProviderServerSpec) GetClass() OptString {
	return s.Class
}

// GetModel returns the value of Model.
func (s *ProviderServerSpec) GetModel() string {
	return s.Model
}

// GetPlanIdentifier returns the value of PlanIdentifier.
func (s *ProviderServerSpec) GetPlanIdentifier() OptString {
	return s.PlanIdentifier
}

// GetLocations returns the value of Locations.
func (s *ProviderServerSpec) GetLocations() []string {
	return s.Locations
}

// GetAvailabilityZones returns the value of AvailabilityZones.
func (s *ProviderServerSpec) GetAvailabilityZones() OptProviderServerSpecAvailabilityZones {
	return s.AvailabilityZones
}

// SetIdentifier sets the value of Identifier.
func (s *ProviderServerSpec) SetIdentifier(val string) {
	s.Identifier = val
}

// SetCategory sets the value of Category.
func (s *ProviderServerSpec) SetCategory(val string) {
	s.Category = val
}

// SetClass sets the value of Class.
func (s *ProviderServerSpec) SetClass(val OptString) {
	s.Class = val
}

// SetModel sets the value of Model.
func (s *ProviderServerSpec) SetModel(val string) {
	s.Model = val
}

// SetPlanIdentifier sets the value of PlanIdentifier.
func (s *ProviderServerSpec) SetPlanIdentifier(val OptString) {
	s.PlanIdentifier = val
}

// SetLocations sets the value of Locations.
func (s *ProviderServerSpec) SetLocations(val []string) {
	s.Locations = val
}

// SetAvailabilityZones sets the value of AvailabilityZones.
func (s *ProviderServerSpec) SetAvailabilityZones(val OptProviderServerSpecAvailabilityZones) {
	s.AvailabilityZones = val
}

type ProviderServerSpecAvailabilityZones map[string][]string

func (s *ProviderServerSpecAvailabilityZones) init() ProviderServerSpecAvailabilityZones {
	m := *s
	if m == nil {
		m = map[string][]string{}
		*s = m
	}
	return m
}

// A resources that assocaited with a provider server.
// Ref: #/components/schemas/ProviderServersServerIncludes
type ProviderServersServerIncludes map[string]ProviderServer

func (s *ProviderServersServerIncludes) init() ProviderServersServerIncludes {
	m := *s
	if m == nil {
		m = map[string]ProviderServer{}
		*s = m
	}
	return m
}

// Merged schema.
// Ref: #/components/schemas/ProviderState
type ProviderState struct {
	// The current state of the provider.
	Current ProviderStateCurrent `json:"current"`
	Changed DateTime             `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptProviderStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *ProviderState) GetCurrent() ProviderStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *ProviderState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *ProviderState) GetError() OptProviderStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *ProviderState) SetCurrent(val ProviderStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *ProviderState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *ProviderState) SetError(val OptProviderStateError) {
	s.Error = val
}

// The current state of the provider.
type ProviderStateCurrent string

const (
	ProviderStateCurrentNew       ProviderStateCurrent = "new"
	ProviderStateCurrentVerifying ProviderStateCurrent = "verifying"
	ProviderStateCurrentLive      ProviderStateCurrent = "live"
	ProviderStateCurrentDeleting  ProviderStateCurrent = "deleting"
	ProviderStateCurrentDeleted   ProviderStateCurrent = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s ProviderStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case ProviderStateCurrentNew:
		return []byte(s), nil
	case ProviderStateCurrentVerifying:
		return []byte(s), nil
	case ProviderStateCurrentLive:
		return []byte(s), nil
	case ProviderStateCurrentDeleting:
		return []byte(s), nil
	case ProviderStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProviderStateCurrent) UnmarshalText(data []byte) error {
	switch ProviderStateCurrent(data) {
	case ProviderStateCurrentNew:
		*s = ProviderStateCurrentNew
		return nil
	case ProviderStateCurrentVerifying:
		*s = ProviderStateCurrentVerifying
		return nil
	case ProviderStateCurrentLive:
		*s = ProviderStateCurrentLive
		return nil
	case ProviderStateCurrentDeleting:
		*s = ProviderStateCurrentDeleting
		return nil
	case ProviderStateCurrentDeleted:
		*s = ProviderStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type ProviderStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *ProviderStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *ProviderStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *ProviderStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *ProviderStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// A summary of the provider a given resource is deployed to.
// Ref: #/components/schemas/ProviderSummary
type ProviderSummary struct {
	// An identifier for the provider. Custom IAL providers will be listed as `abstraction-<ID>` where
	// the ID is a MongoDB ID.
	Identifier ProviderSummaryIdentifier `json:"identifier"`
	// A location identifier associated with the provider.
	Location string `json:"location"`
}

// GetIdentifier returns the value of Identifier.
func (s *ProviderSummary) GetIdentifier() ProviderSummaryIdentifier {
	return s.Identifier
}

// GetLocation returns the value of Location.
func (s *ProviderSummary) GetLocation() string {
	return s.Location
}

// SetIdentifier sets the value of Identifier.
func (s *ProviderSummary) SetIdentifier(val ProviderSummaryIdentifier) {
	s.Identifier = val
}

// SetLocation sets the value of Location.
func (s *ProviderSummary) SetLocation(val string) {
	s.Location = val
}

// An identifier for the provider. Custom IAL providers will be listed as `abstraction-<ID>` where
// the ID is a MongoDB ID.
type ProviderSummaryIdentifier string

const (
	ProviderSummaryIdentifierEquinixMetal       ProviderSummaryIdentifier = "equinix-metal"
	ProviderSummaryIdentifierVultr              ProviderSummaryIdentifier = "vultr"
	ProviderSummaryIdentifierAWS                ProviderSummaryIdentifier = "aws"
	ProviderSummaryIdentifierAbstractionMongoID ProviderSummaryIdentifier = "abstraction-<MongoID>"
)

// MarshalText implements encoding.TextMarshaler.
func (s ProviderSummaryIdentifier) MarshalText() ([]byte, error) {
	switch s {
	case ProviderSummaryIdentifierEquinixMetal:
		return []byte(s), nil
	case ProviderSummaryIdentifierVultr:
		return []byte(s), nil
	case ProviderSummaryIdentifierAWS:
		return []byte(s), nil
	case ProviderSummaryIdentifierAbstractionMongoID:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProviderSummaryIdentifier) UnmarshalText(data []byte) error {
	switch ProviderSummaryIdentifier(data) {
	case ProviderSummaryIdentifierEquinixMetal:
		*s = ProviderSummaryIdentifierEquinixMetal
		return nil
	case ProviderSummaryIdentifierVultr:
		*s = ProviderSummaryIdentifierVultr
		return nil
	case ProviderSummaryIdentifierAWS:
		*s = ProviderSummaryIdentifierAWS
		return nil
	case ProviderSummaryIdentifierAbstractionMongoID:
		*s = ProviderSummaryIdentifierAbstractionMongoID
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A resource thats associated with a provider.
// Ref: #/components/schemas/ProvidersIncludes
type ProvidersIncludes map[string]Provider

func (s *ProvidersIncludes) init() ProvidersIncludes {
	m := *s
	if m == nil {
		m = map[string]Provider{}
		*s = m
	}
	return m
}

// Publicly available information about an account.
// Ref: #/components/schemas/PublicAccount
type PublicAccount struct {
	// The first and last name of an account owner.
	Name PublicAccountName `json:"name"`
	// Email information for an account.
	Email PublicAccountEmail `json:"email"`
	// Id information for an account.
	ID     string                 `json:"id"`
	Events OptPublicAccountEvents `json:"events"`
}

// GetName returns the value of Name.
func (s *PublicAccount) GetName() PublicAccountName {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *PublicAccount) GetEmail() PublicAccountEmail {
	return s.Email
}

// GetID returns the value of ID.
func (s *PublicAccount) GetID() string {
	return s.ID
}

// GetEvents returns the value of Events.
func (s *PublicAccount) GetEvents() OptPublicAccountEvents {
	return s.Events
}

// SetName sets the value of Name.
func (s *PublicAccount) SetName(val PublicAccountName) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *PublicAccount) SetEmail(val PublicAccountEmail) {
	s.Email = val
}

// SetID sets the value of ID.
func (s *PublicAccount) SetID(val string) {
	s.ID = val
}

// SetEvents sets the value of Events.
func (s *PublicAccount) SetEvents(val OptPublicAccountEvents) {
	s.Events = val
}

// Email information for an account.
type PublicAccountEmail struct {
	// The email address.
	Address string `json:"address"`
	// A boolean representing if the email has been verified.
	Verified bool     `json:"verified"`
	Added    DateTime `json:"added"`
}

// GetAddress returns the value of Address.
func (s *PublicAccountEmail) GetAddress() string {
	return s.Address
}

// GetVerified returns the value of Verified.
func (s *PublicAccountEmail) GetVerified() bool {
	return s.Verified
}

// GetAdded returns the value of Added.
func (s *PublicAccountEmail) GetAdded() DateTime {
	return s.Added
}

// SetAddress sets the value of Address.
func (s *PublicAccountEmail) SetAddress(val string) {
	s.Address = val
}

// SetVerified sets the value of Verified.
func (s *PublicAccountEmail) SetVerified(val bool) {
	s.Verified = val
}

// SetAdded sets the value of Added.
func (s *PublicAccountEmail) SetAdded(val DateTime) {
	s.Added = val
}

// Merged schema.
type PublicAccountEvents struct {
	LastLogin       OptDateTime `json:"last_login"`
	AdditionalProps PublicAccountEventsAdditional
}

// GetLastLogin returns the value of LastLogin.
func (s *PublicAccountEvents) GetLastLogin() OptDateTime {
	return s.LastLogin
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *PublicAccountEvents) GetAdditionalProps() PublicAccountEventsAdditional {
	return s.AdditionalProps
}

// SetLastLogin sets the value of LastLogin.
func (s *PublicAccountEvents) SetLastLogin(val OptDateTime) {
	s.LastLogin = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *PublicAccountEvents) SetAdditionalProps(val PublicAccountEventsAdditional) {
	s.AdditionalProps = val
}

type PublicAccountEventsAdditional map[string]DateTime

func (s *PublicAccountEventsAdditional) init() PublicAccountEventsAdditional {
	m := *s
	if m == nil {
		m = map[string]DateTime{}
		*s = m
	}
	return m
}

// The first and last name of an account owner.
type PublicAccountName struct {
	// The first name of the account owner.
	First string `json:"first"`
	// The last name of the account owner.
	Last string `json:"last"`
}

// GetFirst returns the value of First.
func (s *PublicAccountName) GetFirst() string {
	return s.First
}

// GetLast returns the value of Last.
func (s *PublicAccountName) GetLast() string {
	return s.Last
}

// SetFirst sets the value of First.
func (s *PublicAccountName) SetFirst(val string) {
	s.First = val
}

// SetLast sets the value of Last.
func (s *PublicAccountName) SetLast(val string) {
	s.Last = val
}

// A start and end date-time pair indicating a range of time.
// Ref: #/components/schemas/Range
type Range struct {
	Start DateTime `json:"start"`
	End   DateTime `json:"end"`
}

// GetStart returns the value of Start.
func (s *Range) GetStart() DateTime {
	return s.Start
}

// GetEnd returns the value of End.
func (s *Range) GetEnd() DateTime {
	return s.End
}

// SetStart sets the value of Start.
func (s *Range) SetStart(val DateTime) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *Range) SetEnd(val DateTime) {
	s.End = val
}

type ReconfigureDiscoveryAccepted struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *ReconfigureDiscoveryAccepted) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *ReconfigureDiscoveryAccepted) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type ReconfigureDiscoveryReq struct {
	// The name of the action to perform.
	Action   ReconfigureDiscoveryReqAction   `json:"action"`
	Contents ReconfigureDiscoveryReqContents `json:"contents"`
}

// GetAction returns the value of Action.
func (s *ReconfigureDiscoveryReq) GetAction() ReconfigureDiscoveryReqAction {
	return s.Action
}

// GetContents returns the value of Contents.
func (s *ReconfigureDiscoveryReq) GetContents() ReconfigureDiscoveryReqContents {
	return s.Contents
}

// SetAction sets the value of Action.
func (s *ReconfigureDiscoveryReq) SetAction(val ReconfigureDiscoveryReqAction) {
	s.Action = val
}

// SetContents sets the value of Contents.
func (s *ReconfigureDiscoveryReq) SetContents(val ReconfigureDiscoveryReqContents) {
	s.Contents = val
}

// The name of the action to perform.
type ReconfigureDiscoveryReqAction string

const (
	ReconfigureDiscoveryReqActionReconfigure ReconfigureDiscoveryReqAction = "reconfigure"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReconfigureDiscoveryReqAction) MarshalText() ([]byte, error) {
	switch s {
	case ReconfigureDiscoveryReqActionReconfigure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReconfigureDiscoveryReqAction) UnmarshalText(data []byte) error {
	switch ReconfigureDiscoveryReqAction(data) {
	case ReconfigureDiscoveryReqActionReconfigure:
		*s = ReconfigureDiscoveryReqActionReconfigure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReconfigureDiscoveryReqContents struct {
	// A boolean where `true` represents the desire to run the environment discovery service in high
	// availability mode.
	HighAvailability OptBool `json:"high_availability"`
}

// GetHighAvailability returns the value of HighAvailability.
func (s *ReconfigureDiscoveryReqContents) GetHighAvailability() OptBool {
	return s.HighAvailability
}

// SetHighAvailability sets the value of HighAvailability.
func (s *ReconfigureDiscoveryReqContents) SetHighAvailability(val OptBool) {
	s.HighAvailability = val
}

type ReconfigureLoadBalancerAccepted struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *ReconfigureLoadBalancerAccepted) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *ReconfigureLoadBalancerAccepted) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type ReconfigureLoadBalancerReq struct {
	// The name of the action to perform.
	Action   ReconfigureLoadBalancerReqAction   `json:"action"`
	Contents ReconfigureLoadBalancerReqContents `json:"contents"`
}

// GetAction returns the value of Action.
func (s *ReconfigureLoadBalancerReq) GetAction() ReconfigureLoadBalancerReqAction {
	return s.Action
}

// GetContents returns the value of Contents.
func (s *ReconfigureLoadBalancerReq) GetContents() ReconfigureLoadBalancerReqContents {
	return s.Contents
}

// SetAction sets the value of Action.
func (s *ReconfigureLoadBalancerReq) SetAction(val ReconfigureLoadBalancerReqAction) {
	s.Action = val
}

// SetContents sets the value of Contents.
func (s *ReconfigureLoadBalancerReq) SetContents(val ReconfigureLoadBalancerReqContents) {
	s.Contents = val
}

// The name of the action to perform.
type ReconfigureLoadBalancerReqAction string

const (
	ReconfigureLoadBalancerReqActionReconfigure ReconfigureLoadBalancerReqAction = "reconfigure"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReconfigureLoadBalancerReqAction) MarshalText() ([]byte, error) {
	switch s {
	case ReconfigureLoadBalancerReqActionReconfigure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReconfigureLoadBalancerReqAction) UnmarshalText(data []byte) error {
	switch ReconfigureLoadBalancerReqAction(data) {
	case ReconfigureLoadBalancerReqActionReconfigure:
		*s = ReconfigureLoadBalancerReqActionReconfigure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReconfigureLoadBalancerReqContents struct {
	// Boolean that sets custom vs default VPN configuration.
	Customize OptBool `json:"customize"`
	// A boolean where `true` represents the desire to run the environment load balancer service in high
	// availability mode.
	HighAvailability OptBool `json:"high_availability"`
	// The config object for the loadbalancer service.
	Config OptNilReconfigureLoadBalancerReqContentsConfig `json:"config"`
}

// GetCustomize returns the value of Customize.
func (s *ReconfigureLoadBalancerReqContents) GetCustomize() OptBool {
	return s.Customize
}

// GetHighAvailability returns the value of HighAvailability.
func (s *ReconfigureLoadBalancerReqContents) GetHighAvailability() OptBool {
	return s.HighAvailability
}

// GetConfig returns the value of Config.
func (s *ReconfigureLoadBalancerReqContents) GetConfig() OptNilReconfigureLoadBalancerReqContentsConfig {
	return s.Config
}

// SetCustomize sets the value of Customize.
func (s *ReconfigureLoadBalancerReqContents) SetCustomize(val OptBool) {
	s.Customize = val
}

// SetHighAvailability sets the value of HighAvailability.
func (s *ReconfigureLoadBalancerReqContents) SetHighAvailability(val OptBool) {
	s.HighAvailability = val
}

// SetConfig sets the value of Config.
func (s *ReconfigureLoadBalancerReqContents) SetConfig(val OptNilReconfigureLoadBalancerReqContentsConfig) {
	s.Config = val
}

// The config object for the loadbalancer service.
type ReconfigureLoadBalancerReqContentsConfig struct {
	Version OptString `json:"version"`
	// Allow / disallow traffic to be routed via IPv4.
	Ipv4 OptNilBool `json:"ipv4"`
	// Allow / disallow traffic to be routed via IPv6.
	Ipv6 OptNilBool `json:"ipv6"`
	// Describes settings that are passed to HAProxy within the load balancer.
	Haproxy NilReconfigureLoadBalancerReqContentsConfigHaproxy `json:"haproxy"`
}

// GetVersion returns the value of Version.
func (s *ReconfigureLoadBalancerReqContentsConfig) GetVersion() OptString {
	return s.Version
}

// GetIpv4 returns the value of Ipv4.
func (s *ReconfigureLoadBalancerReqContentsConfig) GetIpv4() OptNilBool {
	return s.Ipv4
}

// GetIpv6 returns the value of Ipv6.
func (s *ReconfigureLoadBalancerReqContentsConfig) GetIpv6() OptNilBool {
	return s.Ipv6
}

// GetHaproxy returns the value of Haproxy.
func (s *ReconfigureLoadBalancerReqContentsConfig) GetHaproxy() NilReconfigureLoadBalancerReqContentsConfigHaproxy {
	return s.Haproxy
}

// SetVersion sets the value of Version.
func (s *ReconfigureLoadBalancerReqContentsConfig) SetVersion(val OptString) {
	s.Version = val
}

// SetIpv4 sets the value of Ipv4.
func (s *ReconfigureLoadBalancerReqContentsConfig) SetIpv4(val OptNilBool) {
	s.Ipv4 = val
}

// SetIpv6 sets the value of Ipv6.
func (s *ReconfigureLoadBalancerReqContentsConfig) SetIpv6(val OptNilBool) {
	s.Ipv6 = val
}

// SetHaproxy sets the value of Haproxy.
func (s *ReconfigureLoadBalancerReqContentsConfig) SetHaproxy(val NilReconfigureLoadBalancerReqContentsConfigHaproxy) {
	s.Haproxy = val
}

// Describes settings that are passed to HAProxy within the load balancer.
type ReconfigureLoadBalancerReqContentsConfigHaproxy struct {
	Default HAProxyConfig                                        `json:"default"`
	Ports   ReconfigureLoadBalancerReqContentsConfigHaproxyPorts `json:"ports"`
}

// GetDefault returns the value of Default.
func (s *ReconfigureLoadBalancerReqContentsConfigHaproxy) GetDefault() HAProxyConfig {
	return s.Default
}

// GetPorts returns the value of Ports.
func (s *ReconfigureLoadBalancerReqContentsConfigHaproxy) GetPorts() ReconfigureLoadBalancerReqContentsConfigHaproxyPorts {
	return s.Ports
}

// SetDefault sets the value of Default.
func (s *ReconfigureLoadBalancerReqContentsConfigHaproxy) SetDefault(val HAProxyConfig) {
	s.Default = val
}

// SetPorts sets the value of Ports.
func (s *ReconfigureLoadBalancerReqContentsConfigHaproxy) SetPorts(val ReconfigureLoadBalancerReqContentsConfigHaproxyPorts) {
	s.Ports = val
}

type ReconfigureLoadBalancerReqContentsConfigHaproxyPorts map[string]ReconfigureLoadBalancerReqContentsConfigHaproxyPortsItem

func (s *ReconfigureLoadBalancerReqContentsConfigHaproxyPorts) init() ReconfigureLoadBalancerReqContentsConfigHaproxyPorts {
	m := *s
	if m == nil {
		m = map[string]ReconfigureLoadBalancerReqContentsConfigHaproxyPortsItem{}
		*s = m
	}
	return m
}

// ReconfigureLoadBalancerReqContentsConfigHaproxyPortsItem represents sum type.
type ReconfigureLoadBalancerReqContentsConfigHaproxyPortsItem struct {
	Type          ReconfigureLoadBalancerReqContentsConfigHaproxyPortsItemType // switch on this field
	HAProxyConfig HAProxyConfig
}

// ReconfigureLoadBalancerReqContentsConfigHaproxyPortsItemType is oneOf type of ReconfigureLoadBalancerReqContentsConfigHaproxyPortsItem.
type ReconfigureLoadBalancerReqContentsConfigHaproxyPortsItemType string

// Possible values for ReconfigureLoadBalancerReqContentsConfigHaproxyPortsItemType.
const (
	HAProxyConfigReconfigureLoadBalancerReqContentsConfigHaproxyPortsItem ReconfigureLoadBalancerReqContentsConfigHaproxyPortsItemType = "HAProxyConfig"
)

// IsHAProxyConfig reports whether ReconfigureLoadBalancerReqContentsConfigHaproxyPortsItem is HAProxyConfig.
func (s ReconfigureLoadBalancerReqContentsConfigHaproxyPortsItem) IsHAProxyConfig() bool {
	return s.Type == HAProxyConfigReconfigureLoadBalancerReqContentsConfigHaproxyPortsItem
}

// SetHAProxyConfig sets ReconfigureLoadBalancerReqContentsConfigHaproxyPortsItem to HAProxyConfig.
func (s *ReconfigureLoadBalancerReqContentsConfigHaproxyPortsItem) SetHAProxyConfig(v HAProxyConfig) {
	s.Type = HAProxyConfigReconfigureLoadBalancerReqContentsConfigHaproxyPortsItem
	s.HAProxyConfig = v
}

// GetHAProxyConfig returns HAProxyConfig and true boolean if ReconfigureLoadBalancerReqContentsConfigHaproxyPortsItem is HAProxyConfig.
func (s ReconfigureLoadBalancerReqContentsConfigHaproxyPortsItem) GetHAProxyConfig() (v HAProxyConfig, ok bool) {
	if !s.IsHAProxyConfig() {
		return v, false
	}
	return s.HAProxyConfig, true
}

// NewHAProxyConfigReconfigureLoadBalancerReqContentsConfigHaproxyPortsItem returns new ReconfigureLoadBalancerReqContentsConfigHaproxyPortsItem from HAProxyConfig.
func NewHAProxyConfigReconfigureLoadBalancerReqContentsConfigHaproxyPortsItem(v HAProxyConfig) ReconfigureLoadBalancerReqContentsConfigHaproxyPortsItem {
	var s ReconfigureLoadBalancerReqContentsConfigHaproxyPortsItem
	s.SetHAProxyConfig(v)
	return s
}

type ReconfigureVPNAccepted struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *ReconfigureVPNAccepted) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *ReconfigureVPNAccepted) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type ReconfigureVPNReq struct {
	// The action to take.
	Action ReconfigureVPNReqAction `json:"action"`
	// Additional information the platform needs to create this job.
	Contents ReconfigureVPNReqContents `json:"contents"`
}

// GetAction returns the value of Action.
func (s *ReconfigureVPNReq) GetAction() ReconfigureVPNReqAction {
	return s.Action
}

// GetContents returns the value of Contents.
func (s *ReconfigureVPNReq) GetContents() ReconfigureVPNReqContents {
	return s.Contents
}

// SetAction sets the value of Action.
func (s *ReconfigureVPNReq) SetAction(val ReconfigureVPNReqAction) {
	s.Action = val
}

// SetContents sets the value of Contents.
func (s *ReconfigureVPNReq) SetContents(val ReconfigureVPNReqContents) {
	s.Contents = val
}

// The action to take.
type ReconfigureVPNReqAction string

const (
	ReconfigureVPNReqActionReconfigure ReconfigureVPNReqAction = "reconfigure"
)

// MarshalText implements encoding.TextMarshaler.
func (s ReconfigureVPNReqAction) MarshalText() ([]byte, error) {
	switch s {
	case ReconfigureVPNReqActionReconfigure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReconfigureVPNReqAction) UnmarshalText(data []byte) error {
	switch ReconfigureVPNReqAction(data) {
	case ReconfigureVPNReqActionReconfigure:
		*s = ReconfigureVPNReqActionReconfigure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Additional information the platform needs to create this job.
type ReconfigureVPNReqContents struct {
	// A boolean where true means the VPN service is enabled.
	Enable OptBool `json:"enable"`
	// The config object for the VPN service, in this case without the required fields normally found in
	// a VPN config object.
	Config OptNilReconfigureVPNReqContentsConfig `json:"config"`
}

// GetEnable returns the value of Enable.
func (s *ReconfigureVPNReqContents) GetEnable() OptBool {
	return s.Enable
}

// GetConfig returns the value of Config.
func (s *ReconfigureVPNReqContents) GetConfig() OptNilReconfigureVPNReqContentsConfig {
	return s.Config
}

// SetEnable sets the value of Enable.
func (s *ReconfigureVPNReqContents) SetEnable(val OptBool) {
	s.Enable = val
}

// SetConfig sets the value of Config.
func (s *ReconfigureVPNReqContents) SetConfig(val OptNilReconfigureVPNReqContentsConfig) {
	s.Config = val
}

// The config object for the VPN service, in this case without the required fields normally found in
// a VPN config object.
type ReconfigureVPNReqContentsConfig struct {
	// If true, routes all traffic through the VPN, even non-Cycle traffic.
	AllowInternet OptBool `json:"allow_internet"`
	// Auth configuration for the VPN.
	Auth OptReconfigureVPNReqContentsConfigAuth `json:"auth"`
}

// GetAllowInternet returns the value of AllowInternet.
func (s *ReconfigureVPNReqContentsConfig) GetAllowInternet() OptBool {
	return s.AllowInternet
}

// GetAuth returns the value of Auth.
func (s *ReconfigureVPNReqContentsConfig) GetAuth() OptReconfigureVPNReqContentsConfigAuth {
	return s.Auth
}

// SetAllowInternet sets the value of AllowInternet.
func (s *ReconfigureVPNReqContentsConfig) SetAllowInternet(val OptBool) {
	s.AllowInternet = val
}

// SetAuth sets the value of Auth.
func (s *ReconfigureVPNReqContentsConfig) SetAuth(val OptReconfigureVPNReqContentsConfigAuth) {
	s.Auth = val
}

// Auth configuration for the VPN.
type ReconfigureVPNReqContentsConfigAuth struct {
	// A webhook endpoint to hit. Will be passed the login credentials provided to the user, and should
	// return a 200 status if the login is permitted.
	Webhook NilString `json:"webhook"`
	// If true, allows any Cycle account with access to the environment to log in to the VPN using their
	// Cycle email and password.
	CycleAccounts bool `json:"cycle_accounts"`
	// If true, allows the custom VPN accounts to log in to the VPN.
	VpnAccounts OptBool `json:"vpn_accounts"`
}

// GetWebhook returns the value of Webhook.
func (s *ReconfigureVPNReqContentsConfigAuth) GetWebhook() NilString {
	return s.Webhook
}

// GetCycleAccounts returns the value of CycleAccounts.
func (s *ReconfigureVPNReqContentsConfigAuth) GetCycleAccounts() bool {
	return s.CycleAccounts
}

// GetVpnAccounts returns the value of VpnAccounts.
func (s *ReconfigureVPNReqContentsConfigAuth) GetVpnAccounts() OptBool {
	return s.VpnAccounts
}

// SetWebhook sets the value of Webhook.
func (s *ReconfigureVPNReqContentsConfigAuth) SetWebhook(val NilString) {
	s.Webhook = val
}

// SetCycleAccounts sets the value of CycleAccounts.
func (s *ReconfigureVPNReqContentsConfigAuth) SetCycleAccounts(val bool) {
	s.CycleAccounts = val
}

// SetVpnAccounts sets the value of VpnAccounts.
func (s *ReconfigureVPNReqContentsConfigAuth) SetVpnAccounts(val OptBool) {
	s.VpnAccounts = val
}

// A DNS record.
// Ref: #/components/schemas/Record
type Record struct {
	ID      ID           `json:"id"`
	HubID   HubID        `json:"hub_id"`
	Creator CreatorScope `json:"creator"`
	// A unique identifier for the zone.
	ZoneID string `json:"zone_id"`
	// A name used for the record, where `@` signifies the use of the root domain.
	Name string `json:"name"`
	// The name of the record and the origin as a domain name.
	ResolvedDomain string      `json:"resolved_domain"`
	Type           RecordTypes `json:"type"`
	// TLS features for the record.
	Features NilRecordFeatures `json:"features"`
	State    RecordState       `json:"state"`
	Events   Events            `json:"events"`
}

// GetID returns the value of ID.
func (s *Record) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *Record) GetHubID() HubID {
	return s.HubID
}

// GetCreator returns the value of Creator.
func (s *Record) GetCreator() CreatorScope {
	return s.Creator
}

// GetZoneID returns the value of ZoneID.
func (s *Record) GetZoneID() string {
	return s.ZoneID
}

// GetName returns the value of Name.
func (s *Record) GetName() string {
	return s.Name
}

// GetResolvedDomain returns the value of ResolvedDomain.
func (s *Record) GetResolvedDomain() string {
	return s.ResolvedDomain
}

// GetType returns the value of Type.
func (s *Record) GetType() RecordTypes {
	return s.Type
}

// GetFeatures returns the value of Features.
func (s *Record) GetFeatures() NilRecordFeatures {
	return s.Features
}

// GetState returns the value of State.
func (s *Record) GetState() RecordState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *Record) GetEvents() Events {
	return s.Events
}

// SetID sets the value of ID.
func (s *Record) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *Record) SetHubID(val HubID) {
	s.HubID = val
}

// SetCreator sets the value of Creator.
func (s *Record) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetZoneID sets the value of ZoneID.
func (s *Record) SetZoneID(val string) {
	s.ZoneID = val
}

// SetName sets the value of Name.
func (s *Record) SetName(val string) {
	s.Name = val
}

// SetResolvedDomain sets the value of ResolvedDomain.
func (s *Record) SetResolvedDomain(val string) {
	s.ResolvedDomain = val
}

// SetType sets the value of Type.
func (s *Record) SetType(val RecordTypes) {
	s.Type = val
}

// SetFeatures sets the value of Features.
func (s *Record) SetFeatures(val NilRecordFeatures) {
	s.Features = val
}

// SetState sets the value of State.
func (s *Record) SetState(val RecordState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *Record) SetEvents(val Events) {
	s.Events = val
}

// TLS features for the record.
type RecordFeatures struct {
	Certificate NilCertificate `json:"certificate"`
}

// GetCertificate returns the value of Certificate.
func (s *RecordFeatures) GetCertificate() NilCertificate {
	return s.Certificate
}

// SetCertificate sets the value of Certificate.
func (s *RecordFeatures) SetCertificate(val NilCertificate) {
	s.Certificate = val
}

// All includable resources linkable to the given records.
// Ref: #/components/schemas/RecordIncludes
type RecordIncludes struct {
	Creators   OptCreatorInclude     `json:"creators"`
	Containers OptContainersIncludes `json:"containers"`
}

// GetCreators returns the value of Creators.
func (s *RecordIncludes) GetCreators() OptCreatorInclude {
	return s.Creators
}

// GetContainers returns the value of Containers.
func (s *RecordIncludes) GetContainers() OptContainersIncludes {
	return s.Containers
}

// SetCreators sets the value of Creators.
func (s *RecordIncludes) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

// SetContainers sets the value of Containers.
func (s *RecordIncludes) SetContainers(val OptContainersIncludes) {
	s.Containers = val
}

// Merged schema.
// Ref: #/components/schemas/RecordState
type RecordState struct {
	// The current state of the record.
	Current RecordStateCurrent `json:"current"`
	Changed DateTime           `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptRecordStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *RecordState) GetCurrent() RecordStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *RecordState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *RecordState) GetError() OptRecordStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *RecordState) SetCurrent(val RecordStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *RecordState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *RecordState) SetError(val OptRecordStateError) {
	s.Error = val
}

// The current state of the record.
type RecordStateCurrent string

const (
	RecordStateCurrentPending  RecordStateCurrent = "pending"
	RecordStateCurrentLive     RecordStateCurrent = "live"
	RecordStateCurrentDeleting RecordStateCurrent = "deleting"
	RecordStateCurrentDeleted  RecordStateCurrent = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s RecordStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case RecordStateCurrentPending:
		return []byte(s), nil
	case RecordStateCurrentLive:
		return []byte(s), nil
	case RecordStateCurrentDeleting:
		return []byte(s), nil
	case RecordStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecordStateCurrent) UnmarshalText(data []byte) error {
	switch RecordStateCurrent(data) {
	case RecordStateCurrentPending:
		*s = RecordStateCurrentPending
		return nil
	case RecordStateCurrentLive:
		*s = RecordStateCurrentLive
		return nil
	case RecordStateCurrentDeleting:
		*s = RecordStateCurrentDeleting
		return nil
	case RecordStateCurrentDeleted:
		*s = RecordStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type RecordStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *RecordStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *RecordStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *RecordStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *RecordStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// DNS record types the platform supports.
// Ref: #/components/schemas/RecordTypes
type RecordTypes struct {
	// A DNS A record.
	A OptRecordTypesA `json:"a"`
	// A DNS AAAA record.
	Aaaa OptRecordTypesAaaa `json:"aaaa"`
	// A DNS CNAME record.
	Cname OptRecordTypesCname `json:"cname"`
	// A DNS NS record.
	Ns OptRecordTypesNs `json:"ns"`
	// A DNS MX record.
	Mx OptRecordTypesMx `json:"mx"`
	// A DNS TXT record.
	Txt OptRecordTypesTxt `json:"txt"`
	// A DNS ALIAS record.
	Alias OptRecordTypesAlias `json:"alias"`
	// A DNS SRV record.
	Srv OptRecordTypesSrv `json:"srv"`
	// A DNS CAA record.
	Caa OptRecordTypesCaa `json:"caa"`
	// A Linked record is a record special to Cycle.  It represents a url that points to a specific
	// container, however the IP address mapping in handled automatically by the platform.
	Linked OptRecordTypesLinked `json:"linked"`
}

// GetA returns the value of A.
func (s *RecordTypes) GetA() OptRecordTypesA {
	return s.A
}

// GetAaaa returns the value of Aaaa.
func (s *RecordTypes) GetAaaa() OptRecordTypesAaaa {
	return s.Aaaa
}

// GetCname returns the value of Cname.
func (s *RecordTypes) GetCname() OptRecordTypesCname {
	return s.Cname
}

// GetNs returns the value of Ns.
func (s *RecordTypes) GetNs() OptRecordTypesNs {
	return s.Ns
}

// GetMx returns the value of Mx.
func (s *RecordTypes) GetMx() OptRecordTypesMx {
	return s.Mx
}

// GetTxt returns the value of Txt.
func (s *RecordTypes) GetTxt() OptRecordTypesTxt {
	return s.Txt
}

// GetAlias returns the value of Alias.
func (s *RecordTypes) GetAlias() OptRecordTypesAlias {
	return s.Alias
}

// GetSrv returns the value of Srv.
func (s *RecordTypes) GetSrv() OptRecordTypesSrv {
	return s.Srv
}

// GetCaa returns the value of Caa.
func (s *RecordTypes) GetCaa() OptRecordTypesCaa {
	return s.Caa
}

// GetLinked returns the value of Linked.
func (s *RecordTypes) GetLinked() OptRecordTypesLinked {
	return s.Linked
}

// SetA sets the value of A.
func (s *RecordTypes) SetA(val OptRecordTypesA) {
	s.A = val
}

// SetAaaa sets the value of Aaaa.
func (s *RecordTypes) SetAaaa(val OptRecordTypesAaaa) {
	s.Aaaa = val
}

// SetCname sets the value of Cname.
func (s *RecordTypes) SetCname(val OptRecordTypesCname) {
	s.Cname = val
}

// SetNs sets the value of Ns.
func (s *RecordTypes) SetNs(val OptRecordTypesNs) {
	s.Ns = val
}

// SetMx sets the value of Mx.
func (s *RecordTypes) SetMx(val OptRecordTypesMx) {
	s.Mx = val
}

// SetTxt sets the value of Txt.
func (s *RecordTypes) SetTxt(val OptRecordTypesTxt) {
	s.Txt = val
}

// SetAlias sets the value of Alias.
func (s *RecordTypes) SetAlias(val OptRecordTypesAlias) {
	s.Alias = val
}

// SetSrv sets the value of Srv.
func (s *RecordTypes) SetSrv(val OptRecordTypesSrv) {
	s.Srv = val
}

// SetCaa sets the value of Caa.
func (s *RecordTypes) SetCaa(val OptRecordTypesCaa) {
	s.Caa = val
}

// SetLinked sets the value of Linked.
func (s *RecordTypes) SetLinked(val OptRecordTypesLinked) {
	s.Linked = val
}

// A DNS A record.
type RecordTypesA struct {
	// The IPv4 address that the A record should map to.
	IP string `json:"ip"`
}

// GetIP returns the value of IP.
func (s *RecordTypesA) GetIP() string {
	return s.IP
}

// SetIP sets the value of IP.
func (s *RecordTypesA) SetIP(val string) {
	s.IP = val
}

// A DNS AAAA record.
type RecordTypesAaaa struct {
	// The IPv6 address that the AAAA record should map to.
	IP string `json:"ip"`
}

// GetIP returns the value of IP.
func (s *RecordTypesAaaa) GetIP() string {
	return s.IP
}

// SetIP sets the value of IP.
func (s *RecordTypesAaaa) SetIP(val string) {
	s.IP = val
}

// A DNS ALIAS record.
type RecordTypesAlias struct {
	// The domain string returned from the DNS server when this alias record is requested.
	Domain string `json:"domain"`
}

// GetDomain returns the value of Domain.
func (s *RecordTypesAlias) GetDomain() string {
	return s.Domain
}

// SetDomain sets the value of Domain.
func (s *RecordTypesAlias) SetDomain(val string) {
	s.Domain = val
}

// A DNS CAA record.
type RecordTypesCaa struct {
	// The ASCII string that represents the identifier of the property represented by the record.
	Tag string `json:"tag"`
	// The value associated with the tag.
	Value string `json:"value"`
}

// GetTag returns the value of Tag.
func (s *RecordTypesCaa) GetTag() string {
	return s.Tag
}

// GetValue returns the value of Value.
func (s *RecordTypesCaa) GetValue() string {
	return s.Value
}

// SetTag sets the value of Tag.
func (s *RecordTypesCaa) SetTag(val string) {
	s.Tag = val
}

// SetValue sets the value of Value.
func (s *RecordTypesCaa) SetValue(val string) {
	s.Value = val
}

// A DNS CNAME record.
type RecordTypesCname struct {
	// The domain string the record resolves to.
	Domain string `json:"domain"`
}

// GetDomain returns the value of Domain.
func (s *RecordTypesCname) GetDomain() string {
	return s.Domain
}

// SetDomain sets the value of Domain.
func (s *RecordTypesCname) SetDomain(val string) {
	s.Domain = val
}

// A Linked record is a record special to Cycle.  It represents a url that points to a specific
// container, however the IP address mapping in handled automatically by the platform.
type RecordTypesLinked struct {
	// The ID of the container this record is related to.
	ContainerID OptString `json:"container_id"`
	// Features associated with this record.
	Features RecordTypesLinkedFeatures `json:"features"`
}

// GetContainerID returns the value of ContainerID.
func (s *RecordTypesLinked) GetContainerID() OptString {
	return s.ContainerID
}

// GetFeatures returns the value of Features.
func (s *RecordTypesLinked) GetFeatures() RecordTypesLinkedFeatures {
	return s.Features
}

// SetContainerID sets the value of ContainerID.
func (s *RecordTypesLinked) SetContainerID(val OptString) {
	s.ContainerID = val
}

// SetFeatures sets the value of Features.
func (s *RecordTypesLinked) SetFeatures(val RecordTypesLinkedFeatures) {
	s.Features = val
}

// Features associated with this record.
type RecordTypesLinkedFeatures struct {
	// TLS properties of the record.
	TLS RecordTypesLinkedFeaturesTLS `json:"tls"`
}

// GetTLS returns the value of TLS.
func (s *RecordTypesLinkedFeatures) GetTLS() RecordTypesLinkedFeaturesTLS {
	return s.TLS
}

// SetTLS sets the value of TLS.
func (s *RecordTypesLinkedFeatures) SetTLS(val RecordTypesLinkedFeaturesTLS) {
	s.TLS = val
}

// TLS properties of the record.
type RecordTypesLinkedFeaturesTLS struct {
	// A boolean, where true represents this record will be paired with a TLS certificate automatically
	// maintained by the platform.
	Enable bool `json:"enable"`
}

// GetEnable returns the value of Enable.
func (s *RecordTypesLinkedFeaturesTLS) GetEnable() bool {
	return s.Enable
}

// SetEnable sets the value of Enable.
func (s *RecordTypesLinkedFeaturesTLS) SetEnable(val bool) {
	s.Enable = val
}

// A DNS MX record.
type RecordTypesMx struct {
	// The priority setting for this mx record.
	Priority string `json:"priority"`
	// The domain this mx record points to.
	Domain string `json:"domain"`
}

// GetPriority returns the value of Priority.
func (s *RecordTypesMx) GetPriority() string {
	return s.Priority
}

// GetDomain returns the value of Domain.
func (s *RecordTypesMx) GetDomain() string {
	return s.Domain
}

// SetPriority sets the value of Priority.
func (s *RecordTypesMx) SetPriority(val string) {
	s.Priority = val
}

// SetDomain sets the value of Domain.
func (s *RecordTypesMx) SetDomain(val string) {
	s.Domain = val
}

// A DNS NS record.
type RecordTypesNs struct {
	// The domain of the nameserver for this record.
	Domain string `json:"domain"`
}

// GetDomain returns the value of Domain.
func (s *RecordTypesNs) GetDomain() string {
	return s.Domain
}

// SetDomain sets the value of Domain.
func (s *RecordTypesNs) SetDomain(val string) {
	s.Domain = val
}

// A DNS SRV record.
type RecordTypesSrv struct {
	// Teh weight configured for this record - breaks ties for priority.
	Weight int `json:"weight"`
	// The priority for the record.
	Priority int `json:"priority"`
	// The port number for the service.
	Port int `json:"port"`
	// The domain for the record.
	Domain string `json:"domain"`
}

// GetWeight returns the value of Weight.
func (s *RecordTypesSrv) GetWeight() int {
	return s.Weight
}

// GetPriority returns the value of Priority.
func (s *RecordTypesSrv) GetPriority() int {
	return s.Priority
}

// GetPort returns the value of Port.
func (s *RecordTypesSrv) GetPort() int {
	return s.Port
}

// GetDomain returns the value of Domain.
func (s *RecordTypesSrv) GetDomain() string {
	return s.Domain
}

// SetWeight sets the value of Weight.
func (s *RecordTypesSrv) SetWeight(val int) {
	s.Weight = val
}

// SetPriority sets the value of Priority.
func (s *RecordTypesSrv) SetPriority(val int) {
	s.Priority = val
}

// SetPort sets the value of Port.
func (s *RecordTypesSrv) SetPort(val int) {
	s.Port = val
}

// SetDomain sets the value of Domain.
func (s *RecordTypesSrv) SetDomain(val string) {
	s.Domain = val
}

// A DNS TXT record.
type RecordTypesTxt struct {
	// The value for this TXT record.
	Value string `json:"value"`
}

// GetValue returns the value of Value.
func (s *RecordTypesTxt) GetValue() string {
	return s.Value
}

// SetValue sets the value of Value.
func (s *RecordTypesTxt) SetValue(val string) {
	s.Value = val
}

// A billing refund.
// Ref: #/components/schemas/Refund
type Refund struct {
	ID ID `json:"id"`
	// A timestamp for the payment.
	Time DateTime `json:"time"`
	// Some information about the payment refund.
	Description string `json:"description"`
	// 1/10th of a cent.
	Amount  int            `json:"amount"`
	Gateway PaymentGateway `json:"gateway"`
}

// GetID returns the value of ID.
func (s *Refund) GetID() ID {
	return s.ID
}

// GetTime returns the value of Time.
func (s *Refund) GetTime() DateTime {
	return s.Time
}

// GetDescription returns the value of Description.
func (s *Refund) GetDescription() string {
	return s.Description
}

// GetAmount returns the value of Amount.
func (s *Refund) GetAmount() int {
	return s.Amount
}

// GetGateway returns the value of Gateway.
func (s *Refund) GetGateway() PaymentGateway {
	return s.Gateway
}

// SetID sets the value of ID.
func (s *Refund) SetID(val ID) {
	s.ID = val
}

// SetTime sets the value of Time.
func (s *Refund) SetTime(val DateTime) {
	s.Time = val
}

// SetDescription sets the value of Description.
func (s *Refund) SetDescription(val string) {
	s.Description = val
}

// SetAmount sets the value of Amount.
func (s *Refund) SetAmount(val int) {
	s.Amount = val
}

// SetGateway sets the value of Gateway.
func (s *Refund) SetGateway(val PaymentGateway) {
	s.Gateway = val
}

type RemoveAccountOK struct {
	Data OptAccount `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveAccountOK) GetData() OptAccount {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveAccountOK) SetData(val OptAccount) {
	s.Data = val
}

type RemoveApiKeyOK struct {
	Data OptApiKey `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveApiKeyOK) GetData() OptApiKey {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveApiKeyOK) SetData(val OptApiKey) {
	s.Data = val
}

type RemoveBackupAccepted struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveBackupAccepted) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveBackupAccepted) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RemoveBillingMethodOK struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveBillingMethodOK) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveBillingMethodOK) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RemoveContainerInstanceOK struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveContainerInstanceOK) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveContainerInstanceOK) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RemoveContainerOK struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveContainerOK) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveContainerOK) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RemoveDNSRecordOK struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveDNSRecordOK) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveDNSRecordOK) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RemoveDNSZoneOK struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveDNSZoneOK) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveDNSZoneOK) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RemoveEnvironmentAccepted struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveEnvironmentAccepted) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveEnvironmentAccepted) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RemoveHubAccepted struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveHubAccepted) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveHubAccepted) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RemoveHubInviteOK struct {
	Data OptHubMembership `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveHubInviteOK) GetData() OptHubMembership {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveHubInviteOK) SetData(val OptHubMembership) {
	s.Data = val
}

type RemoveHubMemberAccepted struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveHubMemberAccepted) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveHubMemberAccepted) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RemoveImageOK struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveImageOK) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveImageOK) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RemoveImageSourceAccepted struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveImageSourceAccepted) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveImageSourceAccepted) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RemoveIpPoolAccepted struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveIpPoolAccepted) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveIpPoolAccepted) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RemoveMultipleContainerInstancesOK struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveMultipleContainerInstancesOK) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveMultipleContainerInstancesOK) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RemovePipelineOK struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RemovePipelineOK) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemovePipelineOK) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RemovePipelineTriggerKeyOK struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RemovePipelineTriggerKeyOK) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemovePipelineTriggerKeyOK) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RemoveProviderAccepted struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveProviderAccepted) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveProviderAccepted) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RemoveSDNNetworkOK struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveSDNNetworkOK) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveSDNNetworkOK) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RemoveScopedVariableByIdAccepted struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveScopedVariableByIdAccepted) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveScopedVariableByIdAccepted) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RemoveServerOK struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveServerOK) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveServerOK) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RemoveServerOptions map[string]RemoveServerOptionsItem

func (s *RemoveServerOptions) init() RemoveServerOptions {
	m := *s
	if m == nil {
		m = map[string]RemoveServerOptionsItem{}
		*s = m
	}
	return m
}

// RemoveServerOptionsItem represents sum type.
type RemoveServerOptionsItem struct {
	Type   RemoveServerOptionsItemType // switch on this field
	String string
}

// RemoveServerOptionsItemType is oneOf type of RemoveServerOptionsItem.
type RemoveServerOptionsItemType string

// Possible values for RemoveServerOptionsItemType.
const (
	StringRemoveServerOptionsItem RemoveServerOptionsItemType = "string"
)

// IsString reports whether RemoveServerOptionsItem is string.
func (s RemoveServerOptionsItem) IsString() bool { return s.Type == StringRemoveServerOptionsItem }

// SetString sets RemoveServerOptionsItem to string.
func (s *RemoveServerOptionsItem) SetString(v string) {
	s.Type = StringRemoveServerOptionsItem
	s.String = v
}

// GetString returns string and true boolean if RemoveServerOptionsItem is string.
func (s RemoveServerOptionsItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringRemoveServerOptionsItem returns new RemoveServerOptionsItem from string.
func NewStringRemoveServerOptionsItem(v string) RemoveServerOptionsItem {
	var s RemoveServerOptionsItem
	s.SetString(v)
	return s
}

type RemoveStackBuildOK struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveStackBuildOK) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveStackBuildOK) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RemoveStackOK struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveStackOK) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveStackOK) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RemoveVPNUserOK struct {
	Data OptString `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveVPNUserOK) GetData() OptString {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveVPNUserOK) SetData(val OptString) {
	s.Data = val
}

type ResetPasswordOK struct {
	Data OptAccount `json:"data"`
}

// GetData returns the value of Data.
func (s *ResetPasswordOK) GetData() OptAccount {
	return s.Data
}

// SetData sets the value of Data.
func (s *ResetPasswordOK) SetData(val OptAccount) {
	s.Data = val
}

type ResetPasswordReq struct {
	// Current Password.
	Current OptString `json:"current"`
	// New Password.
	New OptString `json:"new"`
}

// GetCurrent returns the value of Current.
func (s *ResetPasswordReq) GetCurrent() OptString {
	return s.Current
}

// GetNew returns the value of New.
func (s *ResetPasswordReq) GetNew() OptString {
	return s.New
}

// SetCurrent sets the value of Current.
func (s *ResetPasswordReq) SetCurrent(val OptString) {
	s.Current = val
}

// SetNew sets the value of New.
func (s *ResetPasswordReq) SetNew(val OptString) {
	s.New = val
}

// A resource snapshot that shows instance telemetry.
// Ref: #/components/schemas/ResourceSnapshot
type ResourceSnapshot struct {
	// A timestamp of the time this snapshot was captured at.
	Time  DateTime `json:"time"`
	HubID OptHubID `json:"hub_id"`
	// An ID for an associated container.
	ContainerID OptString `json:"container_id"`
	// An ID for an associated instance.
	InstanceID OptString `json:"instance_id"`
	// An ID for an associated environment.
	EnvironmentID OptString         `json:"environment_id"`
	CPU           CPUSnapshot       `json:"cpu"`
	Memory        MemorySnapshot    `json:"memory"`
	Processes     ProcessesSnapshot `json:"processes"`
	Hugetlb       OptHugeTLB        `json:"hugetlb"`
}

// GetTime returns the value of Time.
func (s *ResourceSnapshot) GetTime() DateTime {
	return s.Time
}

// GetHubID returns the value of HubID.
func (s *ResourceSnapshot) GetHubID() OptHubID {
	return s.HubID
}

// GetContainerID returns the value of ContainerID.
func (s *ResourceSnapshot) GetContainerID() OptString {
	return s.ContainerID
}

// GetInstanceID returns the value of InstanceID.
func (s *ResourceSnapshot) GetInstanceID() OptString {
	return s.InstanceID
}

// GetEnvironmentID returns the value of EnvironmentID.
func (s *ResourceSnapshot) GetEnvironmentID() OptString {
	return s.EnvironmentID
}

// GetCPU returns the value of CPU.
func (s *ResourceSnapshot) GetCPU() CPUSnapshot {
	return s.CPU
}

// GetMemory returns the value of Memory.
func (s *ResourceSnapshot) GetMemory() MemorySnapshot {
	return s.Memory
}

// GetProcesses returns the value of Processes.
func (s *ResourceSnapshot) GetProcesses() ProcessesSnapshot {
	return s.Processes
}

// GetHugetlb returns the value of Hugetlb.
func (s *ResourceSnapshot) GetHugetlb() OptHugeTLB {
	return s.Hugetlb
}

// SetTime sets the value of Time.
func (s *ResourceSnapshot) SetTime(val DateTime) {
	s.Time = val
}

// SetHubID sets the value of HubID.
func (s *ResourceSnapshot) SetHubID(val OptHubID) {
	s.HubID = val
}

// SetContainerID sets the value of ContainerID.
func (s *ResourceSnapshot) SetContainerID(val OptString) {
	s.ContainerID = val
}

// SetInstanceID sets the value of InstanceID.
func (s *ResourceSnapshot) SetInstanceID(val OptString) {
	s.InstanceID = val
}

// SetEnvironmentID sets the value of EnvironmentID.
func (s *ResourceSnapshot) SetEnvironmentID(val OptString) {
	s.EnvironmentID = val
}

// SetCPU sets the value of CPU.
func (s *ResourceSnapshot) SetCPU(val CPUSnapshot) {
	s.CPU = val
}

// SetMemory sets the value of Memory.
func (s *ResourceSnapshot) SetMemory(val MemorySnapshot) {
	s.Memory = val
}

// SetProcesses sets the value of Processes.
func (s *ResourceSnapshot) SetProcesses(val ProcessesSnapshot) {
	s.Processes = val
}

// SetHugetlb sets the value of Hugetlb.
func (s *ResourceSnapshot) SetHugetlb(val OptHugeTLB) {
	s.Hugetlb = val
}

type RestoreBackupJobAccepted struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *RestoreBackupJobAccepted) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *RestoreBackupJobAccepted) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type RestoreBackupJobReq struct {
	// The action to take.
	Action RestoreBackupJobReqAction `json:"action"`
	// Additional information the platform needs to create this job.
	Contents RestoreBackupJobReqContents `json:"contents"`
}

// GetAction returns the value of Action.
func (s *RestoreBackupJobReq) GetAction() RestoreBackupJobReqAction {
	return s.Action
}

// GetContents returns the value of Contents.
func (s *RestoreBackupJobReq) GetContents() RestoreBackupJobReqContents {
	return s.Contents
}

// SetAction sets the value of Action.
func (s *RestoreBackupJobReq) SetAction(val RestoreBackupJobReqAction) {
	s.Action = val
}

// SetContents sets the value of Contents.
func (s *RestoreBackupJobReq) SetContents(val RestoreBackupJobReqContents) {
	s.Contents = val
}

// The action to take.
type RestoreBackupJobReqAction string

const (
	RestoreBackupJobReqActionRestore RestoreBackupJobReqAction = "restore"
)

// MarshalText implements encoding.TextMarshaler.
func (s RestoreBackupJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case RestoreBackupJobReqActionRestore:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RestoreBackupJobReqAction) UnmarshalText(data []byte) error {
	switch RestoreBackupJobReqAction(data) {
	case RestoreBackupJobReqActionRestore:
		*s = RestoreBackupJobReqActionRestore
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Additional information the platform needs to create this job.
type RestoreBackupJobReqContents struct {
	// The ID of the instance this backup is being restored to.
	InstanceID string `json:"instance_id"`
}

// GetInstanceID returns the value of InstanceID.
func (s *RestoreBackupJobReqContents) GetInstanceID() string {
	return s.InstanceID
}

// SetInstanceID sets the value of InstanceID.
func (s *RestoreBackupJobReqContents) SetInstanceID(val string) {
	s.InstanceID = val
}

// Ref: #/components/schemas/RevertMigration
type RevertMigration struct {
	// The name of the action to perform.
	Action RevertMigrationAction `json:"action"`
}

// GetAction returns the value of Action.
func (s *RevertMigration) GetAction() RevertMigrationAction {
	return s.Action
}

// SetAction sets the value of Action.
func (s *RevertMigration) SetAction(val RevertMigrationAction) {
	s.Action = val
}

// The name of the action to perform.
type RevertMigrationAction string

const (
	RevertMigrationActionMigrateRevert RevertMigrationAction = "migrate_revert"
)

// MarshalText implements encoding.TextMarshaler.
func (s RevertMigrationAction) MarshalText() ([]byte, error) {
	switch s {
	case RevertMigrationActionMigrateRevert:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RevertMigrationAction) UnmarshalText(data []byte) error {
	switch RevertMigrationAction(data) {
	case RevertMigrationActionMigrateRevert:
		*s = RevertMigrationActionMigrateRevert
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A pipeline run resource.
// Ref: #/components/schemas/Run
type Run struct {
	ID      ID           `json:"id"`
	Creator CreatorScope `json:"creator"`
	HubID   HubID        `json:"hub_id"`
	// The ID for the pipeline this run belongs to.
	PipelineID string `json:"pipeline_id"`
	// An array of pipeline stages.
	Stages []RunStagesItem   `json:"stages"`
	State  RunState          `json:"state"`
	Events PipelineRunEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *Run) GetID() ID {
	return s.ID
}

// GetCreator returns the value of Creator.
func (s *Run) GetCreator() CreatorScope {
	return s.Creator
}

// GetHubID returns the value of HubID.
func (s *Run) GetHubID() HubID {
	return s.HubID
}

// GetPipelineID returns the value of PipelineID.
func (s *Run) GetPipelineID() string {
	return s.PipelineID
}

// GetStages returns the value of Stages.
func (s *Run) GetStages() []RunStagesItem {
	return s.Stages
}

// GetState returns the value of State.
func (s *Run) GetState() RunState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *Run) GetEvents() PipelineRunEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *Run) SetID(val ID) {
	s.ID = val
}

// SetCreator sets the value of Creator.
func (s *Run) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetHubID sets the value of HubID.
func (s *Run) SetHubID(val HubID) {
	s.HubID = val
}

// SetPipelineID sets the value of PipelineID.
func (s *Run) SetPipelineID(val string) {
	s.PipelineID = val
}

// SetStages sets the value of Stages.
func (s *Run) SetStages(val []RunStagesItem) {
	s.Stages = val
}

// SetState sets the value of State.
func (s *Run) SetState(val RunState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *Run) SetEvents(val PipelineRunEvents) {
	s.Events = val
}

type RunStagesItem struct {
	// A stage identifier.
	Identifier string                   `json:"identifier"`
	Steps      []RunStagesItemStepsItem `json:"steps"`
	Events     PipelineRunEvents        `json:"events"`
}

// GetIdentifier returns the value of Identifier.
func (s *RunStagesItem) GetIdentifier() string {
	return s.Identifier
}

// GetSteps returns the value of Steps.
func (s *RunStagesItem) GetSteps() []RunStagesItemStepsItem {
	return s.Steps
}

// GetEvents returns the value of Events.
func (s *RunStagesItem) GetEvents() PipelineRunEvents {
	return s.Events
}

// SetIdentifier sets the value of Identifier.
func (s *RunStagesItem) SetIdentifier(val string) {
	s.Identifier = val
}

// SetSteps sets the value of Steps.
func (s *RunStagesItem) SetSteps(val []RunStagesItemStepsItem) {
	s.Steps = val
}

// SetEvents sets the value of Events.
func (s *RunStagesItem) SetEvents(val PipelineRunEvents) {
	s.Events = val
}

type RunStagesItemStepsItem struct {
	Identifier string                       `json:"identifier"`
	Action     RunStagesItemStepsItemAction `json:"action"`
	Events     PipelineRunEvents            `json:"events"`
	Success    bool                         `json:"success"`
}

// GetIdentifier returns the value of Identifier.
func (s *RunStagesItemStepsItem) GetIdentifier() string {
	return s.Identifier
}

// GetAction returns the value of Action.
func (s *RunStagesItemStepsItem) GetAction() RunStagesItemStepsItemAction {
	return s.Action
}

// GetEvents returns the value of Events.
func (s *RunStagesItemStepsItem) GetEvents() PipelineRunEvents {
	return s.Events
}

// GetSuccess returns the value of Success.
func (s *RunStagesItemStepsItem) GetSuccess() bool {
	return s.Success
}

// SetIdentifier sets the value of Identifier.
func (s *RunStagesItemStepsItem) SetIdentifier(val string) {
	s.Identifier = val
}

// SetAction sets the value of Action.
func (s *RunStagesItemStepsItem) SetAction(val RunStagesItemStepsItemAction) {
	s.Action = val
}

// SetEvents sets the value of Events.
func (s *RunStagesItemStepsItem) SetEvents(val PipelineRunEvents) {
	s.Events = val
}

// SetSuccess sets the value of Success.
func (s *RunStagesItemStepsItem) SetSuccess(val bool) {
	s.Success = val
}

type RunStagesItemStepsItemAction string

const (
	RunStagesItemStepsItemActionEnvironmentCreate  RunStagesItemStepsItemAction = "environment.create"
	RunStagesItemStepsItemActionEnvironmentStart   RunStagesItemStepsItemAction = "environment.start"
	RunStagesItemStepsItemActionEnvironmentStop    RunStagesItemStepsItemAction = "environment.stop"
	RunStagesItemStepsItemActionEnvironmentDelete  RunStagesItemStepsItemAction = "environment.delete"
	RunStagesItemStepsItemActionImageSourceCreate  RunStagesItemStepsItemAction = "image.source.create"
	RunStagesItemStepsItemActionImageCreate        RunStagesItemStepsItemAction = "image.create"
	RunStagesItemStepsItemActionImageImport        RunStagesItemStepsItemAction = "image.import"
	RunStagesItemStepsItemActionImagesPrune        RunStagesItemStepsItemAction = "images.prune"
	RunStagesItemStepsItemActionContainerCreate    RunStagesItemStepsItemAction = "container.create"
	RunStagesItemStepsItemActionContainerReimage   RunStagesItemStepsItemAction = "container.reimage"
	RunStagesItemStepsItemActionContainerStart     RunStagesItemStepsItemAction = "container.start"
	RunStagesItemStepsItemActionContainerStop      RunStagesItemStepsItemAction = "container.stop"
	RunStagesItemStepsItemActionContainerRestart   RunStagesItemStepsItemAction = "container.restart"
	RunStagesItemStepsItemActionContainerDelete    RunStagesItemStepsItemAction = "container.delete"
	RunStagesItemStepsItemActionStackBuildCreate   RunStagesItemStepsItemAction = "stack.build.create"
	RunStagesItemStepsItemActionStackBuildDeploy   RunStagesItemStepsItemAction = "stack.build.deploy"
	RunStagesItemStepsItemActionStackBuildGenerate RunStagesItemStepsItemAction = "stack.build.generate"
	RunStagesItemStepsItemActionSleep              RunStagesItemStepsItemAction = "sleep"
	RunStagesItemStepsItemActionWebhookPost        RunStagesItemStepsItemAction = "webhook.post"
)

// MarshalText implements encoding.TextMarshaler.
func (s RunStagesItemStepsItemAction) MarshalText() ([]byte, error) {
	switch s {
	case RunStagesItemStepsItemActionEnvironmentCreate:
		return []byte(s), nil
	case RunStagesItemStepsItemActionEnvironmentStart:
		return []byte(s), nil
	case RunStagesItemStepsItemActionEnvironmentStop:
		return []byte(s), nil
	case RunStagesItemStepsItemActionEnvironmentDelete:
		return []byte(s), nil
	case RunStagesItemStepsItemActionImageSourceCreate:
		return []byte(s), nil
	case RunStagesItemStepsItemActionImageCreate:
		return []byte(s), nil
	case RunStagesItemStepsItemActionImageImport:
		return []byte(s), nil
	case RunStagesItemStepsItemActionImagesPrune:
		return []byte(s), nil
	case RunStagesItemStepsItemActionContainerCreate:
		return []byte(s), nil
	case RunStagesItemStepsItemActionContainerReimage:
		return []byte(s), nil
	case RunStagesItemStepsItemActionContainerStart:
		return []byte(s), nil
	case RunStagesItemStepsItemActionContainerStop:
		return []byte(s), nil
	case RunStagesItemStepsItemActionContainerRestart:
		return []byte(s), nil
	case RunStagesItemStepsItemActionContainerDelete:
		return []byte(s), nil
	case RunStagesItemStepsItemActionStackBuildCreate:
		return []byte(s), nil
	case RunStagesItemStepsItemActionStackBuildDeploy:
		return []byte(s), nil
	case RunStagesItemStepsItemActionStackBuildGenerate:
		return []byte(s), nil
	case RunStagesItemStepsItemActionSleep:
		return []byte(s), nil
	case RunStagesItemStepsItemActionWebhookPost:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunStagesItemStepsItemAction) UnmarshalText(data []byte) error {
	switch RunStagesItemStepsItemAction(data) {
	case RunStagesItemStepsItemActionEnvironmentCreate:
		*s = RunStagesItemStepsItemActionEnvironmentCreate
		return nil
	case RunStagesItemStepsItemActionEnvironmentStart:
		*s = RunStagesItemStepsItemActionEnvironmentStart
		return nil
	case RunStagesItemStepsItemActionEnvironmentStop:
		*s = RunStagesItemStepsItemActionEnvironmentStop
		return nil
	case RunStagesItemStepsItemActionEnvironmentDelete:
		*s = RunStagesItemStepsItemActionEnvironmentDelete
		return nil
	case RunStagesItemStepsItemActionImageSourceCreate:
		*s = RunStagesItemStepsItemActionImageSourceCreate
		return nil
	case RunStagesItemStepsItemActionImageCreate:
		*s = RunStagesItemStepsItemActionImageCreate
		return nil
	case RunStagesItemStepsItemActionImageImport:
		*s = RunStagesItemStepsItemActionImageImport
		return nil
	case RunStagesItemStepsItemActionImagesPrune:
		*s = RunStagesItemStepsItemActionImagesPrune
		return nil
	case RunStagesItemStepsItemActionContainerCreate:
		*s = RunStagesItemStepsItemActionContainerCreate
		return nil
	case RunStagesItemStepsItemActionContainerReimage:
		*s = RunStagesItemStepsItemActionContainerReimage
		return nil
	case RunStagesItemStepsItemActionContainerStart:
		*s = RunStagesItemStepsItemActionContainerStart
		return nil
	case RunStagesItemStepsItemActionContainerStop:
		*s = RunStagesItemStepsItemActionContainerStop
		return nil
	case RunStagesItemStepsItemActionContainerRestart:
		*s = RunStagesItemStepsItemActionContainerRestart
		return nil
	case RunStagesItemStepsItemActionContainerDelete:
		*s = RunStagesItemStepsItemActionContainerDelete
		return nil
	case RunStagesItemStepsItemActionStackBuildCreate:
		*s = RunStagesItemStepsItemActionStackBuildCreate
		return nil
	case RunStagesItemStepsItemActionStackBuildDeploy:
		*s = RunStagesItemStepsItemActionStackBuildDeploy
		return nil
	case RunStagesItemStepsItemActionStackBuildGenerate:
		*s = RunStagesItemStepsItemActionStackBuildGenerate
		return nil
	case RunStagesItemStepsItemActionSleep:
		*s = RunStagesItemStepsItemActionSleep
		return nil
	case RunStagesItemStepsItemActionWebhookPost:
		*s = RunStagesItemStepsItemActionWebhookPost
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/RunState
type RunState struct {
	// The current state of the pipeline run.
	Current RunStateCurrent `json:"current"`
	Changed DateTime        `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptRunStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *RunState) GetCurrent() RunStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *RunState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *RunState) GetError() OptRunStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *RunState) SetCurrent(val RunStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *RunState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *RunState) SetError(val OptRunStateError) {
	s.Error = val
}

// The current state of the pipeline run.
type RunStateCurrent string

const (
	RunStateCurrentNew      RunStateCurrent = "new"
	RunStateCurrentQueued   RunStateCurrent = "queued"
	RunStateCurrentRunning  RunStateCurrent = "running"
	RunStateCurrentDeleting RunStateCurrent = "deleting"
	RunStateCurrentDeleted  RunStateCurrent = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s RunStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case RunStateCurrentNew:
		return []byte(s), nil
	case RunStateCurrentQueued:
		return []byte(s), nil
	case RunStateCurrentRunning:
		return []byte(s), nil
	case RunStateCurrentDeleting:
		return []byte(s), nil
	case RunStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunStateCurrent) UnmarshalText(data []byte) error {
	switch RunStateCurrent(data) {
	case RunStateCurrentNew:
		*s = RunStateCurrentNew
		return nil
	case RunStateCurrentQueued:
		*s = RunStateCurrentQueued
		return nil
	case RunStateCurrentRunning:
		*s = RunStateCurrentRunning
		return nil
	case RunStateCurrentDeleting:
		*s = RunStateCurrentDeleting
		return nil
	case RunStateCurrentDeleted:
		*s = RunStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type RunStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *RunStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *RunStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *RunStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *RunStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// SDN Network resource.
// Ref: #/components/schemas/SDNNetwork
type SDNNetwork struct {
	ID ID `json:"id"`
	// The name of the network.
	Name string `json:"name"`
	// A network identifier used to construct http calls that specifically use this network over another.
	Identifier string `json:"identifier"`
	// The infrastructure cluster the environments belonging to this network belong to.
	Cluster        string            `json:"cluster"`
	Creator        CreatorScope      `json:"creator"`
	HubID          HubID             `json:"hub_id"`
	State          NetworkState      `json:"state"`
	PrivateNetwork SDNPrivateNetwork `json:"private_network"`
	// An array of environments and timestamps.
	Environments []SDNNetworkEnvironmentsItem `json:"environments"`
	// A collection of timestamps for each event in the image's lifetime.
	Events SDNNetworkEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *SDNNetwork) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *SDNNetwork) GetName() string {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *SDNNetwork) GetIdentifier() string {
	return s.Identifier
}

// GetCluster returns the value of Cluster.
func (s *SDNNetwork) GetCluster() string {
	return s.Cluster
}

// GetCreator returns the value of Creator.
func (s *SDNNetwork) GetCreator() CreatorScope {
	return s.Creator
}

// GetHubID returns the value of HubID.
func (s *SDNNetwork) GetHubID() HubID {
	return s.HubID
}

// GetState returns the value of State.
func (s *SDNNetwork) GetState() NetworkState {
	return s.State
}

// GetPrivateNetwork returns the value of PrivateNetwork.
func (s *SDNNetwork) GetPrivateNetwork() SDNPrivateNetwork {
	return s.PrivateNetwork
}

// GetEnvironments returns the value of Environments.
func (s *SDNNetwork) GetEnvironments() []SDNNetworkEnvironmentsItem {
	return s.Environments
}

// GetEvents returns the value of Events.
func (s *SDNNetwork) GetEvents() SDNNetworkEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *SDNNetwork) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *SDNNetwork) SetName(val string) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *SDNNetwork) SetIdentifier(val string) {
	s.Identifier = val
}

// SetCluster sets the value of Cluster.
func (s *SDNNetwork) SetCluster(val string) {
	s.Cluster = val
}

// SetCreator sets the value of Creator.
func (s *SDNNetwork) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetHubID sets the value of HubID.
func (s *SDNNetwork) SetHubID(val HubID) {
	s.HubID = val
}

// SetState sets the value of State.
func (s *SDNNetwork) SetState(val NetworkState) {
	s.State = val
}

// SetPrivateNetwork sets the value of PrivateNetwork.
func (s *SDNNetwork) SetPrivateNetwork(val SDNPrivateNetwork) {
	s.PrivateNetwork = val
}

// SetEnvironments sets the value of Environments.
func (s *SDNNetwork) SetEnvironments(val []SDNNetworkEnvironmentsItem) {
	s.Environments = val
}

// SetEvents sets the value of Events.
func (s *SDNNetwork) SetEvents(val SDNNetworkEvents) {
	s.Events = val
}

type SDNNetworkEnvironmentsItem struct {
	ID ID `json:"id"`
	// A timestamp of when the environment was added.
	Added DateTime `json:"added"`
}

// GetID returns the value of ID.
func (s *SDNNetworkEnvironmentsItem) GetID() ID {
	return s.ID
}

// GetAdded returns the value of Added.
func (s *SDNNetworkEnvironmentsItem) GetAdded() DateTime {
	return s.Added
}

// SetID sets the value of ID.
func (s *SDNNetworkEnvironmentsItem) SetID(val ID) {
	s.ID = val
}

// SetAdded sets the value of Added.
func (s *SDNNetworkEnvironmentsItem) SetAdded(val DateTime) {
	s.Added = val
}

// A collection of timestamps for each event in the image's lifetime.
type SDNNetworkEvents struct {
	// The timestamp of when the image was created.
	Created DateTime `json:"created"`
	// The timestamp of when the image was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the image was deleted.
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *SDNNetworkEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *SDNNetworkEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *SDNNetworkEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *SDNNetworkEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *SDNNetworkEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *SDNNetworkEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// Private network information for a Cycle SDN.
// Ref: #/components/schemas/SDNPrivateNetwork
type SDNPrivateNetwork struct {
	// A tag used to ensure proper routing.
	VxlanTag int `json:"vxlan_tag"`
	// The subnet of the private network.
	Subnet string `json:"subnet"`
	// A number used to ensure a MAC address exists for each network.
	MACAddrSuffix int `json:"mac_addr_suffix"`
	// IPv6 infromation for the network.
	Ipv6 SDNPrivateNetworkIpv6 `json:"ipv6"`
}

// GetVxlanTag returns the value of VxlanTag.
func (s *SDNPrivateNetwork) GetVxlanTag() int {
	return s.VxlanTag
}

// GetSubnet returns the value of Subnet.
func (s *SDNPrivateNetwork) GetSubnet() string {
	return s.Subnet
}

// GetMACAddrSuffix returns the value of MACAddrSuffix.
func (s *SDNPrivateNetwork) GetMACAddrSuffix() int {
	return s.MACAddrSuffix
}

// GetIpv6 returns the value of Ipv6.
func (s *SDNPrivateNetwork) GetIpv6() SDNPrivateNetworkIpv6 {
	return s.Ipv6
}

// SetVxlanTag sets the value of VxlanTag.
func (s *SDNPrivateNetwork) SetVxlanTag(val int) {
	s.VxlanTag = val
}

// SetSubnet sets the value of Subnet.
func (s *SDNPrivateNetwork) SetSubnet(val string) {
	s.Subnet = val
}

// SetMACAddrSuffix sets the value of MACAddrSuffix.
func (s *SDNPrivateNetwork) SetMACAddrSuffix(val int) {
	s.MACAddrSuffix = val
}

// SetIpv6 sets the value of Ipv6.
func (s *SDNPrivateNetwork) SetIpv6(val SDNPrivateNetworkIpv6) {
	s.Ipv6 = val
}

// IPv6 infromation for the network.
type SDNPrivateNetworkIpv6 struct {
	// The networks IPv6 base.
	IP string `json:"ip"`
	// The private network CIDR.
	Cidr string `json:"cidr"`
}

// GetIP returns the value of IP.
func (s *SDNPrivateNetworkIpv6) GetIP() string {
	return s.IP
}

// GetCidr returns the value of Cidr.
func (s *SDNPrivateNetworkIpv6) GetCidr() string {
	return s.Cidr
}

// SetIP sets the value of IP.
func (s *SDNPrivateNetworkIpv6) SetIP(val string) {
	s.IP = val
}

// SetCidr sets the value of Cidr.
func (s *SDNPrivateNetworkIpv6) SetCidr(val string) {
	s.Cidr = val
}

// Information about connecting to a instance volume over SFTP.
// Ref: #/components/schemas/SFTP
type SFTP struct {
	// The hostname for connecting to the volume over SFTP.
	Host string `json:"host"`
	// The port number to use when connecting.
	Port float64 `json:"port"`
	// The username to use when connecting.
	Username string `json:"username"`
	// Password configuration settings for the remote access of the container volume.
	Password SFTPPassword `json:"password"`
}

// GetHost returns the value of Host.
func (s *SFTP) GetHost() string {
	return s.Host
}

// GetPort returns the value of Port.
func (s *SFTP) GetPort() float64 {
	return s.Port
}

// GetUsername returns the value of Username.
func (s *SFTP) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *SFTP) GetPassword() SFTPPassword {
	return s.Password
}

// SetHost sets the value of Host.
func (s *SFTP) SetHost(val string) {
	s.Host = val
}

// SetPort sets the value of Port.
func (s *SFTP) SetPort(val float64) {
	s.Port = val
}

// SetUsername sets the value of Username.
func (s *SFTP) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *SFTP) SetPassword(val SFTPPassword) {
	s.Password = val
}

// Password configuration settings for the remote access of the container volume.
type SFTPPassword struct {
	// The hashing algorithm used to has the password.
	Algorithm SFTPPasswordAlgorithm `json:"algorithm"`
	// The raw or hashed password.
	Data string `json:"data"`
}

// GetAlgorithm returns the value of Algorithm.
func (s *SFTPPassword) GetAlgorithm() SFTPPasswordAlgorithm {
	return s.Algorithm
}

// GetData returns the value of Data.
func (s *SFTPPassword) GetData() string {
	return s.Data
}

// SetAlgorithm sets the value of Algorithm.
func (s *SFTPPassword) SetAlgorithm(val SFTPPasswordAlgorithm) {
	s.Algorithm = val
}

// SetData sets the value of Data.
func (s *SFTPPassword) SetData(val string) {
	s.Data = val
}

// The hashing algorithm used to has the password.
type SFTPPasswordAlgorithm string

const (
	SFTPPasswordAlgorithmRaw    SFTPPasswordAlgorithm = "raw"
	SFTPPasswordAlgorithmSha512 SFTPPasswordAlgorithm = "sha512"
	SFTPPasswordAlgorithmMD5    SFTPPasswordAlgorithm = "md5"
)

// MarshalText implements encoding.TextMarshaler.
func (s SFTPPasswordAlgorithm) MarshalText() ([]byte, error) {
	switch s {
	case SFTPPasswordAlgorithmRaw:
		return []byte(s), nil
	case SFTPPasswordAlgorithmSha512:
		return []byte(s), nil
	case SFTPPasswordAlgorithmMD5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SFTPPasswordAlgorithm) UnmarshalText(data []byte) error {
	switch SFTPPasswordAlgorithm(data) {
	case SFTPPasswordAlgorithmRaw:
		*s = SFTPPasswordAlgorithmRaw
		return nil
	case SFTPPasswordAlgorithmSha512:
		*s = SFTPPasswordAlgorithmSha512
		return nil
	case SFTPPasswordAlgorithmMD5:
		*s = SFTPPasswordAlgorithmMD5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// SSH connection information for a given container instance.
// Ref: #/components/schemas/SSHResponse
type SSHResponse struct {
	Token SSHToken `json:"token"`
	// The SSH connection response secret.
	Secret string `json:"secret"`
	// The SSH connection response address.
	Address string `json:"address"`
}

// GetToken returns the value of Token.
func (s *SSHResponse) GetToken() SSHToken {
	return s.Token
}

// GetSecret returns the value of Secret.
func (s *SSHResponse) GetSecret() string {
	return s.Secret
}

// GetAddress returns the value of Address.
func (s *SSHResponse) GetAddress() string {
	return s.Address
}

// SetToken sets the value of Token.
func (s *SSHResponse) SetToken(val SSHToken) {
	s.Token = val
}

// SetSecret sets the value of Secret.
func (s *SSHResponse) SetSecret(val string) {
	s.Secret = val
}

// SetAddress sets the value of Address.
func (s *SSHResponse) SetAddress(val string) {
	s.Address = val
}

// An SSH token resource.
// Ref: #/components/schemas/SSHToken
type SSHToken struct {
	ID ID `json:"id"`
	// The ID of the instance being connected to.
	InstanceID string `json:"instance_id"`
	// The ID of the container from which the instance was created.
	ContainerID string       `json:"container_id"`
	HubID       HubID        `json:"hub_id"`
	Creator     CreatorScope `json:"creator"`
	// A collection of timestamps for each event in the SSH token's lifetime.
	Events SSHTokenEvents `json:"events"`
	// A boolean where true represents the token as being a valid token to be used for connection.
	Valid bool `json:"valid"`
}

// GetID returns the value of ID.
func (s *SSHToken) GetID() ID {
	return s.ID
}

// GetInstanceID returns the value of InstanceID.
func (s *SSHToken) GetInstanceID() string {
	return s.InstanceID
}

// GetContainerID returns the value of ContainerID.
func (s *SSHToken) GetContainerID() string {
	return s.ContainerID
}

// GetHubID returns the value of HubID.
func (s *SSHToken) GetHubID() HubID {
	return s.HubID
}

// GetCreator returns the value of Creator.
func (s *SSHToken) GetCreator() CreatorScope {
	return s.Creator
}

// GetEvents returns the value of Events.
func (s *SSHToken) GetEvents() SSHTokenEvents {
	return s.Events
}

// GetValid returns the value of Valid.
func (s *SSHToken) GetValid() bool {
	return s.Valid
}

// SetID sets the value of ID.
func (s *SSHToken) SetID(val ID) {
	s.ID = val
}

// SetInstanceID sets the value of InstanceID.
func (s *SSHToken) SetInstanceID(val string) {
	s.InstanceID = val
}

// SetContainerID sets the value of ContainerID.
func (s *SSHToken) SetContainerID(val string) {
	s.ContainerID = val
}

// SetHubID sets the value of HubID.
func (s *SSHToken) SetHubID(val HubID) {
	s.HubID = val
}

// SetCreator sets the value of Creator.
func (s *SSHToken) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetEvents sets the value of Events.
func (s *SSHToken) SetEvents(val SSHTokenEvents) {
	s.Events = val
}

// SetValid sets the value of Valid.
func (s *SSHToken) SetValid(val bool) {
	s.Valid = val
}

// A collection of timestamps for each event in the SSH token's lifetime.
type SSHTokenEvents struct {
	// The timestamp of when the SSH token was created.
	Created DateTime `json:"created"`
	// The timestamp of when the SSH token was used.
	Used DateTime `json:"used"`
	// The timestamp of when the SSH token expires.
	Expires DateTime `json:"expires"`
}

// GetCreated returns the value of Created.
func (s *SSHTokenEvents) GetCreated() DateTime {
	return s.Created
}

// GetUsed returns the value of Used.
func (s *SSHTokenEvents) GetUsed() DateTime {
	return s.Used
}

// GetExpires returns the value of Expires.
func (s *SSHTokenEvents) GetExpires() DateTime {
	return s.Expires
}

// SetCreated sets the value of Created.
func (s *SSHTokenEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUsed sets the value of Used.
func (s *SSHTokenEvents) SetUsed(val DateTime) {
	s.Used = val
}

// SetExpires sets the value of Expires.
func (s *SSHTokenEvents) SetExpires(val DateTime) {
	s.Expires = val
}

// Rules for controlling Linux seccomp inside a container.
// Ref: #/components/schemas/SeccompRule
type SeccompRule struct {
	Capabilities OptSeccompRuleCapabilities `json:"capabilities"`
	// LinuxSyscall is used to match a syscall in Seccomp.
	Syscall OptSeccompRuleSyscall `json:"syscall"`
}

// GetCapabilities returns the value of Capabilities.
func (s *SeccompRule) GetCapabilities() OptSeccompRuleCapabilities {
	return s.Capabilities
}

// GetSyscall returns the value of Syscall.
func (s *SeccompRule) GetSyscall() OptSeccompRuleSyscall {
	return s.Syscall
}

// SetCapabilities sets the value of Capabilities.
func (s *SeccompRule) SetCapabilities(val OptSeccompRuleCapabilities) {
	s.Capabilities = val
}

// SetSyscall sets the value of Syscall.
func (s *SeccompRule) SetSyscall(val OptSeccompRuleSyscall) {
	s.Syscall = val
}

type SeccompRuleCapabilities struct {
	Includes OptString `json:"includes"`
	Excludes OptString `json:"excludes"`
}

// GetIncludes returns the value of Includes.
func (s *SeccompRuleCapabilities) GetIncludes() OptString {
	return s.Includes
}

// GetExcludes returns the value of Excludes.
func (s *SeccompRuleCapabilities) GetExcludes() OptString {
	return s.Excludes
}

// SetIncludes sets the value of Includes.
func (s *SeccompRuleCapabilities) SetIncludes(val OptString) {
	s.Includes = val
}

// SetExcludes sets the value of Excludes.
func (s *SeccompRuleCapabilities) SetExcludes(val OptString) {
	s.Excludes = val
}

// LinuxSyscall is used to match a syscall in Seccomp.
type SeccompRuleSyscall struct {
	Names    []string                     `json:"names"`
	Action   string                       `json:"action"`
	ErrnoRet OptInt                       `json:"errnoRet"`
	Args     []SeccompRuleSyscallArgsItem `json:"args"`
}

// GetNames returns the value of Names.
func (s *SeccompRuleSyscall) GetNames() []string {
	return s.Names
}

// GetAction returns the value of Action.
func (s *SeccompRuleSyscall) GetAction() string {
	return s.Action
}

// GetErrnoRet returns the value of ErrnoRet.
func (s *SeccompRuleSyscall) GetErrnoRet() OptInt {
	return s.ErrnoRet
}

// GetArgs returns the value of Args.
func (s *SeccompRuleSyscall) GetArgs() []SeccompRuleSyscallArgsItem {
	return s.Args
}

// SetNames sets the value of Names.
func (s *SeccompRuleSyscall) SetNames(val []string) {
	s.Names = val
}

// SetAction sets the value of Action.
func (s *SeccompRuleSyscall) SetAction(val string) {
	s.Action = val
}

// SetErrnoRet sets the value of ErrnoRet.
func (s *SeccompRuleSyscall) SetErrnoRet(val OptInt) {
	s.ErrnoRet = val
}

// SetArgs sets the value of Args.
func (s *SeccompRuleSyscall) SetArgs(val []SeccompRuleSyscallArgsItem) {
	s.Args = val
}

type SeccompRuleSyscallArgsItem struct {
	Index    int    `json:"index"`
	Value    int    `json:"value"`
	ValueTwo OptInt `json:"valueTwo"`
	Op       string `json:"op"`
}

// GetIndex returns the value of Index.
func (s *SeccompRuleSyscallArgsItem) GetIndex() int {
	return s.Index
}

// GetValue returns the value of Value.
func (s *SeccompRuleSyscallArgsItem) GetValue() int {
	return s.Value
}

// GetValueTwo returns the value of ValueTwo.
func (s *SeccompRuleSyscallArgsItem) GetValueTwo() OptInt {
	return s.ValueTwo
}

// GetOp returns the value of Op.
func (s *SeccompRuleSyscallArgsItem) GetOp() string {
	return s.Op
}

// SetIndex sets the value of Index.
func (s *SeccompRuleSyscallArgsItem) SetIndex(val int) {
	s.Index = val
}

// SetValue sets the value of Value.
func (s *SeccompRuleSyscallArgsItem) SetValue(val int) {
	s.Value = val
}

// SetValueTwo sets the value of ValueTwo.
func (s *SeccompRuleSyscallArgsItem) SetValueTwo(val OptInt) {
	s.ValueTwo = val
}

// SetOp sets the value of Op.
func (s *SeccompRuleSyscallArgsItem) SetOp(val string) {
	s.Op = val
}

// Details about a security incident/event that occurred.
// Ref: #/components/schemas/SecurityIncident
type SecurityIncident struct {
	// The risk level of the security.
	Risk SecurityIncidentRisk `json:"risk"`
	// The vector of attack.
	Surface SecurityIncidentSurface `json:"surface"`
	// How the platform handled the event.
	Event SecurityIncidentEvent `json:"event"`
	// The type of attack detected.
	Attack SecurityIncidentAttack `json:"attack"`
	Count  int                    `json:"count"`
}

// GetRisk returns the value of Risk.
func (s *SecurityIncident) GetRisk() SecurityIncidentRisk {
	return s.Risk
}

// GetSurface returns the value of Surface.
func (s *SecurityIncident) GetSurface() SecurityIncidentSurface {
	return s.Surface
}

// GetEvent returns the value of Event.
func (s *SecurityIncident) GetEvent() SecurityIncidentEvent {
	return s.Event
}

// GetAttack returns the value of Attack.
func (s *SecurityIncident) GetAttack() SecurityIncidentAttack {
	return s.Attack
}

// GetCount returns the value of Count.
func (s *SecurityIncident) GetCount() int {
	return s.Count
}

// SetRisk sets the value of Risk.
func (s *SecurityIncident) SetRisk(val SecurityIncidentRisk) {
	s.Risk = val
}

// SetSurface sets the value of Surface.
func (s *SecurityIncident) SetSurface(val SecurityIncidentSurface) {
	s.Surface = val
}

// SetEvent sets the value of Event.
func (s *SecurityIncident) SetEvent(val SecurityIncidentEvent) {
	s.Event = val
}

// SetAttack sets the value of Attack.
func (s *SecurityIncident) SetAttack(val SecurityIncidentAttack) {
	s.Attack = val
}

// SetCount sets the value of Count.
func (s *SecurityIncident) SetCount(val int) {
	s.Count = val
}

// The type of attack detected.
type SecurityIncidentAttack string

const (
	SecurityIncidentAttackNone                 SecurityIncidentAttack = "none"
	SecurityIncidentAttackAuthFailure          SecurityIncidentAttack = "auth-failure"
	SecurityIncidentAttackBruteForce           SecurityIncidentAttack = "brute-force"
	SecurityIncidentAttackExploitVulnerability SecurityIncidentAttack = "exploit-vulnerability"
	SecurityIncidentAttackSocialEngineer       SecurityIncidentAttack = "social-engineer"
	SecurityIncidentAttackServiceInterruption  SecurityIncidentAttack = "service-interruption"
	SecurityIncidentAttackAccessElevation      SecurityIncidentAttack = "access-elevation"
)

// MarshalText implements encoding.TextMarshaler.
func (s SecurityIncidentAttack) MarshalText() ([]byte, error) {
	switch s {
	case SecurityIncidentAttackNone:
		return []byte(s), nil
	case SecurityIncidentAttackAuthFailure:
		return []byte(s), nil
	case SecurityIncidentAttackBruteForce:
		return []byte(s), nil
	case SecurityIncidentAttackExploitVulnerability:
		return []byte(s), nil
	case SecurityIncidentAttackSocialEngineer:
		return []byte(s), nil
	case SecurityIncidentAttackServiceInterruption:
		return []byte(s), nil
	case SecurityIncidentAttackAccessElevation:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SecurityIncidentAttack) UnmarshalText(data []byte) error {
	switch SecurityIncidentAttack(data) {
	case SecurityIncidentAttackNone:
		*s = SecurityIncidentAttackNone
		return nil
	case SecurityIncidentAttackAuthFailure:
		*s = SecurityIncidentAttackAuthFailure
		return nil
	case SecurityIncidentAttackBruteForce:
		*s = SecurityIncidentAttackBruteForce
		return nil
	case SecurityIncidentAttackExploitVulnerability:
		*s = SecurityIncidentAttackExploitVulnerability
		return nil
	case SecurityIncidentAttackSocialEngineer:
		*s = SecurityIncidentAttackSocialEngineer
		return nil
	case SecurityIncidentAttackServiceInterruption:
		*s = SecurityIncidentAttackServiceInterruption
		return nil
	case SecurityIncidentAttackAccessElevation:
		*s = SecurityIncidentAttackAccessElevation
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// How the platform handled the event.
type SecurityIncidentEvent string

const (
	SecurityIncidentEventSuggestion SecurityIncidentEvent = "suggestion"
	SecurityIncidentEventNotice     SecurityIncidentEvent = "notice"
	SecurityIncidentEventPrevention SecurityIncidentEvent = "prevention"
	SecurityIncidentEventDetection  SecurityIncidentEvent = "detection"
	SecurityIncidentEventReaction   SecurityIncidentEvent = "reaction"
)

// MarshalText implements encoding.TextMarshaler.
func (s SecurityIncidentEvent) MarshalText() ([]byte, error) {
	switch s {
	case SecurityIncidentEventSuggestion:
		return []byte(s), nil
	case SecurityIncidentEventNotice:
		return []byte(s), nil
	case SecurityIncidentEventPrevention:
		return []byte(s), nil
	case SecurityIncidentEventDetection:
		return []byte(s), nil
	case SecurityIncidentEventReaction:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SecurityIncidentEvent) UnmarshalText(data []byte) error {
	switch SecurityIncidentEvent(data) {
	case SecurityIncidentEventSuggestion:
		*s = SecurityIncidentEventSuggestion
		return nil
	case SecurityIncidentEventNotice:
		*s = SecurityIncidentEventNotice
		return nil
	case SecurityIncidentEventPrevention:
		*s = SecurityIncidentEventPrevention
		return nil
	case SecurityIncidentEventDetection:
		*s = SecurityIncidentEventDetection
		return nil
	case SecurityIncidentEventReaction:
		*s = SecurityIncidentEventReaction
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The risk level of the security.
type SecurityIncidentRisk string

const (
	SecurityIncidentRiskInfo     SecurityIncidentRisk = "info"
	SecurityIncidentRiskLow      SecurityIncidentRisk = "low"
	SecurityIncidentRiskMedium   SecurityIncidentRisk = "medium"
	SecurityIncidentRiskHigh     SecurityIncidentRisk = "high"
	SecurityIncidentRiskCritical SecurityIncidentRisk = "critical"
)

// MarshalText implements encoding.TextMarshaler.
func (s SecurityIncidentRisk) MarshalText() ([]byte, error) {
	switch s {
	case SecurityIncidentRiskInfo:
		return []byte(s), nil
	case SecurityIncidentRiskLow:
		return []byte(s), nil
	case SecurityIncidentRiskMedium:
		return []byte(s), nil
	case SecurityIncidentRiskHigh:
		return []byte(s), nil
	case SecurityIncidentRiskCritical:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SecurityIncidentRisk) UnmarshalText(data []byte) error {
	switch SecurityIncidentRisk(data) {
	case SecurityIncidentRiskInfo:
		*s = SecurityIncidentRiskInfo
		return nil
	case SecurityIncidentRiskLow:
		*s = SecurityIncidentRiskLow
		return nil
	case SecurityIncidentRiskMedium:
		*s = SecurityIncidentRiskMedium
		return nil
	case SecurityIncidentRiskHigh:
		*s = SecurityIncidentRiskHigh
		return nil
	case SecurityIncidentRiskCritical:
		*s = SecurityIncidentRiskCritical
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The vector of attack.
type SecurityIncidentSurface string

const (
	SecurityIncidentSurfaceNetwork SecurityIncidentSurface = "network"
	SecurityIncidentSurfaceService SecurityIncidentSurface = "service"
	SecurityIncidentSurfaceFs      SecurityIncidentSurface = "fs"
	SecurityIncidentSurfaceAPI     SecurityIncidentSurface = "api"
)

// MarshalText implements encoding.TextMarshaler.
func (s SecurityIncidentSurface) MarshalText() ([]byte, error) {
	switch s {
	case SecurityIncidentSurfaceNetwork:
		return []byte(s), nil
	case SecurityIncidentSurfaceService:
		return []byte(s), nil
	case SecurityIncidentSurfaceFs:
		return []byte(s), nil
	case SecurityIncidentSurfaceAPI:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SecurityIncidentSurface) UnmarshalText(data []byte) error {
	switch SecurityIncidentSurface(data) {
	case SecurityIncidentSurfaceNetwork:
		*s = SecurityIncidentSurfaceNetwork
		return nil
	case SecurityIncidentSurfaceService:
		*s = SecurityIncidentSurfaceService
		return nil
	case SecurityIncidentSurfaceFs:
		*s = SecurityIncidentSurfaceFs
		return nil
	case SecurityIncidentSurfaceAPI:
		*s = SecurityIncidentSurfaceAPI
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A report of all security events captured by the platform over a range of time.
// Ref: #/components/schemas/SecurityReport
type SecurityReport struct {
	HubID   HubID    `json:"hub_id"`
	Created DateTime `json:"created"`
	// The period over which the report was generated.
	Range   Range                 `json:"range"`
	Summary SecurityReportSummary `json:"summary"`
	// The ID of the environment this instnace is in.
	Snapshots []SecurityReportSnapshot `json:"snapshots"`
}

// GetHubID returns the value of HubID.
func (s *SecurityReport) GetHubID() HubID {
	return s.HubID
}

// GetCreated returns the value of Created.
func (s *SecurityReport) GetCreated() DateTime {
	return s.Created
}

// GetRange returns the value of Range.
func (s *SecurityReport) GetRange() Range {
	return s.Range
}

// GetSummary returns the value of Summary.
func (s *SecurityReport) GetSummary() SecurityReportSummary {
	return s.Summary
}

// GetSnapshots returns the value of Snapshots.
func (s *SecurityReport) GetSnapshots() []SecurityReportSnapshot {
	return s.Snapshots
}

// SetHubID sets the value of HubID.
func (s *SecurityReport) SetHubID(val HubID) {
	s.HubID = val
}

// SetCreated sets the value of Created.
func (s *SecurityReport) SetCreated(val DateTime) {
	s.Created = val
}

// SetRange sets the value of Range.
func (s *SecurityReport) SetRange(val Range) {
	s.Range = val
}

// SetSummary sets the value of Summary.
func (s *SecurityReport) SetSummary(val SecurityReportSummary) {
	s.Summary = val
}

// SetSnapshots sets the value of Snapshots.
func (s *SecurityReport) SetSnapshots(val []SecurityReportSnapshot) {
	s.Snapshots = val
}

// A snapshot of security events for the given interval.
// Ref: #/components/schemas/SecurityReportSnapshot
type SecurityReportSnapshot struct {
	Time      DateTime                        `json:"time"`
	Incidents SecurityReportSnapshotIncidents `json:"incidents"`
	Count     int                             `json:"count"`
}

// GetTime returns the value of Time.
func (s *SecurityReportSnapshot) GetTime() DateTime {
	return s.Time
}

// GetIncidents returns the value of Incidents.
func (s *SecurityReportSnapshot) GetIncidents() SecurityReportSnapshotIncidents {
	return s.Incidents
}

// GetCount returns the value of Count.
func (s *SecurityReportSnapshot) GetCount() int {
	return s.Count
}

// SetTime sets the value of Time.
func (s *SecurityReportSnapshot) SetTime(val DateTime) {
	s.Time = val
}

// SetIncidents sets the value of Incidents.
func (s *SecurityReportSnapshot) SetIncidents(val SecurityReportSnapshotIncidents) {
	s.Incidents = val
}

// SetCount sets the value of Count.
func (s *SecurityReportSnapshot) SetCount(val int) {
	s.Count = val
}

type SecurityReportSnapshotIncidents struct {
	Info     OptSecuritySnapshotIncidentBreakdown `json:"info"`
	Low      OptSecuritySnapshotIncidentBreakdown `json:"low"`
	Medium   OptSecuritySnapshotIncidentBreakdown `json:"medium"`
	High     OptSecuritySnapshotIncidentBreakdown `json:"high"`
	Critical OptSecuritySnapshotIncidentBreakdown `json:"critical"`
}

// GetInfo returns the value of Info.
func (s *SecurityReportSnapshotIncidents) GetInfo() OptSecuritySnapshotIncidentBreakdown {
	return s.Info
}

// GetLow returns the value of Low.
func (s *SecurityReportSnapshotIncidents) GetLow() OptSecuritySnapshotIncidentBreakdown {
	return s.Low
}

// GetMedium returns the value of Medium.
func (s *SecurityReportSnapshotIncidents) GetMedium() OptSecuritySnapshotIncidentBreakdown {
	return s.Medium
}

// GetHigh returns the value of High.
func (s *SecurityReportSnapshotIncidents) GetHigh() OptSecuritySnapshotIncidentBreakdown {
	return s.High
}

// GetCritical returns the value of Critical.
func (s *SecurityReportSnapshotIncidents) GetCritical() OptSecuritySnapshotIncidentBreakdown {
	return s.Critical
}

// SetInfo sets the value of Info.
func (s *SecurityReportSnapshotIncidents) SetInfo(val OptSecuritySnapshotIncidentBreakdown) {
	s.Info = val
}

// SetLow sets the value of Low.
func (s *SecurityReportSnapshotIncidents) SetLow(val OptSecuritySnapshotIncidentBreakdown) {
	s.Low = val
}

// SetMedium sets the value of Medium.
func (s *SecurityReportSnapshotIncidents) SetMedium(val OptSecuritySnapshotIncidentBreakdown) {
	s.Medium = val
}

// SetHigh sets the value of High.
func (s *SecurityReportSnapshotIncidents) SetHigh(val OptSecuritySnapshotIncidentBreakdown) {
	s.High = val
}

// SetCritical sets the value of Critical.
func (s *SecurityReportSnapshotIncidents) SetCritical(val OptSecuritySnapshotIncidentBreakdown) {
	s.Critical = val
}

// A summary of the incidents tags accumulated over the report's range.
// Ref: #/components/schemas/SecurityReportSummary
type SecurityReportSummary struct {
	Incidents []SecurityIncident `json:"incidents"`
}

// GetIncidents returns the value of Incidents.
func (s *SecurityReportSummary) GetIncidents() []SecurityIncident {
	return s.Incidents
}

// SetIncidents sets the value of Incidents.
func (s *SecurityReportSummary) SetIncidents(val []SecurityIncident) {
	s.Incidents = val
}

// A breakdown of a snapshot's incidents inside a security report.
// Ref: #/components/schemas/SecuritySnapshotIncidentBreakdown
type SecuritySnapshotIncidentBreakdown struct {
	Surface SecuritySnapshotIncidentBreakdownSurface `json:"surface"`
	Attack  SecuritySnapshotIncidentBreakdownAttack  `json:"attack"`
}

// GetSurface returns the value of Surface.
func (s *SecuritySnapshotIncidentBreakdown) GetSurface() SecuritySnapshotIncidentBreakdownSurface {
	return s.Surface
}

// GetAttack returns the value of Attack.
func (s *SecuritySnapshotIncidentBreakdown) GetAttack() SecuritySnapshotIncidentBreakdownAttack {
	return s.Attack
}

// SetSurface sets the value of Surface.
func (s *SecuritySnapshotIncidentBreakdown) SetSurface(val SecuritySnapshotIncidentBreakdownSurface) {
	s.Surface = val
}

// SetAttack sets the value of Attack.
func (s *SecuritySnapshotIncidentBreakdown) SetAttack(val SecuritySnapshotIncidentBreakdownAttack) {
	s.Attack = val
}

type SecuritySnapshotIncidentBreakdownAttack struct {
	None                      OptInt `json:"none"`
	AuthMinusFailure          OptInt `json:"auth-failure"`
	BruteMinusForce           OptInt `json:"brute-force"`
	ExploitMinusVulnerability OptInt `json:"exploit-vulnerability"`
	SocialMinusEngineer       OptInt `json:"social-engineer"`
	ServiceMinusInterruption  OptInt `json:"service-interruption"`
	AccessMinusElevation      OptInt `json:"access-elevation"`
}

// GetNone returns the value of None.
func (s *SecuritySnapshotIncidentBreakdownAttack) GetNone() OptInt {
	return s.None
}

// GetAuthMinusFailure returns the value of AuthMinusFailure.
func (s *SecuritySnapshotIncidentBreakdownAttack) GetAuthMinusFailure() OptInt {
	return s.AuthMinusFailure
}

// GetBruteMinusForce returns the value of BruteMinusForce.
func (s *SecuritySnapshotIncidentBreakdownAttack) GetBruteMinusForce() OptInt {
	return s.BruteMinusForce
}

// GetExploitMinusVulnerability returns the value of ExploitMinusVulnerability.
func (s *SecuritySnapshotIncidentBreakdownAttack) GetExploitMinusVulnerability() OptInt {
	return s.ExploitMinusVulnerability
}

// GetSocialMinusEngineer returns the value of SocialMinusEngineer.
func (s *SecuritySnapshotIncidentBreakdownAttack) GetSocialMinusEngineer() OptInt {
	return s.SocialMinusEngineer
}

// GetServiceMinusInterruption returns the value of ServiceMinusInterruption.
func (s *SecuritySnapshotIncidentBreakdownAttack) GetServiceMinusInterruption() OptInt {
	return s.ServiceMinusInterruption
}

// GetAccessMinusElevation returns the value of AccessMinusElevation.
func (s *SecuritySnapshotIncidentBreakdownAttack) GetAccessMinusElevation() OptInt {
	return s.AccessMinusElevation
}

// SetNone sets the value of None.
func (s *SecuritySnapshotIncidentBreakdownAttack) SetNone(val OptInt) {
	s.None = val
}

// SetAuthMinusFailure sets the value of AuthMinusFailure.
func (s *SecuritySnapshotIncidentBreakdownAttack) SetAuthMinusFailure(val OptInt) {
	s.AuthMinusFailure = val
}

// SetBruteMinusForce sets the value of BruteMinusForce.
func (s *SecuritySnapshotIncidentBreakdownAttack) SetBruteMinusForce(val OptInt) {
	s.BruteMinusForce = val
}

// SetExploitMinusVulnerability sets the value of ExploitMinusVulnerability.
func (s *SecuritySnapshotIncidentBreakdownAttack) SetExploitMinusVulnerability(val OptInt) {
	s.ExploitMinusVulnerability = val
}

// SetSocialMinusEngineer sets the value of SocialMinusEngineer.
func (s *SecuritySnapshotIncidentBreakdownAttack) SetSocialMinusEngineer(val OptInt) {
	s.SocialMinusEngineer = val
}

// SetServiceMinusInterruption sets the value of ServiceMinusInterruption.
func (s *SecuritySnapshotIncidentBreakdownAttack) SetServiceMinusInterruption(val OptInt) {
	s.ServiceMinusInterruption = val
}

// SetAccessMinusElevation sets the value of AccessMinusElevation.
func (s *SecuritySnapshotIncidentBreakdownAttack) SetAccessMinusElevation(val OptInt) {
	s.AccessMinusElevation = val
}

type SecuritySnapshotIncidentBreakdownSurface struct {
	Network OptInt `json:"network"`
	Service OptInt `json:"service"`
	Fs      OptInt `json:"fs"`
	API     OptInt `json:"api"`
}

// GetNetwork returns the value of Network.
func (s *SecuritySnapshotIncidentBreakdownSurface) GetNetwork() OptInt {
	return s.Network
}

// GetService returns the value of Service.
func (s *SecuritySnapshotIncidentBreakdownSurface) GetService() OptInt {
	return s.Service
}

// GetFs returns the value of Fs.
func (s *SecuritySnapshotIncidentBreakdownSurface) GetFs() OptInt {
	return s.Fs
}

// GetAPI returns the value of API.
func (s *SecuritySnapshotIncidentBreakdownSurface) GetAPI() OptInt {
	return s.API
}

// SetNetwork sets the value of Network.
func (s *SecuritySnapshotIncidentBreakdownSurface) SetNetwork(val OptInt) {
	s.Network = val
}

// SetService sets the value of Service.
func (s *SecuritySnapshotIncidentBreakdownSurface) SetService(val OptInt) {
	s.Service = val
}

// SetFs sets the value of Fs.
func (s *SecuritySnapshotIncidentBreakdownSurface) SetFs(val OptInt) {
	s.Fs = val
}

// SetAPI sets the value of API.
func (s *SecuritySnapshotIncidentBreakdownSurface) SetAPI(val OptInt) {
	s.API = val
}

// Constraints to apply to the server.
// Ref: #/components/schemas/ServerConstraints
type ServerConstraints struct {
	// A list of server tags to put on the given server.
	Tags []string `json:"tags"`
	// Settings for the server, things that are or are not allowed.
	Allow ServerConstraintsAllow `json:"allow"`
}

// GetTags returns the value of Tags.
func (s *ServerConstraints) GetTags() []string {
	return s.Tags
}

// GetAllow returns the value of Allow.
func (s *ServerConstraints) GetAllow() ServerConstraintsAllow {
	return s.Allow
}

// SetTags sets the value of Tags.
func (s *ServerConstraints) SetTags(val []string) {
	s.Tags = val
}

// SetAllow sets the value of Allow.
func (s *ServerConstraints) SetAllow(val ServerConstraintsAllow) {
	s.Allow = val
}

// Settings for the server, things that are or are not allowed.
type ServerConstraintsAllow struct {
	// A boolean where true means - allow containers with no tags specified to be deployed to this server.
	Pool bool `json:"pool"`
	// A boolean where true means - allow service containers to be deployed to this container.
	Services bool `json:"services"`
	// A boolean where true means - allow twice the normal amount of CPU shares to be allocated to
	// containers deployed to this server.
	Overcommit bool `json:"overcommit"`
}

// GetPool returns the value of Pool.
func (s *ServerConstraintsAllow) GetPool() bool {
	return s.Pool
}

// GetServices returns the value of Services.
func (s *ServerConstraintsAllow) GetServices() bool {
	return s.Services
}

// GetOvercommit returns the value of Overcommit.
func (s *ServerConstraintsAllow) GetOvercommit() bool {
	return s.Overcommit
}

// SetPool sets the value of Pool.
func (s *ServerConstraintsAllow) SetPool(val bool) {
	s.Pool = val
}

// SetServices sets the value of Services.
func (s *ServerConstraintsAllow) SetServices(val bool) {
	s.Services = val
}

// SetOvercommit sets the value of Overcommit.
func (s *ServerConstraintsAllow) SetOvercommit(val bool) {
	s.Overcommit = val
}

// A set of features a given server can have and their information.
// Ref: #/components/schemas/ServerFeatures
type ServerFeatures struct {
	// A boolean where true means the server accepts incoming SFTP connections through the remote volume
	// integration.
	Sftp bool `json:"sftp"`
	// The size of the base volume (where Cycle stores container images on this server).
	BaseVolumeGB OptInt `json:"base_volume_gb"`
}

// GetSftp returns the value of Sftp.
func (s *ServerFeatures) GetSftp() bool {
	return s.Sftp
}

// GetBaseVolumeGB returns the value of BaseVolumeGB.
func (s *ServerFeatures) GetBaseVolumeGB() OptInt {
	return s.BaseVolumeGB
}

// SetSftp sets the value of Sftp.
func (s *ServerFeatures) SetSftp(val bool) {
	s.Sftp = val
}

// SetBaseVolumeGB sets the value of BaseVolumeGB.
func (s *ServerFeatures) SetBaseVolumeGB(val OptInt) {
	s.BaseVolumeGB = val
}

// A resource associated with a server.
// Ref: #/components/schemas/ServerIncludes
type ServerIncludes struct {
	Locations LocationsIncludes             `json:"locations"`
	Models    ProviderServersServerIncludes `json:"models"`
	Providers ProvidersIncludes             `json:"providers"`
}

// GetLocations returns the value of Locations.
func (s *ServerIncludes) GetLocations() LocationsIncludes {
	return s.Locations
}

// GetModels returns the value of Models.
func (s *ServerIncludes) GetModels() ProviderServersServerIncludes {
	return s.Models
}

// GetProviders returns the value of Providers.
func (s *ServerIncludes) GetProviders() ProvidersIncludes {
	return s.Providers
}

// SetLocations sets the value of Locations.
func (s *ServerIncludes) SetLocations(val LocationsIncludes) {
	s.Locations = val
}

// SetModels sets the value of Models.
func (s *ServerIncludes) SetModels(val ProviderServersServerIncludes) {
	s.Models = val
}

// SetProviders sets the value of Providers.
func (s *ServerIncludes) SetProviders(val ProvidersIncludes) {
	s.Providers = val
}

// A list of meta fields that can be applied to a server.
// Ref: #/components/schemas/ServerMeta
type ServerMeta struct {
	// Infrormation about the status of the server.
	Node           OptServerMetaNode    `json:"node"`
	InstancesCount OptStateCountSummary `json:"instances_count"`
}

// GetNode returns the value of Node.
func (s *ServerMeta) GetNode() OptServerMetaNode {
	return s.Node
}

// GetInstancesCount returns the value of InstancesCount.
func (s *ServerMeta) GetInstancesCount() OptStateCountSummary {
	return s.InstancesCount
}

// SetNode sets the value of Node.
func (s *ServerMeta) SetNode(val OptServerMetaNode) {
	s.Node = val
}

// SetInstancesCount sets the value of InstancesCount.
func (s *ServerMeta) SetInstancesCount(val OptStateCountSummary) {
	s.InstancesCount = val
}

// Infrormation about the status of the server.
type ServerMetaNode struct {
	// The last time this server checked in with the platform.
	LastCheckin DateTime `json:"last_checkin"`
	// An array a drivers associated with the given server.
	Drivers []string      `json:"drivers"`
	State   NodeState     `json:"state"`
	Stats   NodeMetaStats `json:"stats"`
	// A boolean where true means the platform is reporting the server as healthy.
	Healthy bool `json:"healthy"`
	// A boolean where true means the server is online and reachable by the platform.
	Online bool `json:"online"`
}

// GetLastCheckin returns the value of LastCheckin.
func (s *ServerMetaNode) GetLastCheckin() DateTime {
	return s.LastCheckin
}

// GetDrivers returns the value of Drivers.
func (s *ServerMetaNode) GetDrivers() []string {
	return s.Drivers
}

// GetState returns the value of State.
func (s *ServerMetaNode) GetState() NodeState {
	return s.State
}

// GetStats returns the value of Stats.
func (s *ServerMetaNode) GetStats() NodeMetaStats {
	return s.Stats
}

// GetHealthy returns the value of Healthy.
func (s *ServerMetaNode) GetHealthy() bool {
	return s.Healthy
}

// GetOnline returns the value of Online.
func (s *ServerMetaNode) GetOnline() bool {
	return s.Online
}

// SetLastCheckin sets the value of LastCheckin.
func (s *ServerMetaNode) SetLastCheckin(val DateTime) {
	s.LastCheckin = val
}

// SetDrivers sets the value of Drivers.
func (s *ServerMetaNode) SetDrivers(val []string) {
	s.Drivers = val
}

// SetState sets the value of State.
func (s *ServerMetaNode) SetState(val NodeState) {
	s.State = val
}

// SetStats sets the value of Stats.
func (s *ServerMetaNode) SetStats(val NodeMetaStats) {
	s.Stats = val
}

// SetHealthy sets the value of Healthy.
func (s *ServerMetaNode) SetHealthy(val bool) {
	s.Healthy = val
}

// SetOnline sets the value of Online.
func (s *ServerMetaNode) SetOnline(val bool) {
	s.Online = val
}

// A resource regarding the provider a given server is deployed from.
// Ref: #/components/schemas/ServerProvider
type ServerProvider struct {
	// An identifier for the provider this server is deployed from.
	Identifier string `json:"identifier"`
	// The model of the server that is deployed.
	Model string `json:"model"`
	// A location where the server is deployed.
	Location string `json:"location"`
	// A provider specific identifier for the server.
	Server string `json:"server"`
	// The IP's assigned to this server during provisioning.
	InitIps []string `json:"init_ips"`
	// The mac address for the server.
	MACAddr          OptString                         `json:"mac_addr"`
	Extra            OptServerProviderExtra            `json:"extra"`
	ProvisionOptions OptServerProviderProvisionOptions `json:"provision_options"`
}

// GetIdentifier returns the value of Identifier.
func (s *ServerProvider) GetIdentifier() string {
	return s.Identifier
}

// GetModel returns the value of Model.
func (s *ServerProvider) GetModel() string {
	return s.Model
}

// GetLocation returns the value of Location.
func (s *ServerProvider) GetLocation() string {
	return s.Location
}

// GetServer returns the value of Server.
func (s *ServerProvider) GetServer() string {
	return s.Server
}

// GetInitIps returns the value of InitIps.
func (s *ServerProvider) GetInitIps() []string {
	return s.InitIps
}

// GetMACAddr returns the value of MACAddr.
func (s *ServerProvider) GetMACAddr() OptString {
	return s.MACAddr
}

// GetExtra returns the value of Extra.
func (s *ServerProvider) GetExtra() OptServerProviderExtra {
	return s.Extra
}

// GetProvisionOptions returns the value of ProvisionOptions.
func (s *ServerProvider) GetProvisionOptions() OptServerProviderProvisionOptions {
	return s.ProvisionOptions
}

// SetIdentifier sets the value of Identifier.
func (s *ServerProvider) SetIdentifier(val string) {
	s.Identifier = val
}

// SetModel sets the value of Model.
func (s *ServerProvider) SetModel(val string) {
	s.Model = val
}

// SetLocation sets the value of Location.
func (s *ServerProvider) SetLocation(val string) {
	s.Location = val
}

// SetServer sets the value of Server.
func (s *ServerProvider) SetServer(val string) {
	s.Server = val
}

// SetInitIps sets the value of InitIps.
func (s *ServerProvider) SetInitIps(val []string) {
	s.InitIps = val
}

// SetMACAddr sets the value of MACAddr.
func (s *ServerProvider) SetMACAddr(val OptString) {
	s.MACAddr = val
}

// SetExtra sets the value of Extra.
func (s *ServerProvider) SetExtra(val OptServerProviderExtra) {
	s.Extra = val
}

// SetProvisionOptions sets the value of ProvisionOptions.
func (s *ServerProvider) SetProvisionOptions(val OptServerProviderProvisionOptions) {
	s.ProvisionOptions = val
}

type ServerProviderExtra map[string]jx.Raw

func (s *ServerProviderExtra) init() ServerProviderExtra {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ServerProviderProvisionOptions struct {
	AttachesdStorageSize OptFloat64 `json:"attachesd_storage_size"`
	ReservationID        OptString  `json:"reservation_id"`
}

// GetAttachesdStorageSize returns the value of AttachesdStorageSize.
func (s *ServerProviderProvisionOptions) GetAttachesdStorageSize() OptFloat64 {
	return s.AttachesdStorageSize
}

// GetReservationID returns the value of ReservationID.
func (s *ServerProviderProvisionOptions) GetReservationID() OptString {
	return s.ReservationID
}

// SetAttachesdStorageSize sets the value of AttachesdStorageSize.
func (s *ServerProviderProvisionOptions) SetAttachesdStorageSize(val OptFloat64) {
	s.AttachesdStorageSize = val
}

// SetReservationID sets the value of ReservationID.
func (s *ServerProviderProvisionOptions) SetReservationID(val OptString) {
	s.ReservationID = val
}

// Information about server CPU, RAM and Disk resources.
// Ref: #/components/schemas/ServerResources
type ServerResources struct {
	// Information about RAM Resources.
	RAM ServerResourcesRAM `json:"ram"`
	// Information about CPU resources.
	CPU ServerResourcesCPU `json:"cpu"`
	// Information about disk size and usage.
	Disk ServerResourcesDisk `json:"disk"`
}

// GetRAM returns the value of RAM.
func (s *ServerResources) GetRAM() ServerResourcesRAM {
	return s.RAM
}

// GetCPU returns the value of CPU.
func (s *ServerResources) GetCPU() ServerResourcesCPU {
	return s.CPU
}

// GetDisk returns the value of Disk.
func (s *ServerResources) GetDisk() ServerResourcesDisk {
	return s.Disk
}

// SetRAM sets the value of RAM.
func (s *ServerResources) SetRAM(val ServerResourcesRAM) {
	s.RAM = val
}

// SetCPU sets the value of CPU.
func (s *ServerResources) SetCPU(val ServerResourcesCPU) {
	s.CPU = val
}

// SetDisk sets the value of Disk.
func (s *ServerResources) SetDisk(val ServerResourcesDisk) {
	s.Disk = val
}

// Information about CPU resources.
type ServerResourcesCPU struct {
	// The number of CPU cores.
	Cores int `json:"cores"`
	// Information about CPU shares.
	Shares ServerResourcesCPUShares `json:"shares"`
	// The ratio of shares allocated to total shares.
	ShareRatio OptInt `json:"share_ratio"`
}

// GetCores returns the value of Cores.
func (s *ServerResourcesCPU) GetCores() int {
	return s.Cores
}

// GetShares returns the value of Shares.
func (s *ServerResourcesCPU) GetShares() ServerResourcesCPUShares {
	return s.Shares
}

// GetShareRatio returns the value of ShareRatio.
func (s *ServerResourcesCPU) GetShareRatio() OptInt {
	return s.ShareRatio
}

// SetCores sets the value of Cores.
func (s *ServerResourcesCPU) SetCores(val int) {
	s.Cores = val
}

// SetShares sets the value of Shares.
func (s *ServerResourcesCPU) SetShares(val ServerResourcesCPUShares) {
	s.Shares = val
}

// SetShareRatio sets the value of ShareRatio.
func (s *ServerResourcesCPU) SetShareRatio(val OptInt) {
	s.ShareRatio = val
}

// Information about CPU shares.
type ServerResourcesCPUShares struct {
	// The number of shares allocated.
	Allocated int `json:"allocated"`
	// The total number of shares available.
	Total int `json:"total"`
}

// GetAllocated returns the value of Allocated.
func (s *ServerResourcesCPUShares) GetAllocated() int {
	return s.Allocated
}

// GetTotal returns the value of Total.
func (s *ServerResourcesCPUShares) GetTotal() int {
	return s.Total
}

// SetAllocated sets the value of Allocated.
func (s *ServerResourcesCPUShares) SetAllocated(val int) {
	s.Allocated = val
}

// SetTotal sets the value of Total.
func (s *ServerResourcesCPUShares) SetTotal(val int) {
	s.Total = val
}

// Information about disk size and usage.
type ServerResourcesDisk struct {
	// The total amount of disk space in MBs.
	TotalMB int `json:"total_mb"`
	// The amount of disk space used in MBs.
	UsedMB int `json:"used_mb"`
}

// GetTotalMB returns the value of TotalMB.
func (s *ServerResourcesDisk) GetTotalMB() int {
	return s.TotalMB
}

// GetUsedMB returns the value of UsedMB.
func (s *ServerResourcesDisk) GetUsedMB() int {
	return s.UsedMB
}

// SetTotalMB sets the value of TotalMB.
func (s *ServerResourcesDisk) SetTotalMB(val int) {
	s.TotalMB = val
}

// SetUsedMB sets the value of UsedMB.
func (s *ServerResourcesDisk) SetUsedMB(val int) {
	s.UsedMB = val
}

// Information about RAM Resources.
type ServerResourcesRAM struct {
	// The total amount of RAM in MBsr.
	TotalMB int `json:"total_mb"`
	// The total amount of allocated RAM in MBs.
	AllocatedMB int `json:"allocated_mb"`
	// The total amount of used RAM in MBs.
	UsedMB int `json:"used_mb"`
	// The total amount of provisioned RAM in MBs.
	ProvisionedMB int `json:"provisioned_mb"`
}

// GetTotalMB returns the value of TotalMB.
func (s *ServerResourcesRAM) GetTotalMB() int {
	return s.TotalMB
}

// GetAllocatedMB returns the value of AllocatedMB.
func (s *ServerResourcesRAM) GetAllocatedMB() int {
	return s.AllocatedMB
}

// GetUsedMB returns the value of UsedMB.
func (s *ServerResourcesRAM) GetUsedMB() int {
	return s.UsedMB
}

// GetProvisionedMB returns the value of ProvisionedMB.
func (s *ServerResourcesRAM) GetProvisionedMB() int {
	return s.ProvisionedMB
}

// SetTotalMB sets the value of TotalMB.
func (s *ServerResourcesRAM) SetTotalMB(val int) {
	s.TotalMB = val
}

// SetAllocatedMB sets the value of AllocatedMB.
func (s *ServerResourcesRAM) SetAllocatedMB(val int) {
	s.AllocatedMB = val
}

// SetUsedMB sets the value of UsedMB.
func (s *ServerResourcesRAM) SetUsedMB(val int) {
	s.UsedMB = val
}

// SetProvisionedMB sets the value of ProvisionedMB.
func (s *ServerResourcesRAM) SetProvisionedMB(val int) {
	s.ProvisionedMB = val
}

// Specs for a given server.
// Ref: #/components/schemas/ServerSpecs
type ServerSpecs struct {
	CPU      CPUSpec       `json:"cpu"`
	Gpu      GPUSpec       `json:"gpu"`
	Memory   MemorySpec    `json:"memory"`
	Storage  []StorageSpec `json:"storage"`
	Network  []NetworkSpec `json:"network"`
	Features FeaturesSpec  `json:"features"`
}

// GetCPU returns the value of CPU.
func (s *ServerSpecs) GetCPU() CPUSpec {
	return s.CPU
}

// GetGpu returns the value of Gpu.
func (s *ServerSpecs) GetGpu() GPUSpec {
	return s.Gpu
}

// GetMemory returns the value of Memory.
func (s *ServerSpecs) GetMemory() MemorySpec {
	return s.Memory
}

// GetStorage returns the value of Storage.
func (s *ServerSpecs) GetStorage() []StorageSpec {
	return s.Storage
}

// GetNetwork returns the value of Network.
func (s *ServerSpecs) GetNetwork() []NetworkSpec {
	return s.Network
}

// GetFeatures returns the value of Features.
func (s *ServerSpecs) GetFeatures() FeaturesSpec {
	return s.Features
}

// SetCPU sets the value of CPU.
func (s *ServerSpecs) SetCPU(val CPUSpec) {
	s.CPU = val
}

// SetGpu sets the value of Gpu.
func (s *ServerSpecs) SetGpu(val GPUSpec) {
	s.Gpu = val
}

// SetMemory sets the value of Memory.
func (s *ServerSpecs) SetMemory(val MemorySpec) {
	s.Memory = val
}

// SetStorage sets the value of Storage.
func (s *ServerSpecs) SetStorage(val []StorageSpec) {
	s.Storage = val
}

// SetNetwork sets the value of Network.
func (s *ServerSpecs) SetNetwork(val []NetworkSpec) {
	s.Network = val
}

// SetFeatures sets the value of Features.
func (s *ServerSpecs) SetFeatures(val FeaturesSpec) {
	s.Features = val
}

// Merged schema.
// Ref: #/components/schemas/ServerState
type ServerState struct {
	// The current state of the server.
	Current ServerStateCurrent `json:"current"`
	Changed DateTime           `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptServerStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *ServerState) GetCurrent() ServerStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *ServerState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *ServerState) GetError() OptServerStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *ServerState) SetCurrent(val ServerStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *ServerState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *ServerState) SetError(val OptServerStateError) {
	s.Error = val
}

// The current state of the server.
type ServerStateCurrent string

const (
	ServerStateCurrentNew          ServerStateCurrent = "new"
	ServerStateCurrentProvisioning ServerStateCurrent = "provisioning"
	ServerStateCurrentConfiguring  ServerStateCurrent = "configuring"
	ServerStateCurrentLive         ServerStateCurrent = "live"
	ServerStateCurrentDeleting     ServerStateCurrent = "deleting"
	ServerStateCurrentDeleted      ServerStateCurrent = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s ServerStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case ServerStateCurrentNew:
		return []byte(s), nil
	case ServerStateCurrentProvisioning:
		return []byte(s), nil
	case ServerStateCurrentConfiguring:
		return []byte(s), nil
	case ServerStateCurrentLive:
		return []byte(s), nil
	case ServerStateCurrentDeleting:
		return []byte(s), nil
	case ServerStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ServerStateCurrent) UnmarshalText(data []byte) error {
	switch ServerStateCurrent(data) {
	case ServerStateCurrentNew:
		*s = ServerStateCurrentNew
		return nil
	case ServerStateCurrentProvisioning:
		*s = ServerStateCurrentProvisioning
		return nil
	case ServerStateCurrentConfiguring:
		*s = ServerStateCurrentConfiguring
		return nil
	case ServerStateCurrentLive:
		*s = ServerStateCurrentLive
		return nil
	case ServerStateCurrentDeleting:
		*s = ServerStateCurrentDeleting
		return nil
	case ServerStateCurrentDeleted:
		*s = ServerStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type ServerStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *ServerStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *ServerStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *ServerStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *ServerStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Statistics about the CPU resources on a server.
// Ref: #/components/schemas/ServerStatsCpu
type ServerStatsCpu struct {
	// The number of CPU's or vCPU's for a given server.
	Cores OptInt `json:"cores"`
	// An array of processor information objects.
	Processors []ServerStatsCpuProcessorsItem `json:"processors"`
}

// GetCores returns the value of Cores.
func (s *ServerStatsCpu) GetCores() OptInt {
	return s.Cores
}

// GetProcessors returns the value of Processors.
func (s *ServerStatsCpu) GetProcessors() []ServerStatsCpuProcessorsItem {
	return s.Processors
}

// SetCores sets the value of Cores.
func (s *ServerStatsCpu) SetCores(val OptInt) {
	s.Cores = val
}

// SetProcessors sets the value of Processors.
func (s *ServerStatsCpu) SetProcessors(val []ServerStatsCpuProcessorsItem) {
	s.Processors = val
}

// Processor information.
type ServerStatsCpuProcessorsItem struct {
	// The model of the processor.
	Model OptString `json:"model"`
	// The speed of the processor.
	Speed OptInt `json:"speed"`
}

// GetModel returns the value of Model.
func (s *ServerStatsCpuProcessorsItem) GetModel() OptString {
	return s.Model
}

// GetSpeed returns the value of Speed.
func (s *ServerStatsCpuProcessorsItem) GetSpeed() OptInt {
	return s.Speed
}

// SetModel sets the value of Model.
func (s *ServerStatsCpuProcessorsItem) SetModel(val OptString) {
	s.Model = val
}

// SetSpeed sets the value of Speed.
func (s *ServerStatsCpuProcessorsItem) SetSpeed(val OptInt) {
	s.Speed = val
}

// Statistics about the current load on the server.
// Ref: #/components/schemas/ServerStatsLoad
type ServerStatsLoad struct {
	// The 1 minute load average.
	Avg1m int `json:"avg1m"`
	// The 5 minute load average.
	Avg5m int `json:"avg5m"`
	// The 15 minute load average.
	Avg15m int `json:"avg15m"`
}

// GetAvg1m returns the value of Avg1m.
func (s *ServerStatsLoad) GetAvg1m() int {
	return s.Avg1m
}

// GetAvg5m returns the value of Avg5m.
func (s *ServerStatsLoad) GetAvg5m() int {
	return s.Avg5m
}

// GetAvg15m returns the value of Avg15m.
func (s *ServerStatsLoad) GetAvg15m() int {
	return s.Avg15m
}

// SetAvg1m sets the value of Avg1m.
func (s *ServerStatsLoad) SetAvg1m(val int) {
	s.Avg1m = val
}

// SetAvg5m sets the value of Avg5m.
func (s *ServerStatsLoad) SetAvg5m(val int) {
	s.Avg5m = val
}

// SetAvg15m sets the value of Avg15m.
func (s *ServerStatsLoad) SetAvg15m(val int) {
	s.Avg15m = val
}

// Statistics about the networks on a given server.
// Ref: #/components/schemas/ServerStatsNetwork
type ServerStatsNetwork struct {
	// Network interfaces for a given server.
	Interfaces OptServerStatsNetworkInterfaces `json:"interfaces"`
	// The public IPv4 address used to connect to this server.
	ExternalIpv4 string `json:"external_ipv4"`
	// The public IPv6 address used to connect to this server.
	ExternalIpv6 string `json:"external_ipv6"`
}

// GetInterfaces returns the value of Interfaces.
func (s *ServerStatsNetwork) GetInterfaces() OptServerStatsNetworkInterfaces {
	return s.Interfaces
}

// GetExternalIpv4 returns the value of ExternalIpv4.
func (s *ServerStatsNetwork) GetExternalIpv4() string {
	return s.ExternalIpv4
}

// GetExternalIpv6 returns the value of ExternalIpv6.
func (s *ServerStatsNetwork) GetExternalIpv6() string {
	return s.ExternalIpv6
}

// SetInterfaces sets the value of Interfaces.
func (s *ServerStatsNetwork) SetInterfaces(val OptServerStatsNetworkInterfaces) {
	s.Interfaces = val
}

// SetExternalIpv4 sets the value of ExternalIpv4.
func (s *ServerStatsNetwork) SetExternalIpv4(val string) {
	s.ExternalIpv4 = val
}

// SetExternalIpv6 sets the value of ExternalIpv6.
func (s *ServerStatsNetwork) SetExternalIpv6(val string) {
	s.ExternalIpv6 = val
}

// Network interfaces for a given server.
type ServerStatsNetworkInterfaces map[string]ServerStatsNetworkInterfacesItem

func (s *ServerStatsNetworkInterfaces) init() ServerStatsNetworkInterfaces {
	m := *s
	if m == nil {
		m = map[string]ServerStatsNetworkInterfacesItem{}
		*s = m
	}
	return m
}

// Network interface.
type ServerStatsNetworkInterfacesItem struct {
	// The interface name.
	Interface OptString `json:"interface"`
	// Flags for the given interface.
	Flags OptString `json:"flags"`
	// The maximum transmission unit for the interface.
	Mtu OptInt `json:"mtu"`
	// The mac address for the interface.
	MACAddr OptString `json:"mac_addr"`
	// An array of IP addresses associated with the interface.
	Addrs []string `json:"addrs"`
}

// GetInterface returns the value of Interface.
func (s *ServerStatsNetworkInterfacesItem) GetInterface() OptString {
	return s.Interface
}

// GetFlags returns the value of Flags.
func (s *ServerStatsNetworkInterfacesItem) GetFlags() OptString {
	return s.Flags
}

// GetMtu returns the value of Mtu.
func (s *ServerStatsNetworkInterfacesItem) GetMtu() OptInt {
	return s.Mtu
}

// GetMACAddr returns the value of MACAddr.
func (s *ServerStatsNetworkInterfacesItem) GetMACAddr() OptString {
	return s.MACAddr
}

// GetAddrs returns the value of Addrs.
func (s *ServerStatsNetworkInterfacesItem) GetAddrs() []string {
	return s.Addrs
}

// SetInterface sets the value of Interface.
func (s *ServerStatsNetworkInterfacesItem) SetInterface(val OptString) {
	s.Interface = val
}

// SetFlags sets the value of Flags.
func (s *ServerStatsNetworkInterfacesItem) SetFlags(val OptString) {
	s.Flags = val
}

// SetMtu sets the value of Mtu.
func (s *ServerStatsNetworkInterfacesItem) SetMtu(val OptInt) {
	s.Mtu = val
}

// SetMACAddr sets the value of MACAddr.
func (s *ServerStatsNetworkInterfacesItem) SetMACAddr(val OptString) {
	s.MACAddr = val
}

// SetAddrs sets the value of Addrs.
func (s *ServerStatsNetworkInterfacesItem) SetAddrs(val []string) {
	s.Addrs = val
}

// Statistics about the operating system installed on the server (CycleOS).
// Ref: #/components/schemas/ServerStatsOS
type ServerStatsOS struct {
	// The currently installed release version of the OS.
	Release OptString `json:"release"`
	// The currently installed kernel version.
	Kernel OptString `json:"kernel"`
	// The hostname as set by the given server's OS.
	Hostname OptString `json:"hostname"`
}

// GetRelease returns the value of Release.
func (s *ServerStatsOS) GetRelease() OptString {
	return s.Release
}

// GetKernel returns the value of Kernel.
func (s *ServerStatsOS) GetKernel() OptString {
	return s.Kernel
}

// GetHostname returns the value of Hostname.
func (s *ServerStatsOS) GetHostname() OptString {
	return s.Hostname
}

// SetRelease sets the value of Release.
func (s *ServerStatsOS) SetRelease(val OptString) {
	s.Release = val
}

// SetKernel sets the value of Kernel.
func (s *ServerStatsOS) SetKernel(val OptString) {
	s.Kernel = val
}

// SetHostname sets the value of Hostname.
func (s *ServerStatsOS) SetHostname(val OptString) {
	s.Hostname = val
}

// Statistics about the RAM on a given server.
// Ref: #/components/schemas/ServerStatsRam
type ServerStatsRam struct {
	// The available RAM on the server.
	Available int `json:"available"`
	// The free RAM on the server.
	Free int `json:"free"`
	// The total RAM on the server.
	Total int `json:"total"`
}

// GetAvailable returns the value of Available.
func (s *ServerStatsRam) GetAvailable() int {
	return s.Available
}

// GetFree returns the value of Free.
func (s *ServerStatsRam) GetFree() int {
	return s.Free
}

// GetTotal returns the value of Total.
func (s *ServerStatsRam) GetTotal() int {
	return s.Total
}

// SetAvailable sets the value of Available.
func (s *ServerStatsRam) SetAvailable(val int) {
	s.Available = val
}

// SetFree sets the value of Free.
func (s *ServerStatsRam) SetFree(val int) {
	s.Free = val
}

// SetTotal sets the value of Total.
func (s *ServerStatsRam) SetTotal(val int) {
	s.Total = val
}

// Statistics about storage for a given server.
// Ref: #/components/schemas/ServerStatsStorage
type ServerStatsStorage struct {
	// An array of volume group objects.
	VolumeGroups ServerStatsStorageVolumeGroups `json:"volume_groups"`
	// Records that show information about mounted filesystems where the key is the path to the mount.
	Mounts ServerStatsStorageMounts `json:"mounts"`
}

// GetVolumeGroups returns the value of VolumeGroups.
func (s *ServerStatsStorage) GetVolumeGroups() ServerStatsStorageVolumeGroups {
	return s.VolumeGroups
}

// GetMounts returns the value of Mounts.
func (s *ServerStatsStorage) GetMounts() ServerStatsStorageMounts {
	return s.Mounts
}

// SetVolumeGroups sets the value of VolumeGroups.
func (s *ServerStatsStorage) SetVolumeGroups(val ServerStatsStorageVolumeGroups) {
	s.VolumeGroups = val
}

// SetMounts sets the value of Mounts.
func (s *ServerStatsStorage) SetMounts(val ServerStatsStorageMounts) {
	s.Mounts = val
}

// Records that show information about mounted filesystems where the key is the path to the mount.
type ServerStatsStorageMounts map[string]ServerStatsStorageMountsItem

func (s *ServerStatsStorageMounts) init() ServerStatsStorageMounts {
	m := *s
	if m == nil {
		m = map[string]ServerStatsStorageMountsItem{}
		*s = m
	}
	return m
}

// Mounted filesystem information.
type ServerStatsStorageMountsItem struct {
	// The device assocaited with the mount.
	Device OptString `json:"device"`
	// The type of filesystem in use by the mount.
	Type string `json:"type"`
	// The path the mount is associated with.
	Mountpoint OptString `json:"mountpoint"`
	// The total amount of storage in KB available at this mount.
	Total int `json:"total"`
	// The amount of uninitialized storage in KB.
	Free int `json:"free"`
	// The amount of storage being used in KB.
	Used int `json:"used"`
}

// GetDevice returns the value of Device.
func (s *ServerStatsStorageMountsItem) GetDevice() OptString {
	return s.Device
}

// GetType returns the value of Type.
func (s *ServerStatsStorageMountsItem) GetType() string {
	return s.Type
}

// GetMountpoint returns the value of Mountpoint.
func (s *ServerStatsStorageMountsItem) GetMountpoint() OptString {
	return s.Mountpoint
}

// GetTotal returns the value of Total.
func (s *ServerStatsStorageMountsItem) GetTotal() int {
	return s.Total
}

// GetFree returns the value of Free.
func (s *ServerStatsStorageMountsItem) GetFree() int {
	return s.Free
}

// GetUsed returns the value of Used.
func (s *ServerStatsStorageMountsItem) GetUsed() int {
	return s.Used
}

// SetDevice sets the value of Device.
func (s *ServerStatsStorageMountsItem) SetDevice(val OptString) {
	s.Device = val
}

// SetType sets the value of Type.
func (s *ServerStatsStorageMountsItem) SetType(val string) {
	s.Type = val
}

// SetMountpoint sets the value of Mountpoint.
func (s *ServerStatsStorageMountsItem) SetMountpoint(val OptString) {
	s.Mountpoint = val
}

// SetTotal sets the value of Total.
func (s *ServerStatsStorageMountsItem) SetTotal(val int) {
	s.Total = val
}

// SetFree sets the value of Free.
func (s *ServerStatsStorageMountsItem) SetFree(val int) {
	s.Free = val
}

// SetUsed sets the value of Used.
func (s *ServerStatsStorageMountsItem) SetUsed(val int) {
	s.Used = val
}

// An array of volume group objects.
type ServerStatsStorageVolumeGroups map[string]ServerStatsStorageVolumeGroupsItem

func (s *ServerStatsStorageVolumeGroups) init() ServerStatsStorageVolumeGroups {
	m := *s
	if m == nil {
		m = map[string]ServerStatsStorageVolumeGroupsItem{}
		*s = m
	}
	return m
}

// Volume group.
type ServerStatsStorageVolumeGroupsItem struct {
	// A name for the volume group.
	Name string `json:"name"`
	// A number representing the aggregate group volume size in megabytes.
	Size int `json:"size"`
	// The actual volumes.
	Volumes ServerStatsStorageVolumeGroupsItemVolumes `json:"volumes"`
}

// GetName returns the value of Name.
func (s *ServerStatsStorageVolumeGroupsItem) GetName() string {
	return s.Name
}

// GetSize returns the value of Size.
func (s *ServerStatsStorageVolumeGroupsItem) GetSize() int {
	return s.Size
}

// GetVolumes returns the value of Volumes.
func (s *ServerStatsStorageVolumeGroupsItem) GetVolumes() ServerStatsStorageVolumeGroupsItemVolumes {
	return s.Volumes
}

// SetName sets the value of Name.
func (s *ServerStatsStorageVolumeGroupsItem) SetName(val string) {
	s.Name = val
}

// SetSize sets the value of Size.
func (s *ServerStatsStorageVolumeGroupsItem) SetSize(val int) {
	s.Size = val
}

// SetVolumes sets the value of Volumes.
func (s *ServerStatsStorageVolumeGroupsItem) SetVolumes(val ServerStatsStorageVolumeGroupsItemVolumes) {
	s.Volumes = val
}

// The actual volumes.
type ServerStatsStorageVolumeGroupsItemVolumes map[string]ServerStatsStorageVolumeGroupsItemVolumesItem

func (s *ServerStatsStorageVolumeGroupsItemVolumes) init() ServerStatsStorageVolumeGroupsItemVolumes {
	m := *s
	if m == nil {
		m = map[string]ServerStatsStorageVolumeGroupsItemVolumesItem{}
		*s = m
	}
	return m
}

type ServerStatsStorageVolumeGroupsItemVolumesItem struct {
	// The name of the volume.
	Name string `json:"name"`
	// The size in megabytes of the volume.
	Size int `json:"size"`
	// The percent of the volumes size being used by data.
	DataPercent int `json:"data_percent"`
	// The percent of the volumes size being used by meta data.
	MetaPercent int `json:"meta_percent"`
	// The name of the volume pool this volume is associated with.
	Pool string `json:"pool"`
}

// GetName returns the value of Name.
func (s *ServerStatsStorageVolumeGroupsItemVolumesItem) GetName() string {
	return s.Name
}

// GetSize returns the value of Size.
func (s *ServerStatsStorageVolumeGroupsItemVolumesItem) GetSize() int {
	return s.Size
}

// GetDataPercent returns the value of DataPercent.
func (s *ServerStatsStorageVolumeGroupsItemVolumesItem) GetDataPercent() int {
	return s.DataPercent
}

// GetMetaPercent returns the value of MetaPercent.
func (s *ServerStatsStorageVolumeGroupsItemVolumesItem) GetMetaPercent() int {
	return s.MetaPercent
}

// GetPool returns the value of Pool.
func (s *ServerStatsStorageVolumeGroupsItemVolumesItem) GetPool() string {
	return s.Pool
}

// SetName sets the value of Name.
func (s *ServerStatsStorageVolumeGroupsItemVolumesItem) SetName(val string) {
	s.Name = val
}

// SetSize sets the value of Size.
func (s *ServerStatsStorageVolumeGroupsItemVolumesItem) SetSize(val int) {
	s.Size = val
}

// SetDataPercent sets the value of DataPercent.
func (s *ServerStatsStorageVolumeGroupsItemVolumesItem) SetDataPercent(val int) {
	s.DataPercent = val
}

// SetMetaPercent sets the value of MetaPercent.
func (s *ServerStatsStorageVolumeGroupsItemVolumesItem) SetMetaPercent(val int) {
	s.MetaPercent = val
}

// SetPool sets the value of Pool.
func (s *ServerStatsStorageVolumeGroupsItemVolumesItem) SetPool(val string) {
	s.Pool = val
}

// Statistics about a given servers telemetery data.
// Ref: #/components/schemas/ServerStatsTelemetry
type ServerStatsTelemetry struct {
	// The timestamp for when the telemetery data was collected.
	Time DateTime        `json:"time"`
	Load ServerStatsLoad `json:"load"`
	RAM  ServerStatsRam  `json:"ram"`
	// Telemetry data for the base volume of a given server.
	StorageBase ServerStatsTelemetryStorageBase `json:"storage_base"`
	// User data storage across all devices.
	StoragePool ServerStatsTelemetryStoragePool `json:"storage_pool"`
}

// GetTime returns the value of Time.
func (s *ServerStatsTelemetry) GetTime() DateTime {
	return s.Time
}

// GetLoad returns the value of Load.
func (s *ServerStatsTelemetry) GetLoad() ServerStatsLoad {
	return s.Load
}

// GetRAM returns the value of RAM.
func (s *ServerStatsTelemetry) GetRAM() ServerStatsRam {
	return s.RAM
}

// GetStorageBase returns the value of StorageBase.
func (s *ServerStatsTelemetry) GetStorageBase() ServerStatsTelemetryStorageBase {
	return s.StorageBase
}

// GetStoragePool returns the value of StoragePool.
func (s *ServerStatsTelemetry) GetStoragePool() ServerStatsTelemetryStoragePool {
	return s.StoragePool
}

// SetTime sets the value of Time.
func (s *ServerStatsTelemetry) SetTime(val DateTime) {
	s.Time = val
}

// SetLoad sets the value of Load.
func (s *ServerStatsTelemetry) SetLoad(val ServerStatsLoad) {
	s.Load = val
}

// SetRAM sets the value of RAM.
func (s *ServerStatsTelemetry) SetRAM(val ServerStatsRam) {
	s.RAM = val
}

// SetStorageBase sets the value of StorageBase.
func (s *ServerStatsTelemetry) SetStorageBase(val ServerStatsTelemetryStorageBase) {
	s.StorageBase = val
}

// SetStoragePool sets the value of StoragePool.
func (s *ServerStatsTelemetry) SetStoragePool(val ServerStatsTelemetryStoragePool) {
	s.StoragePool = val
}

// Telemetry data for the base volume of a given server.
type ServerStatsTelemetryStorageBase struct {
	// The amount of storage currently used in the base volume.
	Used int `json:"used"`
	// The amount of free space on the base volume.
	Free int `json:"free"`
	// The total amount of space on the base volume.
	Total int `json:"total"`
}

// GetUsed returns the value of Used.
func (s *ServerStatsTelemetryStorageBase) GetUsed() int {
	return s.Used
}

// GetFree returns the value of Free.
func (s *ServerStatsTelemetryStorageBase) GetFree() int {
	return s.Free
}

// GetTotal returns the value of Total.
func (s *ServerStatsTelemetryStorageBase) GetTotal() int {
	return s.Total
}

// SetUsed sets the value of Used.
func (s *ServerStatsTelemetryStorageBase) SetUsed(val int) {
	s.Used = val
}

// SetFree sets the value of Free.
func (s *ServerStatsTelemetryStorageBase) SetFree(val int) {
	s.Free = val
}

// SetTotal sets the value of Total.
func (s *ServerStatsTelemetryStorageBase) SetTotal(val int) {
	s.Total = val
}

// User data storage across all devices.
type ServerStatsTelemetryStoragePool struct {
	// The percentage of storage used by user data.
	DataPercent float64 `json:"data_percent"`
	// The percentage of storage used by the file allocation stables, etc.
	MetaPercent float64 `json:"meta_percent"`
	// The total amount of storage available.
	Total float64 `json:"total"`
}

// GetDataPercent returns the value of DataPercent.
func (s *ServerStatsTelemetryStoragePool) GetDataPercent() float64 {
	return s.DataPercent
}

// GetMetaPercent returns the value of MetaPercent.
func (s *ServerStatsTelemetryStoragePool) GetMetaPercent() float64 {
	return s.MetaPercent
}

// GetTotal returns the value of Total.
func (s *ServerStatsTelemetryStoragePool) GetTotal() float64 {
	return s.Total
}

// SetDataPercent sets the value of DataPercent.
func (s *ServerStatsTelemetryStoragePool) SetDataPercent(val float64) {
	s.DataPercent = val
}

// SetMetaPercent sets the value of MetaPercent.
func (s *ServerStatsTelemetryStoragePool) SetMetaPercent(val float64) {
	s.MetaPercent = val
}

// SetTotal sets the value of Total.
func (s *ServerStatsTelemetryStoragePool) SetTotal(val float64) {
	s.Total = val
}

// Statistics describing the uptime of a given server.
// Ref: #/components/schemas/ServerStatsUptime
type ServerStatsUptime struct {
	// The amount in seconds the server has been up (resets on restart).
	Seconds OptFloat64 `json:"seconds"`
	// CPU idle time.
	CPUIdle OptFloat64 `json:"cpu_idle"`
}

// GetSeconds returns the value of Seconds.
func (s *ServerStatsUptime) GetSeconds() OptFloat64 {
	return s.Seconds
}

// GetCPUIdle returns the value of CPUIdle.
func (s *ServerStatsUptime) GetCPUIdle() OptFloat64 {
	return s.CPUIdle
}

// SetSeconds sets the value of Seconds.
func (s *ServerStatsUptime) SetSeconds(val OptFloat64) {
	s.Seconds = val
}

// SetCPUIdle sets the value of CPUIdle.
func (s *ServerStatsUptime) SetCPUIdle(val OptFloat64) {
	s.CPUIdle = val
}

// Information about the versions of Cycle services on a given server.
// Ref: #/components/schemas/ServerStatsVersions
type ServerStatsVersions struct {
	// A list of records about Cycle services.
	Services ServerStatsVersionsServices `json:"services"`
}

// GetServices returns the value of Services.
func (s *ServerStatsVersions) GetServices() ServerStatsVersionsServices {
	return s.Services
}

// SetServices sets the value of Services.
func (s *ServerStatsVersions) SetServices(val ServerStatsVersionsServices) {
	s.Services = val
}

// A list of records about Cycle services.
type ServerStatsVersionsServices map[string]ServerStatsVersionsServicesItem

func (s *ServerStatsVersionsServices) init() ServerStatsVersionsServices {
	m := *s
	if m == nil {
		m = map[string]ServerStatsVersionsServicesItem{}
		*s = m
	}
	return m
}

type ServerStatsVersionsServicesItem string

const (
	ServerStatsVersionsServicesItemFactory        ServerStatsVersionsServicesItem = "factory"
	ServerStatsVersionsServicesItemCompute        ServerStatsVersionsServicesItem = "compute"
	ServerStatsVersionsServicesItemComputeSpawner ServerStatsVersionsServicesItem = "compute-spawner"
	ServerStatsVersionsServicesItemComputeProxy   ServerStatsVersionsServicesItem = "compute-proxy"
	ServerStatsVersionsServicesItemPublicAPI      ServerStatsVersionsServicesItem = "public-api"
	ServerStatsVersionsServicesItemAdminAPI       ServerStatsVersionsServicesItem = "admin-api"
	ServerStatsVersionsServicesItemAdminPortal    ServerStatsVersionsServicesItem = "admin-portal"
	ServerStatsVersionsServicesItemOAuth          ServerStatsVersionsServicesItem = "oauth"
	ServerStatsVersionsServicesItemPortal         ServerStatsVersionsServicesItem = "portal"
	ServerStatsVersionsServicesItemConsole        ServerStatsVersionsServicesItem = "console"
	ServerStatsVersionsServicesItemManager        ServerStatsVersionsServicesItem = "manager"
	ServerStatsVersionsServicesItemDNS            ServerStatsVersionsServicesItem = "dns"
	ServerStatsVersionsServicesItemAgent          ServerStatsVersionsServicesItem = "agent"
	ServerStatsVersionsServicesItemAgentSpawner   ServerStatsVersionsServicesItem = "agent-spawner"
	ServerStatsVersionsServicesItemNexus          ServerStatsVersionsServicesItem = "nexus"
)

// MarshalText implements encoding.TextMarshaler.
func (s ServerStatsVersionsServicesItem) MarshalText() ([]byte, error) {
	switch s {
	case ServerStatsVersionsServicesItemFactory:
		return []byte(s), nil
	case ServerStatsVersionsServicesItemCompute:
		return []byte(s), nil
	case ServerStatsVersionsServicesItemComputeSpawner:
		return []byte(s), nil
	case ServerStatsVersionsServicesItemComputeProxy:
		return []byte(s), nil
	case ServerStatsVersionsServicesItemPublicAPI:
		return []byte(s), nil
	case ServerStatsVersionsServicesItemAdminAPI:
		return []byte(s), nil
	case ServerStatsVersionsServicesItemAdminPortal:
		return []byte(s), nil
	case ServerStatsVersionsServicesItemOAuth:
		return []byte(s), nil
	case ServerStatsVersionsServicesItemPortal:
		return []byte(s), nil
	case ServerStatsVersionsServicesItemConsole:
		return []byte(s), nil
	case ServerStatsVersionsServicesItemManager:
		return []byte(s), nil
	case ServerStatsVersionsServicesItemDNS:
		return []byte(s), nil
	case ServerStatsVersionsServicesItemAgent:
		return []byte(s), nil
	case ServerStatsVersionsServicesItemAgentSpawner:
		return []byte(s), nil
	case ServerStatsVersionsServicesItemNexus:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ServerStatsVersionsServicesItem) UnmarshalText(data []byte) error {
	switch ServerStatsVersionsServicesItem(data) {
	case ServerStatsVersionsServicesItemFactory:
		*s = ServerStatsVersionsServicesItemFactory
		return nil
	case ServerStatsVersionsServicesItemCompute:
		*s = ServerStatsVersionsServicesItemCompute
		return nil
	case ServerStatsVersionsServicesItemComputeSpawner:
		*s = ServerStatsVersionsServicesItemComputeSpawner
		return nil
	case ServerStatsVersionsServicesItemComputeProxy:
		*s = ServerStatsVersionsServicesItemComputeProxy
		return nil
	case ServerStatsVersionsServicesItemPublicAPI:
		*s = ServerStatsVersionsServicesItemPublicAPI
		return nil
	case ServerStatsVersionsServicesItemAdminAPI:
		*s = ServerStatsVersionsServicesItemAdminAPI
		return nil
	case ServerStatsVersionsServicesItemAdminPortal:
		*s = ServerStatsVersionsServicesItemAdminPortal
		return nil
	case ServerStatsVersionsServicesItemOAuth:
		*s = ServerStatsVersionsServicesItemOAuth
		return nil
	case ServerStatsVersionsServicesItemPortal:
		*s = ServerStatsVersionsServicesItemPortal
		return nil
	case ServerStatsVersionsServicesItemConsole:
		*s = ServerStatsVersionsServicesItemConsole
		return nil
	case ServerStatsVersionsServicesItemManager:
		*s = ServerStatsVersionsServicesItemManager
		return nil
	case ServerStatsVersionsServicesItemDNS:
		*s = ServerStatsVersionsServicesItemDNS
		return nil
	case ServerStatsVersionsServicesItemAgent:
		*s = ServerStatsVersionsServicesItemAgent
		return nil
	case ServerStatsVersionsServicesItemAgentSpawner:
		*s = ServerStatsVersionsServicesItemAgentSpawner
		return nil
	case ServerStatsVersionsServicesItemNexus:
		*s = ServerStatsVersionsServicesItemNexus
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Tags for a given server.
// Ref: #/components/schemas/ServerTags
type ServerTags struct {
	// An array of server tags.
	Data []string `json:"data"`
}

// GetData returns the value of Data.
func (s *ServerTags) GetData() []string {
	return s.Data
}

// SetData sets the value of Data.
func (s *ServerTags) SetData(val []string) {
	s.Data = val
}

// A resource thats associated with a server.
// Ref: #/components/schemas/ServersIncludes
type ServersIncludes map[string]InfraServer

func (s *ServersIncludes) init() ServersIncludes {
	m := *s
	if m == nil {
		m = map[string]InfraServer{}
		*s = m
	}
	return m
}

// Information about the instances on a server.
// Ref: #/components/schemas/ServersList
type ServersList struct {
	ID ID `json:"id"`
	// A summary of resources by state.
	Instances ServersListInstances `json:"instances"`
	// The server hostname.
	Hostname string `json:"hostname"`
}

// GetID returns the value of ID.
func (s *ServersList) GetID() ID {
	return s.ID
}

// GetInstances returns the value of Instances.
func (s *ServersList) GetInstances() ServersListInstances {
	return s.Instances
}

// GetHostname returns the value of Hostname.
func (s *ServersList) GetHostname() string {
	return s.Hostname
}

// SetID sets the value of ID.
func (s *ServersList) SetID(val ID) {
	s.ID = val
}

// SetInstances sets the value of Instances.
func (s *ServersList) SetInstances(val ServersListInstances) {
	s.Instances = val
}

// SetHostname sets the value of Hostname.
func (s *ServersList) SetHostname(val string) {
	s.Hostname = val
}

// A summary of resources by state.
type ServersListInstances struct {
	// A count of this resource, grouped by state.
	State ServersListInstancesState `json:"state"`
	// The total number of this resource.
	Total int `json:"total"`
	// The total number of this resource available, less any deleted ones.
	Available int `json:"available"`
}

// GetState returns the value of State.
func (s *ServersListInstances) GetState() ServersListInstancesState {
	return s.State
}

// GetTotal returns the value of Total.
func (s *ServersListInstances) GetTotal() int {
	return s.Total
}

// GetAvailable returns the value of Available.
func (s *ServersListInstances) GetAvailable() int {
	return s.Available
}

// SetState sets the value of State.
func (s *ServersListInstances) SetState(val ServersListInstancesState) {
	s.State = val
}

// SetTotal sets the value of Total.
func (s *ServersListInstances) SetTotal(val int) {
	s.Total = val
}

// SetAvailable sets the value of Available.
func (s *ServersListInstances) SetAvailable(val int) {
	s.Available = val
}

// A count of this resource, grouped by state.
type ServersListInstancesState map[string]int

func (s *ServersListInstancesState) init() ServersListInstancesState {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

// Information about billing service.
// Ref: #/components/schemas/Service
type Service struct {
	ID      ID           `json:"id"`
	HubID   HubID        `json:"hub_id"`
	Creator CreatorScope `json:"creator"`
	// Billing service title.
	Title    string        `json:"title"`
	Order    Order         `json:"order"`
	Item     ServiceItem   `json:"item"`
	Discount Discount      `json:"discount"`
	Price    BillingAmount `json:"price"`
	Term     Term          `json:"term"`
	// A collection of timestamps for each event in the billing service's lifetime.
	Events ServiceEvents       `json:"events"`
	State  BillingServiceState `json:"state"`
}

// GetID returns the value of ID.
func (s *Service) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *Service) GetHubID() HubID {
	return s.HubID
}

// GetCreator returns the value of Creator.
func (s *Service) GetCreator() CreatorScope {
	return s.Creator
}

// GetTitle returns the value of Title.
func (s *Service) GetTitle() string {
	return s.Title
}

// GetOrder returns the value of Order.
func (s *Service) GetOrder() Order {
	return s.Order
}

// GetItem returns the value of Item.
func (s *Service) GetItem() ServiceItem {
	return s.Item
}

// GetDiscount returns the value of Discount.
func (s *Service) GetDiscount() Discount {
	return s.Discount
}

// GetPrice returns the value of Price.
func (s *Service) GetPrice() BillingAmount {
	return s.Price
}

// GetTerm returns the value of Term.
func (s *Service) GetTerm() Term {
	return s.Term
}

// GetEvents returns the value of Events.
func (s *Service) GetEvents() ServiceEvents {
	return s.Events
}

// GetState returns the value of State.
func (s *Service) GetState() BillingServiceState {
	return s.State
}

// SetID sets the value of ID.
func (s *Service) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *Service) SetHubID(val HubID) {
	s.HubID = val
}

// SetCreator sets the value of Creator.
func (s *Service) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetTitle sets the value of Title.
func (s *Service) SetTitle(val string) {
	s.Title = val
}

// SetOrder sets the value of Order.
func (s *Service) SetOrder(val Order) {
	s.Order = val
}

// SetItem sets the value of Item.
func (s *Service) SetItem(val ServiceItem) {
	s.Item = val
}

// SetDiscount sets the value of Discount.
func (s *Service) SetDiscount(val Discount) {
	s.Discount = val
}

// SetPrice sets the value of Price.
func (s *Service) SetPrice(val BillingAmount) {
	s.Price = val
}

// SetTerm sets the value of Term.
func (s *Service) SetTerm(val Term) {
	s.Term = val
}

// SetEvents sets the value of Events.
func (s *Service) SetEvents(val ServiceEvents) {
	s.Events = val
}

// SetState sets the value of State.
func (s *Service) SetState(val BillingServiceState) {
	s.State = val
}

// A collection of timestamps for each event in the billing service's lifetime.
type ServiceEvents struct {
	// The timestamp of when the billing service was created.
	Created DateTime `json:"created"`
	// The timestamp of when the billing service was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the billing service was deleted.
	Deleted DateTime `json:"deleted"`
	// The timestamp of when the billing service was last billed.
	LastBilled DateTime `json:"last_billed"`
}

// GetCreated returns the value of Created.
func (s *ServiceEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ServiceEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *ServiceEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetLastBilled returns the value of LastBilled.
func (s *ServiceEvents) GetLastBilled() DateTime {
	return s.LastBilled
}

// SetCreated sets the value of Created.
func (s *ServiceEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ServiceEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *ServiceEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetLastBilled sets the value of LastBilled.
func (s *ServiceEvents) SetLastBilled(val DateTime) {
	s.LastBilled = val
}

// Information for an item's plan.
// Ref: #/components/schemas/ServiceItem
type ServiceItem struct {
	// Information about the support component of the billing item.
	Support OptServiceItemSupport `json:"support"`
	// Information about the tier component of the billing item.
	Tier OptServiceItemTier `json:"tier"`
}

// GetSupport returns the value of Support.
func (s *ServiceItem) GetSupport() OptServiceItemSupport {
	return s.Support
}

// GetTier returns the value of Tier.
func (s *ServiceItem) GetTier() OptServiceItemTier {
	return s.Tier
}

// SetSupport sets the value of Support.
func (s *ServiceItem) SetSupport(val OptServiceItemSupport) {
	s.Support = val
}

// SetTier sets the value of Tier.
func (s *ServiceItem) SetTier(val OptServiceItemTier) {
	s.Tier = val
}

// Information about the support component of the billing item.
type ServiceItemSupport struct {
	ID ID `json:"id"`
	// The support contract name.
	Name string `json:"name"`
	// The price of the support contract (monthly).
	Price int `json:"price"`
}

// GetID returns the value of ID.
func (s *ServiceItemSupport) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *ServiceItemSupport) GetName() string {
	return s.Name
}

// GetPrice returns the value of Price.
func (s *ServiceItemSupport) GetPrice() int {
	return s.Price
}

// SetID sets the value of ID.
func (s *ServiceItemSupport) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ServiceItemSupport) SetName(val string) {
	s.Name = val
}

// SetPrice sets the value of Price.
func (s *ServiceItemSupport) SetPrice(val int) {
	s.Price = val
}

// Information about the tier component of the billing item.
type ServiceItemTier struct {
	ID ID `json:"id"`
	// The support contract name.
	Name  string        `json:"name"`
	Price BillingAmount `json:"price"`
}

// GetID returns the value of ID.
func (s *ServiceItemTier) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *ServiceItemTier) GetName() string {
	return s.Name
}

// GetPrice returns the value of Price.
func (s *ServiceItemTier) GetPrice() BillingAmount {
	return s.Price
}

// SetID sets the value of ID.
func (s *ServiceItemTier) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ServiceItemTier) SetName(val string) {
	s.Name = val
}

// SetPrice sets the value of Price.
func (s *ServiceItemTier) SetPrice(val BillingAmount) {
	s.Price = val
}

type SetupTwoFaOK struct {
	Data OptTwoFaSetupResponse `json:"data"`
}

// GetData returns the value of Data.
func (s *SetupTwoFaOK) GetData() OptTwoFaSetupResponse {
	return s.Data
}

// SetData sets the value of Data.
func (s *SetupTwoFaOK) SetData(val OptTwoFaSetupResponse) {
	s.Data = val
}

type SetupTwoFaReq struct {
	// The token to authenticate TwoFa setup.
	Token string `json:"token"`
}

// GetToken returns the value of Token.
func (s *SetupTwoFaReq) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *SetupTwoFaReq) SetToken(val string) {
	s.Token = val
}

// Optional update object used to specify specific params to update from the stack build.
// Ref: #/components/schemas/StackBuildContainerUpdate
type StackBuildContainerUpdate struct {
	// A map of the container names to update within the environment.
	Containers StackBuildContainerUpdateContainers `json:"containers"`
}

// GetContainers returns the value of Containers.
func (s *StackBuildContainerUpdate) GetContainers() StackBuildContainerUpdateContainers {
	return s.Containers
}

// SetContainers sets the value of Containers.
func (s *StackBuildContainerUpdate) SetContainers(val StackBuildContainerUpdateContainers) {
	s.Containers = val
}

// A map of the container names to update within the environment.
type StackBuildContainerUpdateContainers map[string]StackDeployContainersObject

func (s *StackBuildContainerUpdateContainers) init() StackBuildContainerUpdateContainers {
	m := *s
	if m == nil {
		m = map[string]StackDeployContainersObject{}
		*s = m
	}
	return m
}

// Options to control how a container behaves when a stack build is deployed.
// Ref: #/components/schemas/StackDeployContainersObject
type StackDeployContainersObject struct {
	// A boolean where true represents the container is to be reimaged.
	Reimage bool `json:"reimage"`
	// A boolean where true represents the container is to be reconfigured.
	Reconfigure bool `json:"reconfigure"`
}

// GetReimage returns the value of Reimage.
func (s *StackDeployContainersObject) GetReimage() bool {
	return s.Reimage
}

// GetReconfigure returns the value of Reconfigure.
func (s *StackDeployContainersObject) GetReconfigure() bool {
	return s.Reconfigure
}

// SetReimage sets the value of Reimage.
func (s *StackDeployContainersObject) SetReimage(val bool) {
	s.Reimage = val
}

// SetReconfigure sets the value of Reconfigure.
func (s *StackDeployContainersObject) SetReconfigure(val bool) {
	s.Reconfigure = val
}

// A summary of the stack this container was created format.
// Ref: #/components/schemas/StackSummary
type StackSummary struct {
	ID    OptID                `json:"id"`
	Image OptStackSummaryImage `json:"image"`
	// The ID of the stack build this container is associated with.
	BuildID OptString `json:"build_id"`
	// The container identifier, usually the key to the container section of a stack file.
	Identifier OptString `json:"identifier"`
}

// GetID returns the value of ID.
func (s *StackSummary) GetID() OptID {
	return s.ID
}

// GetImage returns the value of Image.
func (s *StackSummary) GetImage() OptStackSummaryImage {
	return s.Image
}

// GetBuildID returns the value of BuildID.
func (s *StackSummary) GetBuildID() OptString {
	return s.BuildID
}

// GetIdentifier returns the value of Identifier.
func (s *StackSummary) GetIdentifier() OptString {
	return s.Identifier
}

// SetID sets the value of ID.
func (s *StackSummary) SetID(val OptID) {
	s.ID = val
}

// SetImage sets the value of Image.
func (s *StackSummary) SetImage(val OptStackSummaryImage) {
	s.Image = val
}

// SetBuildID sets the value of BuildID.
func (s *StackSummary) SetBuildID(val OptString) {
	s.BuildID = val
}

// SetIdentifier sets the value of Identifier.
func (s *StackSummary) SetIdentifier(val OptString) {
	s.Identifier = val
}

type StackSummaryImage struct {
	// The ID of the image used for this container.
	ID OptString `json:"id"`
}

// GetID returns the value of ID.
func (s *StackSummaryImage) GetID() OptString {
	return s.ID
}

// SetID sets the value of ID.
func (s *StackSummaryImage) SetID(val OptString) {
	s.ID = val
}

// A summary of resources by state.
// Ref: #/components/schemas/StateCountSummary
type StateCountSummary struct {
	// A count of this resource, grouped by state.
	State StateCountSummaryState `json:"state"`
	// The total number of this resource.
	Total int `json:"total"`
	// The total number of this resource available, less any deleted ones.
	Available int `json:"available"`
}

// GetState returns the value of State.
func (s *StateCountSummary) GetState() StateCountSummaryState {
	return s.State
}

// GetTotal returns the value of Total.
func (s *StateCountSummary) GetTotal() int {
	return s.Total
}

// GetAvailable returns the value of Available.
func (s *StateCountSummary) GetAvailable() int {
	return s.Available
}

// SetState sets the value of State.
func (s *StateCountSummary) SetState(val StateCountSummaryState) {
	s.State = val
}

// SetTotal sets the value of Total.
func (s *StateCountSummary) SetTotal(val int) {
	s.Total = val
}

// SetAvailable sets the value of Available.
func (s *StateCountSummary) SetAvailable(val int) {
	s.Available = val
}

// A count of this resource, grouped by state.
type StateCountSummaryState map[string]int

func (s *StateCountSummaryState) init() StateCountSummaryState {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

// Information about the storage resources for a given server.
// Ref: #/components/schemas/StorageSpec
type StorageSpec struct {
	// The number of storage devices for a given server.
	Count int `json:"count"`
	// The total amount of storage on a given server, in GB.
	SizeGB int `json:"size_gb"`
	// The type of the storage device(s).
	Type string `json:"type"`
	// Extra information about the storage resources for a given server.
	Extra StorageSpecExtra `json:"extra"`
}

// GetCount returns the value of Count.
func (s *StorageSpec) GetCount() int {
	return s.Count
}

// GetSizeGB returns the value of SizeGB.
func (s *StorageSpec) GetSizeGB() int {
	return s.SizeGB
}

// GetType returns the value of Type.
func (s *StorageSpec) GetType() string {
	return s.Type
}

// GetExtra returns the value of Extra.
func (s *StorageSpec) GetExtra() StorageSpecExtra {
	return s.Extra
}

// SetCount sets the value of Count.
func (s *StorageSpec) SetCount(val int) {
	s.Count = val
}

// SetSizeGB sets the value of SizeGB.
func (s *StorageSpec) SetSizeGB(val int) {
	s.SizeGB = val
}

// SetType sets the value of Type.
func (s *StorageSpec) SetType(val string) {
	s.Type = val
}

// SetExtra sets the value of Extra.
func (s *StorageSpec) SetExtra(val StorageSpecExtra) {
	s.Extra = val
}

// Extra information about the storage resources for a given server.
type StorageSpecExtra map[string]string

func (s *StorageSpecExtra) init() StorageSpecExtra {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Information about a billing support plan.
// Ref: #/components/schemas/SupportPlan
type SupportPlan struct {
	// The name of the support plan.
	Name  string        `json:"name"`
	Price BillingAmount `json:"price"`
	// Information about the billing support plan that describes the plan.
	Description string              `json:"description"`
	Features    SupportPlanFeatures `json:"features"`
	// A boolean where true represents the plan is a long term contract, not just month to month.
	Contract bool `json:"contract"`
	// This returns true if it shows up.
	Default bool `json:"default"`
}

// GetName returns the value of Name.
func (s *SupportPlan) GetName() string {
	return s.Name
}

// GetPrice returns the value of Price.
func (s *SupportPlan) GetPrice() BillingAmount {
	return s.Price
}

// GetDescription returns the value of Description.
func (s *SupportPlan) GetDescription() string {
	return s.Description
}

// GetFeatures returns the value of Features.
func (s *SupportPlan) GetFeatures() SupportPlanFeatures {
	return s.Features
}

// GetContract returns the value of Contract.
func (s *SupportPlan) GetContract() bool {
	return s.Contract
}

// GetDefault returns the value of Default.
func (s *SupportPlan) GetDefault() bool {
	return s.Default
}

// SetName sets the value of Name.
func (s *SupportPlan) SetName(val string) {
	s.Name = val
}

// SetPrice sets the value of Price.
func (s *SupportPlan) SetPrice(val BillingAmount) {
	s.Price = val
}

// SetDescription sets the value of Description.
func (s *SupportPlan) SetDescription(val string) {
	s.Description = val
}

// SetFeatures sets the value of Features.
func (s *SupportPlan) SetFeatures(val SupportPlanFeatures) {
	s.Features = val
}

// SetContract sets the value of Contract.
func (s *SupportPlan) SetContract(val bool) {
	s.Contract = val
}

// SetDefault sets the value of Default.
func (s *SupportPlan) SetDefault(val bool) {
	s.Default = val
}

// Information about billing support plan features.
// Ref: #/components/schemas/SupportPlanFeatures
type SupportPlanFeatures struct {
	// A boolean where true indicates the contract includes support for engineering.
	EngineeringSupport bool `json:"engineering_support"`
	// A boolean where true represents the contract has an uptime SLA agreement.
	UptimeSLA bool `json:"uptime_sla"`
	// The time in which this support contract guarantees response time.
	GuaranteedResponseTime NilString `json:"guaranteed_response_time"`
}

// GetEngineeringSupport returns the value of EngineeringSupport.
func (s *SupportPlanFeatures) GetEngineeringSupport() bool {
	return s.EngineeringSupport
}

// GetUptimeSLA returns the value of UptimeSLA.
func (s *SupportPlanFeatures) GetUptimeSLA() bool {
	return s.UptimeSLA
}

// GetGuaranteedResponseTime returns the value of GuaranteedResponseTime.
func (s *SupportPlanFeatures) GetGuaranteedResponseTime() NilString {
	return s.GuaranteedResponseTime
}

// SetEngineeringSupport sets the value of EngineeringSupport.
func (s *SupportPlanFeatures) SetEngineeringSupport(val bool) {
	s.EngineeringSupport = val
}

// SetUptimeSLA sets the value of UptimeSLA.
func (s *SupportPlanFeatures) SetUptimeSLA(val bool) {
	s.UptimeSLA = val
}

// SetGuaranteedResponseTime sets the value of GuaranteedResponseTime.
func (s *SupportPlanFeatures) SetGuaranteedResponseTime(val NilString) {
	s.GuaranteedResponseTime = val
}

// A target for the given backup.
// Ref: #/components/schemas/Target
type Target struct {
	// The target service to be used for a backup.
	Destination TargetDestination `json:"destination"`
	// The target for where to store the backup on the backup destination service.
	Path string `json:"path"`
	// The total size of the backup.
	Size int `json:"size"`
}

// GetDestination returns the value of Destination.
func (s *Target) GetDestination() TargetDestination {
	return s.Destination
}

// GetPath returns the value of Path.
func (s *Target) GetPath() string {
	return s.Path
}

// GetSize returns the value of Size.
func (s *Target) GetSize() int {
	return s.Size
}

// SetDestination sets the value of Destination.
func (s *Target) SetDestination(val TargetDestination) {
	s.Destination = val
}

// SetPath sets the value of Path.
func (s *Target) SetPath(val string) {
	s.Path = val
}

// SetSize sets the value of Size.
func (s *Target) SetSize(val int) {
	s.Size = val
}

// The target service to be used for a backup.
type TargetDestination string

const (
	TargetDestinationBackblazeB2 TargetDestination = "backblaze-b2"
)

// MarshalText implements encoding.TextMarshaler.
func (s TargetDestination) MarshalText() ([]byte, error) {
	switch s {
	case TargetDestinationBackblazeB2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TargetDestination) UnmarshalText(data []byte) error {
	switch TargetDestination(data) {
	case TargetDestinationBackblazeB2:
		*s = TargetDestinationBackblazeB2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A task descriptor object is returned on success by API calls that create jobs. It contains the
// action that was requested, as well as the ID of the job created as a result.
// Ref: #/components/schemas/TaskDescriptor
type TaskDescriptor struct {
	// The action that was taken.
	Action string `json:"action"`
	// The ID of the job associated with this task.
	JobID OptString `json:"job_id"`
	// Contains some basic information about the job associated with this task.
	Job OptTaskDescriptorJob `json:"job"`
}

// GetAction returns the value of Action.
func (s *TaskDescriptor) GetAction() string {
	return s.Action
}

// GetJobID returns the value of JobID.
func (s *TaskDescriptor) GetJobID() OptString {
	return s.JobID
}

// GetJob returns the value of Job.
func (s *TaskDescriptor) GetJob() OptTaskDescriptorJob {
	return s.Job
}

// SetAction sets the value of Action.
func (s *TaskDescriptor) SetAction(val string) {
	s.Action = val
}

// SetJobID sets the value of JobID.
func (s *TaskDescriptor) SetJobID(val OptString) {
	s.JobID = val
}

// SetJob sets the value of Job.
func (s *TaskDescriptor) SetJob(val OptTaskDescriptorJob) {
	s.Job = val
}

// Contains some basic information about the job associated with this task.
type TaskDescriptorJob struct {
	// The ID of the job.
	ID string `json:"id"`
	// Describes if the job has been accepted.
	Accepted bool `json:"accepted"`
	// Describes the queue this job is a part of.
	Queue string `json:"queue"`
}

// GetID returns the value of ID.
func (s *TaskDescriptorJob) GetID() string {
	return s.ID
}

// GetAccepted returns the value of Accepted.
func (s *TaskDescriptorJob) GetAccepted() bool {
	return s.Accepted
}

// GetQueue returns the value of Queue.
func (s *TaskDescriptorJob) GetQueue() string {
	return s.Queue
}

// SetID sets the value of ID.
func (s *TaskDescriptorJob) SetID(val string) {
	s.ID = val
}

// SetAccepted sets the value of Accepted.
func (s *TaskDescriptorJob) SetAccepted(val bool) {
	s.Accepted = val
}

// SetQueue sets the value of Queue.
func (s *TaskDescriptorJob) SetQueue(val string) {
	s.Queue = val
}

// A summary of report requests and when they occured.
// Ref: #/components/schemas/TelemetryReportRequest
type TelemetryReportRequest struct {
	// The ID of the instance this telemetry reporting pertains to.
	InstanceID string `json:"instance_id"`
	// A timestamp of when the snapshot began.
	Start DateTime `json:"start"`
	// A timestamp of when the snapshot ended.
	End DateTime `json:"end"`
}

// GetInstanceID returns the value of InstanceID.
func (s *TelemetryReportRequest) GetInstanceID() string {
	return s.InstanceID
}

// GetStart returns the value of Start.
func (s *TelemetryReportRequest) GetStart() DateTime {
	return s.Start
}

// GetEnd returns the value of End.
func (s *TelemetryReportRequest) GetEnd() DateTime {
	return s.End
}

// SetInstanceID sets the value of InstanceID.
func (s *TelemetryReportRequest) SetInstanceID(val string) {
	s.InstanceID = val
}

// SetStart sets the value of Start.
func (s *TelemetryReportRequest) SetStart(val DateTime) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *TelemetryReportRequest) SetEnd(val DateTime) {
	s.End = val
}

// Information about a billing term.
// Ref: #/components/schemas/Term
type Term struct {
	// A timestamp describing the start of a billing term.
	Start DateTime `json:"start"`
	// A timestamp describing the end of a billing term.
	End DateTime `json:"end"`
	// The term renewal period.
	Renew NilTermRenew `json:"renew"`
}

// GetStart returns the value of Start.
func (s *Term) GetStart() DateTime {
	return s.Start
}

// GetEnd returns the value of End.
func (s *Term) GetEnd() DateTime {
	return s.End
}

// GetRenew returns the value of Renew.
func (s *Term) GetRenew() NilTermRenew {
	return s.Renew
}

// SetStart sets the value of Start.
func (s *Term) SetStart(val DateTime) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *Term) SetEnd(val DateTime) {
	s.End = val
}

// SetRenew sets the value of Renew.
func (s *Term) SetRenew(val NilTermRenew) {
	s.Renew = val
}

// The term renewal period.
type TermRenew string

const (
	TermRenewOnce    TermRenew = "once"
	TermRenewMonthly TermRenew = "monthly"
	TermRenewYearly  TermRenew = "yearly"
)

// MarshalText implements encoding.TextMarshaler.
func (s TermRenew) MarshalText() ([]byte, error) {
	switch s {
	case TermRenewOnce:
		return []byte(s), nil
	case TermRenewMonthly:
		return []byte(s), nil
	case TermRenewYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TermRenew) UnmarshalText(data []byte) error {
	switch TermRenew(data) {
	case TermRenewOnce:
		*s = TermRenewOnce
		return nil
	case TermRenewMonthly:
		*s = TermRenewMonthly
		return nil
	case TermRenewYearly:
		*s = TermRenewYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A TierPlan object describes the attributes of a subscription tier.
// Ref: #/components/schemas/TierPlan
type TierPlan struct {
	ID                  string                   `json:"id"`
	Name                string                   `json:"name"`
	Code                string                   `json:"code"`
	Generation          float64                  `json:"generation"`
	Usable              bool                     `json:"usable"`
	Price               BillingAmount            `json:"price"`
	Servers             BillingServers           `json:"servers"`
	Members             BillingMembers           `json:"members"`
	MaxNodes            NilFloat64               `json:"max_nodes"`
	MaxMembers          NilFloat64               `json:"max_members"`
	AdvancedFeatures    TierPlanAdvancedFeatures `json:"advanced_features"`
	MaxDailyAPIRequests NilFloat64               `json:"max_daily_api_requests"`
	RAM                 BillingRam               `json:"ram"`
	ImageStorage        BillingImageStorage      `json:"image_storage"`
	Builds              BillingBuilds            `json:"builds"`
	Hidden              bool                     `json:"hidden"`
	Description         string                   `json:"description"`
}

// GetID returns the value of ID.
func (s *TierPlan) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *TierPlan) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *TierPlan) GetCode() string {
	return s.Code
}

// GetGeneration returns the value of Generation.
func (s *TierPlan) GetGeneration() float64 {
	return s.Generation
}

// GetUsable returns the value of Usable.
func (s *TierPlan) GetUsable() bool {
	return s.Usable
}

// GetPrice returns the value of Price.
func (s *TierPlan) GetPrice() BillingAmount {
	return s.Price
}

// GetServers returns the value of Servers.
func (s *TierPlan) GetServers() BillingServers {
	return s.Servers
}

// GetMembers returns the value of Members.
func (s *TierPlan) GetMembers() BillingMembers {
	return s.Members
}

// GetMaxNodes returns the value of MaxNodes.
func (s *TierPlan) GetMaxNodes() NilFloat64 {
	return s.MaxNodes
}

// GetMaxMembers returns the value of MaxMembers.
func (s *TierPlan) GetMaxMembers() NilFloat64 {
	return s.MaxMembers
}

// GetAdvancedFeatures returns the value of AdvancedFeatures.
func (s *TierPlan) GetAdvancedFeatures() TierPlanAdvancedFeatures {
	return s.AdvancedFeatures
}

// GetMaxDailyAPIRequests returns the value of MaxDailyAPIRequests.
func (s *TierPlan) GetMaxDailyAPIRequests() NilFloat64 {
	return s.MaxDailyAPIRequests
}

// GetRAM returns the value of RAM.
func (s *TierPlan) GetRAM() BillingRam {
	return s.RAM
}

// GetImageStorage returns the value of ImageStorage.
func (s *TierPlan) GetImageStorage() BillingImageStorage {
	return s.ImageStorage
}

// GetBuilds returns the value of Builds.
func (s *TierPlan) GetBuilds() BillingBuilds {
	return s.Builds
}

// GetHidden returns the value of Hidden.
func (s *TierPlan) GetHidden() bool {
	return s.Hidden
}

// GetDescription returns the value of Description.
func (s *TierPlan) GetDescription() string {
	return s.Description
}

// SetID sets the value of ID.
func (s *TierPlan) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *TierPlan) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *TierPlan) SetCode(val string) {
	s.Code = val
}

// SetGeneration sets the value of Generation.
func (s *TierPlan) SetGeneration(val float64) {
	s.Generation = val
}

// SetUsable sets the value of Usable.
func (s *TierPlan) SetUsable(val bool) {
	s.Usable = val
}

// SetPrice sets the value of Price.
func (s *TierPlan) SetPrice(val BillingAmount) {
	s.Price = val
}

// SetServers sets the value of Servers.
func (s *TierPlan) SetServers(val BillingServers) {
	s.Servers = val
}

// SetMembers sets the value of Members.
func (s *TierPlan) SetMembers(val BillingMembers) {
	s.Members = val
}

// SetMaxNodes sets the value of MaxNodes.
func (s *TierPlan) SetMaxNodes(val NilFloat64) {
	s.MaxNodes = val
}

// SetMaxMembers sets the value of MaxMembers.
func (s *TierPlan) SetMaxMembers(val NilFloat64) {
	s.MaxMembers = val
}

// SetAdvancedFeatures sets the value of AdvancedFeatures.
func (s *TierPlan) SetAdvancedFeatures(val TierPlanAdvancedFeatures) {
	s.AdvancedFeatures = val
}

// SetMaxDailyAPIRequests sets the value of MaxDailyAPIRequests.
func (s *TierPlan) SetMaxDailyAPIRequests(val NilFloat64) {
	s.MaxDailyAPIRequests = val
}

// SetRAM sets the value of RAM.
func (s *TierPlan) SetRAM(val BillingRam) {
	s.RAM = val
}

// SetImageStorage sets the value of ImageStorage.
func (s *TierPlan) SetImageStorage(val BillingImageStorage) {
	s.ImageStorage = val
}

// SetBuilds sets the value of Builds.
func (s *TierPlan) SetBuilds(val BillingBuilds) {
	s.Builds = val
}

// SetHidden sets the value of Hidden.
func (s *TierPlan) SetHidden(val bool) {
	s.Hidden = val
}

// SetDescription sets the value of Description.
func (s *TierPlan) SetDescription(val string) {
	s.Description = val
}

type TierPlanAdvancedFeatures struct {
	Gpu bool `json:"gpu"`
	Ial bool `json:"ial"`
}

// GetGpu returns the value of Gpu.
func (s *TierPlanAdvancedFeatures) GetGpu() bool {
	return s.Gpu
}

// GetIal returns the value of Ial.
func (s *TierPlanAdvancedFeatures) GetIal() bool {
	return s.Ial
}

// SetGpu sets the value of Gpu.
func (s *TierPlanAdvancedFeatures) SetGpu(val bool) {
	s.Gpu = val
}

// SetIal sets the value of Ial.
func (s *TierPlanAdvancedFeatures) SetIal(val bool) {
	s.Ial = val
}

// A pipeline trigger key resource.
// Ref: #/components/schemas/TriggerKey
type TriggerKey struct {
	ID ID `json:"id"`
	// The name of the trigger key.
	Name string `json:"name"`
	// The secret used when calling the trigger key programmatically.
	Secret  string       `json:"secret"`
	Creator CreatorScope `json:"creator"`
	HubID   HubID        `json:"hub_id"`
	// The ID for the pipeline related to this trigger key.
	PipelineID string          `json:"pipeline_id"`
	State      TriggerKeyState `json:"state"`
	// A collection of timestamps for each event in the trigger key's lifetime.
	Events TriggerKeyEvents `json:"events"`
	// An array of ips this trigger key is usable from.
	Ips []string `json:"ips"`
}

// GetID returns the value of ID.
func (s *TriggerKey) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *TriggerKey) GetName() string {
	return s.Name
}

// GetSecret returns the value of Secret.
func (s *TriggerKey) GetSecret() string {
	return s.Secret
}

// GetCreator returns the value of Creator.
func (s *TriggerKey) GetCreator() CreatorScope {
	return s.Creator
}

// GetHubID returns the value of HubID.
func (s *TriggerKey) GetHubID() HubID {
	return s.HubID
}

// GetPipelineID returns the value of PipelineID.
func (s *TriggerKey) GetPipelineID() string {
	return s.PipelineID
}

// GetState returns the value of State.
func (s *TriggerKey) GetState() TriggerKeyState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *TriggerKey) GetEvents() TriggerKeyEvents {
	return s.Events
}

// GetIps returns the value of Ips.
func (s *TriggerKey) GetIps() []string {
	return s.Ips
}

// SetID sets the value of ID.
func (s *TriggerKey) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *TriggerKey) SetName(val string) {
	s.Name = val
}

// SetSecret sets the value of Secret.
func (s *TriggerKey) SetSecret(val string) {
	s.Secret = val
}

// SetCreator sets the value of Creator.
func (s *TriggerKey) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetHubID sets the value of HubID.
func (s *TriggerKey) SetHubID(val HubID) {
	s.HubID = val
}

// SetPipelineID sets the value of PipelineID.
func (s *TriggerKey) SetPipelineID(val string) {
	s.PipelineID = val
}

// SetState sets the value of State.
func (s *TriggerKey) SetState(val TriggerKeyState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *TriggerKey) SetEvents(val TriggerKeyEvents) {
	s.Events = val
}

// SetIps sets the value of Ips.
func (s *TriggerKey) SetIps(val []string) {
	s.Ips = val
}

// A collection of timestamps for each event in the trigger key's lifetime.
type TriggerKeyEvents struct {
	// The timestamp of when the trigger key was created.
	Created DateTime `json:"created"`
	// The timestamp of when the trigger key was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the trigger key was deleted.
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *TriggerKeyEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *TriggerKeyEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *TriggerKeyEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *TriggerKeyEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *TriggerKeyEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *TriggerKeyEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// Merged schema.
// Ref: #/components/schemas/TriggerKeyState
type TriggerKeyState struct {
	// The current state of the trigger key.
	Current TriggerKeyStateCurrent `json:"current"`
	Changed DateTime               `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptTriggerKeyStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *TriggerKeyState) GetCurrent() TriggerKeyStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *TriggerKeyState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *TriggerKeyState) GetError() OptTriggerKeyStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *TriggerKeyState) SetCurrent(val TriggerKeyStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *TriggerKeyState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *TriggerKeyState) SetError(val OptTriggerKeyStateError) {
	s.Error = val
}

// The current state of the trigger key.
type TriggerKeyStateCurrent string

const (
	TriggerKeyStateCurrentLive     TriggerKeyStateCurrent = "live"
	TriggerKeyStateCurrentDeleting TriggerKeyStateCurrent = "deleting"
	TriggerKeyStateCurrentDeleted  TriggerKeyStateCurrent = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s TriggerKeyStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case TriggerKeyStateCurrentLive:
		return []byte(s), nil
	case TriggerKeyStateCurrentDeleting:
		return []byte(s), nil
	case TriggerKeyStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TriggerKeyStateCurrent) UnmarshalText(data []byte) error {
	switch TriggerKeyStateCurrent(data) {
	case TriggerKeyStateCurrentLive:
		*s = TriggerKeyStateCurrentLive
		return nil
	case TriggerKeyStateCurrentDeleting:
		*s = TriggerKeyStateCurrentDeleting
		return nil
	case TriggerKeyStateCurrentDeleted:
		*s = TriggerKeyStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type TriggerKeyStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *TriggerKeyStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *TriggerKeyStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *TriggerKeyStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *TriggerKeyStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Ref: #/components/schemas/TwoFaDisableResponse
type TwoFaDisableResponse struct {
	Qr     string `json:"qr"`
	Secret string `json:"secret"`
}

// GetQr returns the value of Qr.
func (s *TwoFaDisableResponse) GetQr() string {
	return s.Qr
}

// GetSecret returns the value of Secret.
func (s *TwoFaDisableResponse) GetSecret() string {
	return s.Secret
}

// SetQr sets the value of Qr.
func (s *TwoFaDisableResponse) SetQr(val string) {
	s.Qr = val
}

// SetSecret sets the value of Secret.
func (s *TwoFaDisableResponse) SetSecret(val string) {
	s.Secret = val
}

// Ref: #/components/schemas/TwoFaSetupResponse
type TwoFaSetupResponse struct {
	RecoveryCodes []string `json:"recovery_codes"`
	TotpPasscode  string   `json:"totp_passcode"`
}

// GetRecoveryCodes returns the value of RecoveryCodes.
func (s *TwoFaSetupResponse) GetRecoveryCodes() []string {
	return s.RecoveryCodes
}

// GetTotpPasscode returns the value of TotpPasscode.
func (s *TwoFaSetupResponse) GetTotpPasscode() string {
	return s.TotpPasscode
}

// SetRecoveryCodes sets the value of RecoveryCodes.
func (s *TwoFaSetupResponse) SetRecoveryCodes(val []string) {
	s.RecoveryCodes = val
}

// SetTotpPasscode sets the value of TotpPasscode.
func (s *TwoFaSetupResponse) SetTotpPasscode(val string) {
	s.TotpPasscode = val
}

// An update to an existing announcement.
// Ref: #/components/schemas/Update
type Update struct {
	ID ID `json:"id"`
	// The text describing the update to the announcement.
	Message string       `json:"message"`
	Creator CreatorScope `json:"creator"`
	// A timestamp of when the update took place.
	Time DateTime `json:"time"`
}

// GetID returns the value of ID.
func (s *Update) GetID() ID {
	return s.ID
}

// GetMessage returns the value of Message.
func (s *Update) GetMessage() string {
	return s.Message
}

// GetCreator returns the value of Creator.
func (s *Update) GetCreator() CreatorScope {
	return s.Creator
}

// GetTime returns the value of Time.
func (s *Update) GetTime() DateTime {
	return s.Time
}

// SetID sets the value of ID.
func (s *Update) SetID(val ID) {
	s.ID = val
}

// SetMessage sets the value of Message.
func (s *Update) SetMessage(val string) {
	s.Message = val
}

// SetCreator sets the value of Creator.
func (s *Update) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetTime sets the value of Time.
func (s *Update) SetTime(val DateTime) {
	s.Time = val
}

type UpdateAccountInviteOK struct {
	Data OptHubMembership `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateAccountInviteOK) GetData() OptHubMembership {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateAccountInviteOK) SetData(val OptHubMembership) {
	s.Data = val
}

type UpdateAccountInviteReq struct {
	// Set accept to true to accept.
	Accept OptBool `json:"accept"`
	// Set decline to true to decline.
	Decline OptBool `json:"decline"`
}

// GetAccept returns the value of Accept.
func (s *UpdateAccountInviteReq) GetAccept() OptBool {
	return s.Accept
}

// GetDecline returns the value of Decline.
func (s *UpdateAccountInviteReq) GetDecline() OptBool {
	return s.Decline
}

// SetAccept sets the value of Accept.
func (s *UpdateAccountInviteReq) SetAccept(val OptBool) {
	s.Accept = val
}

// SetDecline sets the value of Decline.
func (s *UpdateAccountInviteReq) SetDecline(val OptBool) {
	s.Decline = val
}

type UpdateAccountOK struct {
	Data OptAccount `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateAccountOK) GetData() OptAccount {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateAccountOK) SetData(val OptAccount) {
	s.Data = val
}

// Parameters for updating an account.
type UpdateAccountReq struct {
	// The name for the account.
	Name OptUpdateAccountReqName `json:"name"`
}

// GetName returns the value of Name.
func (s *UpdateAccountReq) GetName() OptUpdateAccountReqName {
	return s.Name
}

// SetName sets the value of Name.
func (s *UpdateAccountReq) SetName(val OptUpdateAccountReqName) {
	s.Name = val
}

// The name for the account.
type UpdateAccountReqName struct {
	First             OptString `json:"first"`
	Last              OptString `json:"last"`
	AllowSupportLogin OptBool   `json:"allow_support_login"`
}

// GetFirst returns the value of First.
func (s *UpdateAccountReqName) GetFirst() OptString {
	return s.First
}

// GetLast returns the value of Last.
func (s *UpdateAccountReqName) GetLast() OptString {
	return s.Last
}

// GetAllowSupportLogin returns the value of AllowSupportLogin.
func (s *UpdateAccountReqName) GetAllowSupportLogin() OptBool {
	return s.AllowSupportLogin
}

// SetFirst sets the value of First.
func (s *UpdateAccountReqName) SetFirst(val OptString) {
	s.First = val
}

// SetLast sets the value of Last.
func (s *UpdateAccountReqName) SetLast(val OptString) {
	s.Last = val
}

// SetAllowSupportLogin sets the value of AllowSupportLogin.
func (s *UpdateAccountReqName) SetAllowSupportLogin(val OptBool) {
	s.AllowSupportLogin = val
}

type UpdateApiKeyOK struct {
	Data OptApiKey `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateApiKeyOK) GetData() OptApiKey {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateApiKeyOK) SetData(val OptApiKey) {
	s.Data = val
}

type UpdateApiKeyReq struct {
	// A name given to the API Key.
	Name         OptString      `json:"name"`
	Permissions  OptPermissions `json:"permissions"`
	Capabilities jx.Raw         `json:"capabilities"`
	// An array of approved IPs from which this API Key can be used.
	Ips OptNilStringArray `json:"ips"`
}

// GetName returns the value of Name.
func (s *UpdateApiKeyReq) GetName() OptString {
	return s.Name
}

// GetPermissions returns the value of Permissions.
func (s *UpdateApiKeyReq) GetPermissions() OptPermissions {
	return s.Permissions
}

// GetCapabilities returns the value of Capabilities.
func (s *UpdateApiKeyReq) GetCapabilities() jx.Raw {
	return s.Capabilities
}

// GetIps returns the value of Ips.
func (s *UpdateApiKeyReq) GetIps() OptNilStringArray {
	return s.Ips
}

// SetName sets the value of Name.
func (s *UpdateApiKeyReq) SetName(val OptString) {
	s.Name = val
}

// SetPermissions sets the value of Permissions.
func (s *UpdateApiKeyReq) SetPermissions(val OptPermissions) {
	s.Permissions = val
}

// SetCapabilities sets the value of Capabilities.
func (s *UpdateApiKeyReq) SetCapabilities(val jx.Raw) {
	s.Capabilities = val
}

// SetIps sets the value of Ips.
func (s *UpdateApiKeyReq) SetIps(val OptNilStringArray) {
	s.Ips = val
}

type UpdateBillingMethodOK struct {
	Data OptMethod `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateBillingMethodOK) GetData() OptMethod {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateBillingMethodOK) SetData(val OptMethod) {
	s.Data = val
}

type UpdateBillingMethodReq struct {
	// A name for the billing method.
	Name OptString `json:"name"`
	// A boolean where true represents a billing method being primary.
	Primary    OptBool     `json:"primary"`
	Address    OptAddress  `json:"address"`
	CreditCard *CreditCard `json:"credit_card"`
}

// GetName returns the value of Name.
func (s *UpdateBillingMethodReq) GetName() OptString {
	return s.Name
}

// GetPrimary returns the value of Primary.
func (s *UpdateBillingMethodReq) GetPrimary() OptBool {
	return s.Primary
}

// GetAddress returns the value of Address.
func (s *UpdateBillingMethodReq) GetAddress() OptAddress {
	return s.Address
}

// GetCreditCard returns the value of CreditCard.
func (s *UpdateBillingMethodReq) GetCreditCard() *CreditCard {
	return s.CreditCard
}

// SetName sets the value of Name.
func (s *UpdateBillingMethodReq) SetName(val OptString) {
	s.Name = val
}

// SetPrimary sets the value of Primary.
func (s *UpdateBillingMethodReq) SetPrimary(val OptBool) {
	s.Primary = val
}

// SetAddress sets the value of Address.
func (s *UpdateBillingMethodReq) SetAddress(val OptAddress) {
	s.Address = val
}

// SetCreditCard sets the value of CreditCard.
func (s *UpdateBillingMethodReq) SetCreditCard(val *CreditCard) {
	s.CreditCard = val
}

type UpdateBillingOrderOK struct {
	Data OptOrder `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateBillingOrderOK) GetData() OptOrder {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateBillingOrderOK) SetData(val OptOrder) {
	s.Data = val
}

type UpdateBillingOrderReq struct {
	// Id associated with the tier plan.
	TierPlanID OptString `json:"tier_plan_id"`
	// Id associated with the support plan.
	SupportPlanID OptString `json:"support_plan_id"`
	// String that defines term length.
	TermLength OptUpdateBillingOrderReqTermLength `json:"term_length"`
	// String that defines a promo code.
	PromoCode OptString `json:"promo_code"`
}

// GetTierPlanID returns the value of TierPlanID.
func (s *UpdateBillingOrderReq) GetTierPlanID() OptString {
	return s.TierPlanID
}

// GetSupportPlanID returns the value of SupportPlanID.
func (s *UpdateBillingOrderReq) GetSupportPlanID() OptString {
	return s.SupportPlanID
}

// GetTermLength returns the value of TermLength.
func (s *UpdateBillingOrderReq) GetTermLength() OptUpdateBillingOrderReqTermLength {
	return s.TermLength
}

// GetPromoCode returns the value of PromoCode.
func (s *UpdateBillingOrderReq) GetPromoCode() OptString {
	return s.PromoCode
}

// SetTierPlanID sets the value of TierPlanID.
func (s *UpdateBillingOrderReq) SetTierPlanID(val OptString) {
	s.TierPlanID = val
}

// SetSupportPlanID sets the value of SupportPlanID.
func (s *UpdateBillingOrderReq) SetSupportPlanID(val OptString) {
	s.SupportPlanID = val
}

// SetTermLength sets the value of TermLength.
func (s *UpdateBillingOrderReq) SetTermLength(val OptUpdateBillingOrderReqTermLength) {
	s.TermLength = val
}

// SetPromoCode sets the value of PromoCode.
func (s *UpdateBillingOrderReq) SetPromoCode(val OptString) {
	s.PromoCode = val
}

// String that defines term length.
type UpdateBillingOrderReqTermLength string

const (
	UpdateBillingOrderReqTermLengthOnce    UpdateBillingOrderReqTermLength = "once"
	UpdateBillingOrderReqTermLengthMonthly UpdateBillingOrderReqTermLength = "monthly"
	UpdateBillingOrderReqTermLengthYearly  UpdateBillingOrderReqTermLength = "yearly"
)

// MarshalText implements encoding.TextMarshaler.
func (s UpdateBillingOrderReqTermLength) MarshalText() ([]byte, error) {
	switch s {
	case UpdateBillingOrderReqTermLengthOnce:
		return []byte(s), nil
	case UpdateBillingOrderReqTermLengthMonthly:
		return []byte(s), nil
	case UpdateBillingOrderReqTermLengthYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateBillingOrderReqTermLength) UnmarshalText(data []byte) error {
	switch UpdateBillingOrderReqTermLength(data) {
	case UpdateBillingOrderReqTermLengthOnce:
		*s = UpdateBillingOrderReqTermLengthOnce
		return nil
	case UpdateBillingOrderReqTermLengthMonthly:
		*s = UpdateBillingOrderReqTermLengthMonthly
		return nil
	case UpdateBillingOrderReqTermLengthYearly:
		*s = UpdateBillingOrderReqTermLengthYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateContainerOK struct {
	Data OptContainer `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateContainerOK) GetData() OptContainer {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateContainerOK) SetData(val OptContainer) {
	s.Data = val
}

// Parameters for updating a container.
type UpdateContainerReq struct {
	// The name for the container.
	Name OptString `json:"name"`
	// The name for the identifier.
	Identifier OptString `json:"identifier"`
	// Sets whether container should be deprecated.
	Deprecate OptBool `json:"deprecate"`
	// User meta data for the container.
	Annotation OptUpdateContainerReqAnnotation `json:"annotation"`
}

// GetName returns the value of Name.
func (s *UpdateContainerReq) GetName() OptString {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *UpdateContainerReq) GetIdentifier() OptString {
	return s.Identifier
}

// GetDeprecate returns the value of Deprecate.
func (s *UpdateContainerReq) GetDeprecate() OptBool {
	return s.Deprecate
}

// GetAnnotation returns the value of Annotation.
func (s *UpdateContainerReq) GetAnnotation() OptUpdateContainerReqAnnotation {
	return s.Annotation
}

// SetName sets the value of Name.
func (s *UpdateContainerReq) SetName(val OptString) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *UpdateContainerReq) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetDeprecate sets the value of Deprecate.
func (s *UpdateContainerReq) SetDeprecate(val OptBool) {
	s.Deprecate = val
}

// SetAnnotation sets the value of Annotation.
func (s *UpdateContainerReq) SetAnnotation(val OptUpdateContainerReqAnnotation) {
	s.Annotation = val
}

// User meta data for the container.
type UpdateContainerReqAnnotation map[string]string

func (s *UpdateContainerReqAnnotation) init() UpdateContainerReqAnnotation {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type UpdateDNSRecordOK struct {
	Data OptRecord `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateDNSRecordOK) GetData() OptRecord {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateDNSRecordOK) SetData(val OptRecord) {
	s.Data = val
}

type UpdateDNSRecordReq struct {
	Type RecordTypes `json:"type"`
}

// GetType returns the value of Type.
func (s *UpdateDNSRecordReq) GetType() RecordTypes {
	return s.Type
}

// SetType sets the value of Type.
func (s *UpdateDNSRecordReq) SetType(val RecordTypes) {
	s.Type = val
}

type UpdateDNSZoneIncludeItem string

const (
	UpdateDNSZoneIncludeItemCreators UpdateDNSZoneIncludeItem = "creators"
)

// MarshalText implements encoding.TextMarshaler.
func (s UpdateDNSZoneIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case UpdateDNSZoneIncludeItemCreators:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateDNSZoneIncludeItem) UnmarshalText(data []byte) error {
	switch UpdateDNSZoneIncludeItem(data) {
	case UpdateDNSZoneIncludeItemCreators:
		*s = UpdateDNSZoneIncludeItemCreators
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateDNSZoneOK struct {
	Data     OptZone         `json:"data"`
	Includes OptZoneIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *UpdateDNSZoneOK) GetData() OptZone {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *UpdateDNSZoneOK) GetIncludes() OptZoneIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *UpdateDNSZoneOK) SetData(val OptZone) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *UpdateDNSZoneOK) SetIncludes(val OptZoneIncludes) {
	s.Includes = val
}

type UpdateDNSZoneReq struct {
	// A boolean where true represents the desire for the origin to be of the type `hosted`.
	Hosted bool `json:"hosted"`
}

// GetHosted returns the value of Hosted.
func (s *UpdateDNSZoneReq) GetHosted() bool {
	return s.Hosted
}

// SetHosted sets the value of Hosted.
func (s *UpdateDNSZoneReq) SetHosted(val bool) {
	s.Hosted = val
}

type UpdateEnvironmentOK struct {
	Data OptEnvironment `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateEnvironmentOK) GetData() OptEnvironment {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateEnvironmentOK) SetData(val OptEnvironment) {
	s.Data = val
}

type UpdateEnvironmentReq struct {
	Name  OptString           `json:"name"`
	About OptEnvironmentAbout `json:"about"`
}

// GetName returns the value of Name.
func (s *UpdateEnvironmentReq) GetName() OptString {
	return s.Name
}

// GetAbout returns the value of About.
func (s *UpdateEnvironmentReq) GetAbout() OptEnvironmentAbout {
	return s.About
}

// SetName sets the value of Name.
func (s *UpdateEnvironmentReq) SetName(val OptString) {
	s.Name = val
}

// SetAbout sets the value of About.
func (s *UpdateEnvironmentReq) SetAbout(val OptEnvironmentAbout) {
	s.About = val
}

type UpdateHubMemberOK struct {
	Data OptHubMembership `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateHubMemberOK) GetData() OptHubMembership {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateHubMemberOK) SetData(val OptHubMembership) {
	s.Data = val
}

type UpdateHubMemberReq struct {
	// The account role.
	Role        OptUpdateHubMemberReqRole `json:"role"`
	Permissions OptPermissions            `json:"permissions"`
}

// GetRole returns the value of Role.
func (s *UpdateHubMemberReq) GetRole() OptUpdateHubMemberReqRole {
	return s.Role
}

// GetPermissions returns the value of Permissions.
func (s *UpdateHubMemberReq) GetPermissions() OptPermissions {
	return s.Permissions
}

// SetRole sets the value of Role.
func (s *UpdateHubMemberReq) SetRole(val OptUpdateHubMemberReqRole) {
	s.Role = val
}

// SetPermissions sets the value of Permissions.
func (s *UpdateHubMemberReq) SetPermissions(val OptPermissions) {
	s.Permissions = val
}

// The account role.
type UpdateHubMemberReqRole string

const (
	UpdateHubMemberReqRoleOwner     UpdateHubMemberReqRole = "owner"
	UpdateHubMemberReqRoleAdmin     UpdateHubMemberReqRole = "admin"
	UpdateHubMemberReqRoleDeveloper UpdateHubMemberReqRole = "developer"
	UpdateHubMemberReqRoleAnalyst   UpdateHubMemberReqRole = "analyst"
)

// MarshalText implements encoding.TextMarshaler.
func (s UpdateHubMemberReqRole) MarshalText() ([]byte, error) {
	switch s {
	case UpdateHubMemberReqRoleOwner:
		return []byte(s), nil
	case UpdateHubMemberReqRoleAdmin:
		return []byte(s), nil
	case UpdateHubMemberReqRoleDeveloper:
		return []byte(s), nil
	case UpdateHubMemberReqRoleAnalyst:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateHubMemberReqRole) UnmarshalText(data []byte) error {
	switch UpdateHubMemberReqRole(data) {
	case UpdateHubMemberReqRoleOwner:
		*s = UpdateHubMemberReqRoleOwner
		return nil
	case UpdateHubMemberReqRoleAdmin:
		*s = UpdateHubMemberReqRoleAdmin
		return nil
	case UpdateHubMemberReqRoleDeveloper:
		*s = UpdateHubMemberReqRoleDeveloper
		return nil
	case UpdateHubMemberReqRoleAnalyst:
		*s = UpdateHubMemberReqRoleAnalyst
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateHubOK struct {
	Data OptHub `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateHubOK) GetData() OptHub {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateHubOK) SetData(val OptHub) {
	s.Data = val
}

type UpdateHubReq struct {
	// A name for the hub.
	Name         OptString          `json:"name"`
	Integrations OptHubIntegrations `json:"integrations"`
	// All hub webhooks for the given hub.
	Webhooks OptUpdateHubReqWebhooks `json:"webhooks"`
}

// GetName returns the value of Name.
func (s *UpdateHubReq) GetName() OptString {
	return s.Name
}

// GetIntegrations returns the value of Integrations.
func (s *UpdateHubReq) GetIntegrations() OptHubIntegrations {
	return s.Integrations
}

// GetWebhooks returns the value of Webhooks.
func (s *UpdateHubReq) GetWebhooks() OptUpdateHubReqWebhooks {
	return s.Webhooks
}

// SetName sets the value of Name.
func (s *UpdateHubReq) SetName(val OptString) {
	s.Name = val
}

// SetIntegrations sets the value of Integrations.
func (s *UpdateHubReq) SetIntegrations(val OptHubIntegrations) {
	s.Integrations = val
}

// SetWebhooks sets the value of Webhooks.
func (s *UpdateHubReq) SetWebhooks(val OptUpdateHubReqWebhooks) {
	s.Webhooks = val
}

// All hub webhooks for the given hub.
type UpdateHubReqWebhooks struct {
	// A webahook to report information to each time a server is deployed on the given hub.
	ServerDeployed NilString `json:"server_deployed"`
}

// GetServerDeployed returns the value of ServerDeployed.
func (s *UpdateHubReqWebhooks) GetServerDeployed() NilString {
	return s.ServerDeployed
}

// SetServerDeployed sets the value of ServerDeployed.
func (s *UpdateHubReqWebhooks) SetServerDeployed(val NilString) {
	s.ServerDeployed = val
}

type UpdatePipelineTriggerKeyOK struct {
	Data OptTaskDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdatePipelineTriggerKeyOK) GetData() OptTaskDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdatePipelineTriggerKeyOK) SetData(val OptTaskDescriptor) {
	s.Data = val
}

type UpdatePipelineTriggerKeyReq struct {
	// Set name of trigger key.
	Name OptString `json:"name"`
	// List of Ip Restrictions.
	Ips []string `json:"ips"`
}

// GetName returns the value of Name.
func (s *UpdatePipelineTriggerKeyReq) GetName() OptString {
	return s.Name
}

// GetIps returns the value of Ips.
func (s *UpdatePipelineTriggerKeyReq) GetIps() []string {
	return s.Ips
}

// SetName sets the value of Name.
func (s *UpdatePipelineTriggerKeyReq) SetName(val OptString) {
	s.Name = val
}

// SetIps sets the value of Ips.
func (s *UpdatePipelineTriggerKeyReq) SetIps(val []string) {
	s.Ips = val
}

type UpdateProviderOK struct {
	Data OptProvider `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateProviderOK) GetData() OptProvider {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateProviderOK) SetData(val OptProvider) {
	s.Data = val
}

type UpdateProviderReq struct {
	// An integration object defining the provider integration assets and endpoints.
	Integration UpdateProviderReqIntegration `json:"integration"`
}

// GetIntegration returns the value of Integration.
func (s *UpdateProviderReq) GetIntegration() UpdateProviderReqIntegration {
	return s.Integration
}

// SetIntegration sets the value of Integration.
func (s *UpdateProviderReq) SetIntegration(val UpdateProviderReqIntegration) {
	s.Integration = val
}

// An integration object defining the provider integration assets and endpoints.
type UpdateProviderReqIntegration struct {
	// Nativly supported IAL provider integration.
	Native OptUpdateProviderReqIntegrationNative `json:"native"`
	// Custom provider information.
	Abstraction OptUpdateProviderReqIntegrationAbstraction `json:"abstraction"`
}

// GetNative returns the value of Native.
func (s *UpdateProviderReqIntegration) GetNative() OptUpdateProviderReqIntegrationNative {
	return s.Native
}

// GetAbstraction returns the value of Abstraction.
func (s *UpdateProviderReqIntegration) GetAbstraction() OptUpdateProviderReqIntegrationAbstraction {
	return s.Abstraction
}

// SetNative sets the value of Native.
func (s *UpdateProviderReqIntegration) SetNative(val OptUpdateProviderReqIntegrationNative) {
	s.Native = val
}

// SetAbstraction sets the value of Abstraction.
func (s *UpdateProviderReqIntegration) SetAbstraction(val OptUpdateProviderReqIntegrationAbstraction) {
	s.Abstraction = val
}

// Custom provider information.
type UpdateProviderReqIntegrationAbstraction struct {
	// A name for the custom provider abstraction.
	Name string `json:"name"`
	// The url to use when making calls to the abstraction for provision events.
	BaseURL string     `json:"base_url"`
	Auth    OptIALAuth `json:"auth"`
}

// GetName returns the value of Name.
func (s *UpdateProviderReqIntegrationAbstraction) GetName() string {
	return s.Name
}

// GetBaseURL returns the value of BaseURL.
func (s *UpdateProviderReqIntegrationAbstraction) GetBaseURL() string {
	return s.BaseURL
}

// GetAuth returns the value of Auth.
func (s *UpdateProviderReqIntegrationAbstraction) GetAuth() OptIALAuth {
	return s.Auth
}

// SetName sets the value of Name.
func (s *UpdateProviderReqIntegrationAbstraction) SetName(val string) {
	s.Name = val
}

// SetBaseURL sets the value of BaseURL.
func (s *UpdateProviderReqIntegrationAbstraction) SetBaseURL(val string) {
	s.BaseURL = val
}

// SetAuth sets the value of Auth.
func (s *UpdateProviderReqIntegrationAbstraction) SetAuth(val OptIALAuth) {
	s.Auth = val
}

// Nativly supported IAL provider integration.
type UpdateProviderReqIntegrationNative struct {
	// An identifier for the provider.
	Identifier string  `json:"identifier"`
	Auth       IALAuth `json:"auth"`
}

// GetIdentifier returns the value of Identifier.
func (s *UpdateProviderReqIntegrationNative) GetIdentifier() string {
	return s.Identifier
}

// GetAuth returns the value of Auth.
func (s *UpdateProviderReqIntegrationNative) GetAuth() IALAuth {
	return s.Auth
}

// SetIdentifier sets the value of Identifier.
func (s *UpdateProviderReqIntegrationNative) SetIdentifier(val string) {
	s.Identifier = val
}

// SetAuth sets the value of Auth.
func (s *UpdateProviderReqIntegrationNative) SetAuth(val IALAuth) {
	s.Auth = val
}

type UpdateSDNNetworkOK struct {
	Data OptSDNNetwork `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateSDNNetworkOK) GetData() OptSDNNetwork {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateSDNNetworkOK) SetData(val OptSDNNetwork) {
	s.Data = val
}

type UpdateSDNNetworkReq struct {
	// The name of the network.
	Name OptString `json:"name"`
	// A network identifier used to construct http calls that specifically use this network over another.
	Identifier OptString `json:"identifier"`
}

// GetName returns the value of Name.
func (s *UpdateSDNNetworkReq) GetName() OptString {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *UpdateSDNNetworkReq) GetIdentifier() OptString {
	return s.Identifier
}

// SetName sets the value of Name.
func (s *UpdateSDNNetworkReq) SetName(val OptString) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *UpdateSDNNetworkReq) SetIdentifier(val OptString) {
	s.Identifier = val
}

type UpdateServerOK struct {
	Data OptInfraServer `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateServerOK) GetData() OptInfraServer {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateServerOK) SetData(val OptInfraServer) {
	s.Data = val
}

type UpdateServerReq struct {
	// Server constriants.
	Constraints UpdateServerReqConstraints `json:"constraints"`
}

// GetConstraints returns the value of Constraints.
func (s *UpdateServerReq) GetConstraints() UpdateServerReqConstraints {
	return s.Constraints
}

// SetConstraints sets the value of Constraints.
func (s *UpdateServerReq) SetConstraints(val UpdateServerReqConstraints) {
	s.Constraints = val
}

// Server constriants.
type UpdateServerReqConstraints struct {
	// A list of server tags.
	Tags []string `json:"tags"`
	// Server constraints for the given server.
	Allow OptUpdateServerReqConstraintsAllow `json:"allow"`
}

// GetTags returns the value of Tags.
func (s *UpdateServerReqConstraints) GetTags() []string {
	return s.Tags
}

// GetAllow returns the value of Allow.
func (s *UpdateServerReqConstraints) GetAllow() OptUpdateServerReqConstraintsAllow {
	return s.Allow
}

// SetTags sets the value of Tags.
func (s *UpdateServerReqConstraints) SetTags(val []string) {
	s.Tags = val
}

// SetAllow sets the value of Allow.
func (s *UpdateServerReqConstraints) SetAllow(val OptUpdateServerReqConstraintsAllow) {
	s.Allow = val
}

// Server constraints for the given server.
type UpdateServerReqConstraintsAllow struct {
	// A boolean where true represents the server can accept containers with no tags set.
	Pool bool `json:"pool"`
	// A boolean where true represents the server being a target for service containers.
	Services bool `json:"services"`
	// A boolean where true represents the desire for the server to allow the overcommitting of shares.
	Overcommit bool `json:"overcommit"`
}

// GetPool returns the value of Pool.
func (s *UpdateServerReqConstraintsAllow) GetPool() bool {
	return s.Pool
}

// GetServices returns the value of Services.
func (s *UpdateServerReqConstraintsAllow) GetServices() bool {
	return s.Services
}

// GetOvercommit returns the value of Overcommit.
func (s *UpdateServerReqConstraintsAllow) GetOvercommit() bool {
	return s.Overcommit
}

// SetPool sets the value of Pool.
func (s *UpdateServerReqConstraintsAllow) SetPool(val bool) {
	s.Pool = val
}

// SetServices sets the value of Services.
func (s *UpdateServerReqConstraintsAllow) SetServices(val bool) {
	s.Services = val
}

// SetOvercommit sets the value of Overcommit.
func (s *UpdateServerReqConstraintsAllow) SetOvercommit(val bool) {
	s.Overcommit = val
}

// Server usage data.
// Ref: #/components/schemas/UsageDatum
type UsageDatum struct {
	// A timestamp for when the usage data was collected.
	Time DateTime `json:"time"`
	// The number of nodes the data is pulled from.
	Nodes int `json:"nodes"`
	// A number in GB representing memory.
	MemoryGB int `json:"memory_gb"`
}

// GetTime returns the value of Time.
func (s *UsageDatum) GetTime() DateTime {
	return s.Time
}

// GetNodes returns the value of Nodes.
func (s *UsageDatum) GetNodes() int {
	return s.Nodes
}

// GetMemoryGB returns the value of MemoryGB.
func (s *UsageDatum) GetMemoryGB() int {
	return s.MemoryGB
}

// SetTime sets the value of Time.
func (s *UsageDatum) SetTime(val DateTime) {
	s.Time = val
}

// SetNodes sets the value of Nodes.
func (s *UsageDatum) SetNodes(val int) {
	s.Nodes = val
}

// SetMemoryGB sets the value of MemoryGB.
func (s *UsageDatum) SetMemoryGB(val int) {
	s.MemoryGB = val
}

// A type of creator and a matching identifier.
// Ref: #/components/schemas/UserScope
type UserScope struct {
	// The type of user that created the resource.
	Type UserScopeType `json:"type"`
	ID   ID            `json:"id"`
}

// GetType returns the value of Type.
func (s *UserScope) GetType() UserScopeType {
	return s.Type
}

// GetID returns the value of ID.
func (s *UserScope) GetID() ID {
	return s.ID
}

// SetType sets the value of Type.
func (s *UserScope) SetType(val UserScopeType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *UserScope) SetID(val ID) {
	s.ID = val
}

// The type of user that created the resource.
type UserScopeType string

const (
	UserScopeTypeAccount          UserScopeType = "account"
	UserScopeTypeEnvironment      UserScopeType = "environment"
	UserScopeTypePlatform         UserScopeType = "platform"
	UserScopeTypePlatformPipeline UserScopeType = "platform-pipeline"
	UserScopeTypeEmployee         UserScopeType = "employee"
	UserScopeTypeAPIKey           UserScopeType = "api-key"
	UserScopeTypeVisitor          UserScopeType = "visitor"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserScopeType) MarshalText() ([]byte, error) {
	switch s {
	case UserScopeTypeAccount:
		return []byte(s), nil
	case UserScopeTypeEnvironment:
		return []byte(s), nil
	case UserScopeTypePlatform:
		return []byte(s), nil
	case UserScopeTypePlatformPipeline:
		return []byte(s), nil
	case UserScopeTypeEmployee:
		return []byte(s), nil
	case UserScopeTypeAPIKey:
		return []byte(s), nil
	case UserScopeTypeVisitor:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserScopeType) UnmarshalText(data []byte) error {
	switch UserScopeType(data) {
	case UserScopeTypeAccount:
		*s = UserScopeTypeAccount
		return nil
	case UserScopeTypeEnvironment:
		*s = UserScopeTypeEnvironment
		return nil
	case UserScopeTypePlatform:
		*s = UserScopeTypePlatform
		return nil
	case UserScopeTypePlatformPipeline:
		*s = UserScopeTypePlatformPipeline
		return nil
	case UserScopeTypeEmployee:
		*s = UserScopeTypeEmployee
		return nil
	case UserScopeTypeAPIKey:
		*s = UserScopeTypeAPIKey
		return nil
	case UserScopeTypeVisitor:
		*s = UserScopeTypeVisitor
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A summary of a VPN service for a given environment.
// Ref: #/components/schemas/VPNInfoReturn
type VPNInfoReturn struct {
	// A url associated with the VPN service.
	URL     string                   `json:"url"`
	Service NilVpnEnvironmentService `json:"service"`
}

// GetURL returns the value of URL.
func (s *VPNInfoReturn) GetURL() string {
	return s.URL
}

// GetService returns the value of Service.
func (s *VPNInfoReturn) GetService() NilVpnEnvironmentService {
	return s.Service
}

// SetURL sets the value of URL.
func (s *VPNInfoReturn) SetURL(val string) {
	s.URL = val
}

// SetService sets the value of Service.
func (s *VPNInfoReturn) SetService(val NilVpnEnvironmentService) {
	s.Service = val
}

// A VPN user for a given VPN.
// Ref: #/components/schemas/VPNUsers
type VPNUsers struct {
	ID ID `json:"id"`
	// The username for the login.
	Username string       `json:"username"`
	Creator  CreatorScope `json:"creator"`
	// A timestamp of the last time the user logged into the VPN.
	LastLogin DateTime `json:"last_login"`
	HubID     HubID    `json:"hub_id"`
	// An identifier for the environment the VPN service is associated with.
	EnvironmentID string `json:"environment_id"`
	// A collection of timestamps for each event in the VPN user's lifetime.
	Events VPNUsersEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *VPNUsers) GetID() ID {
	return s.ID
}

// GetUsername returns the value of Username.
func (s *VPNUsers) GetUsername() string {
	return s.Username
}

// GetCreator returns the value of Creator.
func (s *VPNUsers) GetCreator() CreatorScope {
	return s.Creator
}

// GetLastLogin returns the value of LastLogin.
func (s *VPNUsers) GetLastLogin() DateTime {
	return s.LastLogin
}

// GetHubID returns the value of HubID.
func (s *VPNUsers) GetHubID() HubID {
	return s.HubID
}

// GetEnvironmentID returns the value of EnvironmentID.
func (s *VPNUsers) GetEnvironmentID() string {
	return s.EnvironmentID
}

// GetEvents returns the value of Events.
func (s *VPNUsers) GetEvents() VPNUsersEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *VPNUsers) SetID(val ID) {
	s.ID = val
}

// SetUsername sets the value of Username.
func (s *VPNUsers) SetUsername(val string) {
	s.Username = val
}

// SetCreator sets the value of Creator.
func (s *VPNUsers) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetLastLogin sets the value of LastLogin.
func (s *VPNUsers) SetLastLogin(val DateTime) {
	s.LastLogin = val
}

// SetHubID sets the value of HubID.
func (s *VPNUsers) SetHubID(val HubID) {
	s.HubID = val
}

// SetEnvironmentID sets the value of EnvironmentID.
func (s *VPNUsers) SetEnvironmentID(val string) {
	s.EnvironmentID = val
}

// SetEvents sets the value of Events.
func (s *VPNUsers) SetEvents(val VPNUsersEvents) {
	s.Events = val
}

// A collection of timestamps for each event in the VPN user's lifetime.
type VPNUsersEvents struct {
	// The timestamp of when the VPN user was created.
	Created DateTime `json:"created"`
	// The timestamp of when the VPN user was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the VPN user was deleted.
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *VPNUsersEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *VPNUsersEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *VPNUsersEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *VPNUsersEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *VPNUsersEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *VPNUsersEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// A summary of relevant volume information.
// Ref: #/components/schemas/VolumeSummary
type VolumeSummary struct {
	ID ID `json:"id"`
	// A unique hash for the given volume.
	Hash   string  `json:"hash"`
	Config Volumes `json:"config"`
}

// GetID returns the value of ID.
func (s *VolumeSummary) GetID() ID {
	return s.ID
}

// GetHash returns the value of Hash.
func (s *VolumeSummary) GetHash() string {
	return s.Hash
}

// GetConfig returns the value of Config.
func (s *VolumeSummary) GetConfig() Volumes {
	return s.Config
}

// SetID sets the value of ID.
func (s *VolumeSummary) SetID(val ID) {
	s.ID = val
}

// SetHash sets the value of Hash.
func (s *VolumeSummary) SetHash(val string) {
	s.Hash = val
}

// SetConfig sets the value of Config.
func (s *VolumeSummary) SetConfig(val Volumes) {
	s.Config = val
}

// Configuration settings for container volumes.
// Ref: #/components/schemas/Volumes
type Volumes struct {
	// A boolean where true marks the volume as read only.
	ReadOnly bool `json:"read_only"`
	// Configuration for settings local to the container filesystem.
	Local OptVolumesLocal `json:"local"`
	// The mountpoint path for the container.
	Destination string `json:"destination"`
	// Configuration settings for remotely accessing the container volume.
	RemoteAccess OptVolumesRemoteAccess `json:"remote_access"`
}

// GetReadOnly returns the value of ReadOnly.
func (s *Volumes) GetReadOnly() bool {
	return s.ReadOnly
}

// GetLocal returns the value of Local.
func (s *Volumes) GetLocal() OptVolumesLocal {
	return s.Local
}

// GetDestination returns the value of Destination.
func (s *Volumes) GetDestination() string {
	return s.Destination
}

// GetRemoteAccess returns the value of RemoteAccess.
func (s *Volumes) GetRemoteAccess() OptVolumesRemoteAccess {
	return s.RemoteAccess
}

// SetReadOnly sets the value of ReadOnly.
func (s *Volumes) SetReadOnly(val bool) {
	s.ReadOnly = val
}

// SetLocal sets the value of Local.
func (s *Volumes) SetLocal(val OptVolumesLocal) {
	s.Local = val
}

// SetDestination sets the value of Destination.
func (s *Volumes) SetDestination(val string) {
	s.Destination = val
}

// SetRemoteAccess sets the value of RemoteAccess.
func (s *Volumes) SetRemoteAccess(val OptVolumesRemoteAccess) {
	s.RemoteAccess = val
}

// Configuration for settings local to the container filesystem.
type VolumesLocal struct {
	// The maximum size the volume can grow to. A number followed by a size. `10G` would be 10 gigabytes.
	MaxSize string `json:"max_size"`
	// A boolean where true signifies using the largest drive over 2TB for the target server.
	StoragePool OptBool `json:"storage_pool"`
}

// GetMaxSize returns the value of MaxSize.
func (s *VolumesLocal) GetMaxSize() string {
	return s.MaxSize
}

// GetStoragePool returns the value of StoragePool.
func (s *VolumesLocal) GetStoragePool() OptBool {
	return s.StoragePool
}

// SetMaxSize sets the value of MaxSize.
func (s *VolumesLocal) SetMaxSize(val string) {
	s.MaxSize = val
}

// SetStoragePool sets the value of StoragePool.
func (s *VolumesLocal) SetStoragePool(val OptBool) {
	s.StoragePool = val
}

// Configuration settings for remotely accessing the container volume.
type VolumesRemoteAccess struct {
	// A boolean where true represents this container volume being open to remote access connections over
	// SFTP.
	Enable bool     `json:"enable"`
	Ips    []string `json:"ips"`
	// Call out to a webhook to authenticate usernames/passwords if an organization manages their own
	// accounts.
	WebHook OptString `json:"web_hook"`
	// Password configuration settings for the remote access of the container volume.
	Password NilVolumesRemoteAccessPassword `json:"password"`
}

// GetEnable returns the value of Enable.
func (s *VolumesRemoteAccess) GetEnable() bool {
	return s.Enable
}

// GetIps returns the value of Ips.
func (s *VolumesRemoteAccess) GetIps() []string {
	return s.Ips
}

// GetWebHook returns the value of WebHook.
func (s *VolumesRemoteAccess) GetWebHook() OptString {
	return s.WebHook
}

// GetPassword returns the value of Password.
func (s *VolumesRemoteAccess) GetPassword() NilVolumesRemoteAccessPassword {
	return s.Password
}

// SetEnable sets the value of Enable.
func (s *VolumesRemoteAccess) SetEnable(val bool) {
	s.Enable = val
}

// SetIps sets the value of Ips.
func (s *VolumesRemoteAccess) SetIps(val []string) {
	s.Ips = val
}

// SetWebHook sets the value of WebHook.
func (s *VolumesRemoteAccess) SetWebHook(val OptString) {
	s.WebHook = val
}

// SetPassword sets the value of Password.
func (s *VolumesRemoteAccess) SetPassword(val NilVolumesRemoteAccessPassword) {
	s.Password = val
}

// Password configuration settings for the remote access of the container volume.
type VolumesRemoteAccessPassword struct {
	// The hashing algorithm used to has the password.
	Algorithm VolumesRemoteAccessPasswordAlgorithm `json:"algorithm"`
	// The raw or hashed password.
	Data string `json:"data"`
}

// GetAlgorithm returns the value of Algorithm.
func (s *VolumesRemoteAccessPassword) GetAlgorithm() VolumesRemoteAccessPasswordAlgorithm {
	return s.Algorithm
}

// GetData returns the value of Data.
func (s *VolumesRemoteAccessPassword) GetData() string {
	return s.Data
}

// SetAlgorithm sets the value of Algorithm.
func (s *VolumesRemoteAccessPassword) SetAlgorithm(val VolumesRemoteAccessPasswordAlgorithm) {
	s.Algorithm = val
}

// SetData sets the value of Data.
func (s *VolumesRemoteAccessPassword) SetData(val string) {
	s.Data = val
}

// The hashing algorithm used to has the password.
type VolumesRemoteAccessPasswordAlgorithm string

const (
	VolumesRemoteAccessPasswordAlgorithmRaw    VolumesRemoteAccessPasswordAlgorithm = "raw"
	VolumesRemoteAccessPasswordAlgorithmSha512 VolumesRemoteAccessPasswordAlgorithm = "sha512"
	VolumesRemoteAccessPasswordAlgorithmMD5    VolumesRemoteAccessPasswordAlgorithm = "md5"
)

// MarshalText implements encoding.TextMarshaler.
func (s VolumesRemoteAccessPasswordAlgorithm) MarshalText() ([]byte, error) {
	switch s {
	case VolumesRemoteAccessPasswordAlgorithmRaw:
		return []byte(s), nil
	case VolumesRemoteAccessPasswordAlgorithmSha512:
		return []byte(s), nil
	case VolumesRemoteAccessPasswordAlgorithmMD5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VolumesRemoteAccessPasswordAlgorithm) UnmarshalText(data []byte) error {
	switch VolumesRemoteAccessPasswordAlgorithm(data) {
	case VolumesRemoteAccessPasswordAlgorithmRaw:
		*s = VolumesRemoteAccessPasswordAlgorithmRaw
		return nil
	case VolumesRemoteAccessPasswordAlgorithmSha512:
		*s = VolumesRemoteAccessPasswordAlgorithmSha512
		return nil
	case VolumesRemoteAccessPasswordAlgorithmMD5:
		*s = VolumesRemoteAccessPasswordAlgorithmMD5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Information about the environments vpn service(s).
// Ref: #/components/schemas/VpnEnvironmentService
type VpnEnvironmentService struct {
	// Whether or not the VPN service is enabled.
	Enable bool `json:"enable"`
	// The ID of the VPN service container.
	ContainerID string `json:"container_id"`
	// A boolean representing if this service container is set to high availability mode or not.
	HighAvailability bool `json:"high_availability"`
	// The config object for the VPN service.
	Config NilVpnEnvironmentServiceConfig `json:"config"`
}

// GetEnable returns the value of Enable.
func (s *VpnEnvironmentService) GetEnable() bool {
	return s.Enable
}

// GetContainerID returns the value of ContainerID.
func (s *VpnEnvironmentService) GetContainerID() string {
	return s.ContainerID
}

// GetHighAvailability returns the value of HighAvailability.
func (s *VpnEnvironmentService) GetHighAvailability() bool {
	return s.HighAvailability
}

// GetConfig returns the value of Config.
func (s *VpnEnvironmentService) GetConfig() NilVpnEnvironmentServiceConfig {
	return s.Config
}

// SetEnable sets the value of Enable.
func (s *VpnEnvironmentService) SetEnable(val bool) {
	s.Enable = val
}

// SetContainerID sets the value of ContainerID.
func (s *VpnEnvironmentService) SetContainerID(val string) {
	s.ContainerID = val
}

// SetHighAvailability sets the value of HighAvailability.
func (s *VpnEnvironmentService) SetHighAvailability(val bool) {
	s.HighAvailability = val
}

// SetConfig sets the value of Config.
func (s *VpnEnvironmentService) SetConfig(val NilVpnEnvironmentServiceConfig) {
	s.Config = val
}

// The config object for the VPN service.
type VpnEnvironmentServiceConfig struct {
	// If true, routes all traffic through the VPN, even non-Cycle traffic.
	AllowInternet bool `json:"allow_internet"`
	// Auth configuration for the VPN.
	Auth VpnEnvironmentServiceConfigAuth `json:"auth"`
}

// GetAllowInternet returns the value of AllowInternet.
func (s *VpnEnvironmentServiceConfig) GetAllowInternet() bool {
	return s.AllowInternet
}

// GetAuth returns the value of Auth.
func (s *VpnEnvironmentServiceConfig) GetAuth() VpnEnvironmentServiceConfigAuth {
	return s.Auth
}

// SetAllowInternet sets the value of AllowInternet.
func (s *VpnEnvironmentServiceConfig) SetAllowInternet(val bool) {
	s.AllowInternet = val
}

// SetAuth sets the value of Auth.
func (s *VpnEnvironmentServiceConfig) SetAuth(val VpnEnvironmentServiceConfigAuth) {
	s.Auth = val
}

// Auth configuration for the VPN.
type VpnEnvironmentServiceConfigAuth struct {
	// A webhook endpoint to hit. Will be passed the login credentials provided to the user, and should
	// return a 200 status if the login is permitted.
	Webhook NilString `json:"webhook"`
	// If true, allows any Cycle account with access to the environment to log in to the VPN using their
	// Cycle email and password.
	CycleAccounts bool `json:"cycle_accounts"`
	// If true, allows the custom VPN accounts to log in to the VPN.
	VpnAccounts OptBool `json:"vpn_accounts"`
}

// GetWebhook returns the value of Webhook.
func (s *VpnEnvironmentServiceConfigAuth) GetWebhook() NilString {
	return s.Webhook
}

// GetCycleAccounts returns the value of CycleAccounts.
func (s *VpnEnvironmentServiceConfigAuth) GetCycleAccounts() bool {
	return s.CycleAccounts
}

// GetVpnAccounts returns the value of VpnAccounts.
func (s *VpnEnvironmentServiceConfigAuth) GetVpnAccounts() OptBool {
	return s.VpnAccounts
}

// SetWebhook sets the value of Webhook.
func (s *VpnEnvironmentServiceConfigAuth) SetWebhook(val NilString) {
	s.Webhook = val
}

// SetCycleAccounts sets the value of CycleAccounts.
func (s *VpnEnvironmentServiceConfigAuth) SetCycleAccounts(val bool) {
	s.CycleAccounts = val
}

// SetVpnAccounts sets the value of VpnAccounts.
func (s *VpnEnvironmentServiceConfigAuth) SetVpnAccounts(val OptBool) {
	s.VpnAccounts = val
}

// DNS (Domain Name System), in short, is a decentralized naming system for computers, services, or
// other resources connected to the internet or a private network. It is what allows the translation
// of a URL, such as http://example.com, to an IP address.
// Ref: #/components/schemas/Zone
type Zone struct {
	ID      ID           `json:"id"`
	HubID   HubID        `json:"hub_id"`
	Creator CreatorScope `json:"creator"`
	// The origin for the given DNS zone.
	Origin string `json:"origin"`
	// A boolean where true represents this zone is a hosted zone.
	Hosted bool      `json:"hosted"`
	State  ZoneState `json:"state"`
	// A collection of timestamps for each event in the DNS zone's lifetime.
	Events ZoneEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *Zone) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *Zone) GetHubID() HubID {
	return s.HubID
}

// GetCreator returns the value of Creator.
func (s *Zone) GetCreator() CreatorScope {
	return s.Creator
}

// GetOrigin returns the value of Origin.
func (s *Zone) GetOrigin() string {
	return s.Origin
}

// GetHosted returns the value of Hosted.
func (s *Zone) GetHosted() bool {
	return s.Hosted
}

// GetState returns the value of State.
func (s *Zone) GetState() ZoneState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *Zone) GetEvents() ZoneEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *Zone) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *Zone) SetHubID(val HubID) {
	s.HubID = val
}

// SetCreator sets the value of Creator.
func (s *Zone) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetOrigin sets the value of Origin.
func (s *Zone) SetOrigin(val string) {
	s.Origin = val
}

// SetHosted sets the value of Hosted.
func (s *Zone) SetHosted(val bool) {
	s.Hosted = val
}

// SetState sets the value of State.
func (s *Zone) SetState(val ZoneState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *Zone) SetEvents(val ZoneEvents) {
	s.Events = val
}

// A collection of timestamps for each event in the DNS zone's lifetime.
type ZoneEvents struct {
	// The timestamp of when the DNS zone was created.
	Created DateTime `json:"created"`
	// The timestamp of when the DNS zone was updated.
	Updated DateTime `json:"updated"`
	// The timestamp of when the DNS zone was deleted.
	Deleted DateTime `json:"deleted"`
	// The timestamp of when the DNS zone was last_verification.
	LastVerification DateTime `json:"last_verification"`
	// The timestamp of when the DNS zone was verified.
	Verified DateTime `json:"verified"`
}

// GetCreated returns the value of Created.
func (s *ZoneEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ZoneEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *ZoneEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetLastVerification returns the value of LastVerification.
func (s *ZoneEvents) GetLastVerification() DateTime {
	return s.LastVerification
}

// GetVerified returns the value of Verified.
func (s *ZoneEvents) GetVerified() DateTime {
	return s.Verified
}

// SetCreated sets the value of Created.
func (s *ZoneEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ZoneEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *ZoneEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetLastVerification sets the value of LastVerification.
func (s *ZoneEvents) SetLastVerification(val DateTime) {
	s.LastVerification = val
}

// SetVerified sets the value of Verified.
func (s *ZoneEvents) SetVerified(val DateTime) {
	s.Verified = val
}

// All includable resources linkable to the given Zone.
// Ref: #/components/schemas/ZoneIncludes
type ZoneIncludes struct {
	Creators OptCreatorInclude `json:"creators"`
}

// GetCreators returns the value of Creators.
func (s *ZoneIncludes) GetCreators() OptCreatorInclude {
	return s.Creators
}

// SetCreators sets the value of Creators.
func (s *ZoneIncludes) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

// Merged schema.
// Ref: #/components/schemas/ZoneState
type ZoneState struct {
	// The current state of the zone.
	Current ZoneStateCurrent `json:"current"`
	Changed DateTime         `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptZoneStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *ZoneState) GetCurrent() ZoneStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *ZoneState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *ZoneState) GetError() OptZoneStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *ZoneState) SetCurrent(val ZoneStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *ZoneState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *ZoneState) SetError(val OptZoneStateError) {
	s.Error = val
}

// The current state of the zone.
type ZoneStateCurrent string

const (
	ZoneStateCurrentNew       ZoneStateCurrent = "new"
	ZoneStateCurrentPending   ZoneStateCurrent = "pending"
	ZoneStateCurrentVerifying ZoneStateCurrent = "verifying"
	ZoneStateCurrentLive      ZoneStateCurrent = "live"
	ZoneStateCurrentDisabled  ZoneStateCurrent = "disabled"
	ZoneStateCurrentDeleting  ZoneStateCurrent = "deleting"
	ZoneStateCurrentDeleted   ZoneStateCurrent = "deleted"
)

// MarshalText implements encoding.TextMarshaler.
func (s ZoneStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case ZoneStateCurrentNew:
		return []byte(s), nil
	case ZoneStateCurrentPending:
		return []byte(s), nil
	case ZoneStateCurrentVerifying:
		return []byte(s), nil
	case ZoneStateCurrentLive:
		return []byte(s), nil
	case ZoneStateCurrentDisabled:
		return []byte(s), nil
	case ZoneStateCurrentDeleting:
		return []byte(s), nil
	case ZoneStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ZoneStateCurrent) UnmarshalText(data []byte) error {
	switch ZoneStateCurrent(data) {
	case ZoneStateCurrentNew:
		*s = ZoneStateCurrentNew
		return nil
	case ZoneStateCurrentPending:
		*s = ZoneStateCurrentPending
		return nil
	case ZoneStateCurrentVerifying:
		*s = ZoneStateCurrentVerifying
		return nil
	case ZoneStateCurrentLive:
		*s = ZoneStateCurrentLive
		return nil
	case ZoneStateCurrentDisabled:
		*s = ZoneStateCurrentDisabled
		return nil
	case ZoneStateCurrentDeleting:
		*s = ZoneStateCurrentDeleting
		return nil
	case ZoneStateCurrentDeleted:
		*s = ZoneStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type ZoneStateError struct {
	// Details about the error that has occurred.
	Message OptString `json:"message"`
	// The timestamp of when the error was encountered.
	Time OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *ZoneStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *ZoneStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *ZoneStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *ZoneStateError) SetTime(val OptDateTime) {
	s.Time = val
}
